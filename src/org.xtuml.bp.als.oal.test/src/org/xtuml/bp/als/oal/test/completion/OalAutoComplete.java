//=====================================================================
//
// NOTE: This file was generated, but is maintained by hand.
// Generated by: UnitTestGenerator.pl
// Version:      1.15
// Matrix:       oal_autocomplete_matrix.txt
//
//=====================================================================

package org.xtuml.bp.als.oal.test.completion;

import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Event;
import org.eclipse.ui.IEditorPart;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import org.xtuml.bp.core.*;
import org.xtuml.bp.core.common.NonRootModelElement;
import org.xtuml.bp.test.common.*;
import org.xtuml.bp.ui.canvas.*;
import org.xtuml.bp.ui.graphics.editor.*;
import org.xtuml.bp.ui.text.activity.ActivityEditor;
import org.xtuml.bp.ui.canvas.test.*;

public class OalAutoComplete extends CanvasTest {
    public static boolean generateResults = false;
    public static boolean useDrawResults = true;
    String[] results = null;

    String test_id = "";

    protected String getResultName() {
        return getClass().getSimpleName() + "_" + test_id;
    }

    protected IEditorPart fActiveEditor;

    protected IEditorPart getActiveEditor() {
        return fActiveEditor;
    }

    public OalAutoComplete(String subTypeClassName, String subTypeArg0) {
        super(subTypeClassName, subTypeArg0);
    }

    protected String getTestId(String src, String dest, String count) {
        return "test_" + count;
    }

    @Before
    public void setUp() throws Exception {
        super.setUp();
        // load the test model, later we may need
        // to allow any model given in which case
        // failures will need to be generous
        loadProject("oal_autocomplete");
    }

    @After
    public void tearDown() throws Exception {
        super.tearDown();
    }

    /**
     * "LPAH" is one of the degrees of freedom as specified in this issues
     * test matrix.
     * This routine gets the "LPAH" instance from the given name.
     * 
     * @param element The degree of freedom instance to retrieve
     * @return A model element used in the test as specified by the test matrix
     */
    NonRootModelElement selectLPAH(String element) {
        return selectLPAH(element, null);
    }

    /**
     * "LPAH" is one of the degrees of freedom as specified in this issues
     * test matrix.
     * This routine gets the "LPAH" instance from the given name.
     * 
     * @param element The degree of freedom instance to retrieve
     * @param extraData Extra data needed for selection
     * @return A model element used in the test as specified by the test matrix
     */
    NonRootModelElement selectLPAH(String element, Object extraData) {
        NonRootModelElement nrme = findElementForDof(element);
        if(nrme != null) {
        	// open the editor
        	fActiveEditor = UITestingUtilities.getTextEditorFor(nrme, false);
        	// locate the the entry point for starting text
        	if(element.contains("L1P1")) {
        		// this is a starting statement location
        		results = populateAutoComplete("con");
        	}
        } else {
        	assertTrue("An instance with degree of freedom type \"LPAH\" was not found.  Instance Name: " + element + ".", nrme!=null);
        }
        return nrme;
    }

	private String[] populateAutoComplete(String start) {
		ActivityEditor editor = getActivityEditor();
		editor.getTextViewer().getTextWidget().notifyListeners(SWT.SPACE | SWT.MODIFIER_MASK & SWT.CTRL, new Event());
		// TODO: need to find tree or list here
		return new String[0];
	}

	private ActivityEditor getActivityEditor() {
		return (ActivityEditor) getActiveEditor();
	}

	NonRootModelElement findElementForDof(String element) {
		Body_c body = null;
		if (element.contains("AH1")) {
			body = Body_c.getOneACT_ACTOnR698(StateActionBody_c.StateActionBodyInstance(modelRoot));
		} else if (element.contains("AH2")) {
			body = Body_c.getOneACT_ACTOnR698(DerivedAttributeBody_c.DerivedAttributeBodyInstance(modelRoot));
		} else if (element.contains("AH3")) {
			body = Body_c.getOneACT_ACTOnR698(OperationBody_c.OperationBodyInstance(modelRoot));
		} else if (element.contains("AH4")) {
			body = Body_c.getOneACT_ACTOnR698(FunctionBody_c.FunctionBodyInstance(modelRoot));
		} else if (element.contains("AH5")) {
			body = Body_c.getOneACT_ACTOnR698(BridgeBody_c.BridgeBodyInstance(modelRoot));
		} else if (element.contains("AH6")) {
			body = Body_c.getOneACT_ACTOnR698(ProvidedOperationBody_c.ProvidedOperationBodyInstance(modelRoot));
		} else if (element.contains("AH7")) {
			body = Body_c.getOneACT_ACTOnR698(ProvidedSignalBody_c.ProvidedSignalBodyInstance(modelRoot));
		} else if (element.contains("AH8")) {
			body = Body_c.getOneACT_ACTOnR698(RequiredOperationBody_c.RequiredOperationBodyInstance(modelRoot));
		} else if (element.contains("AH9")) {
			body = Body_c.getOneACT_ACTOnR698(RequiredSignalBody_c.RequiredSignalBodyInstance(modelRoot));
		} else if (element.contains("AH10")) {
			body = Body_c.getOneACT_ACTOnR698(BridgeBody_c.BridgeBodyInstance(modelRoot));
		} else if (element.contains("AH11")) {
			body = Body_c.getOneACT_ACTOnR698(TransitionActionBody_c.TransitionActionBodyInstance(modelRoot));
		}
		return body;
	}
    /**
     * "SV" is one of the degrees of freedom as specified in this issues
     * test matrix.
     * This routine gets the "SV" instance from the given name.
     * 
     * @param element The degree of freedom instance to retrieve
     * @return A model element used in the test as specified by the test matrix
     */
    NonRootModelElement selectSV(String element) {
        return selectSV(element, null);
    }

    /**
     * "SV" is one of the degrees of freedom as specified in this issues
     * test matrix.
     * This routine gets the "SV" instance from the given name.
     * 
     * @param element The degree of freedom instance to retrieve
     * @param extraData Extra data needed for selection
     * @return A model element used in the test as specified by the test matrix
     */
    NonRootModelElement selectSV(String element, Object extraData) {
        NonRootModelElement nrme = null;
        if (element.equalsIgnoreCase("S1V1")) {
            //TODO: Implement
        } else if (element.equalsIgnoreCase("S1V2")) {
            //TODO: Implement
        } else if (element.equalsIgnoreCase("S2V1")) {
            //TODO: Implement
        } else if (element.equalsIgnoreCase("S2V2")) {
            //TODO: Implement
        } else if (element.equalsIgnoreCase("S3V1")) {
            //TODO: Implement
        } else if (element.equalsIgnoreCase("S3V2")) {
            //TODO: Implement
        } 
        assertTrue("An instance with degree of freedom type \"SV\" was not found.  Instance Name: " + element + ".", nrme!=null);
        return nrme;
    }

    /**
     * This routine performs the action associated with a matrix cell.
     * The parameters represent model instances aquired based on the specifed
     * column instance and row instance.
     * 
     * @param columnInstance Model instance from the column
     * @param rowInstance Model instance from the row
     */
    void SV_LPAH_Action(NonRootModelElement columnInstance, NonRootModelElement rowInstance) {
        //TODO: Implement
    }

    /**
    * This function verifies an expected result.
    *
    * @param source A model element instance aquired through a action taken
    *               on a column of the matrix.
    * @param destination A model element instance aquired through a action taken
    *                    taken on a row of the matrix.
    * @return true if the test succeeds, false if it fails
    */
    boolean checkResult_non(NonRootModelElement source, NonRootModelElement destination) {
        boolean non = false;
        //TODO: Implement
        return non;
    }


    /**
    * This function verifies an expected result.
    *
    * @param source A model element instance aquired through a action taken
    *               on a column of the matrix.
    * @param destination A model element instance aquired through a action taken
    *                    taken on a row of the matrix.
    * @return true if the test succeeds, false if it fails
    */
    boolean checkResult_exists(NonRootModelElement source, NonRootModelElement destination) {
        boolean exists = false;
        //TODO: Implement
        return exists;
    }


}
