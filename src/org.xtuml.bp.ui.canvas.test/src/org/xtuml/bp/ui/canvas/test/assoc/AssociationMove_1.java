//=====================================================================
//
//File:      $RCSfile: UnitTestGenerator.pl,v $
//Version:   $Revision: 1.14 $
//Modified:  $Date: 2013/01/10 23:21:36 $
//
// WARNING:      Do not edit this generated file
// Generated by: UnitTestGenerator.pl
// Version:      1.14
// Matrix:       association_move.txt
//
//(c) Copyright 2007-2014 by Mentor Graphics Corp. All rights reserved.
//
//=====================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//=====================================================================

package org.xtuml.bp.ui.canvas.test.assoc;

import org.eclipse.ui.IEditorPart;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import org.xtuml.bp.core.*;
import org.xtuml.bp.core.common.NonRootModelElement;
import org.xtuml.bp.test.common.*;
import org.xtuml.bp.ui.canvas.*;
import org.xtuml.bp.ui.graphics.editor.*;
import org.xtuml.bp.ui.canvas.test.*;

public class AssociationMove_1 extends AssociationMove {

    protected String getResultName() {
        return super.getResultName();
    }

    public AssociationMove_1() {
        super("AssociationMove_1", null);
    }

    @Before
	public void setUp() throws Exception {
        super.setUp();
    }

    @After
	public void tearDown() throws Exception {
        super.tearDown();
    }


    /**
     * Perform the test for the given matrix column (A4B2C2) and row (D1E2F1C2).
     * 
     */
    @Test
	public void testA4B2C2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2", "D1E2F1C2", "1");

        NonRootModelElement src = selectABC("A4B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2) and row (D1E2F2C1).
     * 
     */
    @Test
	public void testA4B2C2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2", "D1E2F2C1", "2");

        NonRootModelElement src = selectABC("A4B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2) and row (D1E2F2C2).
     * 
     */
    @Test
	public void testA4B2C2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2", "D1E2F2C2", "3");

        NonRootModelElement src = selectABC("A4B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2) and row (D2E2F1C1).
     * 
     */
    @Test
	public void testA4B2C2_D2E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2", "D2E2F1C1", "4");

        NonRootModelElement src = selectABC("A4B2C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2) and row (D2E2F1C2).
     * 
     */
    @Test
	public void testA4B2C2_D2E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2", "D2E2F1C2", "5");

        NonRootModelElement src = selectABC("A4B2C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2) and row (D2E2F2C1).
     * 
     */
    @Test
	public void testA4B2C2_D2E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2", "D2E2F2C1", "6");

        NonRootModelElement src = selectABC("A4B2C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2) and row (D2E2F2C2).
     * 
     */
    @Test
	public void testA4B2C2_D2E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2", "D2E2F2C2", "7");

        NonRootModelElement src = selectABC("A4B2C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D1E2F1C1).
     * 
     */
    @Test
	public void testA5B1C1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D1E2F1C1", "8");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D1E2F1C2).
     * 
     */
    @Test
	public void testA5B1C1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D1E2F1C2", "9");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D1E2F2C1).
     * 
     */
    @Test
	public void testA5B1C1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D1E2F2C1", "10");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D1E2F2C2).
     * 
     */
    @Test
	public void testA5B1C1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D1E2F2C2", "11");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D3E2F1C1).
     * 
     */
    @Test
	public void testA5B1C1_D3E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D3E2F1C1", "12");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D3E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D3E2F1C2).
     * 
     */
    @Test
	public void testA5B1C1_D3E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D3E2F1C2", "13");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D3E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D3E2F2C1).
     * 
     */
    @Test
	public void testA5B1C1_D3E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D3E2F2C1", "14");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D3E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D3E2F2C2).
     * 
     */
    @Test
	public void testA5B1C1_D3E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D3E2F2C2", "15");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D3E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D4E2F1C1).
     * 
     */
    @Test
	public void testA5B1C1_D4E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D4E2F1C1", "16");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D4E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D4E2F1C2).
     * 
     */
    @Test
	public void testA5B1C1_D4E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D4E2F1C2", "17");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D4E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D4E2F2C1).
     * 
     */
    @Test
	public void testA5B1C1_D4E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D4E2F2C1", "18");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D4E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D4E2F2C2).
     * 
     */
    @Test
	public void testA5B1C1_D4E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D4E2F2C2", "19");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D4E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D1E2F1C1).
     * 
     */
    @Test
	public void testA5B1C2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D1E2F1C1", "20");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D1E2F1C2).
     * 
     */
    @Test
	public void testA5B1C2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D1E2F1C2", "21");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D1E2F2C1).
     * 
     */
    @Test
	public void testA5B1C2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D1E2F2C1", "22");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D1E2F2C2).
     * 
     */
    @Test
	public void testA5B1C2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D1E2F2C2", "23");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D3E2F1C1).
     * 
     */
    @Test
	public void testA5B1C2_D3E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D3E2F1C1", "24");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D3E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D3E2F1C2).
     * 
     */
    @Test
	public void testA5B1C2_D3E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D3E2F1C2", "25");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D3E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D3E2F2C1).
     * 
     */
    @Test
	public void testA5B1C2_D3E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D3E2F2C1", "26");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D3E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D3E2F2C2).
     * 
     */
    @Test
	public void testA5B1C2_D3E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D3E2F2C2", "27");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D3E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D4E2F1C1).
     * 
     */
    @Test
	public void testA5B1C2_D4E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D4E2F1C1", "28");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D4E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D4E2F1C2).
     * 
     */
    @Test
	public void testA5B1C2_D4E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D4E2F1C2", "29");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D4E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D4E2F2C1).
     * 
     */
    @Test
	public void testA5B1C2_D4E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D4E2F2C1", "30");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D4E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D4E2F2C2).
     * 
     */
    @Test
	public void testA5B1C2_D4E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D4E2F2C2", "31");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D4E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1) and row (D1E2F1C1).
     * 
     */
    @Test
	public void testA5B2C1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1", "D1E2F1C1", "32");

        NonRootModelElement src = selectABC("A5B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1) and row (D1E2F1C2).
     * 
     */
    @Test
	public void testA5B2C1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1", "D1E2F1C2", "33");

        NonRootModelElement src = selectABC("A5B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1) and row (D1E2F2C1).
     * 
     */
    @Test
	public void testA5B2C1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1", "D1E2F2C1", "34");

        NonRootModelElement src = selectABC("A5B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1) and row (D1E2F2C2).
     * 
     */
    @Test
	public void testA5B2C1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1", "D1E2F2C2", "35");

        NonRootModelElement src = selectABC("A5B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1) and row (D3E2F1C1).
     * 
     */
    @Test
	public void testA5B2C1_D3E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1", "D3E2F1C1", "36");

        NonRootModelElement src = selectABC("A5B2C1", null);

        NonRootModelElement dest = selectDEFC("D3E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1) and row (D3E2F1C2).
     * 
     */
    @Test
	public void testA5B2C1_D3E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1", "D3E2F1C2", "37");

        NonRootModelElement src = selectABC("A5B2C1", null);

        NonRootModelElement dest = selectDEFC("D3E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1) and row (D3E2F2C1).
     * 
     */
    @Test
	public void testA5B2C1_D3E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1", "D3E2F2C1", "38");

        NonRootModelElement src = selectABC("A5B2C1", null);

        NonRootModelElement dest = selectDEFC("D3E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1) and row (D3E2F2C2).
     * 
     */
    @Test
	public void testA5B2C1_D3E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1", "D3E2F2C2", "39");

        NonRootModelElement src = selectABC("A5B2C1", null);

        NonRootModelElement dest = selectDEFC("D3E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1) and row (D4E2F1C1).
     * 
     */
    @Test
	public void testA5B2C1_D4E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1", "D4E2F1C1", "40");

        NonRootModelElement src = selectABC("A5B2C1", null);

        NonRootModelElement dest = selectDEFC("D4E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1) and row (D4E2F1C2).
     * 
     */
    @Test
	public void testA5B2C1_D4E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1", "D4E2F1C2", "41");

        NonRootModelElement src = selectABC("A5B2C1", null);

        NonRootModelElement dest = selectDEFC("D4E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1) and row (D4E2F2C1).
     * 
     */
    @Test
	public void testA5B2C1_D4E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1", "D4E2F2C1", "42");

        NonRootModelElement src = selectABC("A5B2C1", null);

        NonRootModelElement dest = selectDEFC("D4E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1) and row (D4E2F2C2).
     * 
     */
    @Test
	public void testA5B2C1_D4E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1", "D4E2F2C2", "43");

        NonRootModelElement src = selectABC("A5B2C1", null);

        NonRootModelElement dest = selectDEFC("D4E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2) and row (D1E2F1C1).
     * 
     */
    @Test
	public void testA5B2C2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2", "D1E2F1C1", "44");

        NonRootModelElement src = selectABC("A5B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2) and row (D1E2F1C2).
     * 
     */
    @Test
	public void testA5B2C2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2", "D1E2F1C2", "45");

        NonRootModelElement src = selectABC("A5B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2) and row (D1E2F2C1).
     * 
     */
    @Test
	public void testA5B2C2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2", "D1E2F2C1", "46");

        NonRootModelElement src = selectABC("A5B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2) and row (D1E2F2C2).
     * 
     */
    @Test
	public void testA5B2C2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2", "D1E2F2C2", "47");

        NonRootModelElement src = selectABC("A5B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2) and row (D3E2F1C1).
     * 
     */
    @Test
	public void testA5B2C2_D3E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2", "D3E2F1C1", "48");

        NonRootModelElement src = selectABC("A5B2C2", null);

        NonRootModelElement dest = selectDEFC("D3E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2) and row (D3E2F1C2).
     * 
     */
    @Test
	public void testA5B2C2_D3E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2", "D3E2F1C2", "49");

        NonRootModelElement src = selectABC("A5B2C2", null);

        NonRootModelElement dest = selectDEFC("D3E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2) and row (D3E2F2C1).
     * 
     */
    @Test
	public void testA5B2C2_D3E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2", "D3E2F2C1", "50");

        NonRootModelElement src = selectABC("A5B2C2", null);

        NonRootModelElement dest = selectDEFC("D3E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2) and row (D3E2F2C2).
     * 
     */
    @Test
	public void testA5B2C2_D3E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2", "D3E2F2C2", "51");

        NonRootModelElement src = selectABC("A5B2C2", null);

        NonRootModelElement dest = selectDEFC("D3E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2) and row (D4E2F1C1).
     * 
     */
    @Test
	public void testA5B2C2_D4E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2", "D4E2F1C1", "52");

        NonRootModelElement src = selectABC("A5B2C2", null);

        NonRootModelElement dest = selectDEFC("D4E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2) and row (D4E2F1C2).
     * 
     */
    @Test
	public void testA5B2C2_D4E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2", "D4E2F1C2", "53");

        NonRootModelElement src = selectABC("A5B2C2", null);

        NonRootModelElement dest = selectDEFC("D4E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2) and row (D4E2F2C1).
     * 
     */
    @Test
	public void testA5B2C2_D4E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2", "D4E2F2C1", "54");

        NonRootModelElement src = selectABC("A5B2C2", null);

        NonRootModelElement dest = selectDEFC("D4E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2) and row (D4E2F2C2).
     * 
     */
    @Test
	public void testA5B2C2_D4E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2", "D4E2F2C2", "55");

        NonRootModelElement src = selectABC("A5B2C2", null);

        NonRootModelElement dest = selectDEFC("D4E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C1) and row (D1E2F1C1).
     * 
     */
    @Test
	public void testA6B1C1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A6B1C1", "D1E2F1C1", "56");

        NonRootModelElement src = selectABC("A6B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C1) and row (D1E2F1C2).
     * 
     */
    @Test
	public void testA6B1C1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A6B1C1", "D1E2F1C2", "57");

        NonRootModelElement src = selectABC("A6B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C1) and row (D1E2F2C1).
     * 
     */
    @Test
	public void testA6B1C1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A6B1C1", "D1E2F2C1", "58");

        NonRootModelElement src = selectABC("A6B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C1) and row (D1E2F2C2).
     * 
     */
    @Test
	public void testA6B1C1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A6B1C1", "D1E2F2C2", "59");

        NonRootModelElement src = selectABC("A6B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C1) and row (D6E2F1C1).
     * 
     */
    @Test
	public void testA6B1C1_D6E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A6B1C1", "D6E2F1C1", "60");

        NonRootModelElement src = selectABC("A6B1C1", null);

        NonRootModelElement dest = selectDEFC("D6E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C1) and row (D6E2F1C2).
     * 
     */
    @Test
	public void testA6B1C1_D6E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A6B1C1", "D6E2F1C2", "61");

        NonRootModelElement src = selectABC("A6B1C1", null);

        NonRootModelElement dest = selectDEFC("D6E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C1) and row (D6E2F2C1).
     * 
     */
    @Test
	public void testA6B1C1_D6E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A6B1C1", "D6E2F2C1", "62");

        NonRootModelElement src = selectABC("A6B1C1", null);

        NonRootModelElement dest = selectDEFC("D6E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C1) and row (D6E2F2C2).
     * 
     */
    @Test
	public void testA6B1C1_D6E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A6B1C1", "D6E2F2C2", "63");

        NonRootModelElement src = selectABC("A6B1C1", null);

        NonRootModelElement dest = selectDEFC("D6E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C2) and row (D1E2F1C1).
     * 
     */
    @Test
	public void testA6B1C2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A6B1C2", "D1E2F1C1", "64");

        NonRootModelElement src = selectABC("A6B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C2) and row (D1E2F1C2).
     * 
     */
    @Test
	public void testA6B1C2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A6B1C2", "D1E2F1C2", "65");

        NonRootModelElement src = selectABC("A6B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C2) and row (D1E2F2C1).
     * 
     */
    @Test
	public void testA6B1C2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A6B1C2", "D1E2F2C1", "66");

        NonRootModelElement src = selectABC("A6B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C2) and row (D1E2F2C2).
     * 
     */
    @Test
	public void testA6B1C2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A6B1C2", "D1E2F2C2", "67");

        NonRootModelElement src = selectABC("A6B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C2) and row (D6E2F1C1).
     * 
     */
    @Test
	public void testA6B1C2_D6E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A6B1C2", "D6E2F1C1", "68");

        NonRootModelElement src = selectABC("A6B1C2", null);

        NonRootModelElement dest = selectDEFC("D6E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C2) and row (D6E2F1C2).
     * 
     */
    @Test
	public void testA6B1C2_D6E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A6B1C2", "D6E2F1C2", "69");

        NonRootModelElement src = selectABC("A6B1C2", null);

        NonRootModelElement dest = selectDEFC("D6E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C2) and row (D6E2F2C1).
     * 
     */
    @Test
	public void testA6B1C2_D6E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A6B1C2", "D6E2F2C1", "70");

        NonRootModelElement src = selectABC("A6B1C2", null);

        NonRootModelElement dest = selectDEFC("D6E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C2) and row (D6E2F2C2).
     * 
     */
    @Test
	public void testA6B1C2_D6E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A6B1C2", "D6E2F2C2", "71");

        NonRootModelElement src = selectABC("A6B1C2", null);

        NonRootModelElement dest = selectDEFC("D6E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C1) and row (D1E2F1C1).
     * 
     */
    @Test
	public void testA6B2C1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A6B2C1", "D1E2F1C1", "72");

        NonRootModelElement src = selectABC("A6B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C1) and row (D1E2F1C2).
     * 
     */
    @Test
	public void testA6B2C1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A6B2C1", "D1E2F1C2", "73");

        NonRootModelElement src = selectABC("A6B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C1) and row (D1E2F2C1).
     * 
     */
    @Test
	public void testA6B2C1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A6B2C1", "D1E2F2C1", "74");

        NonRootModelElement src = selectABC("A6B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C1) and row (D1E2F2C2).
     * 
     */
    @Test
	public void testA6B2C1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A6B2C1", "D1E2F2C2", "75");

        NonRootModelElement src = selectABC("A6B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C1) and row (D6E2F1C1).
     * 
     */
    @Test
	public void testA6B2C1_D6E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A6B2C1", "D6E2F1C1", "76");

        NonRootModelElement src = selectABC("A6B2C1", null);

        NonRootModelElement dest = selectDEFC("D6E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C1) and row (D6E2F1C2).
     * 
     */
    @Test
	public void testA6B2C1_D6E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A6B2C1", "D6E2F1C2", "77");

        NonRootModelElement src = selectABC("A6B2C1", null);

        NonRootModelElement dest = selectDEFC("D6E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C1) and row (D6E2F2C1).
     * 
     */
    @Test
	public void testA6B2C1_D6E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A6B2C1", "D6E2F2C1", "78");

        NonRootModelElement src = selectABC("A6B2C1", null);

        NonRootModelElement dest = selectDEFC("D6E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C1) and row (D6E2F2C2).
     * 
     */
    @Test
	public void testA6B2C1_D6E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A6B2C1", "D6E2F2C2", "79");

        NonRootModelElement src = selectABC("A6B2C1", null);

        NonRootModelElement dest = selectDEFC("D6E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C2) and row (D1E2F1C1).
     * 
     */
    @Test
	public void testA6B2C2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A6B2C2", "D1E2F1C1", "80");

        NonRootModelElement src = selectABC("A6B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C2) and row (D1E2F1C2).
     * 
     */
    @Test
	public void testA6B2C2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A6B2C2", "D1E2F1C2", "81");

        NonRootModelElement src = selectABC("A6B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C2) and row (D1E2F2C1).
     * 
     */
    @Test
	public void testA6B2C2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A6B2C2", "D1E2F2C1", "82");

        NonRootModelElement src = selectABC("A6B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C2) and row (D1E2F2C2).
     * 
     */
    @Test
	public void testA6B2C2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A6B2C2", "D1E2F2C2", "83");

        NonRootModelElement src = selectABC("A6B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C2) and row (D6E2F1C1).
     * 
     */
    @Test
	public void testA6B2C2_D6E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A6B2C2", "D6E2F1C1", "84");

        NonRootModelElement src = selectABC("A6B2C2", null);

        NonRootModelElement dest = selectDEFC("D6E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C2) and row (D6E2F1C2).
     * 
     */
    @Test
	public void testA6B2C2_D6E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A6B2C2", "D6E2F1C2", "85");

        NonRootModelElement src = selectABC("A6B2C2", null);

        NonRootModelElement dest = selectDEFC("D6E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C2) and row (D6E2F2C1).
     * 
     */
    @Test
	public void testA6B2C2_D6E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A6B2C2", "D6E2F2C1", "86");

        NonRootModelElement src = selectABC("A6B2C2", null);

        NonRootModelElement dest = selectDEFC("D6E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C2) and row (D6E2F2C2).
     * 
     */
    @Test
	public void testA6B2C2_D6E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A6B2C2", "D6E2F2C2", "87");

        NonRootModelElement src = selectABC("A6B2C2", null);

        NonRootModelElement dest = selectDEFC("D6E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1) and row (D1E2F1C1).
     * 
     */
    @Test
	public void testA7B1C1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1", "D1E2F1C1", "88");

        NonRootModelElement src = selectABC("A7B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1) and row (D1E2F1C2).
     * 
     */
    @Test
	public void testA7B1C1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1", "D1E2F1C2", "89");

        NonRootModelElement src = selectABC("A7B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1) and row (D1E2F2C1).
     * 
     */
    @Test
	public void testA7B1C1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1", "D1E2F2C1", "90");

        NonRootModelElement src = selectABC("A7B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1) and row (D1E2F2C2).
     * 
     */
    @Test
	public void testA7B1C1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1", "D1E2F2C2", "91");

        NonRootModelElement src = selectABC("A7B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1) and row (D5E2F1C1).
     * 
     */
    @Test
	public void testA7B1C1_D5E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1", "D5E2F1C1", "92");

        NonRootModelElement src = selectABC("A7B1C1", null);

        NonRootModelElement dest = selectDEFC("D5E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1) and row (D5E2F1C2).
     * 
     */
    @Test
	public void testA7B1C1_D5E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1", "D5E2F1C2", "93");

        NonRootModelElement src = selectABC("A7B1C1", null);

        NonRootModelElement dest = selectDEFC("D5E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1) and row (D5E2F2C1).
     * 
     */
    @Test
	public void testA7B1C1_D5E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1", "D5E2F2C1", "94");

        NonRootModelElement src = selectABC("A7B1C1", null);

        NonRootModelElement dest = selectDEFC("D5E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1) and row (D5E2F2C2).
     * 
     */
    @Test
	public void testA7B1C1_D5E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1", "D5E2F2C2", "95");

        NonRootModelElement src = selectABC("A7B1C1", null);

        NonRootModelElement dest = selectDEFC("D5E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1) and row (D6E2F1C1).
     * 
     */
    @Test
	public void testA7B1C1_D6E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1", "D6E2F1C1", "96");

        NonRootModelElement src = selectABC("A7B1C1", null);

        NonRootModelElement dest = selectDEFC("D6E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1) and row (D6E2F1C2).
     * 
     */
    @Test
	public void testA7B1C1_D6E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1", "D6E2F1C2", "97");

        NonRootModelElement src = selectABC("A7B1C1", null);

        NonRootModelElement dest = selectDEFC("D6E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1) and row (D6E2F2C1).
     * 
     */
    @Test
	public void testA7B1C1_D6E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1", "D6E2F2C1", "98");

        NonRootModelElement src = selectABC("A7B1C1", null);

        NonRootModelElement dest = selectDEFC("D6E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1) and row (D6E2F2C2).
     * 
     */
    @Test
	public void testA7B1C1_D6E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1", "D6E2F2C2", "99");

        NonRootModelElement src = selectABC("A7B1C1", null);

        NonRootModelElement dest = selectDEFC("D6E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2) and row (D1E2F1C1).
     * 
     */
    @Test
	public void testA7B1C2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2", "D1E2F1C1", "100");

        NonRootModelElement src = selectABC("A7B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2) and row (D1E2F1C2).
     * 
     */
    @Test
	public void testA7B1C2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2", "D1E2F1C2", "101");

        NonRootModelElement src = selectABC("A7B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2) and row (D1E2F2C1).
     * 
     */
    @Test
	public void testA7B1C2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2", "D1E2F2C1", "102");

        NonRootModelElement src = selectABC("A7B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2) and row (D1E2F2C2).
     * 
     */
    @Test
	public void testA7B1C2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2", "D1E2F2C2", "103");

        NonRootModelElement src = selectABC("A7B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2) and row (D5E2F1C1).
     * 
     */
    @Test
	public void testA7B1C2_D5E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2", "D5E2F1C1", "104");

        NonRootModelElement src = selectABC("A7B1C2", null);

        NonRootModelElement dest = selectDEFC("D5E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2) and row (D5E2F1C2).
     * 
     */
    @Test
	public void testA7B1C2_D5E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2", "D5E2F1C2", "105");

        NonRootModelElement src = selectABC("A7B1C2", null);

        NonRootModelElement dest = selectDEFC("D5E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2) and row (D5E2F2C1).
     * 
     */
    @Test
	public void testA7B1C2_D5E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2", "D5E2F2C1", "106");

        NonRootModelElement src = selectABC("A7B1C2", null);

        NonRootModelElement dest = selectDEFC("D5E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2) and row (D5E2F2C2).
     * 
     */
    @Test
	public void testA7B1C2_D5E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2", "D5E2F2C2", "107");

        NonRootModelElement src = selectABC("A7B1C2", null);

        NonRootModelElement dest = selectDEFC("D5E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2) and row (D6E2F1C1).
     * 
     */
    @Test
	public void testA7B1C2_D6E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2", "D6E2F1C1", "108");

        NonRootModelElement src = selectABC("A7B1C2", null);

        NonRootModelElement dest = selectDEFC("D6E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2) and row (D6E2F1C2).
     * 
     */
    @Test
	public void testA7B1C2_D6E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2", "D6E2F1C2", "109");

        NonRootModelElement src = selectABC("A7B1C2", null);

        NonRootModelElement dest = selectDEFC("D6E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2) and row (D6E2F2C1).
     * 
     */
    @Test
	public void testA7B1C2_D6E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2", "D6E2F2C1", "110");

        NonRootModelElement src = selectABC("A7B1C2", null);

        NonRootModelElement dest = selectDEFC("D6E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2) and row (D6E2F2C2).
     * 
     */
    @Test
	public void testA7B1C2_D6E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2", "D6E2F2C2", "111");

        NonRootModelElement src = selectABC("A7B1C2", null);

        NonRootModelElement dest = selectDEFC("D6E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1) and row (D1E2F1C1).
     * 
     */
    @Test
	public void testA7B2C1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1", "D1E2F1C1", "112");

        NonRootModelElement src = selectABC("A7B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1) and row (D1E2F1C2).
     * 
     */
    @Test
	public void testA7B2C1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1", "D1E2F1C2", "113");

        NonRootModelElement src = selectABC("A7B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectiliearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1) and row (D1E2F2C1).
     * 
     */
    @Test
	public void testA7B2C1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1", "D1E2F2C1", "114");

        NonRootModelElement src = selectABC("A7B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1) and row (D1E2F2C2).
     * 
     */
    @Test
	public void testA7B2C1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1", "D1E2F2C2", "115");

        NonRootModelElement src = selectABC("A7B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1) and row (D5E2F1C1).
     * 
     */
    @Test
	public void testA7B2C1_D5E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1", "D5E2F1C1", "116");

        NonRootModelElement src = selectABC("A7B2C1", null);

        NonRootModelElement dest = selectDEFC("D5E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1) and row (D5E2F1C2).
     * 
     */
    @Test
	public void testA7B2C1_D5E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1", "D5E2F1C2", "117");

        NonRootModelElement src = selectABC("A7B2C1", null);

        NonRootModelElement dest = selectDEFC("D5E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1) and row (D5E2F2C1).
     * 
     */
    @Test
	public void testA7B2C1_D5E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1", "D5E2F2C1", "118");

        NonRootModelElement src = selectABC("A7B2C1", null);

        NonRootModelElement dest = selectDEFC("D5E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1) and row (D5E2F2C2).
     * 
     */
    @Test
	public void testA7B2C1_D5E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1", "D5E2F2C2", "119");

        NonRootModelElement src = selectABC("A7B2C1", null);

        NonRootModelElement dest = selectDEFC("D5E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1) and row (D6E2F1C1).
     * 
     */
    @Test
	public void testA7B2C1_D6E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1", "D6E2F1C1", "120");

        NonRootModelElement src = selectABC("A7B2C1", null);

        NonRootModelElement dest = selectDEFC("D6E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1) and row (D6E2F1C2).
     * 
     */
    @Test
	public void testA7B2C1_D6E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1", "D6E2F1C2", "121");

        NonRootModelElement src = selectABC("A7B2C1", null);

        NonRootModelElement dest = selectDEFC("D6E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1) and row (D6E2F2C1).
     * 
     */
    @Test
	public void testA7B2C1_D6E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1", "D6E2F2C1", "122");

        NonRootModelElement src = selectABC("A7B2C1", null);

        NonRootModelElement dest = selectDEFC("D6E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1) and row (D6E2F2C2).
     * 
     */
    @Test
	public void testA7B2C1_D6E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1", "D6E2F2C2", "123");

        NonRootModelElement src = selectABC("A7B2C1", null);

        NonRootModelElement dest = selectDEFC("D6E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2) and row (D1E2F1C1).
     * 
     */
    @Test
	public void testA7B2C2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2", "D1E2F1C1", "124");

        NonRootModelElement src = selectABC("A7B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2) and row (D1E2F1C2).
     * 
     */
    @Test
	public void testA7B2C2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2", "D1E2F1C2", "125");

        NonRootModelElement src = selectABC("A7B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2) and row (D1E2F2C1).
     * 
     */
    @Test
	public void testA7B2C2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2", "D1E2F2C1", "126");

        NonRootModelElement src = selectABC("A7B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2) and row (D1E2F2C2).
     * 
     */
    @Test
	public void testA7B2C2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2", "D1E2F2C2", "127");

        NonRootModelElement src = selectABC("A7B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2) and row (D5E2F1C1).
     * 
     */
    @Test
	public void testA7B2C2_D5E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2", "D5E2F1C1", "128");

        NonRootModelElement src = selectABC("A7B2C2", null);

        NonRootModelElement dest = selectDEFC("D5E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2) and row (D5E2F1C2).
     * 
     */
    @Test
	public void testA7B2C2_D5E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2", "D5E2F1C2", "129");

        NonRootModelElement src = selectABC("A7B2C2", null);

        NonRootModelElement dest = selectDEFC("D5E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2) and row (D5E2F2C1).
     * 
     */
    @Test
	public void testA7B2C2_D5E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2", "D5E2F2C1", "130");

        NonRootModelElement src = selectABC("A7B2C2", null);

        NonRootModelElement dest = selectDEFC("D5E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2) and row (D5E2F2C2).
     * 
     */
    @Test
	public void testA7B2C2_D5E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2", "D5E2F2C2", "131");

        NonRootModelElement src = selectABC("A7B2C2", null);

        NonRootModelElement dest = selectDEFC("D5E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2) and row (D6E2F1C1).
     * 
     */
    @Test
	public void testA7B2C2_D6E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2", "D6E2F1C1", "132");

        NonRootModelElement src = selectABC("A7B2C2", null);

        NonRootModelElement dest = selectDEFC("D6E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2) and row (D6E2F1C2).
     * 
     */
    @Test
	public void testA7B2C2_D6E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2", "D6E2F1C2", "133");

        NonRootModelElement src = selectABC("A7B2C2", null);

        NonRootModelElement dest = selectDEFC("D6E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2) and row (D6E2F2C1).
     * 
     */
    @Test
	public void testA7B2C2_D6E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2", "D6E2F2C1", "134");

        NonRootModelElement src = selectABC("A7B2C2", null);

        NonRootModelElement dest = selectDEFC("D6E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2) and row (D6E2F2C2).
     * 
     */
    @Test
	public void testA7B2C2_D6E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2", "D6E2F2C2", "135");

        NonRootModelElement src = selectABC("A7B2C2", null);

        NonRootModelElement dest = selectDEFC("D6E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

}
