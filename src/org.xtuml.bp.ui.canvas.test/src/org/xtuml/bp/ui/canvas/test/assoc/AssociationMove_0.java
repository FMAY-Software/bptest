//=====================================================================
//
// WARNING:      Do not edit this generated file
// Generated by: UnitTestGenerator.pl
// Version:      1.15
// Matrix:       association_move.txt
//
//=====================================================================

package org.xtuml.bp.ui.canvas.test.assoc;

import org.eclipse.ui.IEditorPart;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import org.xtuml.bp.core.*;
import org.xtuml.bp.core.common.NonRootModelElement;
import org.xtuml.bp.test.common.*;
import org.xtuml.bp.ui.canvas.*;
import org.xtuml.bp.ui.graphics.editor.*;
import org.xtuml.bp.ui.canvas.test.*;

public class AssociationMove_0 extends AssociationMove {

    protected String getResultName() {
        return super.getResultName();
    }

    public AssociationMove_0() {
        super("AssociationMove_0", null);
    }

    @Before
    public void setUp() throws Exception {
        super.setUp();
    }

    @After
    public void tearDown() throws Exception {
        super.tearDown();
    }


    /**
     * Perform the test for the given matrix column (A1B1C1) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA1B1C1_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A1B1C1", "D1E1F1C3", "1");

        NonRootModelElement src = selectABC("A1B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C1) and row (D1E1F2C3).
     * 
     */
    @Test
    public void testA1B1C1_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A1B1C1", "D1E1F2C3", "2");

        NonRootModelElement src = selectABC("A1B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA1B1C1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A1B1C1", "D1E2F1C1", "3");

        NonRootModelElement src = selectABC("A1B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA1B1C1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A1B1C1", "D1E2F1C2", "4");

        NonRootModelElement src = selectABC("A1B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA1B1C1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A1B1C1", "D1E2F2C1", "5");

        NonRootModelElement src = selectABC("A1B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA1B1C1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A1B1C1", "D1E2F2C2", "6");

        NonRootModelElement src = selectABC("A1B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA1B1C2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A1B1C2", "D1E1F1C3", "7");

        NonRootModelElement src = selectABC("A1B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C2) and row (D1E1F2C3).
     * 
     */
    @Test
    public void testA1B1C2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A1B1C2", "D1E1F2C3", "8");

        NonRootModelElement src = selectABC("A1B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA1B1C2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A1B1C2", "D1E2F1C1", "9");

        NonRootModelElement src = selectABC("A1B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA1B1C2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A1B1C2", "D1E2F1C2", "10");

        NonRootModelElement src = selectABC("A1B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA1B1C2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A1B1C2", "D1E2F2C1", "11");

        NonRootModelElement src = selectABC("A1B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA1B1C2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A1B1C2", "D1E2F2C2", "12");

        NonRootModelElement src = selectABC("A1B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C1) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA1B2C1_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A1B2C1", "D1E1F1C3", "13");

        NonRootModelElement src = selectABC("A1B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C1) and row (D1E1F2C3).
     * 
     */
    @Test
    public void testA1B2C1_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A1B2C1", "D1E1F2C3", "14");

        NonRootModelElement src = selectABC("A1B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA1B2C1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A1B2C1", "D1E2F1C1", "15");

        NonRootModelElement src = selectABC("A1B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA1B2C1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A1B2C1", "D1E2F1C2", "16");

        NonRootModelElement src = selectABC("A1B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA1B2C1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A1B2C1", "D1E2F2C1", "17");

        NonRootModelElement src = selectABC("A1B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA1B2C1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A1B2C1", "D1E2F2C2", "18");

        NonRootModelElement src = selectABC("A1B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA1B2C2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A1B2C2", "D1E1F1C3", "19");

        NonRootModelElement src = selectABC("A1B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C2) and row (D1E1F2C3).
     * 
     */
    @Test
    public void testA1B2C2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A1B2C2", "D1E1F2C3", "20");

        NonRootModelElement src = selectABC("A1B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA1B2C2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A1B2C2", "D1E2F1C1", "21");

        NonRootModelElement src = selectABC("A1B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA1B2C2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A1B2C2", "D1E2F1C2", "22");

        NonRootModelElement src = selectABC("A1B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA1B2C2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A1B2C2", "D1E2F2C1", "23");

        NonRootModelElement src = selectABC("A1B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA1B2C2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A1B2C2", "D1E2F2C2", "24");

        NonRootModelElement src = selectABC("A1B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C1) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA2B1C1_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A2B1C1", "D1E1F1C3", "25");

        NonRootModelElement src = selectABC("A2B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C1) and row (D1E1F2C3).
     * 
     */
    @Test
    public void testA2B1C1_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A2B1C1", "D1E1F2C3", "26");

        NonRootModelElement src = selectABC("A2B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA2B1C1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A2B1C1", "D1E2F1C1", "27");

        NonRootModelElement src = selectABC("A2B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA2B1C1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A2B1C1", "D1E2F1C2", "28");

        NonRootModelElement src = selectABC("A2B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA2B1C1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A2B1C1", "D1E2F2C1", "29");

        NonRootModelElement src = selectABC("A2B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA2B1C1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A2B1C1", "D1E2F2C2", "30");

        NonRootModelElement src = selectABC("A2B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA2B1C2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A2B1C2", "D1E1F1C3", "31");

        NonRootModelElement src = selectABC("A2B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C2) and row (D1E1F2C3).
     * 
     */
    @Test
    public void testA2B1C2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A2B1C2", "D1E1F2C3", "32");

        NonRootModelElement src = selectABC("A2B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA2B1C2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A2B1C2", "D1E2F1C1", "33");

        NonRootModelElement src = selectABC("A2B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA2B1C2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A2B1C2", "D1E2F1C2", "34");

        NonRootModelElement src = selectABC("A2B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA2B1C2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A2B1C2", "D1E2F2C1", "35");

        NonRootModelElement src = selectABC("A2B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA2B1C2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A2B1C2", "D1E2F2C2", "36");

        NonRootModelElement src = selectABC("A2B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA3B1C1_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1", "D1E1F1C3", "37");

        NonRootModelElement src = selectABC("A3B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1) and row (D1E1F2C3).
     * 
     */
    @Test
    public void testA3B1C1_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1", "D1E1F2C3", "38");

        NonRootModelElement src = selectABC("A3B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA3B1C1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1", "D1E2F1C1", "39");

        NonRootModelElement src = selectABC("A3B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA3B1C1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1", "D1E2F1C2", "40");

        NonRootModelElement src = selectABC("A3B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA3B1C1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1", "D1E2F2C1", "41");

        NonRootModelElement src = selectABC("A3B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA3B1C1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1", "D1E2F2C2", "42");

        NonRootModelElement src = selectABC("A3B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1) and row (D2E2F1C1).
     * 
     */
    @Test
    public void testA3B1C1_D2E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1", "D2E2F1C1", "43");

        NonRootModelElement src = selectABC("A3B1C1", null);

        NonRootModelElement dest = selectDEFC("D2E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1) and row (D2E2F1C2).
     * 
     */
    @Test
    public void testA3B1C1_D2E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1", "D2E2F1C2", "44");

        NonRootModelElement src = selectABC("A3B1C1", null);

        NonRootModelElement dest = selectDEFC("D2E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1) and row (D2E2F2C1).
     * 
     */
    @Test
    public void testA3B1C1_D2E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1", "D2E2F2C1", "45");

        NonRootModelElement src = selectABC("A3B1C1", null);

        NonRootModelElement dest = selectDEFC("D2E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1) and row (D2E2F2C2).
     * 
     */
    @Test
    public void testA3B1C1_D2E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1", "D2E2F2C2", "46");

        NonRootModelElement src = selectABC("A3B1C1", null);

        NonRootModelElement dest = selectDEFC("D2E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA3B1C2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2", "D1E1F1C3", "47");

        NonRootModelElement src = selectABC("A3B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2) and row (D1E1F2C3).
     * 
     */
    @Test
    public void testA3B1C2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2", "D1E1F2C3", "48");

        NonRootModelElement src = selectABC("A3B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA3B1C2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2", "D1E2F1C1", "49");

        NonRootModelElement src = selectABC("A3B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA3B1C2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2", "D1E2F1C2", "50");

        NonRootModelElement src = selectABC("A3B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA3B1C2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2", "D1E2F2C1", "51");

        NonRootModelElement src = selectABC("A3B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA3B1C2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2", "D1E2F2C2", "52");

        NonRootModelElement src = selectABC("A3B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2) and row (D2E2F1C1).
     * 
     */
    @Test
    public void testA3B1C2_D2E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2", "D2E2F1C1", "53");

        NonRootModelElement src = selectABC("A3B1C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2) and row (D2E2F1C2).
     * 
     */
    @Test
    public void testA3B1C2_D2E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2", "D2E2F1C2", "54");

        NonRootModelElement src = selectABC("A3B1C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2) and row (D2E2F2C1).
     * 
     */
    @Test
    public void testA3B1C2_D2E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2", "D2E2F2C1", "55");

        NonRootModelElement src = selectABC("A3B1C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2) and row (D2E2F2C2).
     * 
     */
    @Test
    public void testA3B1C2_D2E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2", "D2E2F2C2", "56");

        NonRootModelElement src = selectABC("A3B1C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA3B2C1_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1", "D1E1F1C3", "57");

        NonRootModelElement src = selectABC("A3B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1) and row (D1E1F2C3).
     * 
     */
    @Test
    public void testA3B2C1_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1", "D1E1F2C3", "58");

        NonRootModelElement src = selectABC("A3B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA3B2C1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1", "D1E2F1C1", "59");

        NonRootModelElement src = selectABC("A3B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA3B2C1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1", "D1E2F1C2", "60");

        NonRootModelElement src = selectABC("A3B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA3B2C1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1", "D1E2F2C1", "61");

        NonRootModelElement src = selectABC("A3B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA3B2C1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1", "D1E2F2C2", "62");

        NonRootModelElement src = selectABC("A3B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1) and row (D2E2F1C1).
     * 
     */
    @Test
    public void testA3B2C1_D2E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1", "D2E2F1C1", "63");

        NonRootModelElement src = selectABC("A3B2C1", null);

        NonRootModelElement dest = selectDEFC("D2E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1) and row (D2E2F1C2).
     * 
     */
    @Test
    public void testA3B2C1_D2E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1", "D2E2F1C2", "64");

        NonRootModelElement src = selectABC("A3B2C1", null);

        NonRootModelElement dest = selectDEFC("D2E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1) and row (D2E2F2C1).
     * 
     */
    @Test
    public void testA3B2C1_D2E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1", "D2E2F2C1", "65");

        NonRootModelElement src = selectABC("A3B2C1", null);

        NonRootModelElement dest = selectDEFC("D2E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1) and row (D2E2F2C2).
     * 
     */
    @Test
    public void testA3B2C1_D2E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1", "D2E2F2C2", "66");

        NonRootModelElement src = selectABC("A3B2C1", null);

        NonRootModelElement dest = selectDEFC("D2E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA3B2C2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2", "D1E1F1C3", "67");

        NonRootModelElement src = selectABC("A3B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2) and row (D1E1F2C3).
     * 
     */
    @Test
    public void testA3B2C2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2", "D1E1F2C3", "68");

        NonRootModelElement src = selectABC("A3B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA3B2C2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2", "D1E2F1C1", "69");

        NonRootModelElement src = selectABC("A3B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA3B2C2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2", "D1E2F1C2", "70");

        NonRootModelElement src = selectABC("A3B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA3B2C2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2", "D1E2F2C1", "71");

        NonRootModelElement src = selectABC("A3B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA3B2C2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2", "D1E2F2C2", "72");

        NonRootModelElement src = selectABC("A3B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2) and row (D2E2F1C1).
     * 
     */
    @Test
    public void testA3B2C2_D2E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2", "D2E2F1C1", "73");

        NonRootModelElement src = selectABC("A3B2C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2) and row (D2E2F1C2).
     * 
     */
    @Test
    public void testA3B2C2_D2E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2", "D2E2F1C2", "74");

        NonRootModelElement src = selectABC("A3B2C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2) and row (D2E2F2C1).
     * 
     */
    @Test
    public void testA3B2C2_D2E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2", "D2E2F2C1", "75");

        NonRootModelElement src = selectABC("A3B2C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2) and row (D2E2F2C2).
     * 
     */
    @Test
    public void testA3B2C2_D2E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2", "D2E2F2C2", "76");

        NonRootModelElement src = selectABC("A3B2C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA4B1C1_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1", "D1E1F1C3", "77");

        NonRootModelElement src = selectABC("A4B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1) and row (D1E1F2C3).
     * 
     */
    @Test
    public void testA4B1C1_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1", "D1E1F2C3", "78");

        NonRootModelElement src = selectABC("A4B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA4B1C1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1", "D1E2F1C1", "79");

        NonRootModelElement src = selectABC("A4B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA4B1C1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1", "D1E2F1C2", "80");

        NonRootModelElement src = selectABC("A4B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA4B1C1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1", "D1E2F2C1", "81");

        NonRootModelElement src = selectABC("A4B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA4B1C1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1", "D1E2F2C2", "82");

        NonRootModelElement src = selectABC("A4B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1) and row (D2E2F1C1).
     * 
     */
    @Test
    public void testA4B1C1_D2E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1", "D2E2F1C1", "83");

        NonRootModelElement src = selectABC("A4B1C1", null);

        NonRootModelElement dest = selectDEFC("D2E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1) and row (D2E2F1C2).
     * 
     */
    @Test
    public void testA4B1C1_D2E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1", "D2E2F1C2", "84");

        NonRootModelElement src = selectABC("A4B1C1", null);

        NonRootModelElement dest = selectDEFC("D2E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1) and row (D2E2F2C1).
     * 
     */
    @Test
    public void testA4B1C1_D2E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1", "D2E2F2C1", "85");

        NonRootModelElement src = selectABC("A4B1C1", null);

        NonRootModelElement dest = selectDEFC("D2E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1) and row (D2E2F2C2).
     * 
     */
    @Test
    public void testA4B1C1_D2E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1", "D2E2F2C2", "86");

        NonRootModelElement src = selectABC("A4B1C1", null);

        NonRootModelElement dest = selectDEFC("D2E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA4B1C2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2", "D1E1F1C3", "87");

        NonRootModelElement src = selectABC("A4B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2) and row (D1E1F2C3).
     * 
     */
    @Test
    public void testA4B1C2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2", "D1E1F2C3", "88");

        NonRootModelElement src = selectABC("A4B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA4B1C2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2", "D1E2F1C1", "89");

        NonRootModelElement src = selectABC("A4B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA4B1C2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2", "D1E2F1C2", "90");

        NonRootModelElement src = selectABC("A4B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA4B1C2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2", "D1E2F2C1", "91");

        NonRootModelElement src = selectABC("A4B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA4B1C2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2", "D1E2F2C2", "92");

        NonRootModelElement src = selectABC("A4B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2) and row (D2E2F1C1).
     * 
     */
    @Test
    public void testA4B1C2_D2E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2", "D2E2F1C1", "93");

        NonRootModelElement src = selectABC("A4B1C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2) and row (D2E2F1C2).
     * 
     */
    @Test
    public void testA4B1C2_D2E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2", "D2E2F1C2", "94");

        NonRootModelElement src = selectABC("A4B1C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2) and row (D2E2F2C1).
     * 
     */
    @Test
    public void testA4B1C2_D2E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2", "D2E2F2C1", "95");

        NonRootModelElement src = selectABC("A4B1C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2) and row (D2E2F2C2).
     * 
     */
    @Test
    public void testA4B1C2_D2E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2", "D2E2F2C2", "96");

        NonRootModelElement src = selectABC("A4B1C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA4B2C1_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1", "D1E1F1C3", "97");

        NonRootModelElement src = selectABC("A4B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1) and row (D1E1F2C3).
     * 
     */
    @Test
    public void testA4B2C1_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1", "D1E1F2C3", "98");

        NonRootModelElement src = selectABC("A4B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA4B2C1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1", "D1E2F1C1", "99");

        NonRootModelElement src = selectABC("A4B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA4B2C1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1", "D1E2F1C2", "100");

        NonRootModelElement src = selectABC("A4B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA4B2C1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1", "D1E2F2C1", "101");

        NonRootModelElement src = selectABC("A4B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA4B2C1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1", "D1E2F2C2", "102");

        NonRootModelElement src = selectABC("A4B2C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1) and row (D2E2F1C1).
     * 
     */
    @Test
    public void testA4B2C1_D2E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1", "D2E2F1C1", "103");

        NonRootModelElement src = selectABC("A4B2C1", null);

        NonRootModelElement dest = selectDEFC("D2E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1) and row (D2E2F1C2).
     * 
     */
    @Test
    public void testA4B2C1_D2E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1", "D2E2F1C2", "104");

        NonRootModelElement src = selectABC("A4B2C1", null);

        NonRootModelElement dest = selectDEFC("D2E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1) and row (D2E2F2C1).
     * 
     */
    @Test
    public void testA4B2C1_D2E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1", "D2E2F2C1", "105");

        NonRootModelElement src = selectABC("A4B2C1", null);

        NonRootModelElement dest = selectDEFC("D2E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1) and row (D2E2F2C2).
     * 
     */
    @Test
    public void testA4B2C1_D2E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1", "D2E2F2C2", "106");

        NonRootModelElement src = selectABC("A4B2C1", null);

        NonRootModelElement dest = selectDEFC("D2E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA4B2C2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2", "D1E1F1C3", "107");

        NonRootModelElement src = selectABC("A4B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2) and row (D1E1F2C3).
     * 
     */
    @Test
    public void testA4B2C2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2", "D1E1F2C3", "108");

        NonRootModelElement src = selectABC("A4B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA4B2C2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2", "D1E2F1C1", "109");

        NonRootModelElement src = selectABC("A4B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA4B2C2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2", "D1E2F1C2", "110");

        NonRootModelElement src = selectABC("A4B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA4B2C2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2", "D1E2F2C1", "111");

        NonRootModelElement src = selectABC("A4B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA4B2C2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2", "D1E2F2C2", "112");

        NonRootModelElement src = selectABC("A4B2C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2) and row (D2E2F1C1).
     * 
     */
    @Test
    public void testA4B2C2_D2E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2", "D2E2F1C1", "113");

        NonRootModelElement src = selectABC("A4B2C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2) and row (D2E2F1C2).
     * 
     */
    @Test
    public void testA4B2C2_D2E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2", "D2E2F1C2", "114");

        NonRootModelElement src = selectABC("A4B2C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2) and row (D2E2F2C1).
     * 
     */
    @Test
    public void testA4B2C2_D2E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2", "D2E2F2C1", "115");

        NonRootModelElement src = selectABC("A4B2C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2) and row (D2E2F2C2).
     * 
     */
    @Test
    public void testA4B2C2_D2E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2", "D2E2F2C2", "116");

        NonRootModelElement src = selectABC("A4B2C2", null);

        NonRootModelElement dest = selectDEFC("D2E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA5B1C1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D1E2F1C1", "117");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA5B1C1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D1E2F1C2", "118");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA5B1C1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D1E2F2C1", "119");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA5B1C1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D1E2F2C2", "120");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D3E2F1C1).
     * 
     */
    @Test
    public void testA5B1C1_D3E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D3E2F1C1", "121");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D3E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D3E2F1C2).
     * 
     */
    @Test
    public void testA5B1C1_D3E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D3E2F1C2", "122");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D3E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D3E2F2C1).
     * 
     */
    @Test
    public void testA5B1C1_D3E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D3E2F2C1", "123");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D3E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D3E2F2C2).
     * 
     */
    @Test
    public void testA5B1C1_D3E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D3E2F2C2", "124");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D3E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D4E2F1C1).
     * 
     */
    @Test
    public void testA5B1C1_D4E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D4E2F1C1", "125");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D4E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D4E2F1C2).
     * 
     */
    @Test
    public void testA5B1C1_D4E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D4E2F1C2", "126");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D4E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D4E2F2C1).
     * 
     */
    @Test
    public void testA5B1C1_D4E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D4E2F2C1", "127");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D4E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1) and row (D4E2F2C2).
     * 
     */
    @Test
    public void testA5B1C1_D4E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1", "D4E2F2C2", "128");

        NonRootModelElement src = selectABC("A5B1C1", null);

        NonRootModelElement dest = selectDEFC("D4E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA5B1C2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D1E2F1C1", "129");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA5B1C2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D1E2F1C2", "130");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA5B1C2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D1E2F2C1", "131");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA5B1C2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D1E2F2C2", "132");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D3E2F1C1).
     * 
     */
    @Test
    public void testA5B1C2_D3E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D3E2F1C1", "133");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D3E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D3E2F1C2).
     * 
     */
    @Test
    public void testA5B1C2_D3E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D3E2F1C2", "134");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D3E2F1C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D3E2F2C1).
     * 
     */
    @Test
    public void testA5B1C2_D3E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D3E2F2C1", "135");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D3E2F2C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D3E2F2C2).
     * 
     */
    @Test
    public void testA5B1C2_D3E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D3E2F2C2", "136");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D3E2F2C2", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2) and row (D4E2F1C1).
     * 
     */
    @Test
    public void testA5B1C2_D4E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2", "D4E2F1C1", "137");

        NonRootModelElement src = selectABC("A5B1C2", null);

        NonRootModelElement dest = selectDEFC("D4E2F1C1", src);

        ABC_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

}
