//=====================================================================
//
//File:      $RCSfile: UnitTestGenerator.pl,v $
//Version:   $Revision: 1.14 $
//Modified:  $Date: 2013/01/10 23:21:36 $
//
// NOTE: This file was generated, but is maintained by hand.
// Generated by: UnitTestGenerator.pl
// Version:      1.14
// Matrix:       association_move.txt
//
//(c) Copyright 2007-2014 by Mentor Graphics Corp. All rights reserved.
//
//=====================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//=====================================================================

package org.xtuml.bp.ui.canvas.test.assoc;

import org.eclipse.ui.IEditorPart;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import org.xtuml.bp.core.*;
import org.xtuml.bp.core.common.NonRootModelElement;
import org.xtuml.bp.test.common.*;
import org.xtuml.bp.ui.canvas.*;
import org.xtuml.bp.ui.graphics.editor.*;
import org.xtuml.bp.ui.canvas.test.*;

public class AssociationMove extends CanvasTest {
    public static boolean generateResults = false;
    public static boolean useDrawResults = true;

    String test_id = "";

    protected String getResultName() {
        return getClass().getSimpleName() + "_" + test_id;
    }

    protected GraphicalEditor fActiveEditor;

    protected GraphicalEditor getActiveEditor() {
        return fActiveEditor;
    }

    public AssociationMove(String subTypeClassName, String subTypeArg0) {
        super(subTypeClassName, subTypeArg0);
    }

    protected String getTestId(String src, String dest, String count) {
        return "test_" + count;
    }

    @Before
	public void setUp() throws Exception {
        super.setUp();
    }

    @After
	public void tearDown() throws Exception {
        super.tearDown();
    }

    /**
     * "ABC" is one of the degrees of freedom as specified in this issues
     * test matrix.
     * This routine gets the "ABC" instance from the given name.
     * 
     * @param element The degree of freedom instance to retrieve
     * @return A model element used in the test as specified by the test matrix
     */
    NonRootModelElement selectABC(String element) {
        NonRootModelElement nrme = null;
        if (element.equalsIgnoreCase("A1B1C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A1B1C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A1B2C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A1B2C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A2B1C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A2B1C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A2B2C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A2B2C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A3B1C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A3B1C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A3B2C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A3B2C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A4B1C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A4B1C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A4B2C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A4B2C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A5B1C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A5B1C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A5B2C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A5B2C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A6B1C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A6B1C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A6B2C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("A6B2C2")) {
        	//TODO: Implement
        } else        assertTrue("An instance with degree of freedom type \"ABC\" was not found.  Instance Name: " + element + ".", nrme!=null);
        return nrme;
    }

    /**
     * "DEFC" is one of the degrees of freedom as specified in this issues
     * test matrix.
     * This routine gets the "DEFC" instance from the given name.
     * 
     * @param element The degree of freedom instance to retrieve
     * @return A model element used in the test as specified by the test matrix
     */
    NonRootModelElement selectDEFC(String element) {
        NonRootModelElement nrme = null;
        if (element.equalsIgnoreCase("D1E1F1C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D1E1F1C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D1E1F2C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D1E1F2C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D1E2F1C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D1E2F1C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D1E2F2C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D1E2F2C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D2E2F1C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D2E2F1C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D2E2F2C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D2E2F2C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D3E2F1C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D3E2F1C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D3E2F2C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D3E2F2C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D4E2F1C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D4E2F1C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D4E2F2C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D4E2F2C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D5E2F1C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D5E2F1C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D5E2F2C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D5E2F2C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D6E2F1C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D6E2F1C2")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D6E2F2C1")) {
        	//TODO: Implement
        } else if (element.equalsIgnoreCase("D6E2F2C2")) {
        	//TODO: Implement
        } 
        assertTrue("An instance with degree of freedom type \"DEFC\" was not found.  Instance Name: " + element + ".", nrme!=null);
        return nrme;
    }

    /**
     * This routine performs the action associated with a matrix cell.
     * The parameters represent model instances aquired based on the specifed
     * column instance and row instance.
     * 
     * @param columnInstance Model instance from the column
     * @param rowInstance Model instance from the row
     */
    void ABC_DEFC_Action(NonRootModelElement columnInstance, NonRootModelElement rowInstance) {
        //TODO: Implement
    }

    /**
    * This function verifies an expected result.
    *
    * @param source A model element instance aquired through a action taken
    *               on a column of the matrix.
    * @param destination A model element instance aquired through a action taken
    *                    taken on a row of the matrix.
    * @return true if the test succeeds, false if it fails
    */
    boolean checkResult_moveSucceeds(NonRootModelElement source, NonRootModelElement destination) {
        boolean moveSucceeds = false;
        //TODO: Implement
        return moveSucceeds;
    }


    /**
    * This function verifies an expected result.
    *
    * @param source A model element instance aquired through a action taken
    *               on a column of the matrix.
    * @param destination A model element instance aquired through a action taken
    *                    taken on a row of the matrix.
    * @return true if the test succeeds, false if it fails
    */
    boolean checkResult_moveDisallowed(NonRootModelElement source, NonRootModelElement destination) {
        boolean moveDisallowed = false;
        //TODO: Implement
        return moveDisallowed;
    }


}
