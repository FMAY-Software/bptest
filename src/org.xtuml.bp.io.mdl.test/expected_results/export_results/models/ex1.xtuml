-- root-types-contained: Package_c
-- BP 7.1 content: StreamData syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	"50642553-6a49-751c-68da-981eb9cfa6bf",
	"50642553-6a49-751c-68da-981eb9cfa6bf",
	'ex1',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("1a92e7b0-9a7a-7cf2-2ded-a5b55355c65b",
	112,
	"8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	108,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1');
INSERT INTO GD_GE
	VALUES ("a1459968-ba47-ee22-c9a6-b73cbd4a1519",
	"1a92e7b0-9a7a-7cf2-2ded-a5b55355c65b",
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex');
INSERT INTO GD_SHP
	VALUES ("a1459968-ba47-ee22-c9a6-b73cbd4a1519");
INSERT INTO GD_NCS
	VALUES ("a1459968-ba47-ee22-c9a6-b73cbd4a1519");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"a1459968-ba47-ee22-c9a6-b73cbd4a1519");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1344.000000,
	"a1459968-ba47-ee22-c9a6-b73cbd4a1519",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a1459968-ba47-ee22-c9a6-b73cbd4a1519",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("f6147446-79d8-ace5-4255-531e4d776edb",
	"1a92e7b0-9a7a-7cf2-2ded-a5b55355c65b",
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes');
INSERT INTO GD_SHP
	VALUES ("f6147446-79d8-ace5-4255-531e4d776edb");
INSERT INTO GD_NCS
	VALUES ("f6147446-79d8-ace5-4255-531e4d776edb");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"f6147446-79d8-ace5-4255-531e4d776edb");
INSERT INTO DIM_GE
	VALUES (2240.000000,
	1568.000000,
	"f6147446-79d8-ace5-4255-531e4d776edb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f6147446-79d8-ace5-4255-531e4d776edb",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("9908a69e-0285-434a-583c-679122852815",
	"1a92e7b0-9a7a-7cf2-2ded-a5b55355c65b",
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::External Entities');
INSERT INTO GD_SHP
	VALUES ("9908a69e-0285-434a-583c-679122852815");
INSERT INTO GD_NCS
	VALUES ("9908a69e-0285-434a-583c-679122852815");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"9908a69e-0285-434a-583c-679122852815");
INSERT INTO DIM_GE
	VALUES (2064.000000,
	1568.000000,
	"9908a69e-0285-434a-583c-679122852815",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9908a69e-0285-434a-583c-679122852815",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("1a92e7b0-9a7a-7cf2-2ded-a5b55355c65b",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("82bdba89-5c4a-655b-00b0-3a234d6b8796",
	1,
	"8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	"50642553-6a49-751c-68da-981eb9cfa6bf",
	'ex',
	'',
	1);
INSERT INTO GD_MD
	VALUES ("aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	112,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	108,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex');
INSERT INTO GD_GE
	VALUES ("b42eaca3-2e95-d376-f014-7d42009a380f",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"1e6c89ff-f941-7c51-013e-1dc86807a023",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init');
INSERT INTO GD_SHP
	VALUES ("b42eaca3-2e95-d376-f014-7d42009a380f");
INSERT INTO GD_NCS
	VALUES ("b42eaca3-2e95-d376-f014-7d42009a380f");
INSERT INTO DIM_ND
	VALUES (224.000000,
	144.000000,
	"b42eaca3-2e95-d376-f014-7d42009a380f");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1216.000000,
	"b42eaca3-2e95-d376-f014-7d42009a380f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b42eaca3-2e95-d376-f014-7d42009a380f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("ffb76f10-b3be-42b5-a92a-a609b5f32dbb",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test');
INSERT INTO GD_SHP
	VALUES ("ffb76f10-b3be-42b5-a92a-a609b5f32dbb");
INSERT INTO GD_NCS
	VALUES ("ffb76f10-b3be-42b5-a92a-a609b5f32dbb");
INSERT INTO DIM_ND
	VALUES (240.000000,
	464.000000,
	"ffb76f10-b3be-42b5-a92a-a609b5f32dbb");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1392.000000,
	"ffb76f10-b3be-42b5-a92a-a609b5f32dbb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ffb76f10-b3be-42b5-a92a-a609b5f32dbb",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("2e374ffd-37b1-c912-a625-360bad7248e3",
	1760.000000,
	1856.000000,
	"ffb76f10-b3be-42b5-a92a-a609b5f32dbb");
INSERT INTO DIM_CON
	VALUES ("fa540fff-67c0-31e1-a5c6-36dbb41f43b0",
	1888.000000,
	1440.000000,
	"ffb76f10-b3be-42b5-a92a-a609b5f32dbb");
INSERT INTO DIM_CON
	VALUES ("83719287-ec5b-e685-8e2f-20f99e1346c7",
	1888.000000,
	1584.000000,
	"ffb76f10-b3be-42b5-a92a-a609b5f32dbb");
INSERT INTO DIM_CON
	VALUES ("7a2b13f9-a81e-b11f-da35-9276ab18430e",
	1888.000000,
	1728.000000,
	"ffb76f10-b3be-42b5-a92a-a609b5f32dbb");
INSERT INTO DIM_CON
	VALUES ("f06e05c0-7a42-c962-214e-9f09ffb35b3b",
	1888.000000,
	1472.000000,
	"ffb76f10-b3be-42b5-a92a-a609b5f32dbb");
INSERT INTO DIM_CON
	VALUES ("3ae0dce7-ae72-0a58-7451-578a9cf7dc6c",
	1856.000000,
	1856.000000,
	"ffb76f10-b3be-42b5-a92a-a609b5f32dbb");
INSERT INTO GD_GE
	VALUES ("cd1829fa-0809-caae-827e-96df3dfd909c",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::No Instances');
INSERT INTO GD_SHP
	VALUES ("cd1829fa-0809-caae-827e-96df3dfd909c");
INSERT INTO GD_NCS
	VALUES ("cd1829fa-0809-caae-827e-96df3dfd909c");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"cd1829fa-0809-caae-827e-96df3dfd909c");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1392.000000,
	"cd1829fa-0809-caae-827e-96df3dfd909c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cd1829fa-0809-caae-827e-96df3dfd909c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("fd8a0cef-bfbb-9235-0114-cbe92d082a57",
	2112.000000,
	1440.000000,
	"cd1829fa-0809-caae-827e-96df3dfd909c");
INSERT INTO DIM_CON
	VALUES ("d21e6fa3-f449-4acd-b20d-8fa0b9089aff",
	2112.000000,
	1472.000000,
	"cd1829fa-0809-caae-827e-96df3dfd909c");
INSERT INTO GD_GE
	VALUES ("6166f753-6063-3a6a-3044-61b5e18e9ac7",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::One Instance');
INSERT INTO GD_SHP
	VALUES ("6166f753-6063-3a6a-3044-61b5e18e9ac7");
INSERT INTO GD_NCS
	VALUES ("6166f753-6063-3a6a-3044-61b5e18e9ac7");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"6166f753-6063-3a6a-3044-61b5e18e9ac7");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1520.000000,
	"6166f753-6063-3a6a-3044-61b5e18e9ac7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6166f753-6063-3a6a-3044-61b5e18e9ac7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("ba0e7492-1694-623f-a2e6-f5ca8e2ca2f9",
	2112.000000,
	1584.000000,
	"6166f753-6063-3a6a-3044-61b5e18e9ac7");
INSERT INTO GD_GE
	VALUES ("d8e2f413-f96e-f164-3e8b-a356bf014fda",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Many Instances');
INSERT INTO GD_SHP
	VALUES ("d8e2f413-f96e-f164-3e8b-a356bf014fda");
INSERT INTO GD_NCS
	VALUES ("d8e2f413-f96e-f164-3e8b-a356bf014fda");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"d8e2f413-f96e-f164-3e8b-a356bf014fda");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1664.000000,
	"d8e2f413-f96e-f164-3e8b-a356bf014fda",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d8e2f413-f96e-f164-3e8b-a356bf014fda",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c8a25df0-0122-2052-9615-98def18bbcec",
	2112.000000,
	1728.000000,
	"d8e2f413-f96e-f164-3e8b-a356bf014fda");
INSERT INTO GD_GE
	VALUES ("b28f10c2-3006-4d39-4ac3-f1ea4b5f3715",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Any Object');
INSERT INTO GD_SHP
	VALUES ("b28f10c2-3006-4d39-4ac3-f1ea4b5f3715");
INSERT INTO GD_NCS
	VALUES ("b28f10c2-3006-4d39-4ac3-f1ea4b5f3715");
INSERT INTO DIM_ND
	VALUES (192.000000,
	160.000000,
	"b28f10c2-3006-4d39-4ac3-f1ea4b5f3715");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1216.000000,
	"b28f10c2-3006-4d39-4ac3-f1ea4b5f3715",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b28f10c2-3006-4d39-4ac3-f1ea4b5f3715",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("19f2e53f-b45b-d932-5739-dff628a97a0e",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test Object B');
INSERT INTO GD_SHP
	VALUES ("19f2e53f-b45b-d932-5739-dff628a97a0e");
INSERT INTO GD_NCS
	VALUES ("19f2e53f-b45b-d932-5739-dff628a97a0e");
INSERT INTO DIM_ND
	VALUES (272.000000,
	368.000000,
	"19f2e53f-b45b-d932-5739-dff628a97a0e");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1952.000000,
	"19f2e53f-b45b-d932-5739-dff628a97a0e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("19f2e53f-b45b-d932-5739-dff628a97a0e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("6aa14893-69cd-eb0d-8301-97e90b2ad8fd",
	1760.000000,
	1952.000000,
	"19f2e53f-b45b-d932-5739-dff628a97a0e");
INSERT INTO DIM_CON
	VALUES ("644a0d53-e841-d7a0-8292-6b9eb8be70ee",
	1712.000000,
	2320.000000,
	"19f2e53f-b45b-d932-5739-dff628a97a0e");
INSERT INTO DIM_CON
	VALUES ("06f83dc4-ab29-4d33-e5a5-cd9b2c9c1eae",
	1856.000000,
	1952.000000,
	"19f2e53f-b45b-d932-5739-dff628a97a0e");
INSERT INTO GD_GE
	VALUES ("1c78f6ee-f99a-d2fa-0ecb-2e241885dc39",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test Object C');
INSERT INTO GD_SHP
	VALUES ("1c78f6ee-f99a-d2fa-0ecb-2e241885dc39");
INSERT INTO GD_NCS
	VALUES ("1c78f6ee-f99a-d2fa-0ecb-2e241885dc39");
INSERT INTO DIM_ND
	VALUES (256.000000,
	192.000000,
	"1c78f6ee-f99a-d2fa-0ecb-2e241885dc39");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	2432.000000,
	"1c78f6ee-f99a-d2fa-0ecb-2e241885dc39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1c78f6ee-f99a-d2fa-0ecb-2e241885dc39",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("43a721a4-3801-2698-4c12-661a1f6439a5",
	1712.000000,
	2432.000000,
	"1c78f6ee-f99a-d2fa-0ecb-2e241885dc39");
INSERT INTO GD_GE
	VALUES ("7215bc89-a69b-d03a-de92-6d3b5d15f0e2",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("7215bc89-a69b-d03a-de92-6d3b5d15f0e2");
INSERT INTO GD_NCS
	VALUES ("7215bc89-a69b-d03a-de92-6d3b5d15f0e2");
INSERT INTO DIM_ND
	VALUES (272.000000,
	160.000000,
	"7215bc89-a69b-d03a-de92-6d3b5d15f0e2");
INSERT INTO DIM_GE
	VALUES (1344.000000,
	1536.000000,
	"7215bc89-a69b-d03a-de92-6d3b5d15f0e2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7215bc89-a69b-d03a-de92-6d3b5d15f0e2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("80bcb800-2313-0b54-1299-2bf78ab2420f",
	1392.000000,
	1696.000000,
	"7215bc89-a69b-d03a-de92-6d3b5d15f0e2");
INSERT INTO DIM_CON
	VALUES ("29c92c7a-2b62-bbdb-02f3-9053c9a799e1",
	1552.000000,
	1696.000000,
	"7215bc89-a69b-d03a-de92-6d3b5d15f0e2");
INSERT INTO GD_GE
	VALUES ("3b95960a-8306-30ad-8f78-daa6b5113fea",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Other Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("3b95960a-8306-30ad-8f78-daa6b5113fea");
INSERT INTO GD_NCS
	VALUES ("3b95960a-8306-30ad-8f78-daa6b5113fea");
INSERT INTO DIM_ND
	VALUES (256.000000,
	192.000000,
	"3b95960a-8306-30ad-8f78-daa6b5113fea");
INSERT INTO DIM_GE
	VALUES (1344.000000,
	1856.000000,
	"3b95960a-8306-30ad-8f78-daa6b5113fea",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3b95960a-8306-30ad-8f78-daa6b5113fea",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("47f02c9e-17d9-cbc0-3c2d-bf541d61a532",
	1392.000000,
	1856.000000,
	"3b95960a-8306-30ad-8f78-daa6b5113fea");
INSERT INTO DIM_CON
	VALUES ("24381660-90d8-a8b1-8b1f-3c7efcc84ab2",
	1552.000000,
	1856.000000,
	"3b95960a-8306-30ad-8f78-daa6b5113fea");
INSERT INTO DIM_CON
	VALUES ("de54f8b8-9eeb-20d4-c131-1095ee2e9df1",
	1456.000000,
	2048.000000,
	"3b95960a-8306-30ad-8f78-daa6b5113fea");
INSERT INTO GD_GE
	VALUES ("0c507c89-f3c2-8454-c02d-822eebff7252",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Third Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("0c507c89-f3c2-8454-c02d-822eebff7252");
INSERT INTO GD_NCS
	VALUES ("0c507c89-f3c2-8454-c02d-822eebff7252");
INSERT INTO DIM_ND
	VALUES (240.000000,
	160.000000,
	"0c507c89-f3c2-8454-c02d-822eebff7252");
INSERT INTO DIM_GE
	VALUES (1360.000000,
	2160.000000,
	"0c507c89-f3c2-8454-c02d-822eebff7252",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0c507c89-f3c2-8454-c02d-822eebff7252",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("e7478e8b-df94-1670-cba2-7aa4bc7d35a6",
	1456.000000,
	2160.000000,
	"0c507c89-f3c2-8454-c02d-822eebff7252");
INSERT INTO GD_GE
	VALUES ("71275bc3-fe2d-3151-da12-b80f4df516ef",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test');
INSERT INTO GD_SHP
	VALUES ("71275bc3-fe2d-3151-da12-b80f4df516ef");
INSERT INTO GD_NCS
	VALUES ("71275bc3-fe2d-3151-da12-b80f4df516ef");
INSERT INTO DIM_ND
	VALUES (304.000000,
	160.000000,
	"71275bc3-fe2d-3151-da12-b80f4df516ef");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1536.000000,
	"71275bc3-fe2d-3151-da12-b80f4df516ef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("71275bc3-fe2d-3151-da12-b80f4df516ef",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c73bbff4-bc6e-5fc0-843d-40deead96154",
	1024.000000,
	1696.000000,
	"71275bc3-fe2d-3151-da12-b80f4df516ef");
INSERT INTO DIM_CON
	VALUES ("a0f7cd07-acb2-bc5e-3e61-ab1c5f5318be",
	1200.000000,
	1696.000000,
	"71275bc3-fe2d-3151-da12-b80f4df516ef");
INSERT INTO GD_GE
	VALUES ("a5f0c872-be41-df98-f096-af440dfd8399",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Other Boolean Test');
INSERT INTO GD_SHP
	VALUES ("a5f0c872-be41-df98-f096-af440dfd8399");
INSERT INTO GD_NCS
	VALUES ("a5f0c872-be41-df98-f096-af440dfd8399");
INSERT INTO DIM_ND
	VALUES (320.000000,
	208.000000,
	"a5f0c872-be41-df98-f096-af440dfd8399");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1856.000000,
	"a5f0c872-be41-df98-f096-af440dfd8399",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a5f0c872-be41-df98-f096-af440dfd8399",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("1567a079-dfb4-5491-d19e-5b4ba6993f0a",
	1024.000000,
	1856.000000,
	"a5f0c872-be41-df98-f096-af440dfd8399");
INSERT INTO DIM_CON
	VALUES ("62037124-779e-897d-9d1c-3470569a0fa9",
	1200.000000,
	1856.000000,
	"a5f0c872-be41-df98-f096-af440dfd8399");
INSERT INTO DIM_CON
	VALUES ("c605333f-ab6e-5c28-c312-c43d2c009b75",
	1104.000000,
	2064.000000,
	"a5f0c872-be41-df98-f096-af440dfd8399");
INSERT INTO GD_GE
	VALUES ("fe9eabc1-27a5-b9eb-6b7b-73e534289cd5",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Third Boolean Test');
INSERT INTO GD_SHP
	VALUES ("fe9eabc1-27a5-b9eb-6b7b-73e534289cd5");
INSERT INTO GD_NCS
	VALUES ("fe9eabc1-27a5-b9eb-6b7b-73e534289cd5");
INSERT INTO DIM_ND
	VALUES (288.000000,
	176.000000,
	"fe9eabc1-27a5-b9eb-6b7b-73e534289cd5");
INSERT INTO DIM_GE
	VALUES (976.000000,
	2160.000000,
	"fe9eabc1-27a5-b9eb-6b7b-73e534289cd5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fe9eabc1-27a5-b9eb-6b7b-73e534289cd5",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("e5be11dc-5872-b408-8e73-568b93d08592",
	1104.000000,
	2160.000000,
	"fe9eabc1-27a5-b9eb-6b7b-73e534289cd5");
INSERT INTO GD_GE
	VALUES ("3864a09e-e7e0-9709-8990-8549fd48af28",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance');
INSERT INTO GD_SHP
	VALUES ("3864a09e-e7e0-9709-8990-8549fd48af28");
INSERT INTO GD_NCS
	VALUES ("3864a09e-e7e0-9709-8990-8549fd48af28");
INSERT INTO DIM_ND
	VALUES (256.000000,
	160.000000,
	"3864a09e-e7e0-9709-8990-8549fd48af28");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1312.000000,
	"3864a09e-e7e0-9709-8990-8549fd48af28",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3864a09e-e7e0-9709-8990-8549fd48af28",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("dba82a69-3e30-a5dd-3dc3-9321cdc21860",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R1');
INSERT INTO GD_CON
	VALUES ("dba82a69-3e30-a5dd-3dc3-9321cdc21860",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("70ba3a33-991e-0287-c5a0-bf69da35092b",
	"dba82a69-3e30-a5dd-3dc3-9321cdc21860",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"70ba3a33-991e-0287-c5a0-bf69da35092b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"70ba3a33-991e-0287-c5a0-bf69da35092b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("70ba3a33-991e-0287-c5a0-bf69da35092b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b2c92ee7-f786-c437-044e-69dc7f3b4964",
	"dba82a69-3e30-a5dd-3dc3-9321cdc21860",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"b2c92ee7-f786-c437-044e-69dc7f3b4964");
INSERT INTO DIM_GE
	VALUES (1744.000000,
	1888.000000,
	"b2c92ee7-f786-c437-044e-69dc7f3b4964",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b2c92ee7-f786-c437-044e-69dc7f3b4964",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("14e1811d-9485-ea5b-d450-b9c714bbde84",
	"dba82a69-3e30-a5dd-3dc3-9321cdc21860",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"14e1811d-9485-ea5b-d450-b9c714bbde84");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"14e1811d-9485-ea5b-d450-b9c714bbde84",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("14e1811d-9485-ea5b-d450-b9c714bbde84",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("af2b8864-872c-7885-318c-3dc37e55e3f5",
	"dba82a69-3e30-a5dd-3dc3-9321cdc21860",
	"00000000-0000-0000-0000-000000000000",
	"57bc8aa5-50dc-9cfa-c186-c1a56418c801",
	"cddd54d9-32e9-8933-d41c-0b86f38d2883");
INSERT INTO DIM_WAY
	VALUES ("57bc8aa5-50dc-9cfa-c186-c1a56418c801",
	1760.000000,
	1952.000000,
	"dba82a69-3e30-a5dd-3dc3-9321cdc21860",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("cddd54d9-32e9-8933-d41c-0b86f38d2883",
	1760.000000,
	1856.000000,
	"dba82a69-3e30-a5dd-3dc3-9321cdc21860",
	"00000000-0000-0000-0000-000000000000",
	"57bc8aa5-50dc-9cfa-c186-c1a56418c801");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"dba82a69-3e30-a5dd-3dc3-9321cdc21860",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dba82a69-3e30-a5dd-3dc3-9321cdc21860",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("6aa14893-69cd-eb0d-8301-97e90b2ad8fd",
	"2e374ffd-37b1-c912-a625-360bad7248e3",
	"dba82a69-3e30-a5dd-3dc3-9321cdc21860");
INSERT INTO GD_GE
	VALUES ("b35ffd8f-1627-e256-aa5a-90c2b2551e8c",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R2');
INSERT INTO GD_CON
	VALUES ("b35ffd8f-1627-e256-aa5a-90c2b2551e8c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f60f7d67-3522-7d51-2d8a-829504fca96c",
	"b35ffd8f-1627-e256-aa5a-90c2b2551e8c",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f60f7d67-3522-7d51-2d8a-829504fca96c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f60f7d67-3522-7d51-2d8a-829504fca96c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f60f7d67-3522-7d51-2d8a-829504fca96c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2fc3c900-8303-17d0-01f3-6272dd3a431c",
	"b35ffd8f-1627-e256-aa5a-90c2b2551e8c",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"2fc3c900-8303-17d0-01f3-6272dd3a431c");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1408.000000,
	"2fc3c900-8303-17d0-01f3-6272dd3a431c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2fc3c900-8303-17d0-01f3-6272dd3a431c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3094a1f2-f6a7-4663-d9b5-897c2487e383",
	"b35ffd8f-1627-e256-aa5a-90c2b2551e8c",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3094a1f2-f6a7-4663-d9b5-897c2487e383");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3094a1f2-f6a7-4663-d9b5-897c2487e383",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3094a1f2-f6a7-4663-d9b5-897c2487e383",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("52ecec6f-e889-6f04-cfde-bbe669629ff8",
	"b35ffd8f-1627-e256-aa5a-90c2b2551e8c",
	"00000000-0000-0000-0000-000000000000",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"0abb0503-a82d-4e25-fcf3-21ea4f397faa");
INSERT INTO DIM_WAY
	VALUES ("890e87fe-67d6-51c3-c137-598ec4bf5f08",
	1888.000000,
	1440.000000,
	"b35ffd8f-1627-e256-aa5a-90c2b2551e8c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("0abb0503-a82d-4e25-fcf3-21ea4f397faa",
	2112.000000,
	1440.000000,
	"b35ffd8f-1627-e256-aa5a-90c2b2551e8c",
	"00000000-0000-0000-0000-000000000000",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b35ffd8f-1627-e256-aa5a-90c2b2551e8c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b35ffd8f-1627-e256-aa5a-90c2b2551e8c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("fa540fff-67c0-31e1-a5c6-36dbb41f43b0",
	"fd8a0cef-bfbb-9235-0114-cbe92d082a57",
	"b35ffd8f-1627-e256-aa5a-90c2b2551e8c");
INSERT INTO GD_GE
	VALUES ("3e70e3e9-d8bd-83dc-d93a-8ca54654c18b",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R3');
INSERT INTO GD_CON
	VALUES ("3e70e3e9-d8bd-83dc-d93a-8ca54654c18b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5a327a44-386a-0333-97fb-7a8ad119affc",
	"3e70e3e9-d8bd-83dc-d93a-8ca54654c18b",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5a327a44-386a-0333-97fb-7a8ad119affc");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5a327a44-386a-0333-97fb-7a8ad119affc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5a327a44-386a-0333-97fb-7a8ad119affc",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("593f252c-d3d6-d1fa-0545-b0911953550f",
	"3e70e3e9-d8bd-83dc-d93a-8ca54654c18b",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"593f252c-d3d6-d1fa-0545-b0911953550f");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1552.000000,
	"593f252c-d3d6-d1fa-0545-b0911953550f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("593f252c-d3d6-d1fa-0545-b0911953550f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8f19d814-4ea3-9dcd-7c94-0ce090e0e668",
	"3e70e3e9-d8bd-83dc-d93a-8ca54654c18b",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8f19d814-4ea3-9dcd-7c94-0ce090e0e668");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8f19d814-4ea3-9dcd-7c94-0ce090e0e668",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8f19d814-4ea3-9dcd-7c94-0ce090e0e668",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2295cec7-da66-9f8d-c458-84f42a990779",
	"3e70e3e9-d8bd-83dc-d93a-8ca54654c18b",
	"00000000-0000-0000-0000-000000000000",
	"84dab20b-7e46-b310-f1a1-7a2b8b4cc048",
	"17cd2efb-57ff-5986-61a7-19712b3d926d");
INSERT INTO DIM_WAY
	VALUES ("84dab20b-7e46-b310-f1a1-7a2b8b4cc048",
	1888.000000,
	1584.000000,
	"3e70e3e9-d8bd-83dc-d93a-8ca54654c18b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("17cd2efb-57ff-5986-61a7-19712b3d926d",
	2112.000000,
	1584.000000,
	"3e70e3e9-d8bd-83dc-d93a-8ca54654c18b",
	"00000000-0000-0000-0000-000000000000",
	"84dab20b-7e46-b310-f1a1-7a2b8b4cc048");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3e70e3e9-d8bd-83dc-d93a-8ca54654c18b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3e70e3e9-d8bd-83dc-d93a-8ca54654c18b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("83719287-ec5b-e685-8e2f-20f99e1346c7",
	"ba0e7492-1694-623f-a2e6-f5ca8e2ca2f9",
	"3e70e3e9-d8bd-83dc-d93a-8ca54654c18b");
INSERT INTO GD_GE
	VALUES ("525b0666-0835-5b3b-4c08-0a4f79bfba42",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R4');
INSERT INTO GD_CON
	VALUES ("525b0666-0835-5b3b-4c08-0a4f79bfba42",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e18bc26a-2df5-7b9c-d520-7f81b08f1f6e",
	"525b0666-0835-5b3b-4c08-0a4f79bfba42",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e18bc26a-2df5-7b9c-d520-7f81b08f1f6e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e18bc26a-2df5-7b9c-d520-7f81b08f1f6e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e18bc26a-2df5-7b9c-d520-7f81b08f1f6e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("31014c50-9d65-01ee-8327-8c9a356bd4f8",
	"525b0666-0835-5b3b-4c08-0a4f79bfba42",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"31014c50-9d65-01ee-8327-8c9a356bd4f8");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1696.000000,
	"31014c50-9d65-01ee-8327-8c9a356bd4f8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("31014c50-9d65-01ee-8327-8c9a356bd4f8",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a3e7ba55-90c3-d2f2-8ce3-ddfdfb2c97c5",
	"525b0666-0835-5b3b-4c08-0a4f79bfba42",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a3e7ba55-90c3-d2f2-8ce3-ddfdfb2c97c5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a3e7ba55-90c3-d2f2-8ce3-ddfdfb2c97c5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a3e7ba55-90c3-d2f2-8ce3-ddfdfb2c97c5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2cfbdbdb-372b-f364-ed71-fd5521b737ac",
	"525b0666-0835-5b3b-4c08-0a4f79bfba42",
	"00000000-0000-0000-0000-000000000000",
	"38fc9ba1-0375-fe6d-7153-f933b58d9f6c",
	"05bf503a-d2b2-923a-bc44-e1b3fcc5cfab");
INSERT INTO DIM_WAY
	VALUES ("38fc9ba1-0375-fe6d-7153-f933b58d9f6c",
	1888.000000,
	1728.000000,
	"525b0666-0835-5b3b-4c08-0a4f79bfba42",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("05bf503a-d2b2-923a-bc44-e1b3fcc5cfab",
	2112.000000,
	1728.000000,
	"525b0666-0835-5b3b-4c08-0a4f79bfba42",
	"00000000-0000-0000-0000-000000000000",
	"38fc9ba1-0375-fe6d-7153-f933b58d9f6c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"525b0666-0835-5b3b-4c08-0a4f79bfba42",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("525b0666-0835-5b3b-4c08-0a4f79bfba42",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("7a2b13f9-a81e-b11f-da35-9276ab18430e",
	"c8a25df0-0122-2052-9615-98def18bbcec",
	"525b0666-0835-5b3b-4c08-0a4f79bfba42");
INSERT INTO GD_GE
	VALUES ("0f9911fb-c718-acfd-4930-ea4e2c4b89ca",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R5');
INSERT INTO GD_CON
	VALUES ("0f9911fb-c718-acfd-4930-ea4e2c4b89ca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7bcf9359-bb27-c1a5-ea35-9577677a62f2",
	"0f9911fb-c718-acfd-4930-ea4e2c4b89ca",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7bcf9359-bb27-c1a5-ea35-9577677a62f2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7bcf9359-bb27-c1a5-ea35-9577677a62f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7bcf9359-bb27-c1a5-ea35-9577677a62f2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8e485a25-4be6-9395-3e92-db117924c321",
	"0f9911fb-c718-acfd-4930-ea4e2c4b89ca",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"8e485a25-4be6-9395-3e92-db117924c321");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1440.000000,
	"8e485a25-4be6-9395-3e92-db117924c321",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8e485a25-4be6-9395-3e92-db117924c321",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9874bdba-99f6-6f5a-21f2-ea2cd40ee706",
	"0f9911fb-c718-acfd-4930-ea4e2c4b89ca",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9874bdba-99f6-6f5a-21f2-ea2cd40ee706");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9874bdba-99f6-6f5a-21f2-ea2cd40ee706",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9874bdba-99f6-6f5a-21f2-ea2cd40ee706",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("51d79d72-bd84-28af-46ef-d0c23cb357e6",
	"0f9911fb-c718-acfd-4930-ea4e2c4b89ca",
	"00000000-0000-0000-0000-000000000000",
	"cbe85b09-8b50-1ae8-c389-e3af4b572b10",
	"f85e52f4-c57a-bbc1-b8ca-7fa2d25a28f1");
INSERT INTO DIM_WAY
	VALUES ("cbe85b09-8b50-1ae8-c389-e3af4b572b10",
	1888.000000,
	1472.000000,
	"0f9911fb-c718-acfd-4930-ea4e2c4b89ca",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("f85e52f4-c57a-bbc1-b8ca-7fa2d25a28f1",
	2112.000000,
	1472.000000,
	"0f9911fb-c718-acfd-4930-ea4e2c4b89ca",
	"00000000-0000-0000-0000-000000000000",
	"cbe85b09-8b50-1ae8-c389-e3af4b572b10");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0f9911fb-c718-acfd-4930-ea4e2c4b89ca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0f9911fb-c718-acfd-4930-ea4e2c4b89ca",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("f06e05c0-7a42-c962-214e-9f09ffb35b3b",
	"d21e6fa3-f449-4acd-b20d-8fa0b9089aff",
	"0f9911fb-c718-acfd-4930-ea4e2c4b89ca");
INSERT INTO GD_GE
	VALUES ("f7d7563e-c0f7-f9e3-3d56-aed68dd6f4e2",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R6');
INSERT INTO GD_CON
	VALUES ("f7d7563e-c0f7-f9e3-3d56-aed68dd6f4e2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8478580e-b452-899c-a265-d7db4077d65e",
	"f7d7563e-c0f7-f9e3-3d56-aed68dd6f4e2",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8478580e-b452-899c-a265-d7db4077d65e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8478580e-b452-899c-a265-d7db4077d65e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8478580e-b452-899c-a265-d7db4077d65e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2322c9da-d5b7-5f29-2555-f8b27be8b997",
	"f7d7563e-c0f7-f9e3-3d56-aed68dd6f4e2",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"2322c9da-d5b7-5f29-2555-f8b27be8b997");
INSERT INTO DIM_GE
	VALUES (1696.000000,
	2344.000000,
	"2322c9da-d5b7-5f29-2555-f8b27be8b997",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2322c9da-d5b7-5f29-2555-f8b27be8b997",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4b8b2b9d-f2c7-5fb5-07a4-3cce120cedcf",
	"f7d7563e-c0f7-f9e3-3d56-aed68dd6f4e2",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4b8b2b9d-f2c7-5fb5-07a4-3cce120cedcf");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4b8b2b9d-f2c7-5fb5-07a4-3cce120cedcf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4b8b2b9d-f2c7-5fb5-07a4-3cce120cedcf",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("d24ff522-140a-7e51-162e-d417afd5f26f",
	"f7d7563e-c0f7-f9e3-3d56-aed68dd6f4e2",
	"00000000-0000-0000-0000-000000000000",
	"34443635-03e1-2f59-4684-f25bb12d61f4",
	"4d297879-ae5d-638e-0e3b-46b89c80d821");
INSERT INTO DIM_WAY
	VALUES ("34443635-03e1-2f59-4684-f25bb12d61f4",
	1712.000000,
	2320.000000,
	"f7d7563e-c0f7-f9e3-3d56-aed68dd6f4e2",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("4d297879-ae5d-638e-0e3b-46b89c80d821",
	1712.000000,
	2432.000000,
	"f7d7563e-c0f7-f9e3-3d56-aed68dd6f4e2",
	"00000000-0000-0000-0000-000000000000",
	"34443635-03e1-2f59-4684-f25bb12d61f4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f7d7563e-c0f7-f9e3-3d56-aed68dd6f4e2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f7d7563e-c0f7-f9e3-3d56-aed68dd6f4e2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("644a0d53-e841-d7a0-8292-6b9eb8be70ee",
	"43a721a4-3801-2698-4c12-661a1f6439a5",
	"f7d7563e-c0f7-f9e3-3d56-aed68dd6f4e2");
INSERT INTO GD_GE
	VALUES ("56930de3-0700-f511-74ee-e27a7dd61778",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R8');
INSERT INTO GD_CON
	VALUES ("56930de3-0700-f511-74ee-e27a7dd61778",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7ea551d6-3d82-e6ae-b00e-ae0093983f3c",
	"56930de3-0700-f511-74ee-e27a7dd61778",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7ea551d6-3d82-e6ae-b00e-ae0093983f3c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7ea551d6-3d82-e6ae-b00e-ae0093983f3c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7ea551d6-3d82-e6ae-b00e-ae0093983f3c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cfeccf38-2e7f-4433-c009-aa36a56a0b78",
	"56930de3-0700-f511-74ee-e27a7dd61778",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"cfeccf38-2e7f-4433-c009-aa36a56a0b78");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1888.000000,
	"cfeccf38-2e7f-4433-c009-aa36a56a0b78",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cfeccf38-2e7f-4433-c009-aa36a56a0b78",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("450a1e17-b63e-bb76-009f-b65f8183c25b",
	"56930de3-0700-f511-74ee-e27a7dd61778",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"450a1e17-b63e-bb76-009f-b65f8183c25b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"450a1e17-b63e-bb76-009f-b65f8183c25b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("450a1e17-b63e-bb76-009f-b65f8183c25b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("44773c1f-d101-84f7-3893-253b0df96691",
	"56930de3-0700-f511-74ee-e27a7dd61778",
	"00000000-0000-0000-0000-000000000000",
	"85eb7e26-6f57-59cd-8347-f69387954ee2",
	"8c656634-5d5e-1584-ffdf-4d3d96d9a5fc");
INSERT INTO DIM_WAY
	VALUES ("85eb7e26-6f57-59cd-8347-f69387954ee2",
	1856.000000,
	1856.000000,
	"56930de3-0700-f511-74ee-e27a7dd61778",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("8c656634-5d5e-1584-ffdf-4d3d96d9a5fc",
	1856.000000,
	1952.000000,
	"56930de3-0700-f511-74ee-e27a7dd61778",
	"00000000-0000-0000-0000-000000000000",
	"85eb7e26-6f57-59cd-8347-f69387954ee2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"56930de3-0700-f511-74ee-e27a7dd61778",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("56930de3-0700-f511-74ee-e27a7dd61778",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("3ae0dce7-ae72-0a58-7451-578a9cf7dc6c",
	"06f83dc4-ab29-4d33-e5a5-cd9b2c9c1eae",
	"56930de3-0700-f511-74ee-e27a7dd61778");
INSERT INTO GD_GE
	VALUES ("ed221b84-7777-4583-5d76-13ba7a7ef10d",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R9');
INSERT INTO GD_CON
	VALUES ("ed221b84-7777-4583-5d76-13ba7a7ef10d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("141c6ddb-010c-c84d-00fc-80db1e783c96",
	"ed221b84-7777-4583-5d76-13ba7a7ef10d",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"141c6ddb-010c-c84d-00fc-80db1e783c96");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"141c6ddb-010c-c84d-00fc-80db1e783c96",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("141c6ddb-010c-c84d-00fc-80db1e783c96",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ba2612dc-0387-bfb3-c1e9-38e8561fde82",
	"ed221b84-7777-4583-5d76-13ba7a7ef10d",
	3,
	14.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"ba2612dc-0387-bfb3-c1e9-38e8561fde82");
INSERT INTO DIM_GE
	VALUES (1390.000000,
	1749.000000,
	"ba2612dc-0387-bfb3-c1e9-38e8561fde82",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ba2612dc-0387-bfb3-c1e9-38e8561fde82",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4570b430-2a5c-dfbd-8c9f-892c6d8deec1",
	"ed221b84-7777-4583-5d76-13ba7a7ef10d",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4570b430-2a5c-dfbd-8c9f-892c6d8deec1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4570b430-2a5c-dfbd-8c9f-892c6d8deec1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4570b430-2a5c-dfbd-8c9f-892c6d8deec1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("f6ffad59-311d-c3f2-e57c-9e94537c16cd",
	"ed221b84-7777-4583-5d76-13ba7a7ef10d",
	"00000000-0000-0000-0000-000000000000",
	"13e03e48-2692-4a6c-0cb8-4f2c506da1d1",
	"0e09c006-8cc3-b0dc-31de-f3ba8d1ce3e3");
INSERT INTO DIM_WAY
	VALUES ("13e03e48-2692-4a6c-0cb8-4f2c506da1d1",
	1392.000000,
	1696.000000,
	"ed221b84-7777-4583-5d76-13ba7a7ef10d",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("0e09c006-8cc3-b0dc-31de-f3ba8d1ce3e3",
	1392.000000,
	1856.000000,
	"ed221b84-7777-4583-5d76-13ba7a7ef10d",
	"00000000-0000-0000-0000-000000000000",
	"13e03e48-2692-4a6c-0cb8-4f2c506da1d1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ed221b84-7777-4583-5d76-13ba7a7ef10d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ed221b84-7777-4583-5d76-13ba7a7ef10d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("80bcb800-2313-0b54-1299-2bf78ab2420f",
	"47f02c9e-17d9-cbc0-3c2d-bf541d61a532",
	"ed221b84-7777-4583-5d76-13ba7a7ef10d");
INSERT INTO GD_GE
	VALUES ("2199e6da-04a1-9748-1d89-160015008149",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R10');
INSERT INTO GD_CON
	VALUES ("2199e6da-04a1-9748-1d89-160015008149",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4148914b-366f-7ab8-fcca-8409ac974888",
	"2199e6da-04a1-9748-1d89-160015008149",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4148914b-366f-7ab8-fcca-8409ac974888");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4148914b-366f-7ab8-fcca-8409ac974888",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4148914b-366f-7ab8-fcca-8409ac974888",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f11afe8c-038b-8c21-2d51-3ba816460061",
	"2199e6da-04a1-9748-1d89-160015008149",
	3,
	16.000000,
	3.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"f11afe8c-038b-8c21-2d51-3ba816460061");
INSERT INTO DIM_GE
	VALUES (1552.000000,
	1756.000000,
	"f11afe8c-038b-8c21-2d51-3ba816460061",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f11afe8c-038b-8c21-2d51-3ba816460061",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0aa0b6f8-f761-9fd6-578f-227efd1ec122",
	"2199e6da-04a1-9748-1d89-160015008149",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0aa0b6f8-f761-9fd6-578f-227efd1ec122");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0aa0b6f8-f761-9fd6-578f-227efd1ec122",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0aa0b6f8-f761-9fd6-578f-227efd1ec122",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("c55134d7-56c6-9bc6-85f3-e2ba1f638526",
	"2199e6da-04a1-9748-1d89-160015008149",
	"00000000-0000-0000-0000-000000000000",
	"8095cd03-b5c9-7063-8e2d-8f17f52f6c25",
	"a0550ed8-53ed-383f-496c-03e467afbe0f");
INSERT INTO DIM_WAY
	VALUES ("8095cd03-b5c9-7063-8e2d-8f17f52f6c25",
	1552.000000,
	1696.000000,
	"2199e6da-04a1-9748-1d89-160015008149",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a0550ed8-53ed-383f-496c-03e467afbe0f",
	1552.000000,
	1856.000000,
	"2199e6da-04a1-9748-1d89-160015008149",
	"00000000-0000-0000-0000-000000000000",
	"8095cd03-b5c9-7063-8e2d-8f17f52f6c25");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2199e6da-04a1-9748-1d89-160015008149",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2199e6da-04a1-9748-1d89-160015008149",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("29c92c7a-2b62-bbdb-02f3-9053c9a799e1",
	"24381660-90d8-a8b1-8b1f-3c7efcc84ab2",
	"2199e6da-04a1-9748-1d89-160015008149");
INSERT INTO GD_GE
	VALUES ("7f4c2925-1cf7-9a8b-c87e-530db9cd01fb",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R11');
INSERT INTO GD_CON
	VALUES ("7f4c2925-1cf7-9a8b-c87e-530db9cd01fb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5d808d73-b3d0-1508-7c63-c161859ea2a8",
	"7f4c2925-1cf7-9a8b-c87e-530db9cd01fb",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5d808d73-b3d0-1508-7c63-c161859ea2a8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5d808d73-b3d0-1508-7c63-c161859ea2a8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5d808d73-b3d0-1508-7c63-c161859ea2a8",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e33cb80d-69f6-5e6c-3945-f92753b7a73d",
	"7f4c2925-1cf7-9a8b-c87e-530db9cd01fb",
	3,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e33cb80d-69f6-5e6c-3945-f92753b7a73d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e33cb80d-69f6-5e6c-3945-f92753b7a73d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e33cb80d-69f6-5e6c-3945-f92753b7a73d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ece784e4-2846-3fc3-6080-83b4cb1b9f80",
	"7f4c2925-1cf7-9a8b-c87e-530db9cd01fb",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ece784e4-2846-3fc3-6080-83b4cb1b9f80");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ece784e4-2846-3fc3-6080-83b4cb1b9f80",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ece784e4-2846-3fc3-6080-83b4cb1b9f80",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("36f86b69-60c1-49db-3425-7127783c9951",
	"7f4c2925-1cf7-9a8b-c87e-530db9cd01fb",
	"00000000-0000-0000-0000-000000000000",
	"cc58d606-2ecc-61ea-3aaf-a3aa83160e4d",
	"9c8bdbb8-9328-5773-92c7-9160c0f77ae8");
INSERT INTO DIM_WAY
	VALUES ("cc58d606-2ecc-61ea-3aaf-a3aa83160e4d",
	1456.000000,
	2048.000000,
	"7f4c2925-1cf7-9a8b-c87e-530db9cd01fb",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("9c8bdbb8-9328-5773-92c7-9160c0f77ae8",
	1456.000000,
	2160.000000,
	"7f4c2925-1cf7-9a8b-c87e-530db9cd01fb",
	"00000000-0000-0000-0000-000000000000",
	"cc58d606-2ecc-61ea-3aaf-a3aa83160e4d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7f4c2925-1cf7-9a8b-c87e-530db9cd01fb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7f4c2925-1cf7-9a8b-c87e-530db9cd01fb",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("de54f8b8-9eeb-20d4-c131-1095ee2e9df1",
	"e7478e8b-df94-1670-cba2-7aa4bc7d35a6",
	"7f4c2925-1cf7-9a8b-c87e-530db9cd01fb");
INSERT INTO GD_GE
	VALUES ("e75454a2-d4ef-8eba-6d31-873d16ddb8ae",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R12');
INSERT INTO GD_CON
	VALUES ("e75454a2-d4ef-8eba-6d31-873d16ddb8ae",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6d0769d5-7b67-6028-761b-b32862fc7aba",
	"e75454a2-d4ef-8eba-6d31-873d16ddb8ae",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6d0769d5-7b67-6028-761b-b32862fc7aba");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6d0769d5-7b67-6028-761b-b32862fc7aba",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6d0769d5-7b67-6028-761b-b32862fc7aba",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c7cf1b4f-dd9e-93dd-3f87-423f601003e4",
	"e75454a2-d4ef-8eba-6d31-873d16ddb8ae",
	3,
	18.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"c7cf1b4f-dd9e-93dd-3f87-423f601003e4");
INSERT INTO DIM_GE
	VALUES (1026.000000,
	1761.000000,
	"c7cf1b4f-dd9e-93dd-3f87-423f601003e4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c7cf1b4f-dd9e-93dd-3f87-423f601003e4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bb3861d6-c575-4198-9112-5817fbd7f8be",
	"e75454a2-d4ef-8eba-6d31-873d16ddb8ae",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"bb3861d6-c575-4198-9112-5817fbd7f8be");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bb3861d6-c575-4198-9112-5817fbd7f8be",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bb3861d6-c575-4198-9112-5817fbd7f8be",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("65735b91-4834-0000-2da2-152ad040ee1f",
	"e75454a2-d4ef-8eba-6d31-873d16ddb8ae",
	"00000000-0000-0000-0000-000000000000",
	"1dd8f8c0-a76e-98ce-1e9c-b4cb303fd4d5",
	"23a8af6d-90f9-b2db-3353-092a21d2bcfe");
INSERT INTO DIM_WAY
	VALUES ("1dd8f8c0-a76e-98ce-1e9c-b4cb303fd4d5",
	1024.000000,
	1696.000000,
	"e75454a2-d4ef-8eba-6d31-873d16ddb8ae",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("23a8af6d-90f9-b2db-3353-092a21d2bcfe",
	1024.000000,
	1856.000000,
	"e75454a2-d4ef-8eba-6d31-873d16ddb8ae",
	"00000000-0000-0000-0000-000000000000",
	"1dd8f8c0-a76e-98ce-1e9c-b4cb303fd4d5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e75454a2-d4ef-8eba-6d31-873d16ddb8ae",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e75454a2-d4ef-8eba-6d31-873d16ddb8ae",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("c73bbff4-bc6e-5fc0-843d-40deead96154",
	"1567a079-dfb4-5491-d19e-5b4ba6993f0a",
	"e75454a2-d4ef-8eba-6d31-873d16ddb8ae");
INSERT INTO GD_GE
	VALUES ("a739105b-6872-20c0-a34d-08f4c938cc52",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R13');
INSERT INTO GD_CON
	VALUES ("a739105b-6872-20c0-a34d-08f4c938cc52",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c1e9536b-9b09-1f21-e338-13e98a34acd5",
	"a739105b-6872-20c0-a34d-08f4c938cc52",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c1e9536b-9b09-1f21-e338-13e98a34acd5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c1e9536b-9b09-1f21-e338-13e98a34acd5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c1e9536b-9b09-1f21-e338-13e98a34acd5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("92e608bc-23d1-ec7f-724e-429d441e9ca5",
	"a739105b-6872-20c0-a34d-08f4c938cc52",
	3,
	10.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"92e608bc-23d1-ec7f-724e-429d441e9ca5");
INSERT INTO DIM_GE
	VALUES (1194.000000,
	1760.000000,
	"92e608bc-23d1-ec7f-724e-429d441e9ca5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("92e608bc-23d1-ec7f-724e-429d441e9ca5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("536699a1-95f5-8516-fc53-ba82e232015e",
	"a739105b-6872-20c0-a34d-08f4c938cc52",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"536699a1-95f5-8516-fc53-ba82e232015e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"536699a1-95f5-8516-fc53-ba82e232015e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("536699a1-95f5-8516-fc53-ba82e232015e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("862ac7a4-6866-72bb-a55d-6023755306d2",
	"a739105b-6872-20c0-a34d-08f4c938cc52",
	"00000000-0000-0000-0000-000000000000",
	"3a932c57-bc11-c4e9-045c-74c748cea3a2",
	"b396e27f-bb91-4456-f540-917735e106b4");
INSERT INTO DIM_WAY
	VALUES ("3a932c57-bc11-c4e9-045c-74c748cea3a2",
	1200.000000,
	1696.000000,
	"a739105b-6872-20c0-a34d-08f4c938cc52",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("b396e27f-bb91-4456-f540-917735e106b4",
	1200.000000,
	1856.000000,
	"a739105b-6872-20c0-a34d-08f4c938cc52",
	"00000000-0000-0000-0000-000000000000",
	"3a932c57-bc11-c4e9-045c-74c748cea3a2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a739105b-6872-20c0-a34d-08f4c938cc52",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a739105b-6872-20c0-a34d-08f4c938cc52",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a0f7cd07-acb2-bc5e-3e61-ab1c5f5318be",
	"62037124-779e-897d-9d1c-3470569a0fa9",
	"a739105b-6872-20c0-a34d-08f4c938cc52");
INSERT INTO GD_GE
	VALUES ("5f7f6de3-a132-0608-71cc-722ae40aaae7",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R14');
INSERT INTO GD_CON
	VALUES ("5f7f6de3-a132-0608-71cc-722ae40aaae7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6dbb4c6b-88c6-0e07-25d0-344438bcc180",
	"5f7f6de3-a132-0608-71cc-722ae40aaae7",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6dbb4c6b-88c6-0e07-25d0-344438bcc180");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6dbb4c6b-88c6-0e07-25d0-344438bcc180",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6dbb4c6b-88c6-0e07-25d0-344438bcc180",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8ab1f151-bb77-de29-c278-a6355c19efc9",
	"5f7f6de3-a132-0608-71cc-722ae40aaae7",
	3,
	21.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"8ab1f151-bb77-de29-c278-a6355c19efc9");
INSERT INTO DIM_GE
	VALUES (1109.000000,
	2098.000000,
	"8ab1f151-bb77-de29-c278-a6355c19efc9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8ab1f151-bb77-de29-c278-a6355c19efc9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8618a956-5eb2-f6b7-55f9-487f4fd0b995",
	"5f7f6de3-a132-0608-71cc-722ae40aaae7",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8618a956-5eb2-f6b7-55f9-487f4fd0b995");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8618a956-5eb2-f6b7-55f9-487f4fd0b995",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8618a956-5eb2-f6b7-55f9-487f4fd0b995",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("3937b92f-e8f4-3f51-d562-e405f3f62458",
	"5f7f6de3-a132-0608-71cc-722ae40aaae7",
	"00000000-0000-0000-0000-000000000000",
	"7e1fe50e-4dab-4a19-f6fa-bd7a0e6d8eda",
	"599ea1d6-595b-7e20-cdb3-c8975ff3ee4a");
INSERT INTO DIM_WAY
	VALUES ("7e1fe50e-4dab-4a19-f6fa-bd7a0e6d8eda",
	1104.000000,
	2064.000000,
	"5f7f6de3-a132-0608-71cc-722ae40aaae7",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("599ea1d6-595b-7e20-cdb3-c8975ff3ee4a",
	1104.000000,
	2160.000000,
	"5f7f6de3-a132-0608-71cc-722ae40aaae7",
	"00000000-0000-0000-0000-000000000000",
	"7e1fe50e-4dab-4a19-f6fa-bd7a0e6d8eda");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5f7f6de3-a132-0608-71cc-722ae40aaae7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5f7f6de3-a132-0608-71cc-722ae40aaae7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("c605333f-ab6e-5c28-c312-c43d2c009b75",
	"e5be11dc-5872-b408-8e73-568b93d08592",
	"5f7f6de3-a132-0608-71cc-722ae40aaae7");
INSERT INTO DIM_DIA
	VALUES ("aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	'',
	0.433884,
	707.000000,
	1216.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	'Any Object',
	8,
	'AO',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	'i_parm_ret_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'LOG::LogFailure(message:"Operation AO::i_parm_ret_i should not have been translated.");
return param.i;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TPARM
	VALUES ("5e6cc7f2-3284-fb66-539e-59825320243f",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_NBATTR
	VALUES ("f2228e50-6bd1-9598-02ae-7f51defb49a8",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_BATTR
	VALUES ("f2228e50-6bd1-9598-02ae-7f51defb49a8",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ATTR
	VALUES ("f2228e50-6bd1-9598-02ae-7f51defb49a8",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	'ao_id',
	'',
	'',
	'ao_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_BATTR
	VALUES ("2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ATTR
	VALUES ("2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"f2228e50-6bd1-9598-02ae-7f51defb49a8",
	'b',
	'',
	'',
	'b',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("be200624-30d5-d348-9648-b696c180ea95",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_BATTR
	VALUES ("be200624-30d5-d348-9648-b696c180ea95",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ATTR
	VALUES ("be200624-30d5-d348-9648-b696c180ea95",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	'i',
	'',
	'',
	'i',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("76ace3b7-9333-cfa2-e7e7-3ca1a75c2ea9",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_BATTR
	VALUES ("76ace3b7-9333-cfa2-e7e7-3ca1a75c2ea9",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ATTR
	VALUES ("76ace3b7-9333-cfa2-e7e7-3ca1a75c2ea9",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"be200624-30d5-d348-9648-b696c180ea95",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("90b4ec41-7a43-5fa7-4576-b48c3e51e620",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_BATTR
	VALUES ("90b4ec41-7a43-5fa7-4576-b48c3e51e620",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ATTR
	VALUES ("90b4ec41-7a43-5fa7-4576-b48c3e51e620",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"76ace3b7-9333-cfa2-e7e7-3ca1a75c2ea9",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("f3716951-41eb-0058-f792-b6bb11cd041a",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_BATTR
	VALUES ("f3716951-41eb-0058-f792-b6bb11cd041a",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ATTR
	VALUES ("f3716951-41eb-0058-f792-b6bb11cd041a",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"90b4ec41-7a43-5fa7-4576-b48c3e51e620",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_OIDA
	VALUES ("f2228e50-6bd1-9598-02ae-7f51defb49a8",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	0,
	'ao_id');
INSERT INTO O_ID
	VALUES (1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ID
	VALUES (2,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO PE_PE
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	'Boolean Expression Test',
	15,
	'BET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("d35abe68-761c-4805-6622-ec58904bb650",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_BATTR
	VALUES ("d35abe68-761c-4805-6622-ec58904bb650",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_ATTR
	VALUES ("d35abe68-761c-4805-6622-ec58904bb650",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5731a408-b0d9-e43c-5a20-bcc9ce92a73e",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_BATTR
	VALUES ("5731a408-b0d9-e43c-5a20-bcc9ce92a73e",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_ATTR
	VALUES ("5731a408-b0d9-e43c-5a20-bcc9ce92a73e",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"d35abe68-761c-4805-6622-ec58904bb650",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("6a8eae6e-d574-7609-6008-2b15b1e1112b",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_BATTR
	VALUES ("6a8eae6e-d574-7609-6008-2b15b1e1112b",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_ATTR
	VALUES ("6a8eae6e-d574-7609-6008-2b15b1e1112b",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"5731a408-b0d9-e43c-5a20-bcc9ce92a73e",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_REF
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	0,
	"4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"ccf70a38-daf9-138f-229a-d539eead1ec6",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb",
	"b13d524e-75cf-e2b2-d0a5-2c7ea47ea340",
	"6677d4a6-76bd-34bb-d740-6dfa7f61ff49",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Other Boolean Expression Test',
	'bfalse',
	'R9');
INSERT INTO O_RATTR
	VALUES ("b13d524e-75cf-e2b2-d0a5-2c7ea47ea340",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("b13d524e-75cf-e2b2-d0a5-2c7ea47ea340",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"6a8eae6e-d574-7609-6008-2b15b1e1112b",
	'r9bfalse',
	'',
	'r9',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	0,
	"5cf88885-59d8-3195-ae35-135d1c796b97",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"ccf70a38-daf9-138f-229a-d539eead1ec6",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb",
	"b5fb9a6e-b745-06b2-4f85-99fb47c62331",
	"1abaa67a-6790-7d12-6bbd-6c896f90ecf0",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Other Boolean Expression Test',
	'btrue',
	'R9');
INSERT INTO O_RATTR
	VALUES ("b5fb9a6e-b745-06b2-4f85-99fb47c62331",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"5cf88885-59d8-3195-ae35-135d1c796b97",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("b5fb9a6e-b745-06b2-4f85-99fb47c62331",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"b13d524e-75cf-e2b2-d0a5-2c7ea47ea340",
	'r9btrue',
	'',
	'r9',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4cd6642b-7b1a-8cd2-f164-e7ab7d51d6f6",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_BATTR
	VALUES ("4cd6642b-7b1a-8cd2-f164-e7ab7d51d6f6",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_ATTR
	VALUES ("4cd6642b-7b1a-8cd2-f164-e7ab7d51d6f6",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"b5fb9a6e-b745-06b2-4f85-99fb47c62331",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_OIDA
	VALUES ("d35abe68-761c-4805-6622-ec58904bb650",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_ID
	VALUES (2,
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO SM_ISM
	VALUES ("d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO SM_SM
	VALUES ("d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'',
	5);
INSERT INTO SM_MOORE
	VALUES ("d73d062b-4547-d2eb-35bc-2b9d90dfb02b");
INSERT INTO SM_EVTDI
	VALUES ("36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"36bc36ec-860b-d595-4652-c35b8a6c0d66");
INSERT INTO SM_EVTDI
	VALUES ("339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("77a1ce5f-9a4d-adb1-584b-030c67832708",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c");
INSERT INTO SM_EVTDI
	VALUES ("9301500b-b43e-3be3-58ef-a86c45af48f0",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"77a1ce5f-9a4d-adb1-584b-030c67832708");
INSERT INTO SM_EVTDI
	VALUES ("d335290a-7204-0b63-db53-25d3f63fd8ea",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3");
INSERT INTO SM_LEVT
	VALUES ("b259479f-1956-e363-c395-911bb8c35cd3",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("b259479f-1956-e363-c395-911bb8c35cd3",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("b259479f-1956-e363-c395-911bb8c35cd3",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start and test',
	0,
	'',
	'BET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Start or test',
	0,
	'',
	'BET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("3aee7789-2566-d5ea-0a55-3334b0129fef",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("3aee7789-2566-d5ea-0a55-3334b0129fef",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("3aee7789-2566-d5ea-0a55-3334b0129fef",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Continue and test',
	0,
	'',
	'BET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Continue or test',
	0,
	'',
	'BET4',
	'');
INSERT INTO SM_STATE
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'And test 1a',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("3e85b013-5007-89e2-0969-5e66fc0e2395",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"19309339-d791-2728-6d34-a7ddba63dc2d");
INSERT INTO SM_AH
	VALUES ("3e85b013-5007-89e2-0969-5e66fc0e2395",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b");
INSERT INTO SM_ACT
	VALUES ("3e85b013-5007-89e2-0969-5e66fc0e2395",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	1,
	'LOG::LogInfo(message:"Starting and test") ;

//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    local existing
assign t1 = temp1 and temp1 ;
if ( t1 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t2 = temp1 and temp2 ;
if ( t2 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t3 = temp2 and temp1 ;
if ( t3 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t4 = temp2 and temp2 ;
if ( t4 == true )
  LOG::LogSuccess(message:" and local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( true )") ;
end if;
 
  // local existing    rcvd_evt
assign t5 = temp1 and rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 and rcvd_evt.ttrue ;
if ( t6 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t7 = temp2 and rcvd_evt.tfalse ;
if ( t7 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t8 = temp2 and rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 and false ;
if ( t9 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 and true ;
if ( t10 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t11 = temp2 and false ;
if ( t11 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t12 = temp2 and true ;
if ( t12 == true )
  LOG::LogSuccess(message:" and local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 and self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 and self.btrue ;
if ( t14 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t15 = temp2 and self.bfalse ;
if ( t15 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t16 = temp2 and self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" and local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 and self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 and self.r9btrue ;
if ( t18 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t19 = temp2 and self.r9bfalse ;
if ( t19 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = temp2 and self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of OBET;
assign t21 = temp1 and saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 and saf.btrue ;
if ( t22 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t23 = temp2 and saf.bfalse ;
if ( t23 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t24 = temp2 and saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of OBET;
for each smf in smfs
assign t25 = temp1 and smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 and smf.btrue ;
if ( t26 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t27 = temp2 and smf.bfalse ;
if ( t27 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t28 = temp2 and smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->OBET[R9];
assign t29 = temp1 and sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 and sor.btrue ;
if ( t30 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t31 = temp2 and sor.bfalse ;
if ( t31 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t32 = temp2 and sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->OBET[R10];
assign t33 = temp1 and sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 and sar.btrue ;
if ( t34 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t35 = temp2 and sar.bfalse ;
if ( t35 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t36 = temp2 and sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->OBET[R10];
for each smr in smrs
assign t37 = temp1 and smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 and smr.btrue ;
if ( t38 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t39 = temp2 and smr.bfalse ;
if ( t39 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t40 = temp2 and smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 and saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 and saf.r11btrue ;
if ( t42 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t43 = temp2 and saf.r11bfalse ;
if ( t43 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t44 = temp2 and saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 and smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 and smf.r11btrue ;
if ( t46 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t47 = temp2 and smf.r11bfalse ;
if ( t47 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t48 = temp2 and smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 and sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 and sor.r11btrue ;
if ( t50 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t51 = temp2 and sor.r11bfalse ;
if ( t51 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t52 = temp2 and sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 and sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 and sar.r11btrue ;
if ( t54 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t55 = temp2 and sar.r11bfalse ;
if ( t55 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t56 = temp2 and sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 and smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 and smr.r11btrue ;
if ( t58 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t59 = temp2 and smr.r11bfalse ;
if ( t59 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t60 = temp2 and smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse and temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue and temp1 ;
if ( t62 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t63 = rcvd_evt.tfalse and temp2 ;
if ( t63 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t64 = rcvd_evt.ttrue and temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse and rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue and rcvd_evt.tfalse ;
if ( t66 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t67 = rcvd_evt.tfalse and rcvd_evt.ttrue ;
if ( t67 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t68 = rcvd_evt.ttrue and rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse and false ;
if ( t69 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue and false ;
if ( t70 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t71 = rcvd_evt.tfalse and true ;
if ( t71 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t72 = rcvd_evt.ttrue and true ;
if ( t72 == true )
  LOG::LogSuccess(message:" and rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse and self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue and self.bfalse ;
if ( t74 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t75 = rcvd_evt.tfalse and self.btrue ;
if ( t75 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t76 = rcvd_evt.ttrue and self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse and self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue and self.r9bfalse ;
if ( t78 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t79 = rcvd_evt.tfalse and self.r9btrue ;
if ( t79 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t80 = rcvd_evt.ttrue and self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse and saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse and saf.btrue ;
if ( t82 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t83 = rcvd_evt.ttrue and saf.bfalse ;
if ( t83 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t84 = rcvd_evt.ttrue and saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse and smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse and smf.btrue ;
if ( t86 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t87 = rcvd_evt.ttrue and smf.bfalse ;
if ( t87 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t88 = rcvd_evt.ttrue and smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse and sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse and sor.btrue ;
if ( t90 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t91 = rcvd_evt.ttrue and sor.bfalse ;
if ( t91 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t92 = rcvd_evt.ttrue and sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse and sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse and sar.btrue ;
if ( t94 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t95 = rcvd_evt.ttrue and sar.bfalse ;
if ( t95 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t96 = rcvd_evt.ttrue and sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse and smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse and smr.btrue ;
if ( t98 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t99 = rcvd_evt.ttrue and smr.bfalse ;
if ( t99 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t100 = rcvd_evt.ttrue and smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse and saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse and saf.r11btrue ;
if ( t102 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t103 = rcvd_evt.ttrue and saf.r11bfalse ;
if ( t103 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t104 = rcvd_evt.ttrue and saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse and smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse and smf.r11btrue ;
if ( t106 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t107 = rcvd_evt.ttrue and smf.r11bfalse ;
if ( t107 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t108 = rcvd_evt.ttrue and smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse and sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse and sor.r11btrue ;
if ( t110 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t111 = rcvd_evt.ttrue and sor.r11bfalse ;
if ( t111 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t112 = rcvd_evt.ttrue and sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse and sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse and sar.r11btrue ;
if ( t114 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t115 = rcvd_evt.ttrue and sar.r11bfalse ;
if ( t115 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t116 = rcvd_evt.ttrue and sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse and smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse and smr.r11btrue ;
if ( t118 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t119 = rcvd_evt.ttrue and smr.r11bfalse ;
if ( t119 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t120 = rcvd_evt.ttrue and smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'And test 2',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"171c28d1-9e02-36a8-58a4-0818b61cc903");
INSERT INTO SM_AH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b");
INSERT INTO SM_ACT
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	1,
	'//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse and temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue and temp1 ;
if ( t302 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t303 = saf.bfalse and temp2 ;
if ( t303 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t304 = saf.btrue and temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse and rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue and rcvd_evt.tfalse ;
if ( t306 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t307 = saf.bfalse and rcvd_evt.ttrue ;
if ( t307 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t308 = saf.btrue and rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse and false ;
if ( t309 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue and false ;
if ( t310 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t311 = saf.bfalse and true ;
if ( t311 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t312 = saf.btrue and true ;
if ( t312 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse and self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue and self.bfalse ;
if ( t314 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t315 = saf.bfalse and self.btrue ;
if ( t315 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t316 = saf.btrue and self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse and self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue and self.r9bfalse ;
if ( t318 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t319 = saf.bfalse and self.r9btrue ;
if ( t319 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t320 = saf.btrue and self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse and saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse and saf.btrue ;
if ( t322 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t323 = saf.btrue and saf.bfalse ;
if ( t323 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t324 = saf.btrue and saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse and smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse and smf.btrue ;
if ( t326 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t327 = saf.btrue and smf.bfalse ;
if ( t327 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t328 = saf.btrue and smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse and sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse and sor.btrue ;
if ( t330 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t331 = saf.btrue and sor.bfalse ;
if ( t331 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t332 = saf.btrue and sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse and sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse and sar.btrue ;
if ( t334 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t335 = saf.btrue and sar.bfalse ;
if ( t335 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t336 = saf.btrue and sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse and smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse and smr.btrue ;
if ( t338 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t339 = saf.btrue and smr.bfalse ;
if ( t339 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t340 = saf.btrue and smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse and saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse and saf.r11btrue ;
if ( t342 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t343 = saf.btrue and saf.r11bfalse ;
if ( t343 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t344 = saf.btrue and saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse and smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse and smf.r11btrue ;
if ( t346 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t347 = saf.btrue and smf.r11bfalse ;
if ( t347 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t348 = saf.btrue and smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse and sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse and sor.r11btrue ;
if ( t350 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t351 = saf.btrue and sor.r11bfalse ;
if ( t351 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t352 = saf.btrue and sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse and sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse and sar.r11btrue ;
if ( t354 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t355 = saf.btrue and sar.r11bfalse ;
if ( t355 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t356 = saf.btrue and sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse and smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse and smr.r11btrue ;
if ( t358 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t359 = saf.btrue and smr.r11bfalse ;
if ( t359 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t360 = saf.btrue and smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse and temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue and temp1 ;
if ( t602 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t603 = saf.r11bfalse and temp2 ;
if ( t603 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t604 = saf.r11btrue and temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse and rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue and rcvd_evt.tfalse ;
if ( t606 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t607 = saf.r11bfalse and rcvd_evt.ttrue ;
if ( t607 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t608 = saf.r11btrue and rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse and false ;
if ( t609 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue and false ;
if ( t610 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t611 = saf.r11bfalse and true ;
if ( t611 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t612 = saf.r11btrue and true ;
if ( t612 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse and self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue and self.bfalse ;
if ( t614 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t615 = saf.r11bfalse and self.btrue ;
if ( t615 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t616 = saf.r11btrue and self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse and self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue and self.r9bfalse ;
if ( t618 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t619 = saf.r11bfalse and self.r9btrue ;
if ( t619 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t620 = saf.r11btrue and self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse and saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse and saf.btrue ;
if ( t622 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t623 = saf.r11btrue and saf.bfalse ;
if ( t623 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t624 = saf.r11btrue and saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse and smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse and smf.btrue ;
if ( t626 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t627 = saf.r11btrue and smf.bfalse ;
if ( t627 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t628 = saf.r11btrue and smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse and sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse and sor.btrue ;
if ( t630 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t631 = saf.r11btrue and sor.bfalse ;
if ( t631 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t632 = saf.r11btrue and sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse and sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse and sar.btrue ;
if ( t634 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t635 = saf.r11btrue and sar.bfalse ;
if ( t635 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t636 = saf.r11btrue and sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse and smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse and smr.btrue ;
if ( t638 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t639 = saf.r11btrue and smr.bfalse ;
if ( t639 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t640 = saf.r11btrue and smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse and saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse and saf.r11btrue ;
if ( t642 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t643 = saf.r11btrue and saf.r11bfalse ;
if ( t643 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t644 = saf.r11btrue and saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse and smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse and smf.r11btrue ;
if ( t646 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t647 = saf.r11btrue and smf.r11bfalse ;
if ( t647 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t648 = saf.r11btrue and smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse and sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse and sor.r11btrue ;
if ( t650 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t651 = saf.r11btrue and sor.r11bfalse ;
if ( t651 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t652 = saf.r11btrue and sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse and sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse and sar.r11btrue ;
if ( t654 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t655 = saf.r11btrue and sar.r11bfalse ;
if ( t655 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t656 = saf.r11btrue and sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse and smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse and smr.r11btrue ;
if ( t658 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t659 = saf.r11btrue and smr.r11bfalse ;
if ( t659 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t660 = saf.r11btrue and smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed and test") ;

//generate event to commence next test
generate BET3:''Start or test''(tfalse:false, ttrue:true) to self;
 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1a',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"06bbc248-c7a1-6f90-527e-cb2216996743");
INSERT INTO SM_AH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b");
INSERT INTO SM_ACT
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	1,
	'LOG::LogInfo(message:"Starting or test") ;

//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    local existing
assign t1 = temp1 or temp1 ;
if ( t1 == false )
  LOG::LogSuccess(message:" or local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( false )") ;
end if;
 
assign t2 = temp1 or temp2 ;
if ( t2 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
assign t3 = temp2 or temp1 ;
if ( t3 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
assign t4 = temp2 or temp2 ;
if ( t4 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
  // local existing    rcvd_evt
assign t5 = temp1 or rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 or rcvd_evt.ttrue ;
if ( t6 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t7 = temp2 or rcvd_evt.tfalse ;
if ( t7 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t8 = temp2 or rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 or false ;
if ( t9 == false )
  LOG::LogSuccess(message:" or local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 or true ;
if ( t10 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t11 = temp2 or false ;
if ( t11 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t12 = temp2 or true ;
if ( t12 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 or self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" or local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 or self.btrue ;
if ( t14 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t15 = temp2 or self.bfalse ;
if ( t15 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t16 = temp2 or self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 or self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 or self.r9btrue ;
if ( t18 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t19 = temp2 or self.r9bfalse ;
if ( t19 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t20 = temp2 or self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of OBET;
assign t21 = temp1 or saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 or saf.btrue ;
if ( t22 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t23 = temp2 or saf.bfalse ;
if ( t23 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t24 = temp2 or saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of OBET;
for each smf in smfs
assign t25 = temp1 or smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 or smf.btrue ;
if ( t26 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t27 = temp2 or smf.bfalse ;
if ( t27 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t28 = temp2 or smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->OBET[R9];
assign t29 = temp1 or sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 or sor.btrue ;
if ( t30 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t31 = temp2 or sor.bfalse ;
if ( t31 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t32 = temp2 or sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->OBET[R10];
assign t33 = temp1 or sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 or sar.btrue ;
if ( t34 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t35 = temp2 or sar.bfalse ;
if ( t35 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t36 = temp2 or sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->OBET[R10];
for each smr in smrs
assign t37 = temp1 or smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 or smr.btrue ;
if ( t38 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t39 = temp2 or smr.bfalse ;
if ( t39 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t40 = temp2 or smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 or saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 or saf.r11btrue ;
if ( t42 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t43 = temp2 or saf.r11bfalse ;
if ( t43 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t44 = temp2 or saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 or smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 or smf.r11btrue ;
if ( t46 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t47 = temp2 or smf.r11bfalse ;
if ( t47 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t48 = temp2 or smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 or sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 or sor.r11btrue ;
if ( t50 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t51 = temp2 or sor.r11bfalse ;
if ( t51 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t52 = temp2 or sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 or sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 or sar.r11btrue ;
if ( t54 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t55 = temp2 or sar.r11bfalse ;
if ( t55 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t56 = temp2 or sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 or smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 or smr.r11btrue ;
if ( t58 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t59 = temp2 or smr.r11bfalse ;
if ( t59 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t60 = temp2 or smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse or temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue or temp1 ;
if ( t62 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t63 = rcvd_evt.tfalse or temp2 ;
if ( t63 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t64 = rcvd_evt.ttrue or temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse or rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue or rcvd_evt.tfalse ;
if ( t66 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t67 = rcvd_evt.tfalse or rcvd_evt.ttrue ;
if ( t67 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t68 = rcvd_evt.ttrue or rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse or false ;
if ( t69 == false )
  LOG::LogSuccess(message:" or rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue or false ;
if ( t70 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t71 = rcvd_evt.tfalse or true ;
if ( t71 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t72 = rcvd_evt.ttrue or true ;
if ( t72 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse or self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue or self.bfalse ;
if ( t74 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t75 = rcvd_evt.tfalse or self.btrue ;
if ( t75 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t76 = rcvd_evt.ttrue or self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse or self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue or self.r9bfalse ;
if ( t78 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t79 = rcvd_evt.tfalse or self.r9btrue ;
if ( t79 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t80 = rcvd_evt.ttrue or self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse or saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse or saf.btrue ;
if ( t82 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t83 = rcvd_evt.ttrue or saf.bfalse ;
if ( t83 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t84 = rcvd_evt.ttrue or saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse or smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse or smf.btrue ;
if ( t86 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t87 = rcvd_evt.ttrue or smf.bfalse ;
if ( t87 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t88 = rcvd_evt.ttrue or smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse or sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse or sor.btrue ;
if ( t90 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t91 = rcvd_evt.ttrue or sor.bfalse ;
if ( t91 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t92 = rcvd_evt.ttrue or sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse or sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse or sar.btrue ;
if ( t94 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t95 = rcvd_evt.ttrue or sar.bfalse ;
if ( t95 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t96 = rcvd_evt.ttrue or sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse or smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse or smr.btrue ;
if ( t98 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t99 = rcvd_evt.ttrue or smr.bfalse ;
if ( t99 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t100 = rcvd_evt.ttrue or smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse or saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse or saf.r11btrue ;
if ( t102 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t103 = rcvd_evt.ttrue or saf.r11bfalse ;
if ( t103 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t104 = rcvd_evt.ttrue or saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse or smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse or smf.r11btrue ;
if ( t106 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t107 = rcvd_evt.ttrue or smf.r11bfalse ;
if ( t107 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t108 = rcvd_evt.ttrue or smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse or sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse or sor.r11btrue ;
if ( t110 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t111 = rcvd_evt.ttrue or sor.r11bfalse ;
if ( t111 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t112 = rcvd_evt.ttrue or sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse or sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse or sar.r11btrue ;
if ( t114 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t115 = rcvd_evt.ttrue or sar.r11bfalse ;
if ( t115 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t116 = rcvd_evt.ttrue or sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse or smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse or smr.r11btrue ;
if ( t118 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t119 = rcvd_evt.ttrue or smr.r11bfalse ;
if ( t119 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t120 = rcvd_evt.ttrue or smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET4:''Continue or test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'Or test 2',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49");
INSERT INTO SM_AH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b");
INSERT INTO SM_ACT
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	1,
	'
//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse or temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue or temp1 ;
if ( t302 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t303 = saf.bfalse or temp2 ;
if ( t303 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t304 = saf.btrue or temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse or rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue or rcvd_evt.tfalse ;
if ( t306 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t307 = saf.bfalse or rcvd_evt.ttrue ;
if ( t307 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t308 = saf.btrue or rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse or false ;
if ( t309 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue or false ;
if ( t310 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t311 = saf.bfalse or true ;
if ( t311 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t312 = saf.btrue or true ;
if ( t312 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse or self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue or self.bfalse ;
if ( t314 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t315 = saf.bfalse or self.btrue ;
if ( t315 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t316 = saf.btrue or self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse or self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue or self.r9bfalse ;
if ( t318 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t319 = saf.bfalse or self.r9btrue ;
if ( t319 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t320 = saf.btrue or self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse or saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse or saf.btrue ;
if ( t322 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t323 = saf.btrue or saf.bfalse ;
if ( t323 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t324 = saf.btrue or saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse or smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse or smf.btrue ;
if ( t326 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t327 = saf.btrue or smf.bfalse ;
if ( t327 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t328 = saf.btrue or smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse or sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse or sor.btrue ;
if ( t330 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t331 = saf.btrue or sor.bfalse ;
if ( t331 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t332 = saf.btrue or sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse or sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse or sar.btrue ;
if ( t334 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t335 = saf.btrue or sar.bfalse ;
if ( t335 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t336 = saf.btrue or sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse or smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse or smr.btrue ;
if ( t338 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t339 = saf.btrue or smr.bfalse ;
if ( t339 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t340 = saf.btrue or smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse or saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse or saf.r11btrue ;
if ( t342 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t343 = saf.btrue or saf.r11bfalse ;
if ( t343 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t344 = saf.btrue or saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse or smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse or smf.r11btrue ;
if ( t346 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t347 = saf.btrue or smf.r11bfalse ;
if ( t347 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t348 = saf.btrue or smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse or sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse or sor.r11btrue ;
if ( t350 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t351 = saf.btrue or sor.r11bfalse ;
if ( t351 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t352 = saf.btrue or sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse or sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse or sar.r11btrue ;
if ( t354 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t355 = saf.btrue or sar.r11bfalse ;
if ( t355 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t356 = saf.btrue or sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse or smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse or smr.r11btrue ;
if ( t358 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t359 = saf.btrue or smr.r11bfalse ;
if ( t359 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t360 = saf.btrue or smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse or temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue or temp1 ;
if ( t602 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t603 = saf.r11bfalse or temp2 ;
if ( t603 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t604 = saf.r11btrue or temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse or rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue or rcvd_evt.tfalse ;
if ( t606 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t607 = saf.r11bfalse or rcvd_evt.ttrue ;
if ( t607 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t608 = saf.r11btrue or rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse or false ;
if ( t609 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue or false ;
if ( t610 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t611 = saf.r11bfalse or true ;
if ( t611 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t612 = saf.r11btrue or true ;
if ( t612 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse or self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue or self.bfalse ;
if ( t614 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t615 = saf.r11bfalse or self.btrue ;
if ( t615 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t616 = saf.r11btrue or self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse or self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue or self.r9bfalse ;
if ( t618 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t619 = saf.r11bfalse or self.r9btrue ;
if ( t619 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t620 = saf.r11btrue or self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse or saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse or saf.btrue ;
if ( t622 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t623 = saf.r11btrue or saf.bfalse ;
if ( t623 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t624 = saf.r11btrue or saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse or smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse or smf.btrue ;
if ( t626 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t627 = saf.r11btrue or smf.bfalse ;
if ( t627 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t628 = saf.r11btrue or smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse or sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse or sor.btrue ;
if ( t630 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t631 = saf.r11btrue or sor.bfalse ;
if ( t631 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t632 = saf.r11btrue or sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse or sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse or sar.btrue ;
if ( t634 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t635 = saf.r11btrue or sar.bfalse ;
if ( t635 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t636 = saf.r11btrue or sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse or smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse or smr.btrue ;
if ( t638 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t639 = saf.r11btrue or smr.bfalse ;
if ( t639 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t640 = saf.r11btrue or smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse or saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse or saf.r11btrue ;
if ( t642 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t643 = saf.r11btrue or saf.r11bfalse ;
if ( t643 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t644 = saf.r11btrue or saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse or smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse or smf.r11btrue ;
if ( t646 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t647 = saf.r11btrue or smf.r11bfalse ;
if ( t647 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t648 = saf.r11btrue or smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse or sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse or sor.r11btrue ;
if ( t650 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t651 = saf.r11btrue or sor.r11bfalse ;
if ( t651 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t652 = saf.r11btrue or sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse or sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse or sar.r11btrue ;
if ( t654 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t655 = saf.r11btrue or sar.r11bfalse ;
if ( t655 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t656 = saf.r11btrue or sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse or smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse or smr.r11btrue ;
if ( t658 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t659 = saf.r11btrue or smr.r11bfalse ;
if ( t659 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t660 = saf.r11btrue or smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed or test") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'And test 1b',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"57f36afb-7cf6-2a15-0757-d78daaf78509");
INSERT INTO SM_AH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b");
INSERT INTO SM_ACT
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	1,
	'assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true and temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse and temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue and temp1 ;
if ( t182 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t183 = self.bfalse and temp2 ;
if ( t183 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t184 = self.btrue and temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" and self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse and rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue and rcvd_evt.tfalse ;
if ( t186 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t187 = self.bfalse and rcvd_evt.ttrue ;
if ( t187 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t188 = self.btrue and rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse and false ;
if ( t189 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue and false ;
if ( t190 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t191 = self.bfalse and true ;
if ( t191 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t192 = self.btrue and true ;
if ( t192 == true )
  LOG::LogSuccess(message:" and self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse and self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue and self.bfalse ;
if ( t194 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t195 = self.bfalse and self.btrue ;
if ( t195 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t196 = self.btrue and self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse and self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue and self.r9bfalse ;
if ( t198 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t199 = self.bfalse and self.r9btrue ;
if ( t199 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t200 = self.btrue and self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse and saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse and saf.btrue ;
if ( t202 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t203 = self.btrue and saf.bfalse ;
if ( t203 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t204 = self.btrue and saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse and smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse and smf.btrue ;
if ( t206 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t207 = self.btrue and smf.bfalse ;
if ( t207 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t208 = self.btrue and smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse and sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse and sor.btrue ;
if ( t210 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t211 = self.btrue and sor.bfalse ;
if ( t211 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t212 = self.btrue and sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse and sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse and sar.btrue ;
if ( t214 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t215 = self.btrue and sar.bfalse ;
if ( t215 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t216 = self.btrue and sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse and smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse and smr.btrue ;
if ( t218 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t219 = self.btrue and smr.bfalse ;
if ( t219 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t220 = self.btrue and smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse and saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse and saf.r11btrue ;
if ( t222 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t223 = self.btrue and saf.r11bfalse ;
if ( t223 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t224 = self.btrue and saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse and smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse and smf.r11btrue ;
if ( t226 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t227 = self.btrue and smf.r11bfalse ;
if ( t227 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t228 = self.btrue and smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse and sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse and sor.r11btrue ;
if ( t230 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t231 = self.btrue and sor.r11bfalse ;
if ( t231 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t232 = self.btrue and sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse and sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse and sar.r11btrue ;
if ( t234 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t235 = self.btrue and sar.r11bfalse ;
if ( t235 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t236 = self.btrue and sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse and smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse and smr.r11btrue ;
if ( t238 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t239 = self.btrue and smr.r11bfalse ;
if ( t239 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t240 = self.btrue and smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse and temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue and temp1 ;
if ( t242 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t243 = self.r9bfalse and temp2 ;
if ( t243 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t244 = self.r9btrue and temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse and rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue and rcvd_evt.tfalse ;
if ( t246 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t247 = self.r9bfalse and rcvd_evt.ttrue ;
if ( t247 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t248 = self.r9btrue and rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse and false ;
if ( t249 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue and false ;
if ( t250 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t251 = self.r9bfalse and true ;
if ( t251 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t252 = self.r9btrue and true ;
if ( t252 == true )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse and self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue and self.bfalse ;
if ( t254 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t255 = self.r9bfalse and self.btrue ;
if ( t255 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t256 = self.r9btrue and self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse and self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue and self.r9bfalse ;
if ( t258 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t259 = self.r9bfalse and self.r9btrue ;
if ( t259 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t260 = self.r9btrue and self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse and saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse and saf.btrue ;
if ( t262 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t263 = self.r9btrue and saf.bfalse ;
if ( t263 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t264 = self.r9btrue and saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse and smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse and smf.btrue ;
if ( t266 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t267 = self.r9btrue and smf.bfalse ;
if ( t267 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t268 = self.r9btrue and smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse and sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse and sor.btrue ;
if ( t270 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t271 = self.r9btrue and sor.bfalse ;
if ( t271 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t272 = self.r9btrue and sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse and sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse and sar.btrue ;
if ( t274 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t275 = self.r9btrue and sar.bfalse ;
if ( t275 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t276 = self.r9btrue and sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse and smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse and smr.btrue ;
if ( t278 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t279 = self.r9btrue and smr.bfalse ;
if ( t279 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t280 = self.r9btrue and smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse and saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse and saf.r11btrue ;
if ( t282 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t283 = self.r9btrue and saf.r11bfalse ;
if ( t283 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t284 = self.r9btrue and saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse and smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse and smf.r11btrue ;
if ( t286 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t287 = self.r9btrue and smf.r11bfalse ;
if ( t287 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t288 = self.r9btrue and smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse and sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse and sor.r11btrue ;
if ( t290 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t291 = self.r9btrue and sor.r11bfalse ;
if ( t291 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t292 = self.r9btrue and sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse and sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse and sar.r11btrue ;
if ( t294 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t295 = self.r9btrue and sar.r11bfalse ;
if ( t295 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t296 = self.r9btrue and sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse and smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse and smr.r11btrue ;
if ( t298 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t299 = self.r9btrue and smr.r11bfalse ;
if ( t299 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t300 = self.r9btrue and smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1b',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"989e680b-bc70-b1d8-985c-a034d0050e31");
INSERT INTO SM_AH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b");
INSERT INTO SM_ACT
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	1,
	'// 1.3
// set my logging instance

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true or temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse or temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" or self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue or temp1 ;
if ( t182 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t183 = self.bfalse or temp2 ;
if ( t183 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t184 = self.btrue or temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse or rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue or rcvd_evt.tfalse ;
if ( t186 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t187 = self.bfalse or rcvd_evt.ttrue ;
if ( t187 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t188 = self.btrue or rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse or false ;
if ( t189 == false )
  LOG::LogSuccess(message:" or self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue or false ;
if ( t190 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t191 = self.bfalse or true ;
if ( t191 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t192 = self.btrue or true ;
if ( t192 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse or self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue or self.bfalse ;
if ( t194 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t195 = self.bfalse or self.btrue ;
if ( t195 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t196 = self.btrue or self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse or self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue or self.r9bfalse ;
if ( t198 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t199 = self.bfalse or self.r9btrue ;
if ( t199 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t200 = self.btrue or self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse or saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse or saf.btrue ;
if ( t202 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t203 = self.btrue or saf.bfalse ;
if ( t203 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t204 = self.btrue or saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse or smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse or smf.btrue ;
if ( t206 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t207 = self.btrue or smf.bfalse ;
if ( t207 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t208 = self.btrue or smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse or sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse or sor.btrue ;
if ( t210 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t211 = self.btrue or sor.bfalse ;
if ( t211 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t212 = self.btrue or sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse or sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse or sar.btrue ;
if ( t214 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t215 = self.btrue or sar.bfalse ;
if ( t215 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t216 = self.btrue or sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse or smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse or smr.btrue ;
if ( t218 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t219 = self.btrue or smr.bfalse ;
if ( t219 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t220 = self.btrue or smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse or saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse or saf.r11btrue ;
if ( t222 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t223 = self.btrue or saf.r11bfalse ;
if ( t223 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t224 = self.btrue or saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse or smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse or smf.r11btrue ;
if ( t226 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t227 = self.btrue or smf.r11bfalse ;
if ( t227 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t228 = self.btrue or smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse or sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse or sor.r11btrue ;
if ( t230 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t231 = self.btrue or sor.r11bfalse ;
if ( t231 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t232 = self.btrue or sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse or sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse or sar.r11btrue ;
if ( t234 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t235 = self.btrue or sar.r11bfalse ;
if ( t235 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t236 = self.btrue or sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse or smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse or smr.r11btrue ;
if ( t238 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t239 = self.btrue or smr.r11bfalse ;
if ( t239 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t240 = self.btrue or smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse or temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue or temp1 ;
if ( t242 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t243 = self.r9bfalse or temp2 ;
if ( t243 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t244 = self.r9btrue or temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse or rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue or rcvd_evt.tfalse ;
if ( t246 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t247 = self.r9bfalse or rcvd_evt.ttrue ;
if ( t247 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t248 = self.r9btrue or rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse or false ;
if ( t249 == false )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue or false ;
if ( t250 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t251 = self.r9bfalse or true ;
if ( t251 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t252 = self.r9btrue or true ;
if ( t252 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse or self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue or self.bfalse ;
if ( t254 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t255 = self.r9bfalse or self.btrue ;
if ( t255 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t256 = self.r9btrue or self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse or self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue or self.r9bfalse ;
if ( t258 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t259 = self.r9bfalse or self.r9btrue ;
if ( t259 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t260 = self.r9btrue or self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse or saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse or saf.btrue ;
if ( t262 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t263 = self.r9btrue or saf.bfalse ;
if ( t263 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t264 = self.r9btrue or saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse or smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse or smf.btrue ;
if ( t266 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t267 = self.r9btrue or smf.bfalse ;
if ( t267 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t268 = self.r9btrue or smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse or sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse or sor.btrue ;
if ( t270 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t271 = self.r9btrue or sor.bfalse ;
if ( t271 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t272 = self.r9btrue or sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse or sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse or sar.btrue ;
if ( t274 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t275 = self.r9btrue or sar.bfalse ;
if ( t275 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t276 = self.r9btrue or sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse or smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse or smr.btrue ;
if ( t278 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t279 = self.r9btrue or smr.bfalse ;
if ( t279 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t280 = self.r9btrue or smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse or saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse or saf.r11btrue ;
if ( t282 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t283 = self.r9btrue or saf.r11bfalse ;
if ( t283 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t284 = self.r9btrue or saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse or smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse or smf.r11btrue ;
if ( t286 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t287 = self.r9btrue or smf.r11bfalse ;
if ( t287 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t288 = self.r9btrue or smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse or sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse or sor.r11btrue ;
if ( t290 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t291 = self.r9btrue or sor.r11bfalse ;
if ( t291 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t292 = self.r9btrue or sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse or sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse or sar.r11btrue ;
if ( t294 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t295 = self.r9btrue or sar.r11bfalse ;
if ( t295 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t296 = self.r9btrue or sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse or smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse or smr.r11btrue ;
if ( t298 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t299 = self.r9btrue or smr.r11bfalse ;
if ( t299 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t300 = self.r9btrue or smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET4:''Continue or test''( ttrue: true, tfalse: false ) to self;


',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("f761e7eb-7543-dcc4-dbdd-eb56ff47a2de",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"19309339-d791-2728-6d34-a7ddba63dc2d",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"f761e7eb-7543-dcc4-dbdd-eb56ff47a2de");
INSERT INTO SM_AH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b");
INSERT INTO SM_ACT
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("f761e7eb-7543-dcc4-dbdd-eb56ff47a2de",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"19309339-d791-2728-6d34-a7ddba63dc2d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"171c28d1-9e02-36a8-58a4-0818b61cc903",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14");
INSERT INTO SM_AH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b");
INSERT INTO SM_ACT
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"06bbc248-c7a1-6f90-527e-cb2216996743",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("0e3485bf-605f-4586-56d5-85120b150c9e",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"57f36afb-7cf6-2a15-0757-d78daaf78509",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"0e3485bf-605f-4586-56d5-85120b150c9e");
INSERT INTO SM_AH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b");
INSERT INTO SM_ACT
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("0e3485bf-605f-4586-56d5-85120b150c9e",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"171c28d1-9e02-36a8-58a4-0818b61cc903",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("a256916d-332b-8bb2-d4ff-eae907f0d71a",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"19309339-d791-2728-6d34-a7ddba63dc2d",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"a256916d-332b-8bb2-d4ff-eae907f0d71a");
INSERT INTO SM_AH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b");
INSERT INTO SM_ACT
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("a256916d-332b-8bb2-d4ff-eae907f0d71a",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"57f36afb-7cf6-2a15-0757-d78daaf78509",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("650d8560-41cb-105b-9a25-bc5546ca0485",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"989e680b-bc70-b1d8-985c-a034d0050e31",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"650d8560-41cb-105b-9a25-bc5546ca0485");
INSERT INTO SM_AH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b");
INSERT INTO SM_ACT
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("650d8560-41cb-105b-9a25-bc5546ca0485",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("54c573d1-aade-513b-dec9-05a9342535a9",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"06bbc248-c7a1-6f90-527e-cb2216996743",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"54c573d1-aade-513b-dec9-05a9342535a9");
INSERT INTO SM_AH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b");
INSERT INTO SM_ACT
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("54c573d1-aade-513b-dec9-05a9342535a9",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"989e680b-bc70-b1d8-985c-a034d0050e31",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("ca0f5a78-a999-df17-56d6-4783717d8662",
	8,
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("602731e2-ec9a-c047-1852-39811b548a78",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"19309339-d791-2728-6d34-a7ddba63dc2d",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a');
INSERT INTO GD_SHP
	VALUES ("602731e2-ec9a-c047-1852-39811b548a78");
INSERT INTO GD_NCS
	VALUES ("602731e2-ec9a-c047-1852-39811b548a78");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"602731e2-ec9a-c047-1852-39811b548a78");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1280.000000,
	"602731e2-ec9a-c047-1852-39811b548a78",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("602731e2-ec9a-c047-1852-39811b548a78",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("f975ca2b-b8ef-a29a-d3bd-5d4e2bc0beb3",
	2064.000000,
	1312.000000,
	"602731e2-ec9a-c047-1852-39811b548a78");
INSERT INTO DIM_CON
	VALUES ("567defe8-3e88-e986-99a5-4289687fb75c",
	1968.000000,
	1280.000000,
	"602731e2-ec9a-c047-1852-39811b548a78");
INSERT INTO DIM_CON
	VALUES ("b2454656-1079-11b4-fba2-a9199fef552f",
	1968.000000,
	1376.000000,
	"602731e2-ec9a-c047-1852-39811b548a78");
INSERT INTO GD_GE
	VALUES ("adeda369-cad2-f57e-f581-58260594c88e",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"171c28d1-9e02-36a8-58a4-0818b61cc903",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 2');
INSERT INTO GD_SHP
	VALUES ("adeda369-cad2-f57e-f581-58260594c88e");
INSERT INTO GD_NCS
	VALUES ("adeda369-cad2-f57e-f581-58260594c88e");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"adeda369-cad2-f57e-f581-58260594c88e");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1680.000000,
	"adeda369-cad2-f57e-f581-58260594c88e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("adeda369-cad2-f57e-f581-58260594c88e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("efab7ee5-57c1-1716-a530-df7f1363bff6",
	2064.000000,
	1712.000000,
	"adeda369-cad2-f57e-f581-58260594c88e");
INSERT INTO DIM_CON
	VALUES ("336774f4-52ed-3090-5c66-eeb4bf1b42a6",
	1968.000000,
	1680.000000,
	"adeda369-cad2-f57e-f581-58260594c88e");
INSERT INTO GD_GE
	VALUES ("421fa28f-1ea7-91bd-3d10-e873418b6866",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"06bbc248-c7a1-6f90-527e-cb2216996743",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1a');
INSERT INTO GD_SHP
	VALUES ("421fa28f-1ea7-91bd-3d10-e873418b6866");
INSERT INTO GD_NCS
	VALUES ("421fa28f-1ea7-91bd-3d10-e873418b6866");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"421fa28f-1ea7-91bd-3d10-e873418b6866");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1280.000000,
	"421fa28f-1ea7-91bd-3d10-e873418b6866",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("421fa28f-1ea7-91bd-3d10-e873418b6866",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("49f158cd-6d7a-19dc-028a-59a0b495162b",
	2320.000000,
	1280.000000,
	"421fa28f-1ea7-91bd-3d10-e873418b6866");
INSERT INTO DIM_CON
	VALUES ("903dcfd4-4da5-be2b-d167-d4e84d6c0727",
	2320.000000,
	1376.000000,
	"421fa28f-1ea7-91bd-3d10-e873418b6866");
INSERT INTO GD_GE
	VALUES ("787fd3f6-91a6-4f37-be04-f54b09ab00ea",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 2');
INSERT INTO GD_SHP
	VALUES ("787fd3f6-91a6-4f37-be04-f54b09ab00ea");
INSERT INTO GD_NCS
	VALUES ("787fd3f6-91a6-4f37-be04-f54b09ab00ea");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"787fd3f6-91a6-4f37-be04-f54b09ab00ea");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1680.000000,
	"787fd3f6-91a6-4f37-be04-f54b09ab00ea",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("787fd3f6-91a6-4f37-be04-f54b09ab00ea",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("85e42935-5e0c-f2eb-c48f-eab47055580f",
	2320.000000,
	1680.000000,
	"787fd3f6-91a6-4f37-be04-f54b09ab00ea");
INSERT INTO GD_GE
	VALUES ("6d1dcb94-d995-a3a7-9791-6f6b526935ab",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"57f36afb-7cf6-2a15-0757-d78daaf78509",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1b');
INSERT INTO GD_SHP
	VALUES ("6d1dcb94-d995-a3a7-9791-6f6b526935ab");
INSERT INTO GD_NCS
	VALUES ("6d1dcb94-d995-a3a7-9791-6f6b526935ab");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"6d1dcb94-d995-a3a7-9791-6f6b526935ab");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1472.000000,
	"6d1dcb94-d995-a3a7-9791-6f6b526935ab",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6d1dcb94-d995-a3a7-9791-6f6b526935ab",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("ef3fc34d-86ca-d17f-e70a-244e670959ff",
	1968.000000,
	1472.000000,
	"6d1dcb94-d995-a3a7-9791-6f6b526935ab");
INSERT INTO DIM_CON
	VALUES ("d2242081-2161-2c7c-0d10-94c1d7a8b94d",
	1968.000000,
	1568.000000,
	"6d1dcb94-d995-a3a7-9791-6f6b526935ab");
INSERT INTO GD_GE
	VALUES ("99602536-7820-0e7a-b0b4-a3898e0cf48e",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"989e680b-bc70-b1d8-985c-a034d0050e31",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1b');
INSERT INTO GD_SHP
	VALUES ("99602536-7820-0e7a-b0b4-a3898e0cf48e");
INSERT INTO GD_NCS
	VALUES ("99602536-7820-0e7a-b0b4-a3898e0cf48e");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"99602536-7820-0e7a-b0b4-a3898e0cf48e");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1472.000000,
	"99602536-7820-0e7a-b0b4-a3898e0cf48e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("99602536-7820-0e7a-b0b4-a3898e0cf48e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("ee14234b-d110-0f9a-fb11-20ea3078f90b",
	2320.000000,
	1472.000000,
	"99602536-7820-0e7a-b0b4-a3898e0cf48e");
INSERT INTO DIM_CON
	VALUES ("db75647e-c6ae-1535-d0e3-d844b2f2df96",
	2320.000000,
	1568.000000,
	"99602536-7820-0e7a-b0b4-a3898e0cf48e");
INSERT INTO GD_GE
	VALUES ("64c5e6b2-f541-76ac-b7e6-062e4f8dd696",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"f761e7eb-7543-dcc4-dbdd-eb56ff47a2de",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a::BET1: Start and test');
INSERT INTO GD_CON
	VALUES ("64c5e6b2-f541-76ac-b7e6-062e4f8dd696",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f2890837-138f-97ef-74da-0286c6f8c487",
	"64c5e6b2-f541-76ac-b7e6-062e4f8dd696",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f2890837-138f-97ef-74da-0286c6f8c487");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f2890837-138f-97ef-74da-0286c6f8c487",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f2890837-138f-97ef-74da-0286c6f8c487",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("afbab210-da75-894f-4bf4-8acb442075b5",
	"64c5e6b2-f541-76ac-b7e6-062e4f8dd696",
	3,
	-77.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (235.000000,
	34.000000,
	"afbab210-da75-894f-4bf4-8acb442075b5");
INSERT INTO DIM_GE
	VALUES (1994.000000,
	1189.000000,
	"afbab210-da75-894f-4bf4-8acb442075b5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("afbab210-da75-894f-4bf4-8acb442075b5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("76bb9648-1b11-1260-3458-fe532bec75f5",
	"64c5e6b2-f541-76ac-b7e6-062e4f8dd696",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"76bb9648-1b11-1260-3458-fe532bec75f5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"76bb9648-1b11-1260-3458-fe532bec75f5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("76bb9648-1b11-1260-3458-fe532bec75f5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("fa23a5c0-398a-ba96-7fdb-a83bd639342c",
	"64c5e6b2-f541-76ac-b7e6-062e4f8dd696",
	"00000000-0000-0000-0000-000000000000",
	"c05774a7-6650-8883-41b6-449c7c02568e",
	"d08bfa62-325a-dd5a-8948-7aec4105872e");
INSERT INTO GD_LS
	VALUES ("e4f48155-facc-dcac-0a48-bce8d78a88ef",
	"64c5e6b2-f541-76ac-b7e6-062e4f8dd696",
	"fa23a5c0-398a-ba96-7fdb-a83bd639342c",
	"d08bfa62-325a-dd5a-8948-7aec4105872e",
	"9628a652-d66d-39cc-96bb-afb070069ae4");
INSERT INTO GD_LS
	VALUES ("6bb25b5a-4a35-3758-0855-be042161a28e",
	"64c5e6b2-f541-76ac-b7e6-062e4f8dd696",
	"e4f48155-facc-dcac-0a48-bce8d78a88ef",
	"9628a652-d66d-39cc-96bb-afb070069ae4",
	"707b5287-def2-6556-9c82-350fe02cad8c");
INSERT INTO GD_LS
	VALUES ("9afbb7ff-e3ed-e057-c3e4-94277f7ba68a",
	"64c5e6b2-f541-76ac-b7e6-062e4f8dd696",
	"6bb25b5a-4a35-3758-0855-be042161a28e",
	"707b5287-def2-6556-9c82-350fe02cad8c",
	"6983c349-3fdf-7629-1cde-31e175e5800d");
INSERT INTO DIM_WAY
	VALUES ("c05774a7-6650-8883-41b6-449c7c02568e",
	2064.000000,
	1312.000000,
	"64c5e6b2-f541-76ac-b7e6-062e4f8dd696",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("d08bfa62-325a-dd5a-8948-7aec4105872e",
	2128.000000,
	1312.000000,
	"64c5e6b2-f541-76ac-b7e6-062e4f8dd696",
	"00000000-0000-0000-0000-000000000000",
	"c05774a7-6650-8883-41b6-449c7c02568e");
INSERT INTO DIM_WAY
	VALUES ("9628a652-d66d-39cc-96bb-afb070069ae4",
	2128.000000,
	1216.000000,
	"64c5e6b2-f541-76ac-b7e6-062e4f8dd696",
	"00000000-0000-0000-0000-000000000000",
	"d08bfa62-325a-dd5a-8948-7aec4105872e");
INSERT INTO DIM_WAY
	VALUES ("707b5287-def2-6556-9c82-350fe02cad8c",
	1968.000000,
	1216.000000,
	"64c5e6b2-f541-76ac-b7e6-062e4f8dd696",
	"00000000-0000-0000-0000-000000000000",
	"9628a652-d66d-39cc-96bb-afb070069ae4");
INSERT INTO DIM_WAY
	VALUES ("6983c349-3fdf-7629-1cde-31e175e5800d",
	1968.000000,
	1280.000000,
	"64c5e6b2-f541-76ac-b7e6-062e4f8dd696",
	"00000000-0000-0000-0000-000000000000",
	"707b5287-def2-6556-9c82-350fe02cad8c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"64c5e6b2-f541-76ac-b7e6-062e4f8dd696",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("64c5e6b2-f541-76ac-b7e6-062e4f8dd696",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("f975ca2b-b8ef-a29a-d3bd-5d4e2bc0beb3",
	"567defe8-3e88-e986-99a5-4289687fb75c",
	"64c5e6b2-f541-76ac-b7e6-062e4f8dd696");
INSERT INTO GD_GE
	VALUES ("98838ee0-ea5d-3397-2a31-97f71958c5dd",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 2::BET3: Start or test');
INSERT INTO GD_CON
	VALUES ("98838ee0-ea5d-3397-2a31-97f71958c5dd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("82560046-c8eb-bc42-c44b-9440141d51d7",
	"98838ee0-ea5d-3397-2a31-97f71958c5dd",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"82560046-c8eb-bc42-c44b-9440141d51d7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"82560046-c8eb-bc42-c44b-9440141d51d7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("82560046-c8eb-bc42-c44b-9440141d51d7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("258b2688-a132-e000-f5eb-90ba2c437edf",
	"98838ee0-ea5d-3397-2a31-97f71958c5dd",
	3,
	155.000000,
	-202.000000);
INSERT INTO DIM_ND
	VALUES (205.000000,
	41.000000,
	"258b2688-a132-e000-f5eb-90ba2c437edf");
INSERT INTO DIM_GE
	VALUES (2331.000000,
	1231.000000,
	"258b2688-a132-e000-f5eb-90ba2c437edf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("258b2688-a132-e000-f5eb-90ba2c437edf",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b0d67523-94f1-a376-4494-51f1c6980810",
	"98838ee0-ea5d-3397-2a31-97f71958c5dd",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b0d67523-94f1-a376-4494-51f1c6980810");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b0d67523-94f1-a376-4494-51f1c6980810",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b0d67523-94f1-a376-4494-51f1c6980810",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("613af8ef-0db0-fdc7-5117-c6ceafe47ee2",
	"98838ee0-ea5d-3397-2a31-97f71958c5dd",
	"00000000-0000-0000-0000-000000000000",
	"cd7aa1a8-9ced-9a76-5fc6-536052e99982",
	"5427f78d-bdc4-1ec1-b98b-04bdaa78c1d3");
INSERT INTO GD_LS
	VALUES ("3deae1c9-02de-21ed-752f-7d109c5da61c",
	"98838ee0-ea5d-3397-2a31-97f71958c5dd",
	"613af8ef-0db0-fdc7-5117-c6ceafe47ee2",
	"5427f78d-bdc4-1ec1-b98b-04bdaa78c1d3",
	"f948c174-6fd8-6a2f-b2ea-a3cc0c5430c0");
INSERT INTO GD_LS
	VALUES ("3eaca266-b223-6fa7-ee68-086858136fb5",
	"98838ee0-ea5d-3397-2a31-97f71958c5dd",
	"3deae1c9-02de-21ed-752f-7d109c5da61c",
	"f948c174-6fd8-6a2f-b2ea-a3cc0c5430c0",
	"95cff3a2-a7cc-4087-c99b-44ea516f1a5f");
INSERT INTO GD_LS
	VALUES ("f3b13bc8-59f2-e906-7094-4395aa611ea4",
	"98838ee0-ea5d-3397-2a31-97f71958c5dd",
	"3eaca266-b223-6fa7-ee68-086858136fb5",
	"95cff3a2-a7cc-4087-c99b-44ea516f1a5f",
	"1760673a-37b3-576a-df23-b2c246cab45e");
INSERT INTO DIM_WAY
	VALUES ("cd7aa1a8-9ced-9a76-5fc6-536052e99982",
	2064.000000,
	1712.000000,
	"98838ee0-ea5d-3397-2a31-97f71958c5dd",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("5427f78d-bdc4-1ec1-b98b-04bdaa78c1d3",
	2192.000000,
	1712.000000,
	"98838ee0-ea5d-3397-2a31-97f71958c5dd",
	"00000000-0000-0000-0000-000000000000",
	"cd7aa1a8-9ced-9a76-5fc6-536052e99982");
INSERT INTO DIM_WAY
	VALUES ("f948c174-6fd8-6a2f-b2ea-a3cc0c5430c0",
	2192.000000,
	1232.000000,
	"98838ee0-ea5d-3397-2a31-97f71958c5dd",
	"00000000-0000-0000-0000-000000000000",
	"5427f78d-bdc4-1ec1-b98b-04bdaa78c1d3");
INSERT INTO DIM_WAY
	VALUES ("95cff3a2-a7cc-4087-c99b-44ea516f1a5f",
	2320.000000,
	1232.000000,
	"98838ee0-ea5d-3397-2a31-97f71958c5dd",
	"00000000-0000-0000-0000-000000000000",
	"f948c174-6fd8-6a2f-b2ea-a3cc0c5430c0");
INSERT INTO DIM_WAY
	VALUES ("1760673a-37b3-576a-df23-b2c246cab45e",
	2320.000000,
	1280.000000,
	"98838ee0-ea5d-3397-2a31-97f71958c5dd",
	"00000000-0000-0000-0000-000000000000",
	"95cff3a2-a7cc-4087-c99b-44ea516f1a5f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"98838ee0-ea5d-3397-2a31-97f71958c5dd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("98838ee0-ea5d-3397-2a31-97f71958c5dd",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("efab7ee5-57c1-1716-a530-df7f1363bff6",
	"49f158cd-6d7a-19dc-028a-59a0b495162b",
	"98838ee0-ea5d-3397-2a31-97f71958c5dd");
INSERT INTO GD_GE
	VALUES ("f1a5f34f-e4f8-0a9c-b941-1b741c648da7",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"a256916d-332b-8bb2-d4ff-eae907f0d71a",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a::BET2: Continue and test');
INSERT INTO GD_CON
	VALUES ("f1a5f34f-e4f8-0a9c-b941-1b741c648da7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f792395d-656b-7ede-aee1-6cdc6384af81",
	"f1a5f34f-e4f8-0a9c-b941-1b741c648da7",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f792395d-656b-7ede-aee1-6cdc6384af81");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f792395d-656b-7ede-aee1-6cdc6384af81",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f792395d-656b-7ede-aee1-6cdc6384af81",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ea004a28-cd26-26db-d330-74ff5906f626",
	"f1a5f34f-e4f8-0a9c-b941-1b741c648da7",
	3,
	-247.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (270.000000,
	40.000000,
	"ea004a28-cd26-26db-d330-74ff5906f626");
INSERT INTO DIM_GE
	VALUES (1705.000000,
	1407.000000,
	"ea004a28-cd26-26db-d330-74ff5906f626",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ea004a28-cd26-26db-d330-74ff5906f626",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("dc5ff1c0-37b8-e091-f243-12247a2fe20c",
	"f1a5f34f-e4f8-0a9c-b941-1b741c648da7",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"dc5ff1c0-37b8-e091-f243-12247a2fe20c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"dc5ff1c0-37b8-e091-f243-12247a2fe20c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dc5ff1c0-37b8-e091-f243-12247a2fe20c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("3c239bbb-8e2a-ed04-b184-cea89a1955f1",
	"f1a5f34f-e4f8-0a9c-b941-1b741c648da7",
	"00000000-0000-0000-0000-000000000000",
	"0731c1f5-420c-a5b3-6bb8-33afcf2c704a",
	"54789d7e-4557-2333-66e9-9c9de1a9b3b3");
INSERT INTO DIM_WAY
	VALUES ("0731c1f5-420c-a5b3-6bb8-33afcf2c704a",
	1968.000000,
	1376.000000,
	"f1a5f34f-e4f8-0a9c-b941-1b741c648da7",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("54789d7e-4557-2333-66e9-9c9de1a9b3b3",
	1968.000000,
	1472.000000,
	"f1a5f34f-e4f8-0a9c-b941-1b741c648da7",
	"00000000-0000-0000-0000-000000000000",
	"0731c1f5-420c-a5b3-6bb8-33afcf2c704a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f1a5f34f-e4f8-0a9c-b941-1b741c648da7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f1a5f34f-e4f8-0a9c-b941-1b741c648da7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b2454656-1079-11b4-fba2-a9199fef552f",
	"ef3fc34d-86ca-d17f-e70a-244e670959ff",
	"f1a5f34f-e4f8-0a9c-b941-1b741c648da7");
INSERT INTO GD_GE
	VALUES ("7b9d0d5a-7ed2-c567-b4c0-6a0010ba7760",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"0e3485bf-605f-4586-56d5-85120b150c9e",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1b::BET2: Continue and test');
INSERT INTO GD_CON
	VALUES ("7b9d0d5a-7ed2-c567-b4c0-6a0010ba7760",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("70949a77-e030-a87b-2ed6-4d9885418740",
	"7b9d0d5a-7ed2-c567-b4c0-6a0010ba7760",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"70949a77-e030-a87b-2ed6-4d9885418740");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"70949a77-e030-a87b-2ed6-4d9885418740",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("70949a77-e030-a87b-2ed6-4d9885418740",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4b9539e8-b8fa-252c-2df0-4efc8e948837",
	"7b9d0d5a-7ed2-c567-b4c0-6a0010ba7760",
	3,
	-257.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (279.000000,
	44.000000,
	"4b9539e8-b8fa-252c-2df0-4efc8e948837");
INSERT INTO DIM_GE
	VALUES (1695.000000,
	1610.000000,
	"4b9539e8-b8fa-252c-2df0-4efc8e948837",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4b9539e8-b8fa-252c-2df0-4efc8e948837",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("64670ce6-3c0c-7c5f-4520-a8da66c7709c",
	"7b9d0d5a-7ed2-c567-b4c0-6a0010ba7760",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"64670ce6-3c0c-7c5f-4520-a8da66c7709c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"64670ce6-3c0c-7c5f-4520-a8da66c7709c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("64670ce6-3c0c-7c5f-4520-a8da66c7709c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("115958d5-fc41-5c3b-4fb4-c4e10a05e549",
	"7b9d0d5a-7ed2-c567-b4c0-6a0010ba7760",
	"00000000-0000-0000-0000-000000000000",
	"8accfe05-cecd-9a26-05d5-5ab6c434e38b",
	"927da5d1-1688-541a-6bed-0089c7f3a6a0");
INSERT INTO DIM_WAY
	VALUES ("8accfe05-cecd-9a26-05d5-5ab6c434e38b",
	1968.000000,
	1568.000000,
	"7b9d0d5a-7ed2-c567-b4c0-6a0010ba7760",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("927da5d1-1688-541a-6bed-0089c7f3a6a0",
	1968.000000,
	1680.000000,
	"7b9d0d5a-7ed2-c567-b4c0-6a0010ba7760",
	"00000000-0000-0000-0000-000000000000",
	"8accfe05-cecd-9a26-05d5-5ab6c434e38b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7b9d0d5a-7ed2-c567-b4c0-6a0010ba7760",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7b9d0d5a-7ed2-c567-b4c0-6a0010ba7760",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("d2242081-2161-2c7c-0d10-94c1d7a8b94d",
	"336774f4-52ed-3090-5c66-eeb4bf1b42a6",
	"7b9d0d5a-7ed2-c567-b4c0-6a0010ba7760");
INSERT INTO GD_GE
	VALUES ("0eaeb5f3-a481-451e-a420-02c6d6147771",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"54c573d1-aade-513b-dec9-05a9342535a9",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1a::BET4: Continue or test');
INSERT INTO GD_CON
	VALUES ("0eaeb5f3-a481-451e-a420-02c6d6147771",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("88c216e9-abcb-900f-510b-cae2950d230d",
	"0eaeb5f3-a481-451e-a420-02c6d6147771",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"88c216e9-abcb-900f-510b-cae2950d230d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"88c216e9-abcb-900f-510b-cae2950d230d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("88c216e9-abcb-900f-510b-cae2950d230d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("272b065e-7663-516e-4a72-5f1afeef56b4",
	"0eaeb5f3-a481-451e-a420-02c6d6147771",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (252.000000,
	49.000000,
	"272b065e-7663-516e-4a72-5f1afeef56b4");
INSERT INTO DIM_GE
	VALUES (2304.000000,
	1408.000000,
	"272b065e-7663-516e-4a72-5f1afeef56b4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("272b065e-7663-516e-4a72-5f1afeef56b4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fe7286c9-97bd-21bb-2774-b78d19dcfef4",
	"0eaeb5f3-a481-451e-a420-02c6d6147771",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"fe7286c9-97bd-21bb-2774-b78d19dcfef4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fe7286c9-97bd-21bb-2774-b78d19dcfef4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fe7286c9-97bd-21bb-2774-b78d19dcfef4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("b627aa8b-a0d0-42c2-6fda-dbb180ef24b9",
	"0eaeb5f3-a481-451e-a420-02c6d6147771",
	"00000000-0000-0000-0000-000000000000",
	"49936374-5b00-7416-f9f3-fbb1595e7126",
	"08b3c26d-7b13-4841-2539-9117616c784f");
INSERT INTO DIM_WAY
	VALUES ("49936374-5b00-7416-f9f3-fbb1595e7126",
	2320.000000,
	1376.000000,
	"0eaeb5f3-a481-451e-a420-02c6d6147771",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("08b3c26d-7b13-4841-2539-9117616c784f",
	2320.000000,
	1472.000000,
	"0eaeb5f3-a481-451e-a420-02c6d6147771",
	"00000000-0000-0000-0000-000000000000",
	"49936374-5b00-7416-f9f3-fbb1595e7126");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0eaeb5f3-a481-451e-a420-02c6d6147771",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0eaeb5f3-a481-451e-a420-02c6d6147771",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("903dcfd4-4da5-be2b-d167-d4e84d6c0727",
	"ee14234b-d110-0f9a-fb11-20ea3078f90b",
	"0eaeb5f3-a481-451e-a420-02c6d6147771");
INSERT INTO GD_GE
	VALUES ("bb1d626f-888c-3490-5b53-9297420d6a9f",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"650d8560-41cb-105b-9a25-bc5546ca0485",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1b::BET4: Continue or test');
INSERT INTO GD_CON
	VALUES ("bb1d626f-888c-3490-5b53-9297420d6a9f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("907c8e09-bb19-c90f-c9a4-4b72d420bf67",
	"bb1d626f-888c-3490-5b53-9297420d6a9f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"907c8e09-bb19-c90f-c9a4-4b72d420bf67");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"907c8e09-bb19-c90f-c9a4-4b72d420bf67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("907c8e09-bb19-c90f-c9a4-4b72d420bf67",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7a62af95-502d-72ce-f6b1-a981b9275e2d",
	"bb1d626f-888c-3490-5b53-9297420d6a9f",
	3,
	9.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (241.000000,
	48.000000,
	"7a62af95-502d-72ce-f6b1-a981b9275e2d");
INSERT INTO DIM_GE
	VALUES (2313.000000,
	1601.000000,
	"7a62af95-502d-72ce-f6b1-a981b9275e2d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7a62af95-502d-72ce-f6b1-a981b9275e2d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1d13618a-0d6e-4fec-ac2f-314d8666dc70",
	"bb1d626f-888c-3490-5b53-9297420d6a9f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1d13618a-0d6e-4fec-ac2f-314d8666dc70");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1d13618a-0d6e-4fec-ac2f-314d8666dc70",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1d13618a-0d6e-4fec-ac2f-314d8666dc70",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("08911a5d-f183-cd36-0e34-3b67079b1264",
	"bb1d626f-888c-3490-5b53-9297420d6a9f",
	"00000000-0000-0000-0000-000000000000",
	"b837bc11-eb57-964c-7d7d-0b9f392a4781",
	"1d9fb16a-05d3-8c27-75f5-fecafb957207");
INSERT INTO DIM_WAY
	VALUES ("b837bc11-eb57-964c-7d7d-0b9f392a4781",
	2320.000000,
	1568.000000,
	"bb1d626f-888c-3490-5b53-9297420d6a9f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("1d9fb16a-05d3-8c27-75f5-fecafb957207",
	2320.000000,
	1680.000000,
	"bb1d626f-888c-3490-5b53-9297420d6a9f",
	"00000000-0000-0000-0000-000000000000",
	"b837bc11-eb57-964c-7d7d-0b9f392a4781");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bb1d626f-888c-3490-5b53-9297420d6a9f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bb1d626f-888c-3490-5b53-9297420d6a9f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("db75647e-c6ae-1535-d0e3-d844b2f2df96",
	"85e42935-5e0c-f2eb-c48f-eab47055580f",
	"bb1d626f-888c-3490-5b53-9297420d6a9f");
INSERT INTO DIM_DIA
	VALUES ("ca0f5a78-a999-df17-56d6-4783717d8662",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("6529e378-ed05-186d-687c-2136905dcbf9",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("6529e378-ed05-186d-687c-2136905dcbf9",
	'Event Instance',
	21,
	'EV',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("b7f7b068-25f0-7f97-47b7-067b6080576e",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_BATTR
	VALUES ("b7f7b068-25f0-7f97-47b7-067b6080576e",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ATTR
	VALUES ("b7f7b068-25f0-7f97-47b7-067b6080576e",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("f64b8be7-7c94-1146-33c9-6b525c0b9014",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_BATTR
	VALUES ("f64b8be7-7c94-1146-33c9-6b525c0b9014",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ATTR
	VALUES ("f64b8be7-7c94-1146-33c9-6b525c0b9014",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	"b7f7b068-25f0-7f97-47b7-067b6080576e",
	'shutdown_count',
	'',
	'',
	'shutdown_count',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ee847cc0-be87-a5d1-6ef6-7123e865361f",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_BATTR
	VALUES ("ee847cc0-be87-a5d1-6ef6-7123e865361f",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ATTR
	VALUES ("ee847cc0-be87-a5d1-6ef6-7123e865361f",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	"f64b8be7-7c94-1146-33c9-6b525c0b9014",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_OIDA
	VALUES ("b7f7b068-25f0-7f97-47b7-067b6080576e",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ID
	VALUES (2,
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO SM_ISM
	VALUES ("56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO SM_SM
	VALUES ("56bbaca4-5560-0a22-40e0-05a48c5f471d",
	'',
	7);
INSERT INTO SM_MOORE
	VALUES ("56bbaca4-5560-0a22-40e0-05a48c5f471d");
INSERT INTO SM_EVTDI
	VALUES ("a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	'message',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"7ff18bc9-dd83-a426-7399-3138989126a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_LEVT
	VALUES ("7ff18bc9-dd83-a426-7399-3138989126a6",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("7ff18bc9-dd83-a426-7399-3138989126a6",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("7ff18bc9-dd83-a426-7399-3138989126a6",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Event Instance',
	0,
	'',
	'EV1',
	'');
INSERT INTO SM_LEVT
	VALUES ("7985e41c-606c-12dd-f296-171a2171df48",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("7985e41c-606c-12dd-f296-171a2171df48",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("7985e41c-606c-12dd-f296-171a2171df48",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"00000000-0000-0000-0000-000000000000",
	2,
	'shutdown',
	0,
	'',
	'EV2',
	'');
INSERT INTO SM_STATE
	VALUES ("c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"00000000-0000-0000-0000-000000000000",
	'dummy',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"7ff18bc9-dd83-a426-7399-3138989126a6",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"c80b28b8-bd2e-1dc4-5f02-28d889b2ea72");
INSERT INTO SM_AH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d");
INSERT INTO SM_ACT
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	1,
	'',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("02a1463d-a43e-ecc7-3993-a91501615408",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"00000000-0000-0000-0000-000000000000",
	'shutdown',
	2,
	0);
INSERT INTO SM_SEME
	VALUES ("02a1463d-a43e-ecc7-3993-a91501615408",
	"7ff18bc9-dd83-a426-7399-3138989126a6",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("02a1463d-a43e-ecc7-3993-a91501615408",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"02a1463d-a43e-ecc7-3993-a91501615408");
INSERT INTO SM_AH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d");
INSERT INTO SM_ACT
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	1,
	'self.shutdown_count = self.shutdown_count - 1;

if ( self.shutdown_count == 0 )
  bridge ARCH::shutdown();
end if;',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("40da950f-092d-1954-f95d-150a1ea1275e",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"7ff18bc9-dd83-a426-7399-3138989126a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"40da950f-092d-1954-f95d-150a1ea1275e");
INSERT INTO SM_AH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d");
INSERT INTO SM_ACT
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("40da950f-092d-1954-f95d-150a1ea1275e",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("87d7123c-9ec5-c389-2fda-613f981c3404",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"02a1463d-a43e-ecc7-3993-a91501615408",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"87d7123c-9ec5-c389-2fda-613f981c3404");
INSERT INTO SM_AH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d");
INSERT INTO SM_ACT
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("87d7123c-9ec5-c389-2fda-613f981c3404",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"02a1463d-a43e-ecc7-3993-a91501615408",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("d050e693-f8f5-1446-254b-598c8cdb8c2a",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"02a1463d-a43e-ecc7-3993-a91501615408",
	"7ff18bc9-dd83-a426-7399-3138989126a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"d050e693-f8f5-1446-254b-598c8cdb8c2a");
INSERT INTO SM_AH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d");
INSERT INTO SM_ACT
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("d050e693-f8f5-1446-254b-598c8cdb8c2a",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("79786b0c-2583-a95c-3b50-3c627a6a2a28",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"79786b0c-2583-a95c-3b50-3c627a6a2a28");
INSERT INTO SM_AH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d");
INSERT INTO SM_ACT
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("79786b0c-2583-a95c-3b50-3c627a6a2a28",
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	"02a1463d-a43e-ecc7-3993-a91501615408",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("0acdc7f5-14ae-e7ec-1eac-e1c2a0510197",
	8,
	"56bbaca4-5560-0a22-40e0-05a48c5f471d",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("9c3f2850-971d-fa1e-77fa-e29f52ad1182",
	"0acdc7f5-14ae-e7ec-1eac-e1c2a0510197",
	"c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy');
INSERT INTO GD_SHP
	VALUES ("9c3f2850-971d-fa1e-77fa-e29f52ad1182");
INSERT INTO GD_NCS
	VALUES ("9c3f2850-971d-fa1e-77fa-e29f52ad1182");
INSERT INTO DIM_ND
	VALUES (288.000000,
	128.000000,
	"9c3f2850-971d-fa1e-77fa-e29f52ad1182");
INSERT INTO DIM_GE
	VALUES (1856.000000,
	1328.000000,
	"9c3f2850-971d-fa1e-77fa-e29f52ad1182",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9c3f2850-971d-fa1e-77fa-e29f52ad1182",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("f91a1960-f136-70a5-0dd8-a1fde62c4170",
	1888.000000,
	1328.000000,
	"9c3f2850-971d-fa1e-77fa-e29f52ad1182");
INSERT INTO DIM_CON
	VALUES ("cb3a795c-d13e-3b42-ec1b-6ee37aeeb8b9",
	2016.000000,
	1328.000000,
	"9c3f2850-971d-fa1e-77fa-e29f52ad1182");
INSERT INTO DIM_CON
	VALUES ("e184d82f-98e8-118a-b32a-a27c9a829cb5",
	2144.000000,
	1408.000000,
	"9c3f2850-971d-fa1e-77fa-e29f52ad1182");
INSERT INTO DIM_CON
	VALUES ("75f1f38e-dbec-ee24-ad29-d132b0d53ed0",
	1856.000000,
	1392.000000,
	"9c3f2850-971d-fa1e-77fa-e29f52ad1182");
INSERT INTO GD_GE
	VALUES ("651cc16d-5489-1931-3532-1deef12c475e",
	"0acdc7f5-14ae-e7ec-1eac-e1c2a0510197",
	"02a1463d-a43e-ecc7-3993-a91501615408",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown');
INSERT INTO GD_SHP
	VALUES ("651cc16d-5489-1931-3532-1deef12c475e");
INSERT INTO GD_NCS
	VALUES ("651cc16d-5489-1931-3532-1deef12c475e");
INSERT INTO DIM_ND
	VALUES (288.000000,
	128.000000,
	"651cc16d-5489-1931-3532-1deef12c475e");
INSERT INTO DIM_GE
	VALUES (1856.000000,
	1056.000000,
	"651cc16d-5489-1931-3532-1deef12c475e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("651cc16d-5489-1931-3532-1deef12c475e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("01184270-82d6-2a6c-b098-ffdde984b6bf",
	1920.000000,
	1056.000000,
	"651cc16d-5489-1931-3532-1deef12c475e");
INSERT INTO DIM_CON
	VALUES ("854ed276-117d-0790-d850-843cc2c3df50",
	2096.000000,
	1056.000000,
	"651cc16d-5489-1931-3532-1deef12c475e");
INSERT INTO DIM_CON
	VALUES ("14f06658-fa6a-9a98-f006-619255db8233",
	2144.000000,
	1120.000000,
	"651cc16d-5489-1931-3532-1deef12c475e");
INSERT INTO DIM_CON
	VALUES ("efeb100a-75e4-2157-0c5b-d5d8f8a7d43e",
	1856.000000,
	1120.000000,
	"651cc16d-5489-1931-3532-1deef12c475e");
INSERT INTO GD_GE
	VALUES ("3f85c0f2-371b-32ef-1375-46d0e94289a7",
	"0acdc7f5-14ae-e7ec-1eac-e1c2a0510197",
	"40da950f-092d-1954-f95d-150a1ea1275e",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy::EV1: Event Instance');
INSERT INTO GD_CON
	VALUES ("3f85c0f2-371b-32ef-1375-46d0e94289a7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5a98dce5-16e8-bc2a-eab3-6b8545a880c0",
	"3f85c0f2-371b-32ef-1375-46d0e94289a7",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5a98dce5-16e8-bc2a-eab3-6b8545a880c0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5a98dce5-16e8-bc2a-eab3-6b8545a880c0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5a98dce5-16e8-bc2a-eab3-6b8545a880c0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2a445259-48c6-f557-22de-e1e0c98b3524",
	"3f85c0f2-371b-32ef-1375-46d0e94289a7",
	3,
	-7.000000,
	-28.000000);
INSERT INTO DIM_ND
	VALUES (284.000000,
	59.000000,
	"2a445259-48c6-f557-22de-e1e0c98b3524");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1243.000000,
	"2a445259-48c6-f557-22de-e1e0c98b3524",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2a445259-48c6-f557-22de-e1e0c98b3524",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5286f79e-3a03-0af6-3989-a65328639e12",
	"3f85c0f2-371b-32ef-1375-46d0e94289a7",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5286f79e-3a03-0af6-3989-a65328639e12");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5286f79e-3a03-0af6-3989-a65328639e12",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5286f79e-3a03-0af6-3989-a65328639e12",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("8d248dd2-bb7a-8e7c-0f70-0609b567ef99",
	"3f85c0f2-371b-32ef-1375-46d0e94289a7",
	"00000000-0000-0000-0000-000000000000",
	"5eb522da-1a08-f743-c054-c273312d4015",
	"813832ba-f2fc-1e74-aa40-af88912ab45e");
INSERT INTO GD_LS
	VALUES ("659fb0c8-bddc-16b7-16e6-aa1d9e9b2024",
	"3f85c0f2-371b-32ef-1375-46d0e94289a7",
	"8d248dd2-bb7a-8e7c-0f70-0609b567ef99",
	"813832ba-f2fc-1e74-aa40-af88912ab45e",
	"c076a8f5-210c-5a55-95ff-5602fccaf016");
INSERT INTO GD_LS
	VALUES ("02f2ada1-0c37-c6db-88a3-7e1637960005",
	"3f85c0f2-371b-32ef-1375-46d0e94289a7",
	"659fb0c8-bddc-16b7-16e6-aa1d9e9b2024",
	"c076a8f5-210c-5a55-95ff-5602fccaf016",
	"2612695b-8c02-d74e-1146-b7c259c35a61");
INSERT INTO DIM_WAY
	VALUES ("5eb522da-1a08-f743-c054-c273312d4015",
	1888.000000,
	1328.000000,
	"3f85c0f2-371b-32ef-1375-46d0e94289a7",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("813832ba-f2fc-1e74-aa40-af88912ab45e",
	1888.000000,
	1296.000000,
	"3f85c0f2-371b-32ef-1375-46d0e94289a7",
	"00000000-0000-0000-0000-000000000000",
	"5eb522da-1a08-f743-c054-c273312d4015");
INSERT INTO DIM_WAY
	VALUES ("c076a8f5-210c-5a55-95ff-5602fccaf016",
	2016.000000,
	1296.000000,
	"3f85c0f2-371b-32ef-1375-46d0e94289a7",
	"00000000-0000-0000-0000-000000000000",
	"813832ba-f2fc-1e74-aa40-af88912ab45e");
INSERT INTO DIM_WAY
	VALUES ("2612695b-8c02-d74e-1146-b7c259c35a61",
	2016.000000,
	1328.000000,
	"3f85c0f2-371b-32ef-1375-46d0e94289a7",
	"00000000-0000-0000-0000-000000000000",
	"c076a8f5-210c-5a55-95ff-5602fccaf016");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3f85c0f2-371b-32ef-1375-46d0e94289a7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3f85c0f2-371b-32ef-1375-46d0e94289a7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("f91a1960-f136-70a5-0dd8-a1fde62c4170",
	"cb3a795c-d13e-3b42-ec1b-6ee37aeeb8b9",
	"3f85c0f2-371b-32ef-1375-46d0e94289a7");
INSERT INTO GD_GE
	VALUES ("368e11da-033f-f752-5ab3-866dc364cfa0",
	"0acdc7f5-14ae-e7ec-1eac-e1c2a0510197",
	"87d7123c-9ec5-c389-2fda-613f981c3404",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown::EV2: shutdown');
INSERT INTO GD_CON
	VALUES ("368e11da-033f-f752-5ab3-866dc364cfa0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2c4e8b74-cd4f-8a11-e84e-72f671b5fa0c",
	"368e11da-033f-f752-5ab3-866dc364cfa0",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"2c4e8b74-cd4f-8a11-e84e-72f671b5fa0c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2c4e8b74-cd4f-8a11-e84e-72f671b5fa0c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2c4e8b74-cd4f-8a11-e84e-72f671b5fa0c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("11d94390-b57d-46ef-d112-fd6cd5ee8898",
	"368e11da-033f-f752-5ab3-866dc364cfa0",
	3,
	0.000000,
	-29.000000);
INSERT INTO DIM_ND
	VALUES (144.000000,
	44.000000,
	"11d94390-b57d-46ef-d112-fd6cd5ee8898");
INSERT INTO DIM_GE
	VALUES (1983.000000,
	954.000000,
	"11d94390-b57d-46ef-d112-fd6cd5ee8898",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("11d94390-b57d-46ef-d112-fd6cd5ee8898",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7b83a27c-fd6d-f078-e6c2-954e38211884",
	"368e11da-033f-f752-5ab3-866dc364cfa0",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7b83a27c-fd6d-f078-e6c2-954e38211884");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7b83a27c-fd6d-f078-e6c2-954e38211884",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7b83a27c-fd6d-f078-e6c2-954e38211884",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("02d380c9-f0bd-ca91-d10f-bdac843bc03f",
	"368e11da-033f-f752-5ab3-866dc364cfa0",
	"00000000-0000-0000-0000-000000000000",
	"54686ee8-4b3e-9b50-0655-ad4b5e026daf",
	"086b6058-4e04-f77b-1e3d-1acc88277f20");
INSERT INTO GD_LS
	VALUES ("c50bdca7-80c5-2a02-76cd-c22b22ec494d",
	"368e11da-033f-f752-5ab3-866dc364cfa0",
	"02d380c9-f0bd-ca91-d10f-bdac843bc03f",
	"086b6058-4e04-f77b-1e3d-1acc88277f20",
	"192ad014-dbd2-8c82-73d1-b83d76536c17");
INSERT INTO GD_LS
	VALUES ("985c68c0-5afd-ed88-351c-f362ed37fbd8",
	"368e11da-033f-f752-5ab3-866dc364cfa0",
	"c50bdca7-80c5-2a02-76cd-c22b22ec494d",
	"192ad014-dbd2-8c82-73d1-b83d76536c17",
	"5339126e-2260-2ee1-5569-e9ce0ade7e3b");
INSERT INTO DIM_WAY
	VALUES ("54686ee8-4b3e-9b50-0655-ad4b5e026daf",
	1920.000000,
	1056.000000,
	"368e11da-033f-f752-5ab3-866dc364cfa0",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("086b6058-4e04-f77b-1e3d-1acc88277f20",
	1920.000000,
	1008.000000,
	"368e11da-033f-f752-5ab3-866dc364cfa0",
	"00000000-0000-0000-0000-000000000000",
	"54686ee8-4b3e-9b50-0655-ad4b5e026daf");
INSERT INTO DIM_WAY
	VALUES ("192ad014-dbd2-8c82-73d1-b83d76536c17",
	2096.000000,
	1008.000000,
	"368e11da-033f-f752-5ab3-866dc364cfa0",
	"00000000-0000-0000-0000-000000000000",
	"086b6058-4e04-f77b-1e3d-1acc88277f20");
INSERT INTO DIM_WAY
	VALUES ("5339126e-2260-2ee1-5569-e9ce0ade7e3b",
	2096.000000,
	1056.000000,
	"368e11da-033f-f752-5ab3-866dc364cfa0",
	"00000000-0000-0000-0000-000000000000",
	"192ad014-dbd2-8c82-73d1-b83d76536c17");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"368e11da-033f-f752-5ab3-866dc364cfa0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("368e11da-033f-f752-5ab3-866dc364cfa0",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("01184270-82d6-2a6c-b098-ffdde984b6bf",
	"854ed276-117d-0790-d850-843cc2c3df50",
	"368e11da-033f-f752-5ab3-866dc364cfa0");
INSERT INTO GD_GE
	VALUES ("3875f616-4302-0c2f-22c1-b8f4750968cd",
	"0acdc7f5-14ae-e7ec-1eac-e1c2a0510197",
	"79786b0c-2583-a95c-3b50-3c627a6a2a28",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy::EV2: shutdown');
INSERT INTO GD_CON
	VALUES ("3875f616-4302-0c2f-22c1-b8f4750968cd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d02896b5-8829-5117-d271-451406762e67",
	"3875f616-4302-0c2f-22c1-b8f4750968cd",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d02896b5-8829-5117-d271-451406762e67");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d02896b5-8829-5117-d271-451406762e67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d02896b5-8829-5117-d271-451406762e67",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d6e6d26c-8e23-c494-b894-a9102cd7d5a2",
	"3875f616-4302-0c2f-22c1-b8f4750968cd",
	3,
	23.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (134.000000,
	42.000000,
	"d6e6d26c-8e23-c494-b894-a9102cd7d5a2");
INSERT INTO DIM_GE
	VALUES (2247.000000,
	1247.000000,
	"d6e6d26c-8e23-c494-b894-a9102cd7d5a2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d6e6d26c-8e23-c494-b894-a9102cd7d5a2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7f29ad21-868f-2a45-9c40-487f52658e49",
	"3875f616-4302-0c2f-22c1-b8f4750968cd",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7f29ad21-868f-2a45-9c40-487f52658e49");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7f29ad21-868f-2a45-9c40-487f52658e49",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7f29ad21-868f-2a45-9c40-487f52658e49",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("72262f08-6ff1-ec14-ad8d-7c8b2e1864b9",
	"3875f616-4302-0c2f-22c1-b8f4750968cd",
	"00000000-0000-0000-0000-000000000000",
	"ec1a5f8e-e733-f202-1b78-5bf8d1bbb437",
	"c3195731-7c0a-4cee-31d1-41309546b140");
INSERT INTO GD_LS
	VALUES ("369f111c-e878-7e0f-8f4d-9151443ae0fb",
	"3875f616-4302-0c2f-22c1-b8f4750968cd",
	"72262f08-6ff1-ec14-ad8d-7c8b2e1864b9",
	"c3195731-7c0a-4cee-31d1-41309546b140",
	"23738795-7f43-f678-1e89-7d3183d98a7c");
INSERT INTO GD_LS
	VALUES ("53123847-51ab-366e-717c-05d12d3ef992",
	"3875f616-4302-0c2f-22c1-b8f4750968cd",
	"369f111c-e878-7e0f-8f4d-9151443ae0fb",
	"23738795-7f43-f678-1e89-7d3183d98a7c",
	"98a3780d-5ac9-e50b-b76a-f3ef18e94973");
INSERT INTO DIM_WAY
	VALUES ("ec1a5f8e-e733-f202-1b78-5bf8d1bbb437",
	2144.000000,
	1408.000000,
	"3875f616-4302-0c2f-22c1-b8f4750968cd",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c3195731-7c0a-4cee-31d1-41309546b140",
	2240.000000,
	1408.000000,
	"3875f616-4302-0c2f-22c1-b8f4750968cd",
	"00000000-0000-0000-0000-000000000000",
	"ec1a5f8e-e733-f202-1b78-5bf8d1bbb437");
INSERT INTO DIM_WAY
	VALUES ("23738795-7f43-f678-1e89-7d3183d98a7c",
	2240.000000,
	1120.000000,
	"3875f616-4302-0c2f-22c1-b8f4750968cd",
	"00000000-0000-0000-0000-000000000000",
	"c3195731-7c0a-4cee-31d1-41309546b140");
INSERT INTO DIM_WAY
	VALUES ("98a3780d-5ac9-e50b-b76a-f3ef18e94973",
	2144.000000,
	1120.000000,
	"3875f616-4302-0c2f-22c1-b8f4750968cd",
	"00000000-0000-0000-0000-000000000000",
	"23738795-7f43-f678-1e89-7d3183d98a7c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3875f616-4302-0c2f-22c1-b8f4750968cd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3875f616-4302-0c2f-22c1-b8f4750968cd",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e184d82f-98e8-118a-b32a-a27c9a829cb5",
	"14f06658-fa6a-9a98-f006-619255db8233",
	"3875f616-4302-0c2f-22c1-b8f4750968cd");
INSERT INTO GD_GE
	VALUES ("e2df57c7-db73-b5e8-95f5-9a4b224b23d9",
	"0acdc7f5-14ae-e7ec-1eac-e1c2a0510197",
	"d050e693-f8f5-1446-254b-598c8cdb8c2a",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown::EV1: Event Instance');
INSERT INTO GD_CON
	VALUES ("e2df57c7-db73-b5e8-95f5-9a4b224b23d9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bf53ea69-6b12-c57e-4e2d-c6e0b430d67e",
	"e2df57c7-db73-b5e8-95f5-9a4b224b23d9",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"bf53ea69-6b12-c57e-4e2d-c6e0b430d67e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bf53ea69-6b12-c57e-4e2d-c6e0b430d67e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bf53ea69-6b12-c57e-4e2d-c6e0b430d67e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("56fbc4ce-2121-26b4-f92b-9eb32948c683",
	"e2df57c7-db73-b5e8-95f5-9a4b224b23d9",
	3,
	18.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (136.000000,
	44.000000,
	"56fbc4ce-2121-26b4-f92b-9eb32948c683");
INSERT INTO DIM_GE
	VALUES (1778.000000,
	1237.000000,
	"56fbc4ce-2121-26b4-f92b-9eb32948c683",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("56fbc4ce-2121-26b4-f92b-9eb32948c683",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("01a1d482-f224-ab51-fed7-aa264821eccd",
	"e2df57c7-db73-b5e8-95f5-9a4b224b23d9",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"01a1d482-f224-ab51-fed7-aa264821eccd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"01a1d482-f224-ab51-fed7-aa264821eccd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("01a1d482-f224-ab51-fed7-aa264821eccd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("d53674c3-676f-23dc-59f1-90d990911d0b",
	"e2df57c7-db73-b5e8-95f5-9a4b224b23d9",
	"00000000-0000-0000-0000-000000000000",
	"a6e821cb-81bc-8a2e-082e-7128ec7e1e55",
	"b887bcfc-ffdd-2201-bc80-840a959a1d05");
INSERT INTO GD_LS
	VALUES ("a0920df0-ee6a-0d06-32f8-cd1fab3f3f95",
	"e2df57c7-db73-b5e8-95f5-9a4b224b23d9",
	"d53674c3-676f-23dc-59f1-90d990911d0b",
	"b887bcfc-ffdd-2201-bc80-840a959a1d05",
	"c5cea308-c74f-2a44-ffa9-f50c4efa1014");
INSERT INTO GD_LS
	VALUES ("7d1b13e7-17e1-c13d-a9ea-c8f87188764d",
	"e2df57c7-db73-b5e8-95f5-9a4b224b23d9",
	"a0920df0-ee6a-0d06-32f8-cd1fab3f3f95",
	"c5cea308-c74f-2a44-ffa9-f50c4efa1014",
	"4616367d-c04b-fe20-7403-455fb3d1a4cc");
INSERT INTO DIM_WAY
	VALUES ("a6e821cb-81bc-8a2e-082e-7128ec7e1e55",
	1856.000000,
	1120.000000,
	"e2df57c7-db73-b5e8-95f5-9a4b224b23d9",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("b887bcfc-ffdd-2201-bc80-840a959a1d05",
	1776.000000,
	1120.000000,
	"e2df57c7-db73-b5e8-95f5-9a4b224b23d9",
	"00000000-0000-0000-0000-000000000000",
	"a6e821cb-81bc-8a2e-082e-7128ec7e1e55");
INSERT INTO DIM_WAY
	VALUES ("c5cea308-c74f-2a44-ffa9-f50c4efa1014",
	1776.000000,
	1392.000000,
	"e2df57c7-db73-b5e8-95f5-9a4b224b23d9",
	"00000000-0000-0000-0000-000000000000",
	"b887bcfc-ffdd-2201-bc80-840a959a1d05");
INSERT INTO DIM_WAY
	VALUES ("4616367d-c04b-fe20-7403-455fb3d1a4cc",
	1856.000000,
	1392.000000,
	"e2df57c7-db73-b5e8-95f5-9a4b224b23d9",
	"00000000-0000-0000-0000-000000000000",
	"c5cea308-c74f-2a44-ffa9-f50c4efa1014");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e2df57c7-db73-b5e8-95f5-9a4b224b23d9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e2df57c7-db73-b5e8-95f5-9a4b224b23d9",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("efeb100a-75e4-2157-0c5b-d5d8f8a7d43e",
	"75f1f38e-dbec-ee24-ad29-d132b0d53ed0",
	"e2df57c7-db73-b5e8-95f5-9a4b224b23d9");
INSERT INTO DIM_DIA
	VALUES ("0acdc7f5-14ae-e7ec-1eac-e1c2a0510197",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	'Expression Test Object B',
	12,
	'ETOB',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"00000000-0000-0000-0000-000000000000",
	'etob_id',
	'',
	'',
	'etob_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1a564168-a2e9-41ae-d31c-8c10def2b395",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("1a564168-a2e9-41ae-d31c-8c10def2b395",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("1a564168-a2e9-41ae-d31c-8c10def2b395",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"bc9dbdb4-2492-1090-5bc2-0d289b206342",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"1a564168-a2e9-41ae-d31c-8c10def2b395",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"40bc5372-18e1-9d7a-9826-711ca7e3db47",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("076f5dab-39e1-6926-b521-ba06f0c790f6",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("076f5dab-39e1-6926-b521-ba06f0c790f6",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("076f5dab-39e1-6926-b521-ba06f0c790f6",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"4434b8c2-62cd-02e4-8271-e2ffa316c758",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a1177025-3929-3edb-7d0e-df9e89492a37",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("a1177025-3929-3edb-7d0e-df9e89492a37",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("a1177025-3929-3edb-7d0e-df9e89492a37",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"076f5dab-39e1-6926-b521-ba06f0c790f6",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("97cee472-2e50-7195-74b3-bb36d4da2a04",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("97cee472-2e50-7195-74b3-bb36d4da2a04",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("97cee472-2e50-7195-74b3-bb36d4da2a04",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"a1177025-3929-3edb-7d0e-df9e89492a37",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"97cee472-2e50-7195-74b3-bb36d4da2a04",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"b2e2ec8b-dea4-27ff-bf04-36a5ef39a581",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	"7695bbaf-5f4d-4f46-3a0d-4621d0da66b7",
	"b243aea3-7f76-54e6-9dcf-022365a6e156",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R8');
INSERT INTO O_RATTR
	VALUES ("7695bbaf-5f4d-4f46-3a0d-4621d0da66b7",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("7695bbaf-5f4d-4f46-3a0d-4621d0da66b7",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"24801b0c-27a4-11d2-8d50-aa1ada226943",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"f8ac741f-e81c-75fe-e6a7-721e86942af5",
	"894ef6cf-6024-ed13-cc94-85b694333c5b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'etoc_id',
	'R6');
INSERT INTO O_RATTR
	VALUES ("f8ac741f-e81c-75fe-e6a7-721e86942af5",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"24801b0c-27a4-11d2-8d50-aa1ada226943",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'etoc_id');
INSERT INTO O_ATTR
	VALUES ("f8ac741f-e81c-75fe-e6a7-721e86942af5",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"7695bbaf-5f4d-4f46-3a0d-4621d0da66b7",
	'etoc_id',
	'',
	'',
	'etoc_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"80fde00a-1975-1181-0799-19d319814ba2",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"d78af3a9-3b82-a0fd-47cb-fa24b6dcf6b9",
	"aa8548e2-470a-b46f-14f2-d59dbdb38ca2",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'btrue',
	'R6');
INSERT INTO O_RATTR
	VALUES ("d78af3a9-3b82-a0fd-47cb-fa24b6dcf6b9",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"80fde00a-1975-1181-0799-19d319814ba2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("d78af3a9-3b82-a0fd-47cb-fa24b6dcf6b9",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"f8ac741f-e81c-75fe-e6a7-721e86942af5",
	'r6btrue',
	'',
	'r6',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"4cfb4cd8-c904-1c1f-6dc1-03a00ca667c8",
	"951ad794-2873-d475-7cd7-c9e00e17e71d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'bfalse',
	'R6');
INSERT INTO O_RATTR
	VALUES ("4cfb4cd8-c904-1c1f-6dc1-03a00ca667c8",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("4cfb4cd8-c904-1c1f-6dc1-03a00ca667c8",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"d78af3a9-3b82-a0fd-47cb-fa24b6dcf6b9",
	'r6bfalse',
	'',
	'r6',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"11d0b125-877e-7584-80f0-85bcac5e64a7",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"5fa613f1-f692-0bb9-f3a6-cd5b467e292c",
	"4d506659-eff5-a9b8-70b1-8ef421843fc1",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'r',
	'R6');
INSERT INTO O_RATTR
	VALUES ("5fa613f1-f692-0bb9-f3a6-cd5b467e292c",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"11d0b125-877e-7584-80f0-85bcac5e64a7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'r');
INSERT INTO O_ATTR
	VALUES ("5fa613f1-f692-0bb9-f3a6-cd5b467e292c",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"4cfb4cd8-c904-1c1f-6dc1-03a00ca667c8",
	'r6r',
	'',
	'r6',
	'r',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"e2168d1b-0db5-7ec5-a761-3383b9b2203b",
	"ad8e527f-7f8a-b1d3-17a2-a8ece2a813be",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	's',
	'R6');
INSERT INTO O_RATTR
	VALUES ("e2168d1b-0db5-7ec5-a761-3383b9b2203b",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	's');
INSERT INTO O_ATTR
	VALUES ("e2168d1b-0db5-7ec5-a761-3383b9b2203b",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"5fa613f1-f692-0bb9-f3a6-cd5b467e292c",
	'r6s',
	'',
	'r6',
	's',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	"5b26dfa4-7f92-b09b-2dc0-59c0d0870334",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'u',
	'R6');
INSERT INTO O_RATTR
	VALUES ("3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'u');
INSERT INTO O_ATTR
	VALUES ("3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"e2168d1b-0db5-7ec5-a761-3383b9b2203b",
	'r6u',
	'',
	'r6',
	'u',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"0d8ef56e-409f-8cc2-531f-316abac975cc",
	"989cd201-f183-fd27-1734-0db7efb14e23",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'd',
	'R6');
INSERT INTO O_RATTR
	VALUES ("0d8ef56e-409f-8cc2-531f-316abac975cc",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'd');
INSERT INTO O_ATTR
	VALUES ("0d8ef56e-409f-8cc2-531f-316abac975cc",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	'r6d',
	'',
	'r6',
	'd',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"11b3b33a-863f-0583-331c-066d47b7e24d",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	"ceb9e9a9-0bd6-56a8-01d7-f6f2f29488cb",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	't',
	'R6');
INSERT INTO O_RATTR
	VALUES ("45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"11b3b33a-863f-0583-331c-066d47b7e24d",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	't');
INSERT INTO O_ATTR
	VALUES ("45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"0d8ef56e-409f-8cc2-531f-316abac975cc",
	'r6t',
	'',
	'r6',
	't',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"50fc1111-665c-8a1b-06da-c6289edcd78a",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"878ce09b-f153-84b6-4a68-4a11addd43dd",
	"8fee6254-b6ab-a206-a6ba-2f8dbb47ce1b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'tim',
	'R6');
INSERT INTO O_RATTR
	VALUES ("878ce09b-f153-84b6-4a68-4a11addd43dd",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"50fc1111-665c-8a1b-06da-c6289edcd78a",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'tim');
INSERT INTO O_ATTR
	VALUES ("878ce09b-f153-84b6-4a68-4a11addd43dd",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	'r6tim',
	'',
	'r6',
	'tim',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"4953388e-55f5-ecd5-7d4e-dd164baf3ed8",
	"11819529-d2ee-1362-b74f-48748c1ca662",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'ev',
	'R6');
INSERT INTO O_RATTR
	VALUES ("4953388e-55f5-ecd5-7d4e-dd164baf3ed8",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'ev');
INSERT INTO O_ATTR
	VALUES ("4953388e-55f5-ecd5-7d4e-dd164baf3ed8",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"878ce09b-f153-84b6-4a68-4a11addd43dd",
	'r6ev',
	'',
	'r6',
	'ev',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_OIDA
	VALUES ("47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'ev');
INSERT INTO O_OIDA
	VALUES ("4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'u');
INSERT INTO O_OIDA
	VALUES ("350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("076f5dab-39e1-6926-b521-ba06f0c790f6",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'd');
INSERT INTO O_OIDA
	VALUES ("97cee472-2e50-7195-74b3-bb36d4da2a04",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'tim');
INSERT INTO O_OIDA
	VALUES ("a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'etob_id');
INSERT INTO O_OIDA
	VALUES ("a1177025-3929-3edb-7d0e-df9e89492a37",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	't');
INSERT INTO O_OIDA
	VALUES ("1a564168-a2e9-41ae-d31c-8c10def2b395",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'r');
INSERT INTO O_OIDA
	VALUES ("bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	's');
INSERT INTO O_ID
	VALUES (1,
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ID
	VALUES (2,
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO PE_PE
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	'Expression Test Object C',
	13,
	'ETOC',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("24801b0c-27a4-11d2-8d50-aa1ada226943",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("24801b0c-27a4-11d2-8d50-aa1ada226943",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("24801b0c-27a4-11d2-8d50-aa1ada226943",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"00000000-0000-0000-0000-000000000000",
	'etoc_id',
	'',
	'',
	'etoc_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"24801b0c-27a4-11d2-8d50-aa1ada226943",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"80fde00a-1975-1181-0799-19d319814ba2",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"11d0b125-877e-7584-80f0-85bcac5e64a7",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"fc4a3564-c576-99ad-d738-ce2e134dc98e",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("50fc1111-665c-8a1b-06da-c6289edcd78a",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("50fc1111-665c-8a1b-06da-c6289edcd78a",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("50fc1111-665c-8a1b-06da-c6289edcd78a",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"11b3b33a-863f-0583-331c-066d47b7e24d",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"50fc1111-665c-8a1b-06da-c6289edcd78a",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_OIDA
	VALUES ("3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	's');
INSERT INTO O_OIDA
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'ev');
INSERT INTO O_OIDA
	VALUES ("f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'd');
INSERT INTO O_OIDA
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'u');
INSERT INTO O_OIDA
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	't');
INSERT INTO O_OIDA
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'r');
INSERT INTO O_OIDA
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("50fc1111-665c-8a1b-06da-c6289edcd78a",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'tim');
INSERT INTO O_OIDA
	VALUES ("1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("24801b0c-27a4-11d2-8d50-aa1ada226943",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'etoc_id');
INSERT INTO O_ID
	VALUES (1,
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ID
	VALUES (2,
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO PE_PE
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'Expression Test',
	3,
	'ET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("2c4dfa33-317a-2057-4799-ca233db1e10a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'no_parm_ret_void',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'LOG::LogFailure(message:"Operation ET::no_parm_ret_void should not have been translated.");
',
	1,
	'',
	"bd0d89e0-a4f6-1cf8-6797-98220022bdef",
	0);
INSERT INTO O_TFR
	VALUES ("6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'i_parm_ret_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'LOG::LogFailure(message:"Operation ET::i_parm_ret_i should not have been translated.");
return param.i;',
	1,
	'',
	"3c55c927-841a-b2ef-2e4f-65509835d7e6",
	0);
INSERT INTO O_TPARM
	VALUES ("92851ea0-e968-8852-3977-05c80e689712",
	"6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("fec823f3-30b7-8aec-c9b7-169afcf2e052",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'r_parm_ret_r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'LOG::LogFailure(message:"Operation ET::r_parm_ret_r should not have been translated.");
return param.r;',
	1,
	'',
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	0);
INSERT INTO O_TPARM
	VALUES ("9e1cd40a-6950-f6c2-74a8-fc8a5f710081",
	"fec823f3-30b7-8aec-c9b7-169afcf2e052",
	'r',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("5bf95f81-bb7c-8400-6836-f1339f7c917e",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'b_parm_ret_b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'LOG::LogFailure(message:"Operation ET::b_parm_ret_b should not have been translated.");
return param.b;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TPARM
	VALUES ("21f9c83c-5d29-cdd6-3825-1696153c01bb",
	"5bf95f81-bb7c-8400-6836-f1339f7c917e",
	'b',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("e46687fc-d696-59c0-16bf-f541d57a57d1",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	's_parm_ret_s',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'LOG::LogFailure(message:"Operation ET::s_parm_ret_s should not have been translated.");
return param.s;',
	1,
	'',
	"fec823f3-30b7-8aec-c9b7-169afcf2e052",
	0);
INSERT INTO O_TPARM
	VALUES ("b9095bd1-c52b-bad3-aad2-3e64d425eb1e",
	"e46687fc-d696-59c0-16bf-f541d57a57d1",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("fddb96c4-ae5e-78b8-2e0e-a128df260b0a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'u_parm_ret_u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'LOG::LogFailure(message:"Operation ET::u_parm_ret_u should not have been translated.");
return param.u;',
	1,
	'',
	"1532eced-0f36-6463-4a58-51234289a64d",
	0);
INSERT INTO O_TPARM
	VALUES ("879d19f9-1ecd-9004-d179-1280d2b32a6e",
	"fddb96c4-ae5e-78b8-2e0e-a128df260b0a",
	'u',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("3c55c927-841a-b2ef-2e4f-65509835d7e6",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'd_parm_ret_d',
	'',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'LOG::LogFailure(message:"Operation ET::d_parm_ret_d should not have been translated.");
return param.d;',
	1,
	'',
	"5bf95f81-bb7c-8400-6836-f1339f7c917e",
	0);
INSERT INTO O_TPARM
	VALUES ("ba1f9437-707c-21dc-b0af-6152d8103224",
	"3c55c927-841a-b2ef-2e4f-65509835d7e6",
	'd',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("1532eced-0f36-6463-4a58-51234289a64d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	't_parm_ret_t',
	'',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'LOG::LogFailure(message:"Operation ET::t_parm_ret_t should not have been translated.");
return param.t;',
	1,
	'',
	"e46687fc-d696-59c0-16bf-f541d57a57d1",
	0);
INSERT INTO O_TPARM
	VALUES ("0e284941-c030-3774-95ef-053390cb4782",
	"1532eced-0f36-6463-4a58-51234289a64d",
	't',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("bd0d89e0-a4f6-1cf8-6797-98220022bdef",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'i_parm_ret_void',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'LOG::LogFailure(message:"Operation ET::i_parm_ret_void should not have been translated.");',
	1,
	'',
	"6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5",
	0);
INSERT INTO O_TPARM
	VALUES ("d09381b0-4a7b-4fd2-4f14-f812e97311db",
	"bd0d89e0-a4f6-1cf8-6797-98220022bdef",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'waitOneSec',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'',
	1,
	'',
	"fddb96c4-ae5e-78b8-2e0e-a128df260b0a",
	0);
INSERT INTO O_NBATTR
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"00000000-0000-0000-0000-000000000000",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("71ec8e80-08af-8589-0172-cbee963c83a1",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("71ec8e80-08af-8589-0172-cbee963c83a1",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("71ec8e80-08af-8589-0172-cbee963c83a1",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"ade5b96d-7039-736d-26dd-570b8389401d",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5473ca42-ff3d-8921-d889-e9a18871ede3",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("5473ca42-ff3d-8921-d889-e9a18871ede3",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("5473ca42-ff3d-8921-d889-e9a18871ede3",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"71ec8e80-08af-8589-0172-cbee963c83a1",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("15799752-721b-413b-9fed-b6332ef07f8f",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("15799752-721b-413b-9fed-b6332ef07f8f",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("15799752-721b-413b-9fed-b6332ef07f8f",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"5473ca42-ff3d-8921-d889-e9a18871ede3",
	'i',
	'',
	'',
	'i',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("041bdb4d-d371-40fe-11de-ac9a36aa975d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("041bdb4d-d371-40fe-11de-ac9a36aa975d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("041bdb4d-d371-40fe-11de-ac9a36aa975d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"15799752-721b-413b-9fed-b6332ef07f8f",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("6a88fca5-3e6e-6dae-9650-e58b6b4911d8",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("6a88fca5-3e6e-6dae-9650-e58b6b4911d8",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("6a88fca5-3e6e-6dae-9650-e58b6b4911d8",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"041bdb4d-d371-40fe-11de-ac9a36aa975d",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("74f77bac-5723-b9b4-f191-874a62d7a110",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("74f77bac-5723-b9b4-f191-874a62d7a110",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("74f77bac-5723-b9b4-f191-874a62d7a110",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"6a88fca5-3e6e-6dae-9650-e58b6b4911d8",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bf144f14-8ae8-1ec0-968f-c96132ad729a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("bf144f14-8ae8-1ec0-968f-c96132ad729a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("bf144f14-8ae8-1ec0-968f-c96132ad729a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"74f77bac-5723-b9b4-f191-874a62d7a110",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3c47b51e-6e76-735e-6087-17d6e4698fc4",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("3c47b51e-6e76-735e-6087-17d6e4698fc4",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("3c47b51e-6e76-735e-6087-17d6e4698fc4",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"bf144f14-8ae8-1ec0-968f-c96132ad729a",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("acc6975a-0c4a-aaff-99ec-0fbf102ba84c",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("acc6975a-0c4a-aaff-99ec-0fbf102ba84c",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("acc6975a-0c4a-aaff-99ec-0fbf102ba84c",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"3c47b51e-6e76-735e-6087-17d6e4698fc4",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ce0e773a-bec8-c5c0-441a-91f9c02e0d78",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("ce0e773a-bec8-c5c0-441a-91f9c02e0d78",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("ce0e773a-bec8-c5c0-441a-91f9c02e0d78",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"acc6975a-0c4a-aaff-99ec-0fbf102ba84c",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("fead1f11-9dcf-0a41-a2f5-acf1fd55c7f7",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("fead1f11-9dcf-0a41-a2f5-acf1fd55c7f7",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("fead1f11-9dcf-0a41-a2f5-acf1fd55c7f7",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"ce0e773a-bec8-c5c0-441a-91f9c02e0d78",
	'log_id',
	'',
	'',
	'log_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("d3929d8d-bce9-a55a-e726-71f8ecf997f4",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("d3929d8d-bce9-a55a-e726-71f8ecf997f4",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("d3929d8d-bce9-a55a-e726-71f8ecf997f4",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"fead1f11-9dcf-0a41-a2f5-acf1fd55c7f7",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("7c27111b-5601-8905-ba68-bebcb5c02057",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("7c27111b-5601-8905-ba68-bebcb5c02057",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("7c27111b-5601-8905-ba68-bebcb5c02057",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"d3929d8d-bce9-a55a-e726-71f8ecf997f4",
	'my_b',
	'',
	'',
	'my_b',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("eb93b9eb-78d5-6781-dce1-5b4fa26d1b8a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("eb93b9eb-78d5-6781-dce1-5b4fa26d1b8a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("eb93b9eb-78d5-6781-dce1-5b4fa26d1b8a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"7c27111b-5601-8905-ba68-bebcb5c02057",
	'my_i',
	'',
	'',
	'my_i',
	0,
	"4c39b4f9-523d-8cc3-5126-d0bde9640322",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4e9575cf-d6f9-66da-bb31-8b5eb7fb8a00",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("4e9575cf-d6f9-66da-bb31-8b5eb7fb8a00",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("4e9575cf-d6f9-66da-bb31-8b5eb7fb8a00",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"eb93b9eb-78d5-6781-dce1-5b4fa26d1b8a",
	'my_r',
	'',
	'',
	'my_r',
	0,
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("11c5b691-9923-5730-b39c-d2efc2a60069",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("11c5b691-9923-5730-b39c-d2efc2a60069",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("11c5b691-9923-5730-b39c-d2efc2a60069",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"4e9575cf-d6f9-66da-bb31-8b5eb7fb8a00",
	'my_s',
	'',
	'',
	'my_s',
	0,
	"ce87aa8d-1bb4-01ea-0916-96321b55867c",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("80785ddb-c1bf-72f4-caf0-6069104575c7",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("80785ddb-c1bf-72f4-caf0-6069104575c7",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("80785ddb-c1bf-72f4-caf0-6069104575c7",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"11c5b691-9923-5730-b39c-d2efc2a60069",
	'my_u',
	'',
	'',
	'my_u',
	0,
	"bc4d8a5f-8892-bff5-cf51-68bad811491a",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"28111606-8112-c6c3-8492-598c7d3de4a6",
	"3753592a-8926-f5c0-8141-f5aab60b273a",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'etob_id',
	'R1');
INSERT INTO O_RATTR
	VALUES ("28111606-8112-c6c3-8492-598c7d3de4a6",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'etob_id');
INSERT INTO O_ATTR
	VALUES ("28111606-8112-c6c3-8492-598c7d3de4a6",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"80785ddb-c1bf-72f4-caf0-6069104575c7",
	'etob_id',
	'',
	'',
	'etob_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"ce920c66-93c6-5e2e-9802-e3be3c671874",
	"adc56b61-419d-f174-634f-8845bff6308d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'btrue',
	'R1');
INSERT INTO O_RATTR
	VALUES ("ce920c66-93c6-5e2e-9802-e3be3c671874",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("ce920c66-93c6-5e2e-9802-e3be3c671874",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"28111606-8112-c6c3-8492-598c7d3de4a6",
	'r1btrue',
	'',
	'r1',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"9d00ecc3-a01a-4bd2-6126-02609e61d8ca",
	"1646c2b6-e1b8-2ff6-804d-2816d4def61f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'bfalse',
	'R1');
INSERT INTO O_RATTR
	VALUES ("9d00ecc3-a01a-4bd2-6126-02609e61d8ca",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("9d00ecc3-a01a-4bd2-6126-02609e61d8ca",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"ce920c66-93c6-5e2e-9802-e3be3c671874",
	'r1bfalse',
	'',
	'r1',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"1a564168-a2e9-41ae-d31c-8c10def2b395",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"a09bf289-ccd2-e9bf-d8a3-b058257466dc",
	"5e7b239b-59a8-8274-3c8a-7abe276e36c6",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'r',
	'R1');
INSERT INTO O_RATTR
	VALUES ("a09bf289-ccd2-e9bf-d8a3-b058257466dc",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"1a564168-a2e9-41ae-d31c-8c10def2b395",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'r');
INSERT INTO O_ATTR
	VALUES ("a09bf289-ccd2-e9bf-d8a3-b058257466dc",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"9d00ecc3-a01a-4bd2-6126-02609e61d8ca",
	'r1r',
	'',
	'r1',
	'r',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"87ea4870-c492-cdc0-e932-66dba42f6abd",
	"7bdb5dde-4d1f-9322-83f1-d4aef5ce28fc",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	's',
	'R1');
INSERT INTO O_RATTR
	VALUES ("87ea4870-c492-cdc0-e932-66dba42f6abd",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	's');
INSERT INTO O_ATTR
	VALUES ("87ea4870-c492-cdc0-e932-66dba42f6abd",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"a09bf289-ccd2-e9bf-d8a3-b058257466dc",
	'r1s',
	'',
	'r1',
	's',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"2b5de8a5-ad3c-d612-49ae-b4ebc064fdd5",
	"0a567d5d-743b-86df-7f36-8d47c97145b4",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'u',
	'R1');
INSERT INTO O_RATTR
	VALUES ("2b5de8a5-ad3c-d612-49ae-b4ebc064fdd5",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'u');
INSERT INTO O_ATTR
	VALUES ("2b5de8a5-ad3c-d612-49ae-b4ebc064fdd5",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"87ea4870-c492-cdc0-e932-66dba42f6abd",
	'r1u',
	'',
	'r1',
	'u',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"076f5dab-39e1-6926-b521-ba06f0c790f6",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"4d509b29-2b37-068b-6f48-01edbb921d02",
	"955f9dc3-6792-d471-00ec-91b38ae7fb69",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'd',
	'R1');
INSERT INTO O_RATTR
	VALUES ("4d509b29-2b37-068b-6f48-01edbb921d02",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"076f5dab-39e1-6926-b521-ba06f0c790f6",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'd');
INSERT INTO O_ATTR
	VALUES ("4d509b29-2b37-068b-6f48-01edbb921d02",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"2b5de8a5-ad3c-d612-49ae-b4ebc064fdd5",
	'r1d',
	'',
	'r1',
	'd',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"a1177025-3929-3edb-7d0e-df9e89492a37",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"3c64d10e-3f58-5dfb-cff3-b51bd0915110",
	"4ed0e08d-602b-f2d5-2f05-b795e0fe4d69",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	't',
	'R1');
INSERT INTO O_RATTR
	VALUES ("3c64d10e-3f58-5dfb-cff3-b51bd0915110",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"a1177025-3929-3edb-7d0e-df9e89492a37",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	't');
INSERT INTO O_ATTR
	VALUES ("3c64d10e-3f58-5dfb-cff3-b51bd0915110",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"4d509b29-2b37-068b-6f48-01edbb921d02",
	'r1t',
	'',
	'r1',
	't',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"97cee472-2e50-7195-74b3-bb36d4da2a04",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"19f8371a-e772-62ae-b3f9-de22f89c722c",
	"0cf5ecb2-9f89-da33-bb16-ce0693261674",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'tim',
	'R1');
INSERT INTO O_RATTR
	VALUES ("19f8371a-e772-62ae-b3f9-de22f89c722c",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"97cee472-2e50-7195-74b3-bb36d4da2a04",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'tim');
INSERT INTO O_ATTR
	VALUES ("19f8371a-e772-62ae-b3f9-de22f89c722c",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"3c64d10e-3f58-5dfb-cff3-b51bd0915110",
	'r1tim',
	'',
	'r1',
	'tim',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"22c96144-8305-abca-b854-591cdee5564f",
	"6367115e-8d6d-a5bb-91e9-beb7a37cff4f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'ev',
	'R1');
INSERT INTO O_RATTR
	VALUES ("22c96144-8305-abca-b854-591cdee5564f",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'ev');
INSERT INTO O_ATTR
	VALUES ("22c96144-8305-abca-b854-591cdee5564f",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"19f8371a-e772-62ae-b3f9-de22f89c722c",
	'r1ev',
	'',
	'r1',
	'ev',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_OIDA
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	'et_id');
INSERT INTO O_ID
	VALUES (1,
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ID
	VALUES (2,
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO SM_ISM
	VALUES ("4183af7f-5458-46fd-b949-bef6a2b6614c",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO SM_SM
	VALUES ("4183af7f-5458-46fd-b949-bef6a2b6614c",
	'',
	4);
INSERT INTO SM_MOORE
	VALUES ("4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_EVTDI
	VALUES ("56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"fdcd6a24-3dcf-1a4d-44c8-e9aafa15c86c");
INSERT INTO SM_EVTDI
	VALUES ("4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67");
INSERT INTO SM_EVTDI
	VALUES ("1a0b32df-a648-2dc4-be32-c924c59b332c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	's',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82");
INSERT INTO SM_EVTDI
	VALUES ("44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"3600367e-0add-f558-0191-3db7429b77fc");
INSERT INTO SM_EVTDI
	VALUES ("aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'my_b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("ce156462-1465-51f4-1a56-0e636e83effe",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'my_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7");
INSERT INTO SM_EVTDI
	VALUES ("a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'my_r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"ce156462-1465-51f4-1a56-0e636e83effe");
INSERT INTO SM_EVTDI
	VALUES ("adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'my_s',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06");
INSERT INTO SM_EVTDI
	VALUES ("98844fd4-7709-19a8-4164-61b84988e3ac",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'my_u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7");
INSERT INTO SM_EVTDI
	VALUES ("aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"1a0b32df-a648-2dc4-be32-c924c59b332c");
INSERT INTO SM_EVTDI
	VALUES ("3600367e-0add-f558-0191-3db7429b77fc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726");
INSERT INTO SM_EVTDI
	VALUES ("285ab600-087c-6767-ab4a-a92f5f89988a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'tint1',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("7a133f52-371a-6d89-995f-845ec5c9c51f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'tint2',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"285ab600-087c-6767-ab4a-a92f5f89988a");
INSERT INTO SM_EVTDI
	VALUES ("3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'treal1',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"7a133f52-371a-6d89-995f-845ec5c9c51f");
INSERT INTO SM_EVTDI
	VALUES ("ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'treal2',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037");
INSERT INTO SM_EVTDI
	VALUES ("c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'd',
	'',
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'ts',
	'',
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"417f5810-e42c-e0e2-fb4b-3cec12ff8438");
INSERT INTO SM_EVTDI
	VALUES ("417f5810-e42c-e0e2-fb4b-3cec12ff8438",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'tim',
	'',
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7");
INSERT INTO SM_EVTDI
	VALUES ("fdcd6a24-3dcf-1a4d-44c8-e9aafa15c86c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'ev',
	'',
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c");
INSERT INTO SM_EVTDI
	VALUES ("668a418f-509c-95d6-adf3-7a0b0b85f32c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"2a6fe068-9d45-bf33-593f-7dda41f692f2");
INSERT INTO SM_EVTDI
	VALUES ("2a6fe068-9d45-bf33-593f-7dda41f692f2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("19262542-efee-dfa5-f1ee-ae8a2ee50029",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"668a418f-509c-95d6-adf3-7a0b0b85f32c");
INSERT INTO SM_EVTDI
	VALUES ("dbbeb42d-8264-dc7d-5893-21789a4ff469",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	's',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"19262542-efee-dfa5-f1ee-ae8a2ee50029");
INSERT INTO SM_EVTDI
	VALUES ("d69d931a-ab14-b19a-8822-8d44b2ddd977",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"dbbeb42d-8264-dc7d-5893-21789a4ff469");
INSERT INTO SM_EVTDI
	VALUES ("2cfec34e-d69c-8772-2456-19b12b85f5e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("f935da26-6602-ad1d-c751-1840ea176c62",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("614ad6d5-cf9f-c16d-a510-f699f72fd5d3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("82c8451b-c97e-5266-a12a-4a2dea331cb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"2cfec34e-d69c-8772-2456-19b12b85f5e0");
INSERT INTO SM_EVTDI
	VALUES ("deb936a4-b007-8c1e-5aea-f8ebf80e0661",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"f935da26-6602-ad1d-c751-1840ea176c62");
INSERT INTO SM_EVTDI
	VALUES ("f8060b52-33ff-f2ff-a3c2-5f336a27192b",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"614ad6d5-cf9f-c16d-a510-f699f72fd5d3");
INSERT INTO SM_LEVT
	VALUES ("6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start Expression Test',
	0,
	'',
	'ET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Run F3 Binary Ops',
	0,
	'',
	'ET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Run F15 Values',
	0,
	'',
	'ET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Run F16 Transformers',
	0,
	'',
	'ET4',
	'');
INSERT INTO SM_LEVT
	VALUES ("b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	5,
	'Run F17 Timestamp and F18 Date Operators',
	0,
	'',
	'ET5',
	'');
INSERT INTO SM_LEVT
	VALUES ("f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	6,
	'Run F1 and F2 for User Defined Types',
	0,
	'',
	'ET6',
	'');
INSERT INTO SM_LEVT
	VALUES ("55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	7,
	'Run F3 through F14 for User Defined Types',
	0,
	'',
	'ET7',
	'');
INSERT INTO SM_LEVT
	VALUES ("81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	8,
	'Run F15 for User Defined Types',
	0,
	'',
	'ET8',
	'');
INSERT INTO SM_LEVT
	VALUES ("91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	9,
	'Shut Down',
	0,
	'',
	'ET9',
	'');
INSERT INTO SM_LEVT
	VALUES ("1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	10,
	'Start not_empty test',
	0,
	'',
	'ET10',
	'');
INSERT INTO SM_LEVT
	VALUES ("707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	11,
	'Start cardinality test',
	0,
	'',
	'ET11',
	'');
INSERT INTO SM_LEVT
	VALUES ("05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	12,
	'Start empty test',
	0,
	'',
	'ET12',
	'');
INSERT INTO SM_LEVT
	VALUES ("cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	13,
	'Start not test',
	0,
	'',
	'ET13',
	'');
INSERT INTO SM_LEVT
	VALUES ("5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	14,
	'Start subtract test',
	0,
	'',
	'ET14',
	'');
INSERT INTO SM_LEVT
	VALUES ("87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	15,
	'Start assign test',
	0,
	'',
	'ET15',
	'');
INSERT INTO SM_LEVT
	VALUES ("b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	16,
	'Start and test',
	0,
	'',
	'ET16',
	'');
INSERT INTO SM_LEVT
	VALUES ("7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	17,
	'Start or test',
	0,
	'',
	'ET17',
	'');
INSERT INTO SM_STATE
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'Starting Expression Test F1 and F2',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"b06514dd-3680-9909-6d9c-d215d09740e5");
INSERT INTO SM_AH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	1,
	'LOG::LogInfo(message:"Starting Expression Test F1 and F2") ;

//BEGIN EX.F.1
//check defaults

if (self.bfalse != FALSE)
  LOG::LogFailure(message:"EX.F.1: b default") ;
else
  LOG::LogSuccess(message:"EX.F.1: b default") ;
end if;

if (self.i != 0)
  LOG::LogFailure(message:"EX.F.1: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1: i default") ; 
end if;

//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.1: r default") real;

if (self.s != "")
  LOG::LogFailure(message:"EX.F.1: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1: s default") ;
end if;

//END EX.F.1

//BEGIN EX.F.2
//check integer assign

assign self.i = 10;
if (self.i == 10)
  LOG::LogSuccess(message:"EX.F.2: self.i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.i assign") ;  
end if;

//check real assign
assign self.r = 3.14;
//generate LOGREAL1:''Log Real''(r:3.14,message:"EX.F.2: r assigned to") real;
//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.2: r assigned is") real;

//check bool assign
assign self.bfalse = TRUE;
if (self.bfalse == TRUE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;
assign self.bfalse = FALSE;
if (self.bfalse == FALSE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;

//check string assign
assign self.s = "String";
if (self.s == "String")
  LOG::LogSuccess(message:"EX.F.2: self.s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.s assign") ;  
end if;

LOG::LogInfo(message:"Finished Expression Test F1 and F2") ;

//generate event to commence Operations test
generate ET13:''Start not test''(tfalse:FALSE, ttrue:TRUE) to self;',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'Run F3 through F14 Binary Operations',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"9842cf40-2a8c-cb2b-673b-e159c7987edd");
INSERT INTO SM_AH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	1,
	'
LOG::LogInfo(message:"Running F3 through F14 Binary Operations") ;

//BEGIN EX.F.3
// boolean and, or, ==, and !=

//and
assign b1 = TRUE;
assign b2 = FALSE;
if (b1 and b2)
  LOG::LogFailure(message:"EX.F.3 boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean and") ;
end if;

// or
if (b1 or b2)
  LOG::LogSuccess(message:"EX.F.3 boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean or") ;
end if;

//==
if (b1 == b2)
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
end if;

//!=
if (b1 != b2)
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
end if;
//END EX.F.3

//BEGIN EX.F.4
// integer + - * / %

// +
assign i1 = 5;
assign i2 = -6;
assign i3 = i1 + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4 integer +") ;
else
  LOG::LogFailure(message:"EX.F.4 integer +") ;
end if;
//- 
assign i4 = i1 - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4 integer -") ;
else
  LOG::LogFailure(message:"EX.F.4 integer -") ;
end if;
// *
assign i5 = i1*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4 integer *") ;
else
  LOG::LogFailure(message:"EX.F.4 integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/i1;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4 integer /") ;
else
  LOG::LogFailure(message:"EX.F.4 integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%i1;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4 integer %") ;
else
  LOG::LogFailure(message:"EX.F.4 integer %") ;
end if;
//END EX.F.4

//BEGIN EX.F.5
// integer  < <= == != >= >

assign j1 = 12;
assign j2 = 6;
assign j3 = 6;
// <
if (j2 < j1)
  LOG::LogSuccess(message:"EX.F.5 integer <") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <") ;
end if;
// <=
if (j2 <= j3)
  LOG::LogSuccess(message:"EX.F.5 integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <=") ;
end if;
//==
if (j2 == j3)
  LOG::LogSuccess(message:"EX.F.5 integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5 integer ==") ;
end if;
//!=
if (j2 != j1)
  LOG::LogSuccess(message:"EX.F.5 integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer !=") ;
end if;
//>=
if (j1 >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >=") ;
end if;
//>
if (j1 > j2)
  LOG::LogSuccess(message:"EX.F.5 integer >") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >") ;
end if;
//END EX.F.5

//BEGIN EX.F.6
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = i1 + r1;
LOG::LogReal(r:r3,message:"EX.F.6 int real + : r should be -1.0") ;

//- 
assign r4 = i1 - r1;
LOG::LogReal(r:r4,message:"EX.F.6 int real - : r should be 11.0") ;

// *
assign r5 = i1*r1;
LOG::LogReal(r:r5,message:"EX.F.6 int real * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = i10/r2;
LOG::LogReal(r:r6,message:"EX.F.6 int real / : r should be 2.0") ;

//END EX.F.6

//BEGIN EX.F.7
//  < <= == != >= > int as left operand, real as right, and bool result

assign k1 = 12;
assign s1 = 6.0;
assign s2 = 12.0;
assign k2 = 6;

// <
if (k2 < s2)
  LOG::LogSuccess(message:"EX.F.7 int real <") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <") ;
end if;

// <=
if (k2 <= s1)
  LOG::LogSuccess(message:"EX.F.7 int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <=") ;
end if;

//==
if (k2 == s1)
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
end if;

//!=
if (k1 != s1)
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
end if;

//>=
if (k1 >= s1)
  LOG::LogSuccess(message:"EX.F.7 int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (k1 > s1)
  LOG::LogSuccess(message:"EX.F.7 int real >") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >") ;
end if;
//END EX.F.7

//BEGIN EX.F.8
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = r1 + i1;
LOG::LogReal(r:r3,message:"EX.F.8 real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - i1;
LOG::LogReal(r:r4,message:"EX.F.8 real int - : r should be -11.0") ;

// *
assign r5 = r1*i1;
LOG::LogReal(r:r5,message:"EX.F.8 real int * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = r2/i10;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8

//BEGIN EX.F.9
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign k1 = 6;
assign k2 = 12;
assign s2 = 6.0;

// <
if (s2 < k2)
  LOG::LogSuccess(message:"EX.F.9 real int <") ;
else
  LOG::LogFailure(message:"EX.F.9 real int <") ;
end if;

// <=
if (s1 <= k2)
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
end if;

//==
if (s2 == k1)
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
end if;

//!=
if (s1 != k1)
  LOG::LogSuccess(message:"EX.F.9 real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int !=") ;
end if;

//>=
if (s1 >= k1)
  LOG::LogSuccess(message:"EX.F.9 real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >=") ;
end if;

//>
if (s1 > k1)
  LOG::LogSuccess(message:"EX.F.9 real int >") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >") ;
end if;

//END EX.F.9

//BEGIN EX.F.10
// real + - * / 

// +
assign r1 = 5.0;
assign r2 = -6.0;
assign r3 = r1 + r2;
LOG::LogReal(r:r3,message:"EX.F.10 real real + : r should be -1.0") ;

//- 
assign r4 = r1 - r2;
LOG::LogReal(r:r4,message:"EX.F.10 real real - : r should be 11.0") ;

// *
assign r5 = r1*r2;
LOG::LogReal(r:r5,message:"EX.F.10 real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/r1;
LOG::LogReal(r:r7,message:"EX.F.10 real real / : r should be 2.0") ;

//END EX.F.10


//BEGIN EX.F.11
// real  < <= == != >= >

assign r1 = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
// <
if (r2 < r1)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11 real <") ;
end if;
// <=
if (r2 <= r1)
  LOG::LogSuccess(message:"EX.F.11 real <=") ;
else
  LOG::LogFailure(message:"EX.F.11 real <=") ;
end if;
//==
if (r2 == r3)
  LOG::LogInfo(message:"EX.F.11 real ==") ;
else
  LOG::LogInfo(message:"EX.F.11 real ==") ;
end if;
//!=
if (r2 != r1)
  LOG::LogSuccess(message:"EX.F.11 real !=") ;
else
  LOG::LogFailure(message:"EX.F.11 real !=") ;
end if;
//>=
if (r1 >= r2)
  LOG::LogSuccess(message:"EX.F.11 real >=") ;
else
  LOG::LogFailure(message:"EX.F.11 real >=") ;
end if;
//>
if (r1 > r2)
  LOG::LogSuccess(message:"EX.F.11 real >") ;
else
  LOG::LogFailure(message:"EX.F.11 real >") ;
end if;
//END EX.F.11

//BEGIN EX.F.12
// string string +
assign str1 = "Hello";
assign str2 = "World";
assign str3 = str1+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12 string +") ;
else
  LOG::LogFailure(message:"EX.F.12 string +") ;
end if;
//END EX.F.12

//BEGIN EX.F.13
//string < <= == != >= >
assign str1 = "a";
assign str2 = "b";
assign str3 = "b";
// <
if (str1 < str2)
  LOG::LogSuccess(message:"EX.F.13 string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (str2 <= str3)
  LOG::LogSuccess(message:"EX.F.13 string <=") ;
else
  LOG::LogFailure(message:"EX.F.13 string <=") ;
end if;
// ==
if (str3 == str2)
  LOG::LogSuccess(message:"EX.F.13 string ==") ;
else
  LOG::LogFailure(message:"EX.F.13 string ==") ;
end if;
// !=
if (str3 != str1)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13 string !=") ;
end if;
// >=
if (str3 >= str1)
  LOG::LogSuccess(message:"EX.F.13 string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str3 > str1)
  LOG::LogSuccess(message:"EX.F.13 string >") ;
else
  LOG::LogFailure(message:"EX.F.13 string >") ;
end if;
if (str3 < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13 string < quoted") ;
end if;
//END EX.F.13

//BEGIN EX.F.14
// unique_id == !=
assign u = self.et_id;
if (u == self.et_id)
  LOG::LogSuccess(message:"EX.F.14 unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14 unique ==") ;
end if;

select any oi from instances of OI;
if (self.u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14 unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14 unique !=") ;
end if;
//END EX.F.14

LOG::LogInfo(message:"Finished F3 through F14 Binary Operations") ;

generate ET3:''Run F15 Values''(b:TRUE) to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'Run F15 values',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"66de3709-f47f-7936-40fb-b0d8e7303340");
INSERT INTO SM_AH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	1,
	'// Test all of the data items.
// Data items can be literals, object attributes, received event data items, 
// and transient variables.

LOG::LogInfo(message:"Running F15 values") ;

// Literals and Transient

assign str1 = "Hello";
if (str1 == "Hello")
  LOG::LogSuccess(message:"EX.F.15 left transient, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left transient, right literal") ;
end if;

if ("Hello" == str1)
  LOG::LogSuccess(message:"EX.F.15 left literal, right transient") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right transient") ;
end if;

// Object Attributes

assign self.i = 23;
if (self.i  == 23)
  LOG::LogSuccess(message:"EX.F.15 left self.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left self.attr, right literal") ;
end if;

if (23== self.i)
  LOG::LogSuccess(message:"EX.F.15 left literal, right self.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right self.attr") ;
end if;

create object instance ao of AO;
assign ao.b = FALSE;
if (ao.b == FALSE)
  LOG::LogSuccess(message:"EX.F.15 left other.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;
if (FALSE == ao.b)
  LOG::LogSuccess(message:"EX.F.15 left literal, right other.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right other.attr") ;
end if;

// Received Event 
if (rcvd_evt.b == TRUE)
  LOG::LogSuccess(message:"EX.F.15 left rcvd_evt.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;

if (TRUE == rcvd_evt.b )
  LOG::LogSuccess(message:"EX.F.15  left literal, right rcvd_evt.attr") ;
else 
 LOG::LogFailure(message:"EX.F.15  left literal, right rcvd_evt.attr") ; 
end if;

// Use id attr as an rval
assign this_id = self.et_id;

// use ref attr as an rval
create object instance my_etob of ETOB;
assign my_etob.etob_id = 2;
relate self to my_etob across R1;
assign my_etob_id = self.etob_id * 100;

// use transient from select as an rval
create object instance of ETOB;
select many etobs from instances of ETOB;
for each e_etob in etobs
  assign my_etob = e_etob;
end for;


LOG::LogInfo(message:"Finished F15 values") ;

assign self.i=42;
assign self.r=3.14;
assign self.bfalse=TRUE;
assign self.s="Hello";
generate ET4:''Run F16 Transformers''(i:self.i, r:self.r, b:self.bfalse,s:self.s,u:self.u) to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'Run F16 Transformers',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e");
INSERT INTO SM_AH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	1,
	'
LOG::LogInfo(message:"Running F16 Transformers") ;

// assign predetermined return values.  These will be the values that the coded 
// transforms use as return vals.

assign i_parm_ret_i_val = 42;
assign self.i = i_parm_ret_i_val;
assign r_parm_ret_r_val = 3.14;
assign b_parm_ret_b_val = TRUE;
assign s_parm_ret_s_val = "Hello";
assign u_parm_ret_u_val = rcvd_evt.u; //self.et_id
 
create object instance ao of AO;
assign ao.b = TRUE;

// no_parm_ret_void 
transform ET::no_parm_ret_void();

// i_parm_ret_void
transform ET::i_parm_ret_void(i:self.i);

// i_parm_ret_i
// use sefl.attr as parameter
transform i1 =  ET::i_parm_ret_i(i:self.i);
if (i1 == i_parm_ret_i_val )
  LOG::LogSuccess(message:"EX.F.16 i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 i_parm_ret_i") ;
end if;

// r_parm_ret_r
// use transient as parameter
assign r1 = 3.14;
transform r2 =  ET::r_parm_ret_r(r:r1);
LOG::LogReal(r:r2,message:"EX.F.16: r_parm_ret_r - r should be 3.14");

// b_parm_ret_b
// use attr of other object as parameter
transform b1 =  ET::b_parm_ret_b(b:ao.b);
if (b1 == b_parm_ret_b_val )
  LOG::LogSuccess(message:"EX.F.16 b_parm_ret_b") ;
else 
  LOG::LogFailure(message:"EX.F.16 b_parm_ret_b") ;
end if;

// s_parm_ret_s
// use literal as parm
transform s1 =  ET::s_parm_ret_s(s:"Hello");
if (s1 == s_parm_ret_s_val )
  LOG::LogSuccess(message:"EX.F.16 s_parm_ret_s") ;
else 
  LOG::LogFailure(message:"EX.F.16 s_parm_ret_s") ;
end if;

// u_parm_ret_u
// use received event as parm
transform u1 =  ET::u_parm_ret_u(u:rcvd_evt.u);
if (u1 == u_parm_ret_u_val )
  LOG::LogSuccess(message:"EX.F.16 u_parm_ret_u") ;
else 
  LOG::LogFailure(message:"EX.F.16 u_parm_ret_u") ;
end if;

// d_parm_ret_d

bridge d1 = TIM::create_date(second:30,minute:56,hour:19,day:3,month:1,year:1966);
LOG::LogDate(d:d1,message:"EX.F.16 d_parm_ret_d - d initial value");

bridge t1 = TIM::current_clock();
LOG::LogTime(t:t1,message:"EX.F.16 t_parm_ret_t - t initial value");


transform d2 = ET::d_parm_ret_d(d:d1);
LOG::LogDate(d:d2,message:"EX.F.16 d_parm_ret_d - d ret value");

// t_parm_ret_t

transform t2 = ET::t_parm_ret_t(t:t1);
LOG::LogTime(t:t2,message:"EX.F.16 t_parm_ret_t - t ret value");

// run a simple transform of another object
transform i3 = AO::i_parm_ret_i(i:24);

if (i3 == 24 )
  LOG::LogSuccess(message:"EX.F.16 other obj i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 other obj i_parm_ret_i") ;
end if;

LOG::LogInfo(message:"Finished F16 Transformers") ;

generate ET5:''Run F17 Timestamp and F18 Date Operators''() to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'Shutting Down',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"7bf5a895-ffcd-88e9-2765-12b53ca642d2");
INSERT INTO SM_AH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	1,
	'LOG::LogInfo(message:"a1test_exconfig Expression Test Complete") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'Runnning F17 Timestamp and F18 Date Operators',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"ffc4c4e4-39fe-1812-0376-186008fa5df8");
INSERT INTO SM_AH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	1,
	'
// BEGIN EX.F.17

bridge t1 = TIM::current_clock();

LOG::LogInfo(message:"Starting EX.F.17 and EX.F.18 Test") ;

assign t3 = t1;

transform ET::waitOneSec();
bridge t2 = TIM::current_clock();

if (t1== t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp == timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp == timestamp") ;
end if;

if (t1!= t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp != timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp != timestamp") ;
end if;

if (t1<  t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp < timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp < timestamp") ;
end if;

if (t1<= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp <= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp <= timestamp") ;
end if;

if (t2 > t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp > timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp > timestamp") ;
end if;

if (t1>= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp >= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp >= timestamp") ;
end if;

// END EX.F.17

// BEGIN EX.F.18

LOG::LogInfo(message:"Starting EX.F.18 Testing Date operators") ;


bridge d1 = TIM::current_date();
assign d4 = d1;
bridge d2 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1910);
bridge d3 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1911);

if (d1== d4)
  LOG::LogSuccess(message:"EX.F.18: date == date") ;
else
  LOG::LogFailure(message:"EX.F.18: date == date") ;
end if;

if (d2 != d3)
  LOG::LogSuccess(message:"EX.F.18: date != date") ;
else
  LOG::LogFailure(message:"EX.F.18: date != date") ;
end if;

if (d3<  d1)
  LOG::LogSuccess(message:"EX.F.18: date < date") ;
else
  LOG::LogFailure(message:"EX.F.18: date < date") ;
end if;

if (d1<= d4)
  LOG::LogSuccess(message:"EX.F.18: date <= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date <= date") ;
end if;

if (d1> d2)
  LOG::LogSuccess(message:"EX.F.18: date > date") ;
else
  LOG::LogFailure(message:"EX.F.18: date > date") ;
end if;

if (d1>= d4)
  LOG::LogSuccess(message:"EX.F.18: date >= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date >= date") ;
end if;

LOG::LogInfo(message:"Test EX.F.17 and EX.F.18 complete") ;
generate ET6:''Run F1 and F2 for User Defined Types''() to self;',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'Running F1 and F2 for User Defined Types',
	7,
	0);
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"44d39b91-1d9d-73f9-217a-91556104673f");
INSERT INTO SM_AH
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	1,
	'
LOG::LogInfo(message:"Expression Test F1 and F2 for User Defined Types") ;

//BEGIN EX.F.1_UDT
//check defaults

if (self.my_b != FALSE)
  LOG::LogFailure(message:"EX.F.1_UDT: my_b default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: my_b default") ;
end if;

if (self.my_i != 0)
  LOG::LogFailure(message:"EX.F.1_UDT: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1_UDT: i default") ; 
end if;
LOG::LogReal(r:self.r,message:"EX.F.1_UDT: r default");

if (self.my_s != "")
  LOG::LogFailure(message:"EX.F.1_UDT: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: s default") ;
end if;

//END EX.F.1_UDT

//BEGIN EX.F.2_UDT
//check integer assign

assign self.my_i = 10;
if (self.my_i == 10)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_i assign") ;  
end if;

//check real assign
assign self.my_r = 3.14;
LOG::LogReal(r:3.14,message:"EX.F.2_UDT: my_r assigned to") ;
LOG::LogReal(r:self.my_r,message:"EX.F.2_UDT: my_r assigned is");

//check bool assign
assign self.my_b = TRUE;
if (self.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_b assign") ;  
end if;

//check string assign
assign self.my_s = "String";
if (self.my_s == "String")
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_s assign") ;  
end if;

// check unary not
assign self.my_b = FALSE;
if (not self.my_b)
  LOG::LogSuccess(message:"EX.F.2_UDT: unary not") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: unary not") ;  
end if;  

LOG::LogInfo(message:"Finished F1 and F2 for User Defined Types") ;


//generate event to commence Binary Operations test
generate ET7:''Run F3 through F14 for User Defined Types''() to self;',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'Running F3 through F14 for User Defined Types',
	8,
	0);
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"a6d095bc-384d-5c44-e5c9-f26c6982921e");
INSERT INTO SM_AH
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	1,
	'LOG::LogInfo(message:"Running F3 through F14 for User Defined Types") ;

//BEGIN EX.F.3_UDT
// boolean and, or, ==, and !=

//and
assign self.my_b = TRUE;
assign b2 = FALSE;
if (self.my_b and b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean and") ;
end if;

// or
if (self.my_b or b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean or") ;
end if;

//==
if (self.my_b == b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
end if;

//!=
if (self.my_b != b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
end if;
//END EX.F.3_UDT

//BEGIN EX.F.4_UDT
// integer + - * / %

// +
assign self.my_i = 5;
assign i2 = -6;
assign i3 = self.my_i + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4_UDT integer +") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer +") ;
end if;
//- 
assign i4 = self.my_i - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4_UDT integer -") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer -") ;
end if;
// *
assign i5 = self.my_i*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4_UDT integer *") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/self.my_i;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4_UDT integer /") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%self.my_i;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4_UDT integer %") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer %") ;
end if;
//END EX.F.4_UDT

//BEGIN EX.F.5_UDT
// integer  < <= == != >= >

assign self.my_i = 12;
assign j2 = 6;
assign j3 = 12;
// <
if (j2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <") ;
end if;
// <=
if (j2 <= self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <=") ;
end if;
//==
if (self.my_i == j3)
  LOG::LogSuccess(message:"EX.F.5_UDT integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer ==") ;
end if;
//!=
if (j2 != self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer !=") ;
end if;
//>=
if (self.my_i >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >=") ;
end if;
//>
if (self.my_i > j2)
  LOG::LogSuccess(message:"EX.F.5_UDT integer >") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >") ;
end if;
//END EX.F.5_UDT

//BEGIN EX.F.6_UDT
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = self.my_i + r1;
LOG::LogReal(r:r3,message:"EX.F.6_UDT int real + : r should be -1.0") ;

//- 
assign r4 = self.my_i - r1;
LOG::LogReal(r:r4,message:"EX.F.6_UDT int real - : r should be 11.0") ;

// *
assign r5 = self.my_i*r1;
LOG::LogReal(r:r5,message:"EX.F.6_UDT int real * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = self.my_i/r2;
LOG::LogReal(r:r6,message:"EX.F.6_UDT int real / : r should be 2.0") ;

//END EX.F.6_UDT

//BEGIN EX.F.7_UDT
//  < <= == != >= > int as left operand, real as right, and bool result

assign s1 = 6.0;
assign s2 = 12.0;
assign self.my_i = 6;

// <
if (self.my_i < s2)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <") ;
end if;

// <=
if (self.my_i <= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <=") ;
end if;

//==
if (self.my_i == s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
end if;

assign self.my_i=12;
//!=
if (self.my_i != s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
end if;

//>=
if (self.my_i >= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (self.my_i > s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real >") ;
end if;
//END EX.F.7_UDT

//BEGIN EX.F.8_UDT
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = r1 + self.my_i;
LOG::LogReal(r:r3,message:"EX.F.8_UDT real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - self.my_i;
LOG::LogReal(r:r4,message:"EX.F.8_UDT real int - : r should be -11.0") ;

// *
assign r5 = r1*self.my_i;
LOG::LogReal(r:r5,message:"EX.F.8_UDT real int * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = r2/self.my_i;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8_UDT

//BEGIN EX.F.9_UDT
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign self.my_i = 12;
assign s2 = 6.0;

// <
if (s2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int <") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int <") ;
end if;

// <=
if (s1 <= self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
end if;

assign self.my_i = 6;

//==
if (s2 == self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
end if;

//!=
if (s1 != self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int !=") ;
end if;

//>=
if (s1 >= self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >=") ;
end if;

//>
if (s1 > self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >") ;
end if;

//END EX.F.9_UDT

//BEGIN EX.F.10_UDT
// real + - * / 

// +
assign self.my_r = 5.0;
assign r2 = -6.0;
assign r3 = self.my_r + r2;
LOG::LogReal(r:r3,message:"EX.F.10_UDT real real + : r should be -1.0") ;

//- 
assign r4 = self.my_r - r2;
LOG::LogReal(r:r4,message:"EX.F.10_UDT real real - : r should be 11.0") ;

// *
assign r5 = self.my_r*r2;
LOG::LogReal(r:r5,message:"EX.F.10_UDT real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/self.my_r;
LOG::LogReal(r:r7,message:"EX.F.10_UDT real real / : r should be 2.0") ;

//END EX.F.10_UDT


//BEGIN EX.F.11_UDT
// real  < <= == != >= >

assign self.my_r = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
assign r4=12.0;
// <
if (r2 < self.my_r)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <") ;
end if;
// <=
if (r2 <= self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real <=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <=") ;
end if;
//==
if (self.my_r == r4)
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
else
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
end if;
//!=
if (r2 != self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real !=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real !=") ;
end if;
//>=
if (self.my_r >= r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >=") ;
end if;
//>
if (self.my_r > r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >") ;
end if;
//END EX.F.11_UDT

//BEGIN EX.F.12_UDT
// string string +
assign self.my_s = "Hello";
assign str2 = "World";
assign str3 = self.my_s+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12_UDT string +") ;
else
  LOG::LogFailure(message:"EX.F.12_UDT string +") ;
end if;
//END EX.F.12_UDT

//BEGIN EX.F.13_UDT
//string < <= == != >= >
assign self.my_s = "a";
assign str2 = "b";
assign str3 = "a";
// <
if (self.my_s < str2)
  LOG::LogSuccess(message:"EX.F.13_UDT string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (self.my_s <= str3)
  LOG::LogSuccess(message:"EX.F.13_UDT string <=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string <=") ;
end if;
// ==
if (str3 == self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string ==") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string ==") ;
end if;
// !=
if (str2 != self.my_s)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string !=") ;
end if;
// >=
if (str2 >= self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str2 > self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string >") ;
end if;
if (self.my_s < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string < quoted") ;
end if;
//END EX.F.13_UDT

//BEGIN EX.F.14_UDT
// unique_id == !=
assign self.my_u = self.u;
if (self.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.14_UDT unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique ==") ;
end if;

select any oi from instances of OI;
if (self.my_u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14_UDT unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique !=") ;
end if;
//END EX.F.14_UDT

LOG::LogInfo(message:"Finished F3 through F14 for User Defined Types") ;

generate ET8:''Run F15 for User Defined Types''(my_b:TRUE,my_i:42,my_r:3.14,my_s:"Hello",my_u:self.u) to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'Running F15 for User Defined Types',
	9,
	0);
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"62732e5d-28b5-9f07-a940-5d67dd36859f");
INSERT INTO SM_AH
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	1,
	'LOG::LogInfo(message:"Running F15 for User Defined Types") ;

// Received Event 
if (rcvd_evt.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_b") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_b") ;
end if;

if (rcvd_evt.my_i == 42)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_i") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_i") ;
end if;

LOG::LogReal(message:"EX.F.15_UDT rcvd_evt.attr r",r:rcvd_evt.my_r) ; 

if (rcvd_evt.my_s == "Hello")
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_s") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_s") ;
end if;

if (rcvd_evt.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_u") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_u") ;
end if;

generate ET9:''Shut Down''() to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'Testing empty operator',
	10,
	0);
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"53509702-0f88-6160-ffe2-15f189bfedc8");
INSERT INTO SM_AH
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	1,
	'LOG::LogInfo(message:"Starting Expression Test empty operator") ;

//empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = empty saf0;
if (t1 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (true)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = empty saf1;
if (t2 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (false)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = empty smf0;
if (t3 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (true)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = empty smf1;
if ( t4 == FALSE )
  LOG::LogSuccess(message:"EX.F.2: empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (false)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = empty sar0;
if (t5 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (true)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = empty sar1;
if (t6 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (false)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = empty sor0;
if (t7 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = empty sor1;
if (t8 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = empty smr0;
if (t9 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = empty smr1;
if (t10 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

//generate event to commence next test
generate ET10:''Start not_empty test''() to self;',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'Testing not_empty operator',
	11,
	0);
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"f8088057-232b-66fb-0061-33e178e05cfc");
INSERT INTO SM_AH
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not_empty operator") ;

//not_empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = not_empty saf0;
if (t1 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (false)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = not_empty saf1;
if (t2 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (true)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = not_empty smf0;
if (t3 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (false)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = not_empty smf1;
if ( t4 == TRUE )
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (true)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = not_empty sar0;
if (t5 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (false)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = not_empty sar1;
if (t6 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (true)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = not_empty sor0;
if (t7 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = not_empty sor1;
if (t8 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = not_empty smr0;
if (t9 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = not_empty smr1;
if (t10 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

//generate event to commence next test
generate ET11:''Start cardinality test''() to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'Testing cardinality operator',
	12,
	0);
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"cb78c7eb-12ed-04c2-1946-bbde5bdb763a");
INSERT INTO SM_AH
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	1,
	'LOG::LogInfo(message:"Starting Expression Test cardinality operator") ;

// cardinality operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = cardinality saf0;
if (t1 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (0)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = cardinality saf1;
if (t2 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (1)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = cardinality smf0;
if (t3 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (0)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = cardinality smf1;
if ( t4 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (2)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = cardinality sar0;
if (t5 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (0)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = cardinality sar1;
if (t6 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (1)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = cardinality sor0;
if (t7 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = cardinality sor1;
if (t8 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (1)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = cardinality smr0;
if (t9 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = cardinality smr1;
if (t10 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (2)") ;  
end if;

// generate event to commence next test
generate ET14:''Start subtract test''( tint1:17, tint2:13, treal1:2.781828, treal2:11.2) to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'Testing not operator',
	13,
	0);
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("010e5b79-68d0-bcb1-520c-f74108fb87da",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"0322e5dd-e05f-6d21-2ac2-12a4cfca51e2");
INSERT INTO SM_AH
	VALUES ("010e5b79-68d0-bcb1-520c-f74108fb87da",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("010e5b79-68d0-bcb1-520c-f74108fb87da",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not operator") ;

//not operation
  // local existing 
assign tfalse = false;
assign ttrue = true;
assign t1 = not tfalse;
if (t1 == TRUE)
  LOG::LogSuccess(message:"not local existing (true)") ;  
else
  LOG::LogFailure(message:"not local existing (true)") ;  
end if;

assign t2 = not ttrue;
if (t2 == FALSE)
  LOG::LogSuccess(message:"not local existing (false)") ;
else
  LOG::LogFailure(message:"not local existing (false)") ;
end if;

  // rcvd_evt
assign t3 = not rcvd_evt.tfalse;
if (t3 == TRUE)
  LOG::LogSuccess(message:"not rcvd_evt (true)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (true)") ;
end if;  
 
assign t4 = not rcvd_evt.ttrue;
if (t4 == FALSE)
  LOG::LogSuccess(message:"not rcvd_evt (false)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (false)") ;
end if;
 
  // constant 
assign t5 = not FALSE;
if (t5 == TRUE)
  LOG::LogSuccess(message:"not constant (true)") ;
else
  LOG::LogFailure(message:"not constant (true)") ;
end if;  
 
assign t6 = not TRUE;
if (t6 == FALSE)
  LOG::LogSuccess(message:"not constant (false)") ;
else
  LOG::LogFailure(message:"not constant (false)") ;
end if;
 
  // self.attribute
assign t7 = not self.bfalse;
if (t7 == TRUE)
  LOG::LogSuccess(message:"not self.attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.attribute (true)") ;
end if; 
 
assign t8 = not self.btrue;
if (t8 == FALSE)
  LOG::LogSuccess(message:"not self.attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.attribute (false)") ;
end if;
 
  // self.referential attribute
assign t9 = not self.r1bfalse;
if (t9 == TRUE)
  LOG::LogSuccess(message:"not self.referential attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (true)") ;
end if; 
 
assign t10 = not self.r1btrue;
if (t10 == FALSE)
  LOG::LogSuccess(message:"not self.referential attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (false)") ;
end if;

  // other.attribute (saf)
select any saf1 from instances of ETOB;
assign t11 = not saf1.bfalse;
if (t11 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (true)") ;
end if;
 
assign t12 = not saf1.btrue;
if (t12 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (false)") ;
end if;
 
  // other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  assign t13 = not smf.bfalse;
  if (t13 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (true)") ;
  end if;
 
  assign t14 = not smf.btrue;
  if (t14 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (false)") ;
  end if;
end for;
 
  // other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t15 = not sar1.bfalse;
if (t15 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (true)") ;
end if;
 
assign t16 = not sar1.btrue;
if (t16 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (false)") ;
end if;

  // other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t17 = not sor1.bfalse;
if (t17 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (true)") ;
end if;
 
assign t18 = not sor1.btrue;
if (t18 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (false)") ;
end if;


  // other.attribute (smr)
select many smr1 from instances of ETOB;
for each smr in smr1
  assign t19 = not smr.bfalse;
  if (t19 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (true)") ;
  end if;
 
  assign t20 = not smr.btrue;
  if (t20 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (false)") ;
  end if;
end for;

  // other.referential attribute (saf)
assign t21 = not saf1.r6bfalse;
if (t21 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (true)") ;
end if;
 
assign t22 = not saf1.r6btrue;
if (t22 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (false)") ;
end if;
 
  // other.referential attribute (smf)
for each smf in smf1
  assign t23 = not smf.r6bfalse;
  if (t23 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (true)") ;
  end if;
 
  assign t24 = not smf.r6btrue;
  if (t24 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (false)") ;
  end if;
end for;

  // other.referential attribute (sar)
assign t25 = not sar1.r6bfalse;
if (t25 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (true)") ;
end if;
 
assign t26 = not sar1.r6btrue;
if (t26 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (false)") ;
end if;

  // other.referential attribute (sor)
assign t27 = not sor1.r6bfalse;
if (t27 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (true)") ;
end if;
 
assign t28 = not sor1.r6btrue;
if (t28 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (false)") ;
end if;

  // other.referential attribute (smr)
for each smr in smr1
  assign t29 = not smr.r6bfalse;
  if (t29 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (true)") ;
  end if;
 
  assign t30 = not smr.r6btrue;
  if (t30 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (false)") ;
  end if;
end for;

 
LOG::LogInfo(message:"Finished Expression Test not operator") ;

//generate event to commence next test
generate ET12:''Start empty test''() to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'Testing subtraction operator',
	14,
	0);
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("20d4cebb-d756-0fca-c8ee-b55a7a981de4",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"34f33f82-96ae-a337-98df-f59d249b65ed");
INSERT INTO SM_AH
	VALUES ("20d4cebb-d756-0fca-c8ee-b55a7a981de4",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("20d4cebb-d756-0fca-c8ee-b55a7a981de4",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	1,
	'LOG::LogInfo(message:"Starting subtract test") ;
select any event_instance from instances of EV;
//subtraction (-) operation
// perform each test combination with the following types:
     // integer integer
     // integer real
     // real integer
     // real real

  // local existing    local existing
assign temp1 = 13;
assign temp2 = 7;
assign temp3 = 2.4;
assign temp4 = 23.7;
assign t1 = temp1 - temp2 ;
if ( t1 == 6 )
  LOG::LogSuccess(message:" subtract local_existing local_existing ( 6 )") ;
else
  LOG::LogFailure(message:" subtract local_existing local_existing ( 6 )") ;
end if;
 
assign t2 = temp1 - temp3 ;
LOG::LogReal(r: t2 , message:" subtract local_existing local_existing ( 10.6 )") ;
 
assign t3 = temp3 - temp2 ;
LOG::LogReal(r: t3 , message:" subtract local_existing local_existing ( -4.6 )") ;
 
assign t4 = temp4 - temp3 ;
LOG::LogReal(r: t4 , message:" subtract local_existing local_existing ( 21.3 )") ;
 
  // local existing    rcvd_evt
// assume
// rcvd_evt.tint1 = 17
// rcvd_evt.treal1 = 2.781828
assign t5 = temp1 - rcvd_evt.tint1 ;
if ( t5 == -4 )
  LOG::LogSuccess(message:" subtract local_existing rcvd_evt ( -4 )") ;
else
  LOG::LogFailure(message:" subtract local_existing rcvd_evt ( -4 )") ;
end if;
 
assign t6 = temp1 - rcvd_evt.treal1 ;
LOG::LogReal(r: t6 , message:" subtract local_existing rcvd_evt ( 10.218172 )") ;
 
assign t7 = temp3 - rcvd_evt.tint1 ;
LOG::LogReal(r: t7 , message:" subtract local_existing rcvd_evt ( -14.6 )") ;
 
assign t8 = temp4 - rcvd_evt.treal1 ;
LOG::LogReal(r: t8 , message:" subtract local_existing rcvd_evt ( 20.918172 )") ;
 
  // local existing    constant
assign t9 = temp1 - 3 ;
if ( t9 == 10 )
  LOG::LogSuccess(message:" subtract local_existing constant ( 10 )") ;
else
  LOG::LogFailure(message:" subtract local_existing constant ( 10 )") ;
end if;
 
assign t10 = temp1 - 3.14 ;
LOG::LogReal(r: t10 , message:" subtract local_existing constant ( 9.86 )") ;
 
assign t11 = temp3 - 5.6 ;
LOG::LogReal(r: t11 , message:" subtract local_existing constant ( -3.2 )") ;
 
assign t12 = temp4 - 16.9 ;
LOG::LogReal(r: t12 , message:" subtract local_existing constant ( 6.8 )") ;
 
  // local existing    self.attribute
// assume self.i = 10
// assume self.r = 3.14
assign t13 = temp1 - self.i ;
if ( t13 == 3 )
  LOG::LogSuccess(message:" subtract local_existing self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.attribute ( 3 )") ;
end if;
 
assign t14 = temp1 - self.r ;
LOG::LogReal(r: t14 , message:" subtract local_existing self.attribute ( 9.86 )") ;
 
assign t15 = temp3 - self.i ;
LOG::LogReal(r: t15 , message:" subtract local_existing self.attribute ( -7.6 )") ;
 
assign t16 = temp4 - self.r ;
LOG::LogReal(r: t16 , message:" subtract local_existing self.attribute ( 20.56 )") ;
 
  // local existing    self.referential attribute
assign t17 = temp1 - self.etob_id ;
if ( t17 == 11 )
  LOG::LogSuccess(message:" subtract local_existing self.referential_attribute ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.referential_attribute ( 11 )") ;
end if;
 
assign t18 = temp1 - self.r1r ;
LOG::LogReal(r: t18 , message:" subtract local_existing self.referential_attribute ( 10.8282 )") ;
 
assign t19 = temp3 - self.etob_id ;
LOG::LogReal(r: t19 , message:" subtract local_existing self.referential_attribute ( 0.4 )") ;
 
assign t20 = temp4 - self.r1r ;
LOG::LogReal(r: t20 , message:" subtract local_existing self.referential_attribute ( 21.5282 )") ;
 
  // local existing    other.attribute (saf)
select any saf1 from instances of ETOB;
assign t21 = temp1 - saf1.etob_id ;
if ( t21 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
end if;
 
assign t22 = temp1 - saf1.r ;
LOG::LogReal(r: t22 , message:" subtract local_existing other.attribute(saf) ( 10.8282 )") ;
 
assign t23 = temp3 - saf1.etob_id ;
LOG::LogReal(r: t23 , message:" subtract local_existing other.attribute(saf) ( 0.4 )") ;
 
assign t24 = temp4 - saf1.r ;
LOG::LogReal(r: t24 , message:" subtract local_existing other.attribute(saf) ( 21.5282 )") ;
 
  // local existing    other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t25 = temp1 - smf.etob_id ;
if ( t25 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
end if;
 
assign t26 = temp1 - smf.r ;
LOG::LogReal(r: t26 , message:" subtract local_existing other.attribute(smf) ( 10.8282 )") ;
 
assign t27 = temp3 - smf.etob_id ;
LOG::LogReal(r: t27 , message:" subtract local_existing other.attribute(smf) ( 0.4 )") ;
 
assign t28 = temp4 - smf.r ;
LOG::LogReal(r: t28 , message:" subtract local_existing other.attribute(smf) ( 21.5282 )") ;
 
  // only do this once
  end if;
end for;
  // local existing    other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t29 = temp1 - sor1.etob_id ;
if ( t29 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
end if;
 
assign t30 = temp1 - sor1.r ;
LOG::LogReal(r: t30 , message:" subtract local_existing other.attribute(sor) ( 10.8282 )") ;
 
assign t31 = temp3 - sor1.etob_id ;
LOG::LogReal(r: t31 , message:" subtract local_existing other.attribute(sor) ( 0.4 )") ;
 
assign t32 = temp4 - sor1.r ;
LOG::LogReal(r: t32 , message:" subtract local_existing other.attribute(sor) ( 21.5282 )") ;
 
  // local existing    other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t33 = temp1 - sar1.etob_id ;
if ( t33 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
end if;
 
assign t34 = temp1 - sar1.r ;
LOG::LogReal(r: t34 , message:" subtract local_existing other.attribute(sar) ( 10.8282 )") ;
 
assign t35 = temp3 - sar1.etob_id ;
LOG::LogReal(r: t35 , message:" subtract local_existing other.attribute(sar) ( 0.4 )") ;
 
assign t36 = temp4 - sar1.r ;
LOG::LogReal(r: t36 , message:" subtract local_existing other.attribute(sar) ( 21.5282 )") ;
 
  // local existing    other.attribute (smr)
select many smr1 related by self->ETOB[R8];
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t37 = temp1 - smr.etob_id ;
if ( t37 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
end if;
 
assign t38 = temp1 - smr.r ;
LOG::LogReal(r: t38 , message:" subtract local_existing other.attribute(smr) ( 10.8282 )") ;
 
assign t39 = temp3 - smr.etob_id ;
LOG::LogReal(r: t39 , message:" subtract local_existing other.attribute(smr) ( 0.4 )") ;
 
assign t40 = temp4 - smr.r ;
LOG::LogReal(r: t40 , message:" subtract local_existing other.attribute(smr) ( 21.5282 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 - saf1.etoc_id ;
if ( t41 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
end if;
 
assign t42 = temp1 - saf1.r6r ;
LOG::LogReal(r: t42 , message:" subtract local_existing other.referential_attribute(saf) ( 1.689 )") ;
 
assign t43 = temp3 - saf1.etoc_id ;
LOG::LogReal(r: t43 , message:" subtract local_existing other.referential_attribute(saf) ( -1.6 )") ;
 
assign t44 = temp4 - saf1.r6r ;
LOG::LogReal(r: t44 , message:" subtract local_existing other.referential_attribute(saf) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smf)
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t45 = temp1 - smf.etoc_id ;
if ( t45 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
end if;
 
assign t46 = temp1 - smf.r6r ;
LOG::LogReal(r: t46 , message:" subtract local_existing other.referential_attribute(smf) ( 1.689 )") ;
 
assign t47 = temp3 - smf.etoc_id ;
LOG::LogReal(r: t47 , message:" subtract local_existing other.referential_attribute(smf) ( -1.6 )") ;
 
assign t48 = temp4 - smf.r6r ;
LOG::LogReal(r: t48 , message:" subtract local_existing other.referential_attribute(smf) ( 12.389 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 - sor1.etoc_id ;
if ( t49 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
end if;
 
assign t50 = temp1 - sor1.r6r ;
LOG::LogReal(r: t50 , message:" subtract local_existing other.referential_attribute(sor) ( 1.689 )") ;
 
assign t51 = temp3 - sor1.etoc_id ;
LOG::LogReal(r: t51 , message:" subtract local_existing other.referential_attribute(sor) ( -1.6 )") ;
 
assign t52 = temp4 - sor1.r6r ;
LOG::LogReal(r: t52 , message:" subtract local_existing other.referential_attribute(sor) ( 12.389 )") ;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 - sar1.etoc_id ;
if ( t53 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
end if;
 
assign t54 = temp1 - sar1.r6r ;
LOG::LogReal(r: t54 , message:" subtract local_existing other.referential_attribute(sar) ( 1.689 )") ;
 
assign t55 = temp3 - sar1.etoc_id ;
LOG::LogReal(r: t55 , message:" subtract local_existing other.referential_attribute(sar) ( -1.6 )") ;
 
assign t56 = temp4 - sar1.r6r ;
LOG::LogReal(r: t56 , message:" subtract local_existing other.referential_attribute(sar) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smr)
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t57 = temp1 - smr.etoc_id ;
if ( t57 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
end if;
 
assign t58 = temp1 - smr.r6r ;
LOG::LogReal(r: t58 , message:" subtract local_existing other.referential_attribute(smr) ( 1.689 )") ;
 
assign t59 = temp3 - smr.etoc_id ;
LOG::LogReal(r: t59 , message:" subtract local_existing other.referential_attribute(smr) ( -1.6 )") ;
 
assign t60 = temp4 - smr.r6r ;
LOG::LogReal(r: t60 , message:" subtract local_existing other.referential_attribute(smr) ( 12.389 )") ;
 
  end if;
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tint1 - temp1 ;
if ( t61 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt local_existing ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt local_existing ( 4 )") ;
end if;
 
assign t62 = rcvd_evt.tint1 - temp3 ;
LOG::LogReal(r: t62 , message:" subtract rcvd_evt local_existing ( 14.6 )") ;
 
assign t63 = rcvd_evt.treal1 - temp1 ;
LOG::LogReal(r: t63 , message:" subtract rcvd_evt local_existing ( -10.218172 )") ;
 
assign t64 = rcvd_evt.treal1 - temp3 ;
LOG::LogReal(r: t64 , message:" subtract rcvd_evt local_existing ( 0.381828 )") ;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tint1 - rcvd_evt.tint2 ;
if ( t65 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
end if;
 
assign t66 = rcvd_evt.tint1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t66 , message:" subtract rcvd_evt rcvd_evt ( 5.8 )") ;
 
assign t67 = rcvd_evt.treal1 - rcvd_evt.tint2 ;
LOG::LogReal(r: t67 , message:" subtract rcvd_evt rcvd_evt ( -10.218172 )") ;
 
assign t68 = rcvd_evt.treal1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t68 , message:" subtract rcvd_evt rcvd_evt ( -8.418172 )") ;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tint1 - 1 ;
if ( t69 == 16 )
  LOG::LogSuccess(message:" subtract rcvd_evt constant ( 16 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt constant ( 16 )") ;
end if;
 
assign t70 = rcvd_evt.tint1 - 1.0 ;
LOG::LogReal(r: t70 , message:" subtract rcvd_evt constant ( 16.0 )") ;
 
assign t71 = rcvd_evt.treal1 - 1 ;
LOG::LogReal(r: t71 , message:" subtract rcvd_evt constant ( 1.781828 )") ;
 
assign t72 = rcvd_evt.treal1 - 0.5 ;
LOG::LogReal(r: t72 , message:" subtract rcvd_evt constant ( 2.281828 )") ;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tint1 - self.i ;
if ( t73 == 7 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.attribute ( 7 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.attribute ( 7 )") ;
end if;
 
assign t74 = rcvd_evt.tint1 - self.r ;
LOG::LogReal(r: t74 , message:" subtract rcvd_evt self.attribute ( 13.86 )") ;
 
assign t75 = rcvd_evt.treal1 - self.i ;
LOG::LogReal(r: t75 , message:" subtract rcvd_evt self.attribute ( -7.218172 )") ;
 
assign t76 = rcvd_evt.treal1 - self.r ;
LOG::LogReal(r: t76 , message:" subtract rcvd_evt self.attribute ( -0.358172 )") ;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tint1 - self.etob_id ;
if ( t77 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
end if;
 
assign t78 = rcvd_evt.tint1 - self.r1r ;
LOG::LogReal(r: t78 , message:" subtract rcvd_evt self.referential_attribute ( 14.8282 )") ;
 
assign t79 = rcvd_evt.treal1 - self.etob_id ;
LOG::LogReal(r: t79 , message:" subtract rcvd_evt self.referential_attribute ( 0.781828 )") ;
 
assign t80 = rcvd_evt.treal1 - self.r1r ;
LOG::LogReal(r: t80 , message:" subtract rcvd_evt self.referential_attribute ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tint1 - saf1.etob_id ;
if ( t81 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
end if;
 
assign t82 = rcvd_evt.tint1 - saf1.r ;
LOG::LogReal(r: t82 , message:" subtract rcvd_evt other.attribute(saf) ( 14.8282 )") ;
 
assign t83 = rcvd_evt.treal1 - saf1.etob_id ;
LOG::LogReal(r: t83 , message:" subtract rcvd_evt other.attribute(saf) ( 0.781828 )") ;
 
assign t84 = rcvd_evt.treal1 - saf1.r ;
LOG::LogReal(r: t84 , message:" subtract rcvd_evt other.attribute(saf) ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (smf)
  // rcvd_evt    other.attribute (sor)
  // rcvd_evt    other.attribute (sar)
  // rcvd_evt    other.attribute (smr)
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tint1 - saf1.etoc_id ;
if ( t101 == 13 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
  // rcvd_evt    other.referential attribute (sor)
  // rcvd_evt    other.referential attribute (sar)
  // rcvd_evt    other.referential attribute (smr)
  // constant    local existing
assign t121 = 27 - temp1 ;
if ( t121 == 14 )
  LOG::LogSuccess(message:" subtract constant local_existing ( 14 )") ;
else
  LOG::LogFailure(message:" subtract constant local_existing ( 14 )") ;
end if;
 
  // constant    rcvd_evt
assign t126 = 27 - rcvd_evt.treal2 ;
LOG::LogReal(r: t126 , message:" subtract constant rcvd_evt ( 15.8 )") ;
 
  // constant    constant
assign t131 = 14.3 - 5 ;
LOG::LogReal(r: t131 , message:" subtract constant constant ( 9.3 )") ;
 
  // constant    self.attribute
assign t136 = 14.3 - self.r ;
LOG::LogReal(r: t136 , message:" subtract constant self.attribute ( 11.16 )") ;
 
  // constant    self.referential attribute
assign t137 = 27 - self.etob_id ;
if ( t137 == 25 )
  LOG::LogSuccess(message:" subtract constant self.referential_attribute ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant self.referential_attribute ( 25 )") ;
end if;
 
  // constant    other.attribute (saf)
assign t141 = 27 - saf1.etob_id ;
if ( t141 == 25 )
  LOG::LogSuccess(message:" subtract constant other.attribute(saf) ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant other.attribute(saf) ( 25 )") ;
end if;
 
  // constant    other.attribute (smf)
  // constant    other.attribute (sor)
  // constant    other.attribute (sar)
  // constant    other.attribute (smr)
  // constant    other.referential attribute (saf)
assign t161 = 27 - saf1.etoc_id ;
if ( t161 == 23 )
  LOG::LogSuccess(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
else
  LOG::LogFailure(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
end if;
 
  // constant    other.referential attribute (smf)
  // constant    other.referential attribute (sor)
  // constant    other.referential attribute (sar)
  // constant    other.referential attribute (smr)
  // self.attribute    local existing
assign t181 = self.i - temp1 ;
if ( t181 == -3 )
  LOG::LogSuccess(message:" subtract self.attribute local_existing ( -3 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute local_existing ( -3 )") ;
end if;
 
  // self.attribute    rcvd_evt
assign t186 = self.i - rcvd_evt.treal2 ;
LOG::LogReal(r: t186 , message:" subtract self.attribute rcvd_evt ( -1.2 )") ;
 
  // self.attribute    constant
assign t191 = self.r - 2 ;
LOG::LogReal(r: t191 , message:" subtract self.attribute constant ( 1.14 )") ;
 
  // self.attribute    self.attribute
assign t196 = self.i - self.r ;
LOG::LogReal(r: t196 , message:" subtract self.attribute self.attribute ( 6.86 )") ;
 
  // self.attribute    self.referential attribute
assign t197 = self.i - self.etob_id ;
if ( t197 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.i - saf1.etob_id ;
if ( t201 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (smf)
  // self.attribute    other.attribute (sor)
  // self.attribute    other.attribute (sar)
  // self.attribute    other.attribute (smr)
  // self.attribute    other.referential attribute (saf)
assign t221 = self.i - saf1.etoc_id ;
if ( t221 == 6 )
  LOG::LogSuccess(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
  // self.attribute    other.referential attribute (sor)
  // self.attribute    other.referential attribute (sar)
  // self.attribute    other.referential attribute (smr)
  // self.referential attribute    local existing
assign t241 = self.etob_id - temp1 ;
if ( t241 == -11 )
  LOG::LogSuccess(message:" subtract self.referential_attribute local_existing ( -11 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute local_existing ( -11 )") ;
end if;
 
  // self.referential attribute    rcvd_evt
assign t246 = self.etob_id - rcvd_evt.treal2 ;
LOG::LogReal(r: t246 , message:" subtract self.referential_attribute rcvd_evt ( -9.2 )") ;
 
  // self.referential attribute    constant
assign t251 = self.r1r - 2 ;
LOG::LogReal(r: t251 , message:" subtract self.referential_attribute constant ( 0.1718 )") ;
 
  // self.referential attribute    self.attribute
assign t256 = self.r1r - self.r ;
LOG::LogReal(r: t256 , message:" subtract self.referential_attribute self.attribute ( -0.9682 )") ;
 
  // self.referential attribute    self.referential attribute
assign t258 = self.etob_id - self.r1r ;
LOG::LogReal(r: t258 , message:" subtract self.referential_attribute self.referential_attribute ( -0.1718 )") ;
 
  // self.referential attribute    other.attribute (saf)
assign t261 = self.etob_id - saf1.etob_id ;
if ( t261 == 0 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
end if;
 
  // self.referential attribute    other.attribute (smf)
  // self.referential attribute    other.attribute (sor)
  // self.referential attribute    other.attribute (sar)
  // self.referential attribute    other.attribute (smr)
  // self.referential attribute    other.referential attribute (saf)
assign t281 = self.etob_id - saf1.etoc_id ;
if ( t281 == -2 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
end if;
 
  // self.referential attribute    other.referential attribute (smf)
  // self.referential attribute    other.referential attribute (sor)
  // self.referential attribute    other.referential attribute (sar)
  // self.referential attribute    other.referential attribute (smr)
  // other.attribute (saf)    local existing
  // other.attribute (saf)    rcvd_evt
  // other.attribute (saf)    constant
  // other.attribute (saf)    self.attribute
  // other.attribute (saf)    self.referential attribute
  // other.attribute (saf)    other.attribute (saf)
  // other.attribute (saf)    other.attribute (smf)
  // other.attribute (saf)    other.attribute (sor)
  // other.attribute (saf)    other.attribute (sar)
  // other.attribute (saf)    other.attribute (smr)
  // other.attribute (saf)    other.referential attribute (saf)
  // other.attribute (saf)    other.referential attribute (smf)
  // other.attribute (saf)    other.referential attribute (sor)
  // other.attribute (saf)    other.referential attribute (sar)
  // other.attribute (saf)    other.referential attribute (smr)
  // other.attribute (smf)    local existing
  // other.attribute (smf)    rcvd_evt
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    rcvd_evt
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    rcvd_evt
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    rcvd_evt
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
  // other.referential attribute (saf)    rcvd_evt
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    rcvd_evt
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    rcvd_evt
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    rcvd_evt
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    rcvd_evt
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed subtract test") ;

//generate event to commence next test
bridge d = TIM::current_date();
bridge ts = TIM::current_clock();
create event instance evinst of EV1:''Event Instance''(message:"timer event 1.2")  to event_instance;
bridge tim = TIM::timer_start ( microseconds:1000000, event_inst:evinst);
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: d, ts: ts, tim:tim, ev:evinst) to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'Testing assign',
	15,
	0);
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("41f79c56-f056-3986-d3df-03d4ffc4da45",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6");
INSERT INTO SM_AH
	VALUES ("41f79c56-f056-3986-d3df-03d4ffc4da45",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("41f79c56-f056-3986-d3df-03d4ffc4da45",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	1,
	'LOG::LogInfo(message:"Starting assign test") ;
select any event_instance from instances of EV;
// Assign operation

  // boolean
assign t1 = true;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_initial constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( true )") ;
end if;
 
assign t2 = false;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_initial constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( false )") ;
end if;
 
  // integer
assign t3 = 5;
if ( t3 == 5 )
  LOG::LogSuccess(message:"assign local_initial constant ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( 5 )") ;
end if;
 
  // real
assign t4 = 16.98;
LOG::LogInfo( message:"assign local_initial constant ( 16.98 )") ;
 
  // string
assign t5 = "hissy";
if ( t5 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial constant ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( hissy )") ;
end if;

  // boolean
assign t6 = t1;
if ( t6 == true )
  LOG::LogSuccess(message:"assign local_initial local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( true )") ;
end if;
 
assign t7 = t2;
if ( t7 == false )
  LOG::LogSuccess(message:"assign local_initial local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( false )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 5 )
  LOG::LogSuccess(message:"assign local_initial local_existing ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( 5 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_initial local_existing ( 16.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial local_existing ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( hissy )") ;
end if;

// unique_id
assign temp_unique_id = self.u;
assign t11 = temp_unique_id;
if ( t11 == self.u )
  LOG::LogSuccess(message:"assign local_initial local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( self.u )") ;
end if;
 
  // date
bridge temp_date = TIM::create_date(second:30, minute:56, hour:19, day:3, month:1, year:1966);
assign t12 = temp_date;
LOG::LogDate(d:t12, message:"assign local_initial local_existing ( 3/1/1996 19:56:30 )");

  // timestamp
bridge temp_timestamp = TIM::current_clock();
assign t13 = temp_timestamp;
LOG::LogTime(t:t13, message:"assign local_initial local_existing ( )");

  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event")to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t14 = temp_timer;
if ( t14 == temp_timer )
  LOG::LogSuccess(message:"assign local_initial local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t15 = ev_inst1;
LOG::LogInfo( message:"assign local_initial local_existing ( LOG1(timer event) )") ;

  // inst_ref<Object>
select any none from instances of NOI;
assign t16 = none;
if ( t16 == none )
  LOG::LogSuccess(message:"assign local_initial local_existing ( none )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( none )") ;
end if;
 
select any inst from instances of OI;
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_initial local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( inst )") ;
end if;

// This is a special test case to verify that usage of 
// local variables of type inst_ref<Object> generate code
// without any error messages.  See the bp issue 659. 
assign t17b = self;
relate t17 to t17b across R3;
unrelate t17b from t17 across R3;

  // boolean
assign t19 = rcvd_evt.ttrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( true )") ;
end if;
 
assign t20 = rcvd_evt.tfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( false )") ;
end if;
 
  // integer
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( fit )") ;
end if;

  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst<Event>
assign t28 = rcvd_evt.ev;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( LOG1(timer event) )") ;

  // boolean
assign t29 = self.bfalse;
if ( t29 == false )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( false )") ;
end if;
 
assign t30 = self.btrue;
if ( t30 == true )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( true )") ;
end if;
 
  // integer
assign t31 = self.i;
if ( t31 == 10 )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( 10 )") ;
end if;
 
  // real
assign t32 = self.r;
LOG::LogInfo( message:"assign local_initial self.attribute ( 3.14 )") ;
 
  // string
assign t33 = self.s;
if ( t33 == "String" )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( String )") ;
end if;

  // unique_id
assign t34 = self.u;
if ( t34 == self.u )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.u )") ;
end if;
 
  // date
bridge self.d = TIM::create_date(second:31, minute:51, hour:18, day:4, month:4, year:1970);
assign t35 = self.d;
LOG::LogDate(d:t35, message:"assign local_initial self.attribute ( 4/4/1970 18:51:31 )");

  // timestamp
assign t36a = self.t;
LOG::LogTime(t:t36a, message:"assign local_initial self.attribute ( 0 )");
bridge self.t = TIM::current_clock();
assign t36b = self.t;
LOG::LogTime(t:t36b, message:"assign local_initial self.attribute ( current_time )") ;

  // inst_ref<Timer>
create event instance temp_ev of EV1:''Event Instance''(message:"timer event") to event_instance;
assign self.ev = temp_ev;
bridge self.tim = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t37 = self.tim;
if ( t37 == self.tim )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t38 = self.ev;
LOG::LogInfo( message:"assign local_initial self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t39 = self.r1btrue;
if ( t39 == true )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( true )") ;
end if;
 
assign t40 = self.r1bfalse;
if ( t40 == false )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( false )") ;
end if;
 
  // integer
assign t41 = self.etob_id;
if ( t41 == 2 )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t42 = self.r1r;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t43 = self.r1s;
if ( t43 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t44 = self.r1u;
if ( t44 == self.r1u )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t45 = self.r1d;
LOG::LogDate(d:t45, message:"assign local_initial self.referential_attribute ( 8/9/1991 13:07:17 )");

  // timestamp
assign t46 = self.r1t;
LOG::LogTime(t:t46, message:"assign local_initial self.referential_attribute ( 0 )");

  // inst_ref<Timer>
assign t47 = self.r1tim;
if ( t47 == self.r1tim )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t48 = self.r1ev;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( LOG1(timer event) )") ;

select any saf from instances of ETOB;
  // boolean
assign t49 = saf.btrue;
if ( t49 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( true )") ;
end if;
 
assign t50 = saf.bfalse;
if ( t50 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign t51 = saf.etob_id;
if ( t51 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t52 = saf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t53 = saf.s;
if ( t53 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t54 = saf.u;
if ( t54 == saf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t55 = saf.d;
LOG::LogDate(d:t55, message:"assign local_initial other.attribute(saf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t56 = saf.t;
LOG::LogTime(t:t56, message:"assign local_initial other.attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t57 = saf.tim;
if ( t57 == saf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t58 = saf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( LOG1(timer event) )") ;

select many smfs from instances of ETOB;
for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t59 = smf.btrue;
if ( t59 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( true )") ;
end if;
 
assign t60 = smf.bfalse;
if ( t60 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t61 = smf.etob_id;
if ( t61 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t62 = smf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t63 = smf.s;
if ( t63 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t64 = smf.u;
if ( t64 == smf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t65 = smf.d;
LOG::LogDate(d:t65, message:"assign local_initial other.attribute(smf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t66 = smf.t;
LOG::LogTime(t:t66, message:"assign local_initial other.attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t67 = smf.tim;
if ( t67 == smf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign t68 = smf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( LOG1(timer event) )") ;

  end if;
end for;

select one sor related by self->ETOB[R1];
  // boolean
assign t69 = sor.btrue;
if ( t69 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( true )") ;
end if;
 
assign t70 = sor.bfalse;
if ( t70 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( false )") ;
end if;
 
  // integer
assign t71 = sor.etob_id;
if ( t71 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( 2 )") ;
end if;
 
  // real
assign t72 = sor.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( 2.1718 )") ;
 
  // string
assign t73 = sor.s;
if ( t73 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
end if;
  // unique_id
assign t74 = sor.u;
if ( t74 == sor.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
end if;
 
  // date
assign t75 = sor.d;
LOG::LogDate(d:t75, message:"assign local_initial other.attribute(sor) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t76 = sor.t;
LOG::LogTime(t:t76, message:"assign local_initial other.attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t77 = sor.tim;
if ( t77 == sor.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
end if;
 
  // inst<Event>
assign t78 = sor.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( LOG1(timer event) )") ;

select any sar related by self->ETOB[R8];
  // boolean
assign t79 = sar.btrue;
if ( t79 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( true )") ;
end if;
 
assign t80 = sar.bfalse;
if ( t80 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( false )") ;
end if;
 
  // integer
assign t81 = sar.etob_id;
if ( t81 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( 2 )") ;
end if;
 
  // real
assign t82 = sar.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( 2.1718 )") ;
 
  // string
assign t83 = sar.s;
if ( t83 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
end if;
  // unique_id
assign t84 = sar.u;
if ( t84 == sar.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
end if;
 
  // date
assign t85 = sar.d;
LOG::LogDate(d:t85, message:"assign local_initial other.attribute(sar) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t86 = sar.t;
LOG::LogTime(t:t86, message:"assign local_initial other.attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t87 = sar.tim;
if ( t87 == sar.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
end if;
 
  // inst<Event>
assign t88 = sar.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( LOG1(timer event) )") ;

select many smrs related by self->ETOB[R8];
for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t89 = smr.btrue;
if ( t89 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( true )") ;
end if;
 
assign t90 = smr.bfalse;
if ( t90 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( false )") ;
end if;
 
  // integer
assign t91 = smr.etob_id;
if ( t91 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( 2 )") ;
end if;
 
  // real
assign t92 = smr.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( 2.1718 )") ;
 
  // string
assign t93 = smr.s;
if ( t93 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
end if;
  // unique_id
assign t94 = smr.u;
if ( t94 == smr.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
end if;
 
  // date
assign t95 = smr.d;
LOG::LogDate(d:t95, message:"assign local_initial other.attribute(smr) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t96 = smr.t;
LOG::LogTime(t:t96, message:"assign local_initial other.attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t97 = smr.tim;
if ( t97 == smr.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
end if;
 
  // inst<Event>
assign t98 = smr.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t99 = saf.r6btrue;
if ( t99 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
end if;
 
assign t100 = saf.r6bfalse;
if ( t100 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
end if;
 
  // integer
assign t101 = saf.etoc_id;
if ( t101 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
end if;
 
  // real
assign t102 = saf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( 11.311 )") ;
 
  // string
assign t103 = saf.r6s;
if ( t103 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
end if;
  // unique_id
assign t104 = saf.r6u;
if ( t104 == saf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
end if;
 
  // date
assign t105 = saf.r6d;
LOG::LogDate(d:t105, message:"assign local_initial other.referential_attribute(saf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t106 = saf.r6t;
LOG::LogTime(t:t106, message:"assign local_initial other.referential_attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t107 = saf.r6tim;
if ( t107 == saf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
end if;
 
  // inst<Event>
assign t108 = saf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if (smf.etob_id == 2)
  // boolean
assign t119 = smf.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( true )") ;
end if;
 
assign t110 = smf.r6bfalse;
if ( t110 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( false )") ;
end if;
 
  // integer
assign t111 = smf.etoc_id;
if ( t111 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( 4 )") ;
end if;
 
  // real
assign t112 = smf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute ( 11.311 )") ;
 
  // string
assign t113 = smf.r6s;
if ( t113 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
end if;
  // unique_id
assign t114 = smf.r6u;
if ( t114 == smf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
end if;
 
  // date
assign t115 = smf.r6d;
LOG::LogDate(d:t115, message:"assign local_initial other.referential_attribute(smf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t116 = smf.r6t;
LOG::LogTime(t:t116, message:"assign local_initial other.referential_attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t117 = smf.r6tim;
if ( t117 == smf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
end if;
 
  // inst<Event>
assign t118 = smf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smf) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t119 = sor.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
end if;
 
assign t120 = sor.r6bfalse;
if ( t120 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
end if;
 
  // integer
assign t121 = sor.etoc_id;
if ( t121 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
end if;
 
  // real
assign t122 = sor.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( 11.311 )") ;
 
  // string
assign t123 = sor.r6s;
if ( t123 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
end if;
  // unique_id
assign t124 = sor.r6u;
if ( t124 == sor.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
end if;
 
  // date
assign t125 = sor.r6d;
LOG::LogDate(d:t125, message:"assign local_initial other.referential_attribute(sor) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t126 = sor.r6t;
LOG::LogTime(t:t126, message:"assign local_initial other.referential_attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t127 = sor.r6tim;
if ( t127 == sor.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
end if;
 
  // inst<Event>
assign t128 = sor.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( LOG1(timer event) )") ;

  // boolean
assign t129 = sar.r6btrue;
if ( t129 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
end if;
 
assign t130 = sar.r6bfalse;
if ( t130 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
end if;
 
  // integer
assign t131 = sar.etoc_id;
if ( t131 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
end if;
 
  // real
assign t132 = sar.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( 11.311 )") ;
 
  // string
assign t133 = sar.r6s;
if ( t133 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
end if;
  // unique_id
assign t134 = sar.r6u;
if ( t134 == sar.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
end if;
 
  // date
assign t135 = sar.r6d;
LOG::LogDate(d:t135, message:"assign local_initial other.referential_attribute(sar) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t136 = sar.r6t;
LOG::LogTime(t:t136, message:"assign local_initial other.referential_attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t137 = sar.r6tim;
if ( t137 == sar.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
end if;
 
  // inst<Event>
assign t138 = sar.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( LOG1(timer event) )") ;

for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t139 = smr.r6btrue;
if ( t139 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
end if;
 
assign t140 = smr.r6bfalse;
if ( t140 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
end if;
 
  // integer
assign t141 = smr.etoc_id;
if ( t141 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
end if;
 
  // real
assign t142 = smr.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( 11.311 )") ;
 
  // string
assign t143 = smr.r6s;
if ( t143 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
end if;
  // unique_id
assign t144 = smr.r6u;
if ( t144 == smr.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
end if;
 
  // date
assign t145 = smr.r6d;
LOG::LogDate(d:t145, message:"assign local_initial other.referential_attribute(smr) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t146 = smr.r6t;
LOG::LogTime(t:t146, message:"assign local_initial other.referential_attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t147 = smr.r6tim;
if ( t147 == smr.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
end if;
 
  // inst<Event>
assign t148 = smr.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;


  // boolean
assign t1 = false;
if ( t1 == false )
  LOG::LogSuccess(message:"assign local_existing constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( false )") ;
end if;
 
assign t2 = true;
if ( t2 == true )
  LOG::LogSuccess(message:"assign local_existing constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( true )") ;
end if;
 
  // integer
assign t3 = 7;
if ( t3 == 7 )
  LOG::LogSuccess(message:"assign local_existing constant ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( 7 )") ;
end if;
 
  // real
assign t4 = 96.98;
LOG::LogInfo( message:"assign local_existing constant ( 96.98 )") ;
 
  // string
assign t5 = "fussy";
if ( t5 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing constant ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( fussy )") ;
end if;

  // boolean
assign t2 = t7;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( false )") ;
end if;
 
assign t1 = t6;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( true )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 7 )
  LOG::LogSuccess(message:"assign local_existing local_existing ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( 7 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_existing local_existing ( 96.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing local_existing ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( fussy )") ;
end if;

  // unique_id
assign t24 = t11;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( self.u )") ;
end if;
 
  // date
assign t25 = t12;
if ( t25 == temp_date )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_date )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_date )") ;
end if;
 
  // timestamp
assign t26 = t13;
if ( t26 == temp_timestamp )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timestamp )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timestamp )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = t14;
if ( t27 == temp_timer )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t28 = t15;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( LOG1(timer event) )");

  // inst_ref<Object>
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_existing local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( inst )") ;
end if;
 

  // boolean
assign t19 = rcvd_evt.tfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( false )") ;
end if;
 
assign t20 = rcvd_evt.ttrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( true )") ;
end if;
 
  // integer
assign t21 = 0;
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = 0.0;
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = "";
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( fit )") ;
end if;
 
  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // boolean
assign t19 = self.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( true )") ;
end if;
 
assign t20 = self.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( false )") ;
end if;
 
  // integer
assign t21 = self.i;
if ( t21 == 10 )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( 10 )") ;
end if;
 
  // real
assign t22 = self.r;
LOG::LogInfo( message:"assign local_existing self.attribute ( 3.14 )") ;
 
  // string
assign t23 = self.s;
if ( t23 == "String" )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( String )") ;
end if;
  // unique_id
assign t24 = self.u;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.u )") ;
end if;
 
  // date
assign t25 = self.d;
if ( t25 == self.d )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign t26 = self.t;
if ( t26 == self.t )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.tim;
if ( t27 == self.tim )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.ev;
LOG::LogInfo( message:"assign local_existing self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t19 = self.r1bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = self.r1btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( true )") ;
end if;
 
  // integer
assign t21 = self.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t22 = self.r1r;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t23 = self.r1s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t24 = self.r1u;
if ( t24 == self.r1u )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t25 = self.r1d;
if ( t25 == self.r1d )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign t26 = self.r1t;
if ( t26 == self.r1t )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.r1tim;
if ( t27 == self.r1tim )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.r1ev;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( LOG1(timer event) )") ;

// lval = local existing rval = other.attribute (saf)
  // boolean
assign t19 = saf.bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t20 = saf.btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign t21 = saf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t22 = saf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t23 = saf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = saf.u;
if ( t24 == saf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t25 = saf.d;
if ( t25 == saf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign t26 = saf.t;
if ( t26 == saf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = saf.tim;
if ( t27 == saf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t28 = saf.ev;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t19 = smf.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t20 = smf.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t21 = smf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t22 = smf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t23 = smf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = smf.u;
if ( t24 == smf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t25 = smf.d;
if ( t25 == smf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign t26 = smf.t;
if ( t26 == smf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = smf.tim;
if ( t27 == smf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
end if;
 
  end if;
end for;

//generate event to continue test
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: rcvd_evt.d, ts: rcvd_evt.ts, tim:rcvd_evt.tim, ev:rcvd_evt.ev) to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'Additional assign tests',
	17,
	0);
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("ceb67e61-7e47-925b-4f46-37bb66861e62",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"81374f42-af06-0e04-abb9-f6643a9eaa65");
INSERT INTO SM_AH
	VALUES ("ceb67e61-7e47-925b-4f46-37bb66861e62",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("ceb67e61-7e47-925b-4f46-37bb66861e62",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	1,
	'select any event_instance from instances of EV;
  // boolean
assign self.btrue = false;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( false )") ;
end if;
 
assign self.btrue = true;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( true )") ;
end if;
 
  // integer
assign self.i = -17;
if ( self.i == -17 )
  LOG::LogSuccess(message:"assign self.attribute constant ( -17 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( -17 )") ;
end if;
 
assign self.i = 15;
if ( self.i == 15 )
  LOG::LogSuccess(message:"assign self.attribute constant ( 15 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( 15 )") ;
end if;

  // real
assign self.r = 387.32;
if ( ((self.r - 387.32 ) < .1) OR ((387.32 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute constant ( 387.21 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant (387.21 )") ;
end if;

  // string
assign self.s = "test 1029";
if ( self.s == "test 1029" )
  LOG::LogSuccess(message:"assign self.attribute constant ( test 1029 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( test 1029 )") ;
end if;

  // boolean
assign t20 = false;
assign self.btrue = t20;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( false )") ;
end if;

assign t19 = true; 
assign self.btrue = t19;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( true )") ;
end if;
 
  // integer
assign t21 = 2;
assign self.i = t21;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( 2 )") ;
end if;
 
  // real
assign t22 = 2.1718;
assign self.r = t22;
if ( ((self.r - 2.1718) < .1) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 real )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 real )") ;
end if;

  // string
assign t23 = "etob1 string";
assign self.s = t23;
if ( self.s == "etob1 string" )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 string )") ;
end if;

  // unique_id
assign save_u = self.u;
assign t24 = rcvd_evt.u;
assign self.u = t24;
if ( self.u == rcvd_evt.u )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
assign self.d = t25;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
assign self.t = t26;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event") to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign self.tim = temp_timer;
if ( self.tim == temp_timer )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign self.ev = ev_inst1;
LOG::LogInfo(message:"assign self.attribute local_existing ( LOG1(timer event) )");

  // boolean
assign self.btrue = rcvd_evt.tfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( false )") ;
end if;
 
assign self.btrue = rcvd_evt.ttrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( true )") ;
end if;
 
  // integer
assign self.i = rcvd_evt.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11 )") ;
end if;
 
  // real
assign self.r = rcvd_evt.r;
if ( ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
assign self.r = rcvd_evt.i;
if ( self.r == 11.0 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign self.s = rcvd_evt.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( fit )") ; 
end if; 
 
  // unique_id   
assign self.u = rcvd_evt.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( save_u )") ;
end if;
 
  // date
assign self.d = rcvd_evt.d;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp 
assign self.t = rcvd_evt.ts;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = rcvd_evt.tim;
if ( self.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = rcvd_evt.ev;
LOG::LogInfo(message:"assign self.attribute rcvd_evt ( LOG1(timer event) )") ; 
 

  // boolean
assign self.btrue = self.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( false )") ;
end if;
 
assign self.btrue = true;
assign self.bfalse = self.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( true )") ;
end if;
 
assign self.bfalse = false;

  // integer
assign self.i = self.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( 11 )") ;
end if;
 
  // real
assign self.r = self.r;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r )") ; 
end if; 
 
assign self.r = self.i;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r i)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r i)") ; 
end if; 
 
  // string
assign self.s = self.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( fit )") ; 
end if; 
 
  // unique_id
assign self.u = self.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( save_u )") ;
end if;
 
  // date
assign self.d = self.d;
if ( self.d == self.d )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign self.t = self.t;
if ( self.t == self.t )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.tim;
if ( self.tim == self.tim )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.ev;
LOG::LogInfo( message:"assign self.attribute self.attribute ( LOG1(timer event) )") ; 

  // boolean
assign self.btrue = self.r1bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
assign self.btrue = self.r1btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
  // integer
assign self.i = self.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign self.r = self.r1r;
if ( (( self.r - 2.1718) < .1 ) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
assign self.r = self.etob_id;
if ( (( self.r - 2.0) < .1 ) OR ((2.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
  // string
assign self.s = self.r1s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute self.referential attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.referential attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = self.r1u;
if ( self.u == self.r1u )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign self.d = self.r1d;
if ( self.d == self.r1d )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign self.t = self.r1t;
if ( self.t == self.r1t )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.r1tim;
if ( self.tim == self.r1tim )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.r1ev;
LOG::LogInfo(message:"assign self.attribute self.referential attribute ( LOG1(timer event) )") ; 


  // boolean
select any saf from instances of ETOB;
assign self.btrue = saf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign self.btrue = saf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign self.i = saf.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign self.r = saf.r;
if (  ((self.r -2.1718) < .1) OR (( 2.1718 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
end if;
 
assign self.r = saf.etob_id;
if (  ((self.r -2.0) < .1) OR (( 2.0 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.etob_id; )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) (assign self.r = saf.etob_id; )") ;
end if;
 
  // string
assign self.s = saf.s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute saf.attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute saf.attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = saf.u;
if ( self.u == saf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign self.d = saf.d;
if ( self.d == saf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign self.t = saf.t;
if ( self.t == saf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = saf.tim;
if ( self.tim == saf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = saf.ev;
LOG::LogInfo(message:"assign self.attribute saf.attribute ( LOG1(timer event) )") ; 

  // boolean
select many smfs from instances of ETOB;
for each smf in smfs
assign self.btrue = smf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign self.btrue = smf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign self.i = smf.etob_id;
if ( self.i == smf.etob_id )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign self.r = smf.r;
if ( ((self.r - smf.r ) < .1) OR ((smf.r - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
end if;
 
assign self.r = smf.etob_id;
if ( ((self.r - smf.etob_id ) < .1) OR ((smf.etob_id - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) (assign self.r = smf.etob_id )") ;
end if;
 
  // string
assign self.s = smf.s; 
if ( self.s == smf.s ) 
  LOG::LogSuccess(message:"assign self.attribute smf.attribute  etob1 string") ;
else 
  LOG::LogFailure(message:"assign self.attribute smf.attribute ( etob1 string)") ; 
end if; 
  // unique_id
assign self.u = smf.u;
if ( self.u == smf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign self.d = smf.d;
if ( self.d == smf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign self.t = smf.t;
if ( self.t == smf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = smf.tim;
if ( self.tim == smf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign self.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;

  // boolean
assign saf.btrue = false;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
assign saf.btrue = true;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = true;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = false;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
  // integer
assign saf.etob_id = 435;
if ( saf.etob_id == 435 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 435 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 435 )") ;
end if;
 
  // real
assign saf.r = 12;
if ( saf.r == 12 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 12 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 12 )") ;
end if;
 
assign saf.r = 17.6;
LOG::LogInfo(message:"assign other.attribute(saf) constant ( 17.6 )");
 
  // string
assign saf.s = "test 222";
if ( saf.s == "test 222" )
  LOG::LogSuccess(message:"assign other.attribute constant ( test 222 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute constant ( test 222 )") ; 
end if;

  // boolean
assign temp10 = true;
assign temp11 = false;
assign saf.btrue = temp11;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
assign saf.btrue = temp10;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp10;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp11;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
  // integer
assign temp12 = 31;
assign saf.etob_id = temp12;
if ( saf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( 31 )") ;
end if;
 
  // real
assign temp13 = 9.874;
assign saf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 31.0 )") ;
 
assign saf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 9.874 )") ;
 
  // string
assign temp14 = "test 333";
assign saf.s = temp14;
if ( saf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute local_existing ( test 333 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute local_existing ( test 333 )") ; 
end if;

  // date
assign saf.d = t25;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = t26;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = temp_timer;
if ( saf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign saf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute local_existing ( LOG1(timer event) )") to event_instance; 
  // boolean
assign saf.btrue = rcvd_evt.tfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign saf.btrue = rcvd_evt.ttrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign saf.etob_id = rcvd_evt.i;
if ( saf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign saf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(saf) rcvd_evt ( 12.34 )") ;
 
assign saf.r = rcvd_evt.i;
if ( saf.r == 11.0 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign saf.s = rcvd_evt.s;
if ( saf.s == "fit" )
  LOG::LogSuccess(message:"assign saf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign saf.attribute rcvd_evt ( fit )") ;
end if;
 
  // date
assign saf.d = rcvd_evt.d;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = rcvd_evt.ts;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = rcvd_evt.tim;
if ( saf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign saf.btrue = self.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = self.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign saf.bfalse = false;

  // integer
assign saf.etob_id = self.i;
if ( saf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
end if;
 
  // real
assign saf.r = self.r;
LOG::LogInfo(message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
assign saf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
  // string
assign saf.s = self.s;
if ( saf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.attribute ( etob2 string )") ;
end if;

  // date
assign saf.d = self.d;
if ( saf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign saf.t = self.t;
if ( saf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.tim;
if ( saf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = self.r1bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign saf.btrue = self.r1btrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1bfalse;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
  // integer
assign saf.etob_id = self.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign saf.r = self.r1r;
LOG::LogInfo(message:"assign other.attribute(saf) self.referential_attribute ( 2.1718 )") ;
 
assign saf.r = self.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) self.referential_attribute ( 2.0 )") ;
 
  // string
assign saf.s = self.r1s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = self.r1d;
if ( saf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign saf.t = self.r1t;
if ( saf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.r1tim;
if ( saf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.referential attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = saf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign saf.bfalse = saf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
assign saf.bfalse = false; 
 
  // integer
assign saf.etob_id = saf.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign saf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
assign saf.r = saf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = saf.s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = saf.d;
if ( saf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign saf.t = saf.t;
if ( saf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = saf.tim;
if ( saf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute saf.attribute ( LOG1(timer event)") to event_instance; 

  // boolean
for each smf in smfs
assign saf.btrue = smf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = smf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign saf.bfalse = false;
 
  // integer
assign saf.etob_id = smf.etob_id;
if ( saf.etob_id == smf.etob_id )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign saf.r = smf.r;
LOG::LogInfo(message:"assign other.attribute(saf) other.attribute(smf) ( smf.r )") ;
 
assign saf.r = smf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
 
  // string
assign saf.s = smf.s;
if ( saf.s == smf.s )
  LOG::LogSuccess(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = smf.d;
if ( saf.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign saf.t = smf.t;
if ( saf.t == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = smf.tim;
if ( saf.tim == smf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;


for each smf in smfs
  // boolean
assign smf.btrue = false;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
assign smf.btrue = true;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = true;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = false;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
  // integer
assign smf.etob_id = 29;
if ( smf.etob_id == 29 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 29 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 29 )") ;
end if;
 
  // real
assign smf.r = 12;
if ( smf.r == 12.0 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 12.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 12.0 )") ;
end if;
 
assign smf.r = 17.5;
if ( smf.r == 17.5 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 17.5 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 17.5 )") ;
end if;
 
  // string
assign smf.s = "test 444";
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 444 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 444 )") ;
end if;


  // boolean
assign smf.btrue = temp11;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
assign smf.btrue = temp10;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp10;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp11;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
  // integer
assign smf.etob_id = temp12;
if ( smf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( 31 )") ;
end if;
 
  // real
assign smf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 31.0 )") ;
 
assign smf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 9.874 )") ;
 
  // string
assign smf.s = temp14;
if ( smf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 333 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 333 )") ;
end if;

  // date
assign smf.d = t25;
if ( rcvd_evt.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = t26;
if ( rcvd_evt.ts == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = temp_timer;
if ( smf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign smf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute(smf) local_existing ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = rcvd_evt.tfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
end if;
 
assign smf.btrue = rcvd_evt.ttrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign smf.etob_id = rcvd_evt.i;
if ( smf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign smf.r = rcvd_evt.i;
LOG::LogInfo(message:"assign other.attribute(smf) rcvd_evt ( 11.0 )") ;
 
assign smf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(smf) rcvd_evt ( 12.34 )") ;
 
  // string
assign smf.s = rcvd_evt.s;
if ( smf.s == "fit" )
  LOG::LogSuccess(message:"assign smf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign smf.attribute rcvd_evt ( fit )") ;
end if;

  // date
assign smf.d = rcvd_evt.d;
if ( smf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = rcvd_evt.ts;
if ( smf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = rcvd_evt.tim;
if ( smf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = self.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( false )") ;
end if;
 
assign smf.btrue = self.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.i;
if ( smf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
end if;
 
  // real
assign smf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
assign smf.r = self.r;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
  // string
assign smf.s = self.s;
if ( smf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.attribute ( etob2 string )") ;
end if;
 
  // date
assign smf.d = self.d;
if ( smf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign smf.t = self.t;
if ( smf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.tim;
if ( smf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign smf.btrue = self.r1bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
end if;
 
assign smf.btrue = self.r1btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign smf.r = self.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) self.referential_attribute ( 2.0 )") ;
 
assign smf.r = self.r1r;
LOG::LogInfo( message:"assign other.attribute(smf) self.referential_attribute ( 2.1718 )") ;
 
  // string
assign smf.s = self.r1s;
if ( smf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
end if;
 
  // date
assign smf.d = self.r1d;
if ( smf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign smf.t = self.r1t;
if ( smf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.r1tim;
if ( smf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.referentialattribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = saf.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign smf.btrue = saf.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign smf.etob_id = saf.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign smf.r = saf.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
assign smf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = "test 444";
assign smf.s = saf.s;
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign smf.attribute saf.attribute ( test 444 )") ;
else
  LOG::LogFailure(message:"assign smf.attribute saf.attribute ( test 444 )") ;
end if;
 
  // date
assign smf.d = saf.d;
if ( smf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign smf.t = saf.t;
if ( smf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = saf.tim;
if ( smf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute saf.attribute ( LOG1(timer event) )") to event_instance; 

end for;

LOG::LogInfo(message:"Completed assign test") ;
 
//generate event to commence next test
generate ET16:''Start and test''(tfalse:false, ttrue: true) to self;

',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("fd31caa6-e766-7e79-f89d-6f233c353852",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("716a76e5-aeaa-29d8-4fcf-1d977816bda0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"fd31caa6-e766-7e79-f89d-6f233c353852");
INSERT INTO SM_AH
	VALUES ("716a76e5-aeaa-29d8-4fcf-1d977816bda0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("716a76e5-aeaa-29d8-4fcf-1d977816bda0",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("fd31caa6-e766-7e79-f89d-6f233c353852",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"66de3709-f47f-7936-40fb-b0d8e7303340",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("3f8bf9ce-83b8-e625-b6be-03ca73a5014a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"66de3709-f47f-7936-40fb-b0d8e7303340",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("c7bfa5ad-ef47-cc7f-eec9-dc3c5dd57874",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"3f8bf9ce-83b8-e625-b6be-03ca73a5014a");
INSERT INTO SM_AH
	VALUES ("c7bfa5ad-ef47-cc7f-eec9-dc3c5dd57874",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("c7bfa5ad-ef47-cc7f-eec9-dc3c5dd57874",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("3f8bf9ce-83b8-e625-b6be-03ca73a5014a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("a3e25bf1-7639-e01a-cde7-3fbe241a8af4",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("1d9a6f3f-0827-44f6-a6b8-3e7249b151c6",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"a3e25bf1-7639-e01a-cde7-3fbe241a8af4");
INSERT INTO SM_AH
	VALUES ("1d9a6f3f-0827-44f6-a6b8-3e7249b151c6",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("1d9a6f3f-0827-44f6-a6b8-3e7249b151c6",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("a3e25bf1-7639-e01a-cde7-3fbe241a8af4",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("73641449-6e50-c4dc-893d-b010d8f1d724",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("24ffb703-af64-b9b0-c79a-9b6accaa39a7",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"73641449-6e50-c4dc-893d-b010d8f1d724");
INSERT INTO SM_AH
	VALUES ("24ffb703-af64-b9b0-c79a-9b6accaa39a7",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("24ffb703-af64-b9b0-c79a-9b6accaa39a7",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("73641449-6e50-c4dc-893d-b010d8f1d724",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"44d39b91-1d9d-73f9-217a-91556104673f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("2edc4743-d19f-ed9c-55ae-ca54affc866d",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"44d39b91-1d9d-73f9-217a-91556104673f",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("5c3055ee-1c30-e9e3-b914-cf0352326988",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"2edc4743-d19f-ed9c-55ae-ca54affc866d");
INSERT INTO SM_AH
	VALUES ("5c3055ee-1c30-e9e3-b914-cf0352326988",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("5c3055ee-1c30-e9e3-b914-cf0352326988",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("2edc4743-d19f-ed9c-55ae-ca54affc866d",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("58982c68-0b67-fb2a-d66b-84b6496fe03a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("5f3ff6f2-0242-4e0d-ad7c-59dcdcd857a4",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"58982c68-0b67-fb2a-d66b-84b6496fe03a");
INSERT INTO SM_AH
	VALUES ("5f3ff6f2-0242-4e0d-ad7c-59dcdcd857a4",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("5f3ff6f2-0242-4e0d-ad7c-59dcdcd857a4",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("58982c68-0b67-fb2a-d66b-84b6496fe03a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"62732e5d-28b5-9f07-a940-5d67dd36859f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("cdc6e879-7296-1184-cfe3-eff922b12e41",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"62732e5d-28b5-9f07-a940-5d67dd36859f",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("20142d37-134c-bdfb-f2c6-e3f6e8598b02",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"cdc6e879-7296-1184-cfe3-eff922b12e41");
INSERT INTO SM_AH
	VALUES ("20142d37-134c-bdfb-f2c6-e3f6e8598b02",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("20142d37-134c-bdfb-f2c6-e3f6e8598b02",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("cdc6e879-7296-1184-cfe3-eff922b12e41",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("4e680752-57da-475b-d8c4-11963be191ba",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"53509702-0f88-6160-ffe2-15f189bfedc8",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("cc0fd1d9-9894-0762-a44d-440e19c7e63a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"4e680752-57da-475b-d8c4-11963be191ba");
INSERT INTO SM_AH
	VALUES ("cc0fd1d9-9894-0762-a44d-440e19c7e63a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("cc0fd1d9-9894-0762-a44d-440e19c7e63a",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("4e680752-57da-475b-d8c4-11963be191ba",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"f8088057-232b-66fb-0061-33e178e05cfc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("34a5e6e0-847a-50f3-ef23-f85efff5bdcf",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"f8088057-232b-66fb-0061-33e178e05cfc",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("76d3f073-a52e-64d9-2108-b4b47b5c87c6",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"34a5e6e0-847a-50f3-ef23-f85efff5bdcf");
INSERT INTO SM_AH
	VALUES ("76d3f073-a52e-64d9-2108-b4b47b5c87c6",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("76d3f073-a52e-64d9-2108-b4b47b5c87c6",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("34a5e6e0-847a-50f3-ef23-f85efff5bdcf",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("cf95098f-4252-ba65-3456-c9b4a1343e0f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"b06514dd-3680-9909-6d9c-d215d09740e5",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("34ed32b5-0d6c-c9a5-5b70-d7c47444037c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"cf95098f-4252-ba65-3456-c9b4a1343e0f");
INSERT INTO SM_AH
	VALUES ("34ed32b5-0d6c-c9a5-5b70-d7c47444037c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("34ed32b5-0d6c-c9a5-5b70-d7c47444037c",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("cf95098f-4252-ba65-3456-c9b4a1343e0f",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"b06514dd-3680-9909-6d9c-d215d09740e5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("9fa007f1-541d-0bc4-3c0f-4aa0d489a4a2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("b5e36aaa-9c14-2fa1-cbb5-c1fc20fd97aa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"9fa007f1-541d-0bc4-3c0f-4aa0d489a4a2");
INSERT INTO SM_AH
	VALUES ("b5e36aaa-9c14-2fa1-cbb5-c1fc20fd97aa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("b5e36aaa-9c14-2fa1-cbb5-c1fc20fd97aa",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("9fa007f1-541d-0bc4-3c0f-4aa0d489a4a2",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"53509702-0f88-6160-ffe2-15f189bfedc8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("cdd13c86-54db-7f68-6857-5ca99f29f6ba",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"b06514dd-3680-9909-6d9c-d215d09740e5",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("7298ca08-c752-b4f5-783a-781f30def751",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"cdd13c86-54db-7f68-6857-5ca99f29f6ba");
INSERT INTO SM_AH
	VALUES ("7298ca08-c752-b4f5-783a-781f30def751",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("7298ca08-c752-b4f5-783a-781f30def751",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("cdd13c86-54db-7f68-6857-5ca99f29f6ba",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("ff6f1b48-36d8-488e-f7ea-8a35c8743cbe",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("8e773efa-5d35-5992-a44e-a0c53cc39d49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"ff6f1b48-36d8-488e-f7ea-8a35c8743cbe");
INSERT INTO SM_AH
	VALUES ("8e773efa-5d35-5992-a44e-a0c53cc39d49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("8e773efa-5d35-5992-a44e-a0c53cc39d49",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("ff6f1b48-36d8-488e-f7ea-8a35c8743cbe",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"34f33f82-96ae-a337-98df-f59d249b65ed",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("784504ea-ab07-1eac-c5e9-37e4a4b84356",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"34f33f82-96ae-a337-98df-f59d249b65ed",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("4328c9b8-fd96-e041-aad5-e78ec6f213c5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"784504ea-ab07-1eac-c5e9-37e4a4b84356");
INSERT INTO SM_AH
	VALUES ("4328c9b8-fd96-e041-aad5-e78ec6f213c5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("4328c9b8-fd96-e041-aad5-e78ec6f213c5",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("784504ea-ab07-1eac-c5e9-37e4a4b84356",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("262cf679-02e3-a7ce-b418-7f8e0211e719",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("7e01616f-ebc4-cb85-ab6d-c8342ff79def",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"262cf679-02e3-a7ce-b418-7f8e0211e719");
INSERT INTO SM_AH
	VALUES ("7e01616f-ebc4-cb85-ab6d-c8342ff79def",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("7e01616f-ebc4-cb85-ab6d-c8342ff79def",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("262cf679-02e3-a7ce-b418-7f8e0211e719",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"81374f42-af06-0e04-abb9-f6643a9eaa65",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("7d77c1bc-3502-17f9-db93-6a04522cbc13",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"81374f42-af06-0e04-abb9-f6643a9eaa65",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("dd48e27b-e094-b967-6ccf-cc713004a759",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"7d77c1bc-3502-17f9-db93-6a04522cbc13");
INSERT INTO SM_AH
	VALUES ("dd48e27b-e094-b967-6ccf-cc713004a759",
	"4183af7f-5458-46fd-b949-bef6a2b6614c");
INSERT INTO SM_ACT
	VALUES ("dd48e27b-e094-b967-6ccf-cc713004a759",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("7d77c1bc-3502-17f9-db93-6a04522cbc13",
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	"9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	8,
	"4183af7f-5458-46fd-b949-bef6a2b6614c",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("609f4aa5-0609-f7e0-b135-835e90750b14",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"b06514dd-3680-9909-6d9c-d215d09740e5",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2');
INSERT INTO GD_SHP
	VALUES ("609f4aa5-0609-f7e0-b135-835e90750b14");
INSERT INTO GD_NCS
	VALUES ("609f4aa5-0609-f7e0-b135-835e90750b14");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"609f4aa5-0609-f7e0-b135-835e90750b14");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1360.000000,
	"609f4aa5-0609-f7e0-b135-835e90750b14",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("609f4aa5-0609-f7e0-b135-835e90750b14",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("256e8185-2621-94c3-61f7-440006eb7834",
	752.000000,
	1408.000000,
	"609f4aa5-0609-f7e0-b135-835e90750b14");
INSERT INTO DIM_CON
	VALUES ("dfa960b1-c6f3-6422-fb6d-90b1d8a79cef",
	784.000000,
	1360.000000,
	"609f4aa5-0609-f7e0-b135-835e90750b14");
INSERT INTO DIM_CON
	VALUES ("e8f56324-bc28-72f7-d857-cf298a683192",
	928.000000,
	1456.000000,
	"609f4aa5-0609-f7e0-b135-835e90750b14");
INSERT INTO GD_GE
	VALUES ("42fcb6ee-bfb2-fa1b-ad00-f883081fb792",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"9842cf40-2a8c-cb2b-673b-e159c7987edd",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations');
INSERT INTO GD_SHP
	VALUES ("42fcb6ee-bfb2-fa1b-ad00-f883081fb792");
INSERT INTO GD_NCS
	VALUES ("42fcb6ee-bfb2-fa1b-ad00-f883081fb792");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"42fcb6ee-bfb2-fa1b-ad00-f883081fb792");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1520.000000,
	"42fcb6ee-bfb2-fa1b-ad00-f883081fb792",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("42fcb6ee-bfb2-fa1b-ad00-f883081fb792",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("62959d43-06ba-6239-96c5-ea654fad35e8",
	2128.000000,
	1616.000000,
	"42fcb6ee-bfb2-fa1b-ad00-f883081fb792");
INSERT INTO DIM_CON
	VALUES ("79ab22de-3dd9-8aa8-e14e-27fc622c0877",
	1712.000000,
	1568.000000,
	"42fcb6ee-bfb2-fa1b-ad00-f883081fb792");
INSERT INTO GD_GE
	VALUES ("2f73ef48-c471-0d07-f895-34eea5d0d289",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"66de3709-f47f-7936-40fb-b0d8e7303340",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F15 values');
INSERT INTO GD_SHP
	VALUES ("2f73ef48-c471-0d07-f895-34eea5d0d289");
INSERT INTO GD_NCS
	VALUES ("2f73ef48-c471-0d07-f895-34eea5d0d289");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"2f73ef48-c471-0d07-f895-34eea5d0d289");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1696.000000,
	"2f73ef48-c471-0d07-f895-34eea5d0d289",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2f73ef48-c471-0d07-f895-34eea5d0d289",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("9b2bcc71-a2d2-c3e4-d2e5-ff4086121eac",
	2128.000000,
	1760.000000,
	"2f73ef48-c471-0d07-f895-34eea5d0d289");
INSERT INTO DIM_CON
	VALUES ("00af5cdb-0b84-c5ee-d4e8-e133a8e89b58",
	2128.000000,
	1792.000000,
	"2f73ef48-c471-0d07-f895-34eea5d0d289");
INSERT INTO GD_GE
	VALUES ("e51fc0e6-fdf3-8543-bca0-9f33ebe8910e",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers');
INSERT INTO GD_SHP
	VALUES ("e51fc0e6-fdf3-8543-bca0-9f33ebe8910e");
INSERT INTO GD_NCS
	VALUES ("e51fc0e6-fdf3-8543-bca0-9f33ebe8910e");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"e51fc0e6-fdf3-8543-bca0-9f33ebe8910e");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1872.000000,
	"e51fc0e6-fdf3-8543-bca0-9f33ebe8910e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e51fc0e6-fdf3-8543-bca0-9f33ebe8910e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("6feb142e-41ea-5c27-5327-f85989ddaacd",
	2128.000000,
	1920.000000,
	"e51fc0e6-fdf3-8543-bca0-9f33ebe8910e");
INSERT INTO DIM_CON
	VALUES ("82b6516c-0087-679d-b8e7-72867b09684f",
	2128.000000,
	1952.000000,
	"e51fc0e6-fdf3-8543-bca0-9f33ebe8910e");
INSERT INTO GD_GE
	VALUES ("340c3ba8-8f01-d68f-4e24-705ba1036f0a",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Shutting Down');
INSERT INTO GD_SHP
	VALUES ("340c3ba8-8f01-d68f-4e24-705ba1036f0a");
INSERT INTO GD_NCS
	VALUES ("340c3ba8-8f01-d68f-4e24-705ba1036f0a");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"340c3ba8-8f01-d68f-4e24-705ba1036f0a");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1536.000000,
	"340c3ba8-8f01-d68f-4e24-705ba1036f0a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("340c3ba8-8f01-d68f-4e24-705ba1036f0a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("e739fe85-1fca-5c9d-21a5-ab5c75e3ced2",
	2592.000000,
	1632.000000,
	"340c3ba8-8f01-d68f-4e24-705ba1036f0a");
INSERT INTO GD_GE
	VALUES ("6ac650ea-47f4-fcac-2362-64ae7903f23d",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"ffc4c4e4-39fe-1812-0376-186008fa5df8",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators');
INSERT INTO GD_SHP
	VALUES ("6ac650ea-47f4-fcac-2362-64ae7903f23d");
INSERT INTO GD_NCS
	VALUES ("6ac650ea-47f4-fcac-2362-64ae7903f23d");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"6ac650ea-47f4-fcac-2362-64ae7903f23d");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	2016.000000,
	"6ac650ea-47f4-fcac-2362-64ae7903f23d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6ac650ea-47f4-fcac-2362-64ae7903f23d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("5eafd74c-167e-1ce9-63c6-80c74f2f8198",
	2128.000000,
	2048.000000,
	"6ac650ea-47f4-fcac-2362-64ae7903f23d");
INSERT INTO DIM_CON
	VALUES ("3f6ca6a1-e038-0586-aed6-ada56913ef5b",
	2128.000000,
	2080.000000,
	"6ac650ea-47f4-fcac-2362-64ae7903f23d");
INSERT INTO GD_GE
	VALUES ("5baa13d9-0a0d-a53d-10db-d4d8306625d4",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"44d39b91-1d9d-73f9-217a-91556104673f",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("5baa13d9-0a0d-a53d-10db-d4d8306625d4");
INSERT INTO GD_NCS
	VALUES ("5baa13d9-0a0d-a53d-10db-d4d8306625d4");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"5baa13d9-0a0d-a53d-10db-d4d8306625d4");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	2016.000000,
	"5baa13d9-0a0d-a53d-10db-d4d8306625d4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5baa13d9-0a0d-a53d-10db-d4d8306625d4",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("3804ade9-e8fd-cbd8-47cb-00c7e0923077",
	2400.000000,
	2080.000000,
	"5baa13d9-0a0d-a53d-10db-d4d8306625d4");
INSERT INTO DIM_CON
	VALUES ("a82876f2-5873-1b24-dc8f-794e5c8882ff",
	2608.000000,
	2016.000000,
	"5baa13d9-0a0d-a53d-10db-d4d8306625d4");
INSERT INTO GD_GE
	VALUES ("28a6b57c-f94d-c0e7-fd2c-1318865f017b",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"a6d095bc-384d-5c44-e5c9-f26c6982921e",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("28a6b57c-f94d-c0e7-fd2c-1318865f017b");
INSERT INTO GD_NCS
	VALUES ("28a6b57c-f94d-c0e7-fd2c-1318865f017b");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"28a6b57c-f94d-c0e7-fd2c-1318865f017b");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1872.000000,
	"28a6b57c-f94d-c0e7-fd2c-1318865f017b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("28a6b57c-f94d-c0e7-fd2c-1318865f017b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("9a51164f-ca68-db9f-2c05-a4d7d998f4fd",
	2608.000000,
	1968.000000,
	"28a6b57c-f94d-c0e7-fd2c-1318865f017b");
INSERT INTO DIM_CON
	VALUES ("bfb0fba6-2d5a-0a1c-0ef4-7630b557015e",
	2608.000000,
	1872.000000,
	"28a6b57c-f94d-c0e7-fd2c-1318865f017b");
INSERT INTO GD_GE
	VALUES ("046424a4-40bc-aed6-0252-ede3aabd7efd",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"62732e5d-28b5-9f07-a940-5d67dd36859f",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("046424a4-40bc-aed6-0252-ede3aabd7efd");
INSERT INTO GD_NCS
	VALUES ("046424a4-40bc-aed6-0252-ede3aabd7efd");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"046424a4-40bc-aed6-0252-ede3aabd7efd");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1712.000000,
	"046424a4-40bc-aed6-0252-ede3aabd7efd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("046424a4-40bc-aed6-0252-ede3aabd7efd",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("7217ed34-c9d8-86ca-37ed-239724d99093",
	2608.000000,
	1808.000000,
	"046424a4-40bc-aed6-0252-ede3aabd7efd");
INSERT INTO DIM_CON
	VALUES ("a3035191-1f33-ed0c-bb03-9b0d9bba8260",
	2592.000000,
	1712.000000,
	"046424a4-40bc-aed6-0252-ede3aabd7efd");
INSERT INTO GD_GE
	VALUES ("0c7ebc53-d095-69cb-0cca-b320b8284f33",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"53509702-0f88-6160-ffe2-15f189bfedc8",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing empty operator');
INSERT INTO GD_SHP
	VALUES ("0c7ebc53-d095-69cb-0cca-b320b8284f33");
INSERT INTO GD_NCS
	VALUES ("0c7ebc53-d095-69cb-0cca-b320b8284f33");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"0c7ebc53-d095-69cb-0cca-b320b8284f33");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1680.000000,
	"0c7ebc53-d095-69cb-0cca-b320b8284f33",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0c7ebc53-d095-69cb-0cca-b320b8284f33",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("6c536231-89bf-58f7-2888-8fd4edf16e61",
	928.000000,
	1776.000000,
	"0c7ebc53-d095-69cb-0cca-b320b8284f33");
INSERT INTO DIM_CON
	VALUES ("38800e92-a134-3288-9259-9796a2ef3232",
	928.000000,
	1680.000000,
	"0c7ebc53-d095-69cb-0cca-b320b8284f33");
INSERT INTO GD_GE
	VALUES ("5b17c4a6-263f-ea43-8e91-23e6fe8d36f1",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"f8088057-232b-66fb-0061-33e178e05cfc",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator');
INSERT INTO GD_SHP
	VALUES ("5b17c4a6-263f-ea43-8e91-23e6fe8d36f1");
INSERT INTO GD_NCS
	VALUES ("5b17c4a6-263f-ea43-8e91-23e6fe8d36f1");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"5b17c4a6-263f-ea43-8e91-23e6fe8d36f1");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1840.000000,
	"5b17c4a6-263f-ea43-8e91-23e6fe8d36f1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5b17c4a6-263f-ea43-8e91-23e6fe8d36f1",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("50dbd7b8-9346-f847-f38f-2709eaf2eb92",
	928.000000,
	1840.000000,
	"5b17c4a6-263f-ea43-8e91-23e6fe8d36f1");
INSERT INTO DIM_CON
	VALUES ("72cf7e84-2f2e-0a3e-7265-85877e24f9f2",
	928.000000,
	1936.000000,
	"5b17c4a6-263f-ea43-8e91-23e6fe8d36f1");
INSERT INTO GD_GE
	VALUES ("29994c7a-b980-4497-d869-457c8d1620d5",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator');
INSERT INTO GD_SHP
	VALUES ("29994c7a-b980-4497-d869-457c8d1620d5");
INSERT INTO GD_NCS
	VALUES ("29994c7a-b980-4497-d869-457c8d1620d5");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"29994c7a-b980-4497-d869-457c8d1620d5");
INSERT INTO DIM_GE
	VALUES (752.000000,
	2016.000000,
	"29994c7a-b980-4497-d869-457c8d1620d5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("29994c7a-b980-4497-d869-457c8d1620d5",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("aaf66cc8-f132-1807-d8a9-0f8ef0a40b4d",
	928.000000,
	2016.000000,
	"29994c7a-b980-4497-d869-457c8d1620d5");
INSERT INTO DIM_CON
	VALUES ("706a5d42-f0b7-454a-cf9d-e012436be455",
	1072.000000,
	2080.000000,
	"29994c7a-b980-4497-d869-457c8d1620d5");
INSERT INTO GD_GE
	VALUES ("d41eb670-1dfc-9f80-ad07-7fc92df68d37",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not operator');
INSERT INTO GD_SHP
	VALUES ("d41eb670-1dfc-9f80-ad07-7fc92df68d37");
INSERT INTO GD_NCS
	VALUES ("d41eb670-1dfc-9f80-ad07-7fc92df68d37");
INSERT INTO DIM_ND
	VALUES (320.000000,
	80.000000,
	"d41eb670-1dfc-9f80-ad07-7fc92df68d37");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1536.000000,
	"d41eb670-1dfc-9f80-ad07-7fc92df68d37",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d41eb670-1dfc-9f80-ad07-7fc92df68d37",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("71fe4c8a-ca99-f1eb-0f54-9abe1af5bf25",
	928.000000,
	1616.000000,
	"d41eb670-1dfc-9f80-ad07-7fc92df68d37");
INSERT INTO DIM_CON
	VALUES ("91e90702-10d8-0dbe-0079-cadf69411895",
	928.000000,
	1536.000000,
	"d41eb670-1dfc-9f80-ad07-7fc92df68d37");
INSERT INTO GD_GE
	VALUES ("9561dba3-6ee1-7143-c36c-cb6338465b3f",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"34f33f82-96ae-a337-98df-f59d249b65ed",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator');
INSERT INTO GD_SHP
	VALUES ("9561dba3-6ee1-7143-c36c-cb6338465b3f");
INSERT INTO GD_NCS
	VALUES ("9561dba3-6ee1-7143-c36c-cb6338465b3f");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"9561dba3-6ee1-7143-c36c-cb6338465b3f");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1360.000000,
	"9561dba3-6ee1-7143-c36c-cb6338465b3f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9561dba3-6ee1-7143-c36c-cb6338465b3f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("10c9d04b-e3f0-b32b-8ed1-15dcbc5966e3",
	1280.000000,
	1376.000000,
	"9561dba3-6ee1-7143-c36c-cb6338465b3f");
INSERT INTO DIM_CON
	VALUES ("d9bdfbf6-8ece-acd4-16d7-499bd2ccf542",
	1424.000000,
	1456.000000,
	"9561dba3-6ee1-7143-c36c-cb6338465b3f");
INSERT INTO GD_GE
	VALUES ("3f3db03e-0a05-5c80-3f4e-ac329fd886ff",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing assign');
INSERT INTO GD_SHP
	VALUES ("3f3db03e-0a05-5c80-3f4e-ac329fd886ff");
INSERT INTO GD_NCS
	VALUES ("3f3db03e-0a05-5c80-3f4e-ac329fd886ff");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"3f3db03e-0a05-5c80-3f4e-ac329fd886ff");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1520.000000,
	"3f3db03e-0a05-5c80-3f4e-ac329fd886ff",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3f3db03e-0a05-5c80-3f4e-ac329fd886ff",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("90fe0fdb-9056-e96c-58e5-7c787e4304a8",
	1424.000000,
	1520.000000,
	"3f3db03e-0a05-5c80-3f4e-ac329fd886ff");
INSERT INTO DIM_CON
	VALUES ("bbd6a9a2-62ec-8561-8efc-8e4d600c2d85",
	1456.000000,
	1616.000000,
	"3f3db03e-0a05-5c80-3f4e-ac329fd886ff");
INSERT INTO GD_GE
	VALUES ("d6212fd5-e4ce-ef3c-0632-00ce474fb7fd",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"81374f42-af06-0e04-abb9-f6643a9eaa65",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Additional assign tests');
INSERT INTO GD_SHP
	VALUES ("d6212fd5-e4ce-ef3c-0632-00ce474fb7fd");
INSERT INTO GD_NCS
	VALUES ("d6212fd5-e4ce-ef3c-0632-00ce474fb7fd");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"d6212fd5-e4ce-ef3c-0632-00ce474fb7fd");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1680.000000,
	"d6212fd5-e4ce-ef3c-0632-00ce474fb7fd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d6212fd5-e4ce-ef3c-0632-00ce474fb7fd",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("b92662d0-200a-0fd1-2bc4-826127adfcbf",
	1456.000000,
	1680.000000,
	"d6212fd5-e4ce-ef3c-0632-00ce474fb7fd");
INSERT INTO DIM_CON
	VALUES ("75bd3797-718e-7a0f-b345-953b72c18b10",
	1600.000000,
	1728.000000,
	"d6212fd5-e4ce-ef3c-0632-00ce474fb7fd");
INSERT INTO GD_GE
	VALUES ("659cb641-1753-3409-673d-a229517585ac",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"fd31caa6-e766-7e79-f89d-6f233c353852",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations::ET3: Run F15 Values');
INSERT INTO GD_CON
	VALUES ("659cb641-1753-3409-673d-a229517585ac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1da733d4-5add-e77f-9ae0-3223612c5b75",
	"659cb641-1753-3409-673d-a229517585ac",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1da733d4-5add-e77f-9ae0-3223612c5b75");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1da733d4-5add-e77f-9ae0-3223612c5b75",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1da733d4-5add-e77f-9ae0-3223612c5b75",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8f1bb2bc-bbce-8596-7840-ffae21dfdcf3",
	"659cb641-1753-3409-673d-a229517585ac",
	3,
	16.000000,
	2.000000);
INSERT INTO DIM_ND
	VALUES (204.000000,
	44.000000,
	"8f1bb2bc-bbce-8596-7840-ffae21dfdcf3");
INSERT INTO DIM_GE
	VALUES (2176.000000,
	1675.000000,
	"8f1bb2bc-bbce-8596-7840-ffae21dfdcf3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8f1bb2bc-bbce-8596-7840-ffae21dfdcf3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("453c3d4b-6d13-0f0b-d9e1-55724ee06b9e",
	"659cb641-1753-3409-673d-a229517585ac",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"453c3d4b-6d13-0f0b-d9e1-55724ee06b9e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"453c3d4b-6d13-0f0b-d9e1-55724ee06b9e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("453c3d4b-6d13-0f0b-d9e1-55724ee06b9e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("79bf8e4d-1a6e-bab7-937b-9a62ab777aad",
	"659cb641-1753-3409-673d-a229517585ac",
	"00000000-0000-0000-0000-000000000000",
	"27728797-bad5-035f-ff1f-8157d0b2156b",
	"5a1c1c11-fc34-90bf-ca6e-9859de53879a");
INSERT INTO GD_LS
	VALUES ("bdce03e2-83df-c645-36ae-9f1449bcea90",
	"659cb641-1753-3409-673d-a229517585ac",
	"79bf8e4d-1a6e-bab7-937b-9a62ab777aad",
	"5a1c1c11-fc34-90bf-ca6e-9859de53879a",
	"21674d99-f21a-2e58-c7e0-2c0c69704cd8");
INSERT INTO GD_LS
	VALUES ("68224be3-a11a-1776-8803-a0600b17dbea",
	"659cb641-1753-3409-673d-a229517585ac",
	"bdce03e2-83df-c645-36ae-9f1449bcea90",
	"21674d99-f21a-2e58-c7e0-2c0c69704cd8",
	"3ab88a43-12d6-00f5-1b4b-57382b6d26c4");
INSERT INTO DIM_WAY
	VALUES ("27728797-bad5-035f-ff1f-8157d0b2156b",
	2128.000000,
	1616.000000,
	"659cb641-1753-3409-673d-a229517585ac",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("5a1c1c11-fc34-90bf-ca6e-9859de53879a",
	2176.000000,
	1616.000000,
	"659cb641-1753-3409-673d-a229517585ac",
	"00000000-0000-0000-0000-000000000000",
	"27728797-bad5-035f-ff1f-8157d0b2156b");
INSERT INTO DIM_WAY
	VALUES ("21674d99-f21a-2e58-c7e0-2c0c69704cd8",
	2176.000000,
	1760.000000,
	"659cb641-1753-3409-673d-a229517585ac",
	"00000000-0000-0000-0000-000000000000",
	"5a1c1c11-fc34-90bf-ca6e-9859de53879a");
INSERT INTO DIM_WAY
	VALUES ("3ab88a43-12d6-00f5-1b4b-57382b6d26c4",
	2128.000000,
	1760.000000,
	"659cb641-1753-3409-673d-a229517585ac",
	"00000000-0000-0000-0000-000000000000",
	"21674d99-f21a-2e58-c7e0-2c0c69704cd8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"659cb641-1753-3409-673d-a229517585ac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("659cb641-1753-3409-673d-a229517585ac",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("62959d43-06ba-6239-96c5-ea654fad35e8",
	"9b2bcc71-a2d2-c3e4-d2e5-ff4086121eac",
	"659cb641-1753-3409-673d-a229517585ac");
INSERT INTO GD_GE
	VALUES ("2accf81e-aa7a-7c6c-4c53-ab0a02258d27",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"3f8bf9ce-83b8-e625-b6be-03ca73a5014a",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F15 values::ET4: Run F16 Transformers');
INSERT INTO GD_CON
	VALUES ("2accf81e-aa7a-7c6c-4c53-ab0a02258d27",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bb51ca12-c120-3fb9-30e3-60dd11aa15fd",
	"2accf81e-aa7a-7c6c-4c53-ab0a02258d27",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"bb51ca12-c120-3fb9-30e3-60dd11aa15fd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bb51ca12-c120-3fb9-30e3-60dd11aa15fd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bb51ca12-c120-3fb9-30e3-60dd11aa15fd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("41933b56-8286-2092-d578-b371fcf24e94",
	"2accf81e-aa7a-7c6c-4c53-ab0a02258d27",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (227.000000,
	53.000000,
	"41933b56-8286-2092-d578-b371fcf24e94");
INSERT INTO DIM_GE
	VALUES (2160.000000,
	1840.000000,
	"41933b56-8286-2092-d578-b371fcf24e94",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("41933b56-8286-2092-d578-b371fcf24e94",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fb54bcb0-0206-fe89-74de-029ed374bd94",
	"2accf81e-aa7a-7c6c-4c53-ab0a02258d27",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"fb54bcb0-0206-fe89-74de-029ed374bd94");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fb54bcb0-0206-fe89-74de-029ed374bd94",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fb54bcb0-0206-fe89-74de-029ed374bd94",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("43165e65-892c-f50a-61d4-76a85ed933af",
	"2accf81e-aa7a-7c6c-4c53-ab0a02258d27",
	"00000000-0000-0000-0000-000000000000",
	"0ce4e781-bac6-6228-b633-0425d3ad7def",
	"3f0f3eb5-7db8-2778-8144-2659ab28779c");
INSERT INTO GD_LS
	VALUES ("61d75536-3a6e-5360-5929-c6af5b9e1503",
	"2accf81e-aa7a-7c6c-4c53-ab0a02258d27",
	"43165e65-892c-f50a-61d4-76a85ed933af",
	"3f0f3eb5-7db8-2778-8144-2659ab28779c",
	"2df8a310-9bf1-7feb-987d-45c63b7e990a");
INSERT INTO GD_LS
	VALUES ("25b92b78-7def-5d29-5bd2-d50ba3cd9d6f",
	"2accf81e-aa7a-7c6c-4c53-ab0a02258d27",
	"61d75536-3a6e-5360-5929-c6af5b9e1503",
	"2df8a310-9bf1-7feb-987d-45c63b7e990a",
	"758d5657-724d-9763-27dd-8df36f82a954");
INSERT INTO DIM_WAY
	VALUES ("0ce4e781-bac6-6228-b633-0425d3ad7def",
	2128.000000,
	1792.000000,
	"2accf81e-aa7a-7c6c-4c53-ab0a02258d27",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("3f0f3eb5-7db8-2778-8144-2659ab28779c",
	2176.000000,
	1792.000000,
	"2accf81e-aa7a-7c6c-4c53-ab0a02258d27",
	"00000000-0000-0000-0000-000000000000",
	"0ce4e781-bac6-6228-b633-0425d3ad7def");
INSERT INTO DIM_WAY
	VALUES ("2df8a310-9bf1-7feb-987d-45c63b7e990a",
	2176.000000,
	1920.000000,
	"2accf81e-aa7a-7c6c-4c53-ab0a02258d27",
	"00000000-0000-0000-0000-000000000000",
	"3f0f3eb5-7db8-2778-8144-2659ab28779c");
INSERT INTO DIM_WAY
	VALUES ("758d5657-724d-9763-27dd-8df36f82a954",
	2128.000000,
	1920.000000,
	"2accf81e-aa7a-7c6c-4c53-ab0a02258d27",
	"00000000-0000-0000-0000-000000000000",
	"2df8a310-9bf1-7feb-987d-45c63b7e990a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2accf81e-aa7a-7c6c-4c53-ab0a02258d27",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2accf81e-aa7a-7c6c-4c53-ab0a02258d27",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("00af5cdb-0b84-c5ee-d4e8-e133a8e89b58",
	"6feb142e-41ea-5c27-5327-f85989ddaacd",
	"2accf81e-aa7a-7c6c-4c53-ab0a02258d27");
INSERT INTO GD_GE
	VALUES ("943753c1-dffd-088f-38cf-95d4691433a6",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"a3e25bf1-7639-e01a-cde7-3fbe241a8af4",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers::ET5: Run F17 Timestamp and F18 Date Operators');
INSERT INTO GD_CON
	VALUES ("943753c1-dffd-088f-38cf-95d4691433a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("905fda9b-d8bb-7d47-ae87-09d778b6c1f7",
	"943753c1-dffd-088f-38cf-95d4691433a6",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"905fda9b-d8bb-7d47-ae87-09d778b6c1f7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"905fda9b-d8bb-7d47-ae87-09d778b6c1f7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("905fda9b-d8bb-7d47-ae87-09d778b6c1f7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b9fdb658-d02a-7d1c-a573-39cbe77bd286",
	"943753c1-dffd-088f-38cf-95d4691433a6",
	3,
	22.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (212.000000,
	60.000000,
	"b9fdb658-d02a-7d1c-a573-39cbe77bd286");
INSERT INTO DIM_GE
	VALUES (2182.000000,
	1984.000000,
	"b9fdb658-d02a-7d1c-a573-39cbe77bd286",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b9fdb658-d02a-7d1c-a573-39cbe77bd286",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("311ca462-0e25-fa16-89a3-7dbef573fd32",
	"943753c1-dffd-088f-38cf-95d4691433a6",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"311ca462-0e25-fa16-89a3-7dbef573fd32");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"311ca462-0e25-fa16-89a3-7dbef573fd32",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("311ca462-0e25-fa16-89a3-7dbef573fd32",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("14d617d3-050e-27fc-c8ee-b16603a5d98e",
	"943753c1-dffd-088f-38cf-95d4691433a6",
	"00000000-0000-0000-0000-000000000000",
	"fa589759-a08e-0276-9b9a-88f2b31fdb4a",
	"0a87729e-2985-5ec0-429c-de62b6e6bf73");
INSERT INTO GD_LS
	VALUES ("e18d9ca1-6f6b-9fe0-a900-b73933033519",
	"943753c1-dffd-088f-38cf-95d4691433a6",
	"14d617d3-050e-27fc-c8ee-b16603a5d98e",
	"0a87729e-2985-5ec0-429c-de62b6e6bf73",
	"76edb80e-c19d-f6ef-4072-e37029c7c468");
INSERT INTO GD_LS
	VALUES ("2278e903-1bc7-8e5f-2d7e-6c2a11ed1ba4",
	"943753c1-dffd-088f-38cf-95d4691433a6",
	"e18d9ca1-6f6b-9fe0-a900-b73933033519",
	"76edb80e-c19d-f6ef-4072-e37029c7c468",
	"43754e6f-90a8-ee57-a5ab-98bbee65d89a");
INSERT INTO DIM_WAY
	VALUES ("fa589759-a08e-0276-9b9a-88f2b31fdb4a",
	2128.000000,
	1952.000000,
	"943753c1-dffd-088f-38cf-95d4691433a6",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("0a87729e-2985-5ec0-429c-de62b6e6bf73",
	2176.000000,
	1952.000000,
	"943753c1-dffd-088f-38cf-95d4691433a6",
	"00000000-0000-0000-0000-000000000000",
	"fa589759-a08e-0276-9b9a-88f2b31fdb4a");
INSERT INTO DIM_WAY
	VALUES ("76edb80e-c19d-f6ef-4072-e37029c7c468",
	2176.000000,
	2048.000000,
	"943753c1-dffd-088f-38cf-95d4691433a6",
	"00000000-0000-0000-0000-000000000000",
	"0a87729e-2985-5ec0-429c-de62b6e6bf73");
INSERT INTO DIM_WAY
	VALUES ("43754e6f-90a8-ee57-a5ab-98bbee65d89a",
	2128.000000,
	2048.000000,
	"943753c1-dffd-088f-38cf-95d4691433a6",
	"00000000-0000-0000-0000-000000000000",
	"76edb80e-c19d-f6ef-4072-e37029c7c468");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"943753c1-dffd-088f-38cf-95d4691433a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("943753c1-dffd-088f-38cf-95d4691433a6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("82b6516c-0087-679d-b8e7-72867b09684f",
	"5eafd74c-167e-1ce9-63c6-80c74f2f8198",
	"943753c1-dffd-088f-38cf-95d4691433a6");
INSERT INTO GD_GE
	VALUES ("628d63b3-3c5d-0215-159a-bc609f778540",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"73641449-6e50-c4dc-893d-b010d8f1d724",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators::ET6: Run F1 and F2 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("628d63b3-3c5d-0215-159a-bc609f778540",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("caffe1ed-ae69-dca3-caf0-8dfe7d504e20",
	"628d63b3-3c5d-0215-159a-bc609f778540",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"caffe1ed-ae69-dca3-caf0-8dfe7d504e20");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"caffe1ed-ae69-dca3-caf0-8dfe7d504e20",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("caffe1ed-ae69-dca3-caf0-8dfe7d504e20",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("dc3920f4-2317-0afb-2d23-bb4d2e0fa7a4",
	"628d63b3-3c5d-0215-159a-bc609f778540",
	3,
	-62.000000,
	22.000000);
INSERT INTO DIM_ND
	VALUES (186.000000,
	64.000000,
	"dc3920f4-2317-0afb-2d23-bb4d2e0fa7a4");
INSERT INTO DIM_GE
	VALUES (2177.000000,
	2077.000000,
	"dc3920f4-2317-0afb-2d23-bb4d2e0fa7a4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dc3920f4-2317-0afb-2d23-bb4d2e0fa7a4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("74ebc1c7-9922-ee8a-554d-24ff71ab343a",
	"628d63b3-3c5d-0215-159a-bc609f778540",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"74ebc1c7-9922-ee8a-554d-24ff71ab343a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"74ebc1c7-9922-ee8a-554d-24ff71ab343a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("74ebc1c7-9922-ee8a-554d-24ff71ab343a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("ceb31dfd-f747-04fe-5adc-5b726ceae0d6",
	"628d63b3-3c5d-0215-159a-bc609f778540",
	"00000000-0000-0000-0000-000000000000",
	"adf5be49-494e-b783-f2f2-4fc808163729",
	"72398272-1898-cdbc-4e15-180f8233fdf5");
INSERT INTO DIM_WAY
	VALUES ("adf5be49-494e-b783-f2f2-4fc808163729",
	2128.000000,
	2080.000000,
	"628d63b3-3c5d-0215-159a-bc609f778540",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("72398272-1898-cdbc-4e15-180f8233fdf5",
	2400.000000,
	2080.000000,
	"628d63b3-3c5d-0215-159a-bc609f778540",
	"00000000-0000-0000-0000-000000000000",
	"adf5be49-494e-b783-f2f2-4fc808163729");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"628d63b3-3c5d-0215-159a-bc609f778540",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("628d63b3-3c5d-0215-159a-bc609f778540",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("3f6ca6a1-e038-0586-aed6-ada56913ef5b",
	"3804ade9-e8fd-cbd8-47cb-00c7e0923077",
	"628d63b3-3c5d-0215-159a-bc609f778540");
INSERT INTO GD_GE
	VALUES ("2cd5dd27-26aa-741c-e347-ce5e54270b8a",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"2edc4743-d19f-ed9c-55ae-ca54affc866d",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types::ET7: Run F3 through F14 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("2cd5dd27-26aa-741c-e347-ce5e54270b8a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("111b7b1f-5daa-d905-bfb1-f2946b34ed85",
	"2cd5dd27-26aa-741c-e347-ce5e54270b8a",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"111b7b1f-5daa-d905-bfb1-f2946b34ed85");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"111b7b1f-5daa-d905-bfb1-f2946b34ed85",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("111b7b1f-5daa-d905-bfb1-f2946b34ed85",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("831af9c3-fa77-822e-8683-d23034ec516f",
	"2cd5dd27-26aa-741c-e347-ce5e54270b8a",
	3,
	40.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (247.000000,
	49.000000,
	"831af9c3-fa77-822e-8683-d23034ec516f");
INSERT INTO DIM_GE
	VALUES (2632.000000,
	1975.000000,
	"831af9c3-fa77-822e-8683-d23034ec516f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("831af9c3-fa77-822e-8683-d23034ec516f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("10b381ea-cd3c-4f3a-5119-6a05481fb910",
	"2cd5dd27-26aa-741c-e347-ce5e54270b8a",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"10b381ea-cd3c-4f3a-5119-6a05481fb910");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"10b381ea-cd3c-4f3a-5119-6a05481fb910",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("10b381ea-cd3c-4f3a-5119-6a05481fb910",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("62fabf75-d12e-b724-d534-f299ae593855",
	"2cd5dd27-26aa-741c-e347-ce5e54270b8a",
	"00000000-0000-0000-0000-000000000000",
	"23c5144c-ad9b-6c35-b6ef-812376cb9e48",
	"3fd11240-3afe-24dd-51f3-dce0c12fd438");
INSERT INTO DIM_WAY
	VALUES ("23c5144c-ad9b-6c35-b6ef-812376cb9e48",
	2608.000000,
	2016.000000,
	"2cd5dd27-26aa-741c-e347-ce5e54270b8a",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("3fd11240-3afe-24dd-51f3-dce0c12fd438",
	2608.000000,
	1968.000000,
	"2cd5dd27-26aa-741c-e347-ce5e54270b8a",
	"00000000-0000-0000-0000-000000000000",
	"23c5144c-ad9b-6c35-b6ef-812376cb9e48");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2cd5dd27-26aa-741c-e347-ce5e54270b8a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2cd5dd27-26aa-741c-e347-ce5e54270b8a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a82876f2-5873-1b24-dc8f-794e5c8882ff",
	"9a51164f-ca68-db9f-2c05-a4d7d998f4fd",
	"2cd5dd27-26aa-741c-e347-ce5e54270b8a");
INSERT INTO GD_GE
	VALUES ("8edcdbca-c7aa-5f8e-45af-b36199891029",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"58982c68-0b67-fb2a-d66b-84b6496fe03a",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types::ET8: Run F15 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("8edcdbca-c7aa-5f8e-45af-b36199891029",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7102c466-18f2-05db-63df-53744f5dbbff",
	"8edcdbca-c7aa-5f8e-45af-b36199891029",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7102c466-18f2-05db-63df-53744f5dbbff");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7102c466-18f2-05db-63df-53744f5dbbff",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7102c466-18f2-05db-63df-53744f5dbbff",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("77387f10-1b95-a869-3946-eb6d97546a6f",
	"8edcdbca-c7aa-5f8e-45af-b36199891029",
	3,
	34.000000,
	-5.000000);
INSERT INTO DIM_ND
	VALUES (228.000000,
	45.000000,
	"77387f10-1b95-a869-3946-eb6d97546a6f");
INSERT INTO DIM_GE
	VALUES (2626.000000,
	1820.000000,
	"77387f10-1b95-a869-3946-eb6d97546a6f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("77387f10-1b95-a869-3946-eb6d97546a6f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fcd07928-07a2-4b84-a5ea-2a9bd6e40798",
	"8edcdbca-c7aa-5f8e-45af-b36199891029",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"fcd07928-07a2-4b84-a5ea-2a9bd6e40798");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fcd07928-07a2-4b84-a5ea-2a9bd6e40798",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fcd07928-07a2-4b84-a5ea-2a9bd6e40798",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("39a0f1fe-02fb-cc27-0617-99df26e6b068",
	"8edcdbca-c7aa-5f8e-45af-b36199891029",
	"00000000-0000-0000-0000-000000000000",
	"fe1d2064-2a35-9e34-fa90-9d55c65941a5",
	"065d5e40-3a51-fd7e-68b2-b5edac556171");
INSERT INTO DIM_WAY
	VALUES ("fe1d2064-2a35-9e34-fa90-9d55c65941a5",
	2608.000000,
	1872.000000,
	"8edcdbca-c7aa-5f8e-45af-b36199891029",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("065d5e40-3a51-fd7e-68b2-b5edac556171",
	2608.000000,
	1808.000000,
	"8edcdbca-c7aa-5f8e-45af-b36199891029",
	"00000000-0000-0000-0000-000000000000",
	"fe1d2064-2a35-9e34-fa90-9d55c65941a5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8edcdbca-c7aa-5f8e-45af-b36199891029",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8edcdbca-c7aa-5f8e-45af-b36199891029",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("bfb0fba6-2d5a-0a1c-0ef4-7630b557015e",
	"7217ed34-c9d8-86ca-37ed-239724d99093",
	"8edcdbca-c7aa-5f8e-45af-b36199891029");
INSERT INTO GD_GE
	VALUES ("bb8cdae7-f693-2d80-782c-85d59bc251ff",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"cdc6e879-7296-1184-cfe3-eff922b12e41",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types::ET9: Shut Down');
INSERT INTO GD_CON
	VALUES ("bb8cdae7-f693-2d80-782c-85d59bc251ff",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d7c0ab63-5766-afd0-4bac-d8844504d581",
	"bb8cdae7-f693-2d80-782c-85d59bc251ff",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d7c0ab63-5766-afd0-4bac-d8844504d581");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d7c0ab63-5766-afd0-4bac-d8844504d581",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d7c0ab63-5766-afd0-4bac-d8844504d581",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f4e701c2-744f-ac3d-b8e3-1e9275e8fed2",
	"bb8cdae7-f693-2d80-782c-85d59bc251ff",
	3,
	-5.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (274.000000,
	52.000000,
	"f4e701c2-744f-ac3d-b8e3-1e9275e8fed2");
INSERT INTO DIM_GE
	VALUES (2571.000000,
	1649.000000,
	"f4e701c2-744f-ac3d-b8e3-1e9275e8fed2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f4e701c2-744f-ac3d-b8e3-1e9275e8fed2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d351bbb0-38f3-278a-a042-2e2df349eaa7",
	"bb8cdae7-f693-2d80-782c-85d59bc251ff",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d351bbb0-38f3-278a-a042-2e2df349eaa7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d351bbb0-38f3-278a-a042-2e2df349eaa7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d351bbb0-38f3-278a-a042-2e2df349eaa7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("e633d4ca-7091-5142-eada-b98385994feb",
	"bb8cdae7-f693-2d80-782c-85d59bc251ff",
	"00000000-0000-0000-0000-000000000000",
	"909c1e49-ac9f-3c4b-fd38-f514bb560332",
	"12862997-db6e-13b1-8193-615e4be16ab1");
INSERT INTO DIM_WAY
	VALUES ("909c1e49-ac9f-3c4b-fd38-f514bb560332",
	2592.000000,
	1712.000000,
	"bb8cdae7-f693-2d80-782c-85d59bc251ff",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("12862997-db6e-13b1-8193-615e4be16ab1",
	2592.000000,
	1632.000000,
	"bb8cdae7-f693-2d80-782c-85d59bc251ff",
	"00000000-0000-0000-0000-000000000000",
	"909c1e49-ac9f-3c4b-fd38-f514bb560332");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bb8cdae7-f693-2d80-782c-85d59bc251ff",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bb8cdae7-f693-2d80-782c-85d59bc251ff",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a3035191-1f33-ed0c-bb03-9b0d9bba8260",
	"e739fe85-1fca-5c9d-21a5-ab5c75e3ced2",
	"bb8cdae7-f693-2d80-782c-85d59bc251ff");
INSERT INTO GD_GE
	VALUES ("970c98b8-94a3-f2c1-31b8-3f73d7abee92",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"4e680752-57da-475b-d8c4-11963be191ba",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing empty operator::ET10: Start not_empty test');
INSERT INTO GD_CON
	VALUES ("970c98b8-94a3-f2c1-31b8-3f73d7abee92",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("33d4d64b-526b-2f40-64dc-0b3246d03f65",
	"970c98b8-94a3-f2c1-31b8-3f73d7abee92",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"33d4d64b-526b-2f40-64dc-0b3246d03f65");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"33d4d64b-526b-2f40-64dc-0b3246d03f65",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("33d4d64b-526b-2f40-64dc-0b3246d03f65",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("da24b315-5c15-54f2-e281-de4fcdeb20b4",
	"970c98b8-94a3-f2c1-31b8-3f73d7abee92",
	3,
	-170.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (199.000000,
	37.000000,
	"da24b315-5c15-54f2-e281-de4fcdeb20b4");
INSERT INTO DIM_GE
	VALUES (742.000000,
	1794.000000,
	"da24b315-5c15-54f2-e281-de4fcdeb20b4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("da24b315-5c15-54f2-e281-de4fcdeb20b4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("91514b37-d5d2-ff94-c65b-509dd7ec3929",
	"970c98b8-94a3-f2c1-31b8-3f73d7abee92",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"91514b37-d5d2-ff94-c65b-509dd7ec3929");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"91514b37-d5d2-ff94-c65b-509dd7ec3929",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("91514b37-d5d2-ff94-c65b-509dd7ec3929",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("ac9af336-3484-9677-05fc-f40511b49e7e",
	"970c98b8-94a3-f2c1-31b8-3f73d7abee92",
	"00000000-0000-0000-0000-000000000000",
	"d9cc7ab6-a5f1-f603-7bcd-e2c64c9e2216",
	"f8efbd20-d3c7-fd55-13cc-d1a63cfae5e7");
INSERT INTO DIM_WAY
	VALUES ("d9cc7ab6-a5f1-f603-7bcd-e2c64c9e2216",
	928.000000,
	1776.000000,
	"970c98b8-94a3-f2c1-31b8-3f73d7abee92",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("f8efbd20-d3c7-fd55-13cc-d1a63cfae5e7",
	928.000000,
	1840.000000,
	"970c98b8-94a3-f2c1-31b8-3f73d7abee92",
	"00000000-0000-0000-0000-000000000000",
	"d9cc7ab6-a5f1-f603-7bcd-e2c64c9e2216");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"970c98b8-94a3-f2c1-31b8-3f73d7abee92",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("970c98b8-94a3-f2c1-31b8-3f73d7abee92",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("6c536231-89bf-58f7-2888-8fd4edf16e61",
	"50dbd7b8-9346-f847-f38f-2709eaf2eb92",
	"970c98b8-94a3-f2c1-31b8-3f73d7abee92");
INSERT INTO GD_GE
	VALUES ("f39e27c1-872d-22e4-9ceb-edbf852443c3",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"34a5e6e0-847a-50f3-ef23-f85efff5bdcf",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator::ET11: Start cardinality test');
INSERT INTO GD_CON
	VALUES ("f39e27c1-872d-22e4-9ceb-edbf852443c3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fe3ba74c-8f84-f89a-3503-af80a2db6fac",
	"f39e27c1-872d-22e4-9ceb-edbf852443c3",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"fe3ba74c-8f84-f89a-3503-af80a2db6fac");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fe3ba74c-8f84-f89a-3503-af80a2db6fac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fe3ba74c-8f84-f89a-3503-af80a2db6fac",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("68cddfd5-322c-7eb2-5966-9754457244bd",
	"f39e27c1-872d-22e4-9ceb-edbf852443c3",
	3,
	-163.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (169.000000,
	36.000000,
	"68cddfd5-322c-7eb2-5966-9754457244bd");
INSERT INTO DIM_GE
	VALUES (749.000000,
	1961.000000,
	"68cddfd5-322c-7eb2-5966-9754457244bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("68cddfd5-322c-7eb2-5966-9754457244bd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cccba959-109c-59eb-6136-6eb478750f45",
	"f39e27c1-872d-22e4-9ceb-edbf852443c3",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"cccba959-109c-59eb-6136-6eb478750f45");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cccba959-109c-59eb-6136-6eb478750f45",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cccba959-109c-59eb-6136-6eb478750f45",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("9b541927-4b64-f0e1-f970-af01a8cc34e4",
	"f39e27c1-872d-22e4-9ceb-edbf852443c3",
	"00000000-0000-0000-0000-000000000000",
	"cd58b27d-051a-d4ca-ef93-16b80eb4e4d8",
	"a9a1c24f-4c1b-6e17-64c3-41fbbbe0678a");
INSERT INTO DIM_WAY
	VALUES ("cd58b27d-051a-d4ca-ef93-16b80eb4e4d8",
	928.000000,
	1936.000000,
	"f39e27c1-872d-22e4-9ceb-edbf852443c3",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a9a1c24f-4c1b-6e17-64c3-41fbbbe0678a",
	928.000000,
	2016.000000,
	"f39e27c1-872d-22e4-9ceb-edbf852443c3",
	"00000000-0000-0000-0000-000000000000",
	"cd58b27d-051a-d4ca-ef93-16b80eb4e4d8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f39e27c1-872d-22e4-9ceb-edbf852443c3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f39e27c1-872d-22e4-9ceb-edbf852443c3",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("72cf7e84-2f2e-0a3e-7265-85877e24f9f2",
	"aaf66cc8-f132-1807-d8a9-0f8ef0a40b4d",
	"f39e27c1-872d-22e4-9ceb-edbf852443c3");
INSERT INTO GD_GE
	VALUES ("0b241f89-167c-1186-8886-8d78511a8e24",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"cf95098f-4252-ba65-3456-c9b4a1343e0f",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET1: Start Expression Test');
INSERT INTO GD_CON
	VALUES ("0b241f89-167c-1186-8886-8d78511a8e24",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9af5a99e-a32c-72fe-c1cd-7d5afe860ded",
	"0b241f89-167c-1186-8886-8d78511a8e24",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9af5a99e-a32c-72fe-c1cd-7d5afe860ded");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9af5a99e-a32c-72fe-c1cd-7d5afe860ded",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9af5a99e-a32c-72fe-c1cd-7d5afe860ded",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9e7516c4-62e7-e9ce-bb3c-4257400a39da",
	"0b241f89-167c-1186-8886-8d78511a8e24",
	3,
	-38.000000,
	-24.000000);
INSERT INTO DIM_ND
	VALUES (161.000000,
	35.000000,
	"9e7516c4-62e7-e9ce-bb3c-4257400a39da");
INSERT INTO DIM_GE
	VALUES (681.000000,
	1279.000000,
	"9e7516c4-62e7-e9ce-bb3c-4257400a39da",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9e7516c4-62e7-e9ce-bb3c-4257400a39da",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7a86d813-debf-abaa-b07f-a3f8ceca12a9",
	"0b241f89-167c-1186-8886-8d78511a8e24",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7a86d813-debf-abaa-b07f-a3f8ceca12a9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7a86d813-debf-abaa-b07f-a3f8ceca12a9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7a86d813-debf-abaa-b07f-a3f8ceca12a9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("612140f3-dc7b-3474-5009-e8735eb7ccae",
	"0b241f89-167c-1186-8886-8d78511a8e24",
	"00000000-0000-0000-0000-000000000000",
	"1641bd96-86d3-cf87-1fbd-5aeb73d6a513",
	"2bdee96c-12d9-0fbb-9209-ee9d737b493e");
INSERT INTO GD_LS
	VALUES ("6d8d2bc5-9a35-58fb-5e2b-1c2f68d2b312",
	"0b241f89-167c-1186-8886-8d78511a8e24",
	"612140f3-dc7b-3474-5009-e8735eb7ccae",
	"2bdee96c-12d9-0fbb-9209-ee9d737b493e",
	"18aefe65-7860-8c5e-437e-092eb8eb351a");
INSERT INTO GD_LS
	VALUES ("71d1d666-ad54-5deb-1cc8-9924f62340cf",
	"0b241f89-167c-1186-8886-8d78511a8e24",
	"6d8d2bc5-9a35-58fb-5e2b-1c2f68d2b312",
	"18aefe65-7860-8c5e-437e-092eb8eb351a",
	"b74e703f-97d1-43fb-5d46-fb83c7aa4de6");
INSERT INTO GD_LS
	VALUES ("6cf90629-629b-6679-56ea-d7cb73ee0c7a",
	"0b241f89-167c-1186-8886-8d78511a8e24",
	"71d1d666-ad54-5deb-1cc8-9924f62340cf",
	"b74e703f-97d1-43fb-5d46-fb83c7aa4de6",
	"8abaf480-813c-4a01-50f8-c436e98bafcc");
INSERT INTO DIM_WAY
	VALUES ("1641bd96-86d3-cf87-1fbd-5aeb73d6a513",
	752.000000,
	1408.000000,
	"0b241f89-167c-1186-8886-8d78511a8e24",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("2bdee96c-12d9-0fbb-9209-ee9d737b493e",
	624.000000,
	1408.000000,
	"0b241f89-167c-1186-8886-8d78511a8e24",
	"00000000-0000-0000-0000-000000000000",
	"1641bd96-86d3-cf87-1fbd-5aeb73d6a513");
INSERT INTO DIM_WAY
	VALUES ("18aefe65-7860-8c5e-437e-092eb8eb351a",
	624.000000,
	1328.000000,
	"0b241f89-167c-1186-8886-8d78511a8e24",
	"00000000-0000-0000-0000-000000000000",
	"2bdee96c-12d9-0fbb-9209-ee9d737b493e");
INSERT INTO DIM_WAY
	VALUES ("b74e703f-97d1-43fb-5d46-fb83c7aa4de6",
	784.000000,
	1328.000000,
	"0b241f89-167c-1186-8886-8d78511a8e24",
	"00000000-0000-0000-0000-000000000000",
	"18aefe65-7860-8c5e-437e-092eb8eb351a");
INSERT INTO DIM_WAY
	VALUES ("8abaf480-813c-4a01-50f8-c436e98bafcc",
	784.000000,
	1360.000000,
	"0b241f89-167c-1186-8886-8d78511a8e24",
	"00000000-0000-0000-0000-000000000000",
	"b74e703f-97d1-43fb-5d46-fb83c7aa4de6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0b241f89-167c-1186-8886-8d78511a8e24",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0b241f89-167c-1186-8886-8d78511a8e24",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("256e8185-2621-94c3-61f7-440006eb7834",
	"dfa960b1-c6f3-6422-fb6d-90b1d8a79cef",
	"0b241f89-167c-1186-8886-8d78511a8e24");
INSERT INTO GD_GE
	VALUES ("e46af6c7-6398-8003-0f21-78bdb927f7f3",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"9fa007f1-541d-0bc4-3c0f-4aa0d489a4a2",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not operator::ET12: Start empty test');
INSERT INTO GD_CON
	VALUES ("e46af6c7-6398-8003-0f21-78bdb927f7f3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("292be43b-55d2-01c5-c0ce-5f1265951c2b",
	"e46af6c7-6398-8003-0f21-78bdb927f7f3",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"292be43b-55d2-01c5-c0ce-5f1265951c2b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"292be43b-55d2-01c5-c0ce-5f1265951c2b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("292be43b-55d2-01c5-c0ce-5f1265951c2b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("75638cb9-35b7-124b-14dc-0c74230aeeab",
	"e46af6c7-6398-8003-0f21-78bdb927f7f3",
	3,
	-159.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (189.000000,
	36.000000,
	"75638cb9-35b7-124b-14dc-0c74230aeeab");
INSERT INTO DIM_GE
	VALUES (753.000000,
	1632.000000,
	"75638cb9-35b7-124b-14dc-0c74230aeeab",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("75638cb9-35b7-124b-14dc-0c74230aeeab",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("93e950c9-7010-fe78-1a96-26997f272700",
	"e46af6c7-6398-8003-0f21-78bdb927f7f3",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"93e950c9-7010-fe78-1a96-26997f272700");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"93e950c9-7010-fe78-1a96-26997f272700",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("93e950c9-7010-fe78-1a96-26997f272700",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("50d71e53-8d73-be9d-c58d-87044ca0b42a",
	"e46af6c7-6398-8003-0f21-78bdb927f7f3",
	"00000000-0000-0000-0000-000000000000",
	"a5e8de88-af17-0429-17a3-aad85aaad24b",
	"4d4ee8a0-76cc-0c19-f61a-c518bc22a74c");
INSERT INTO DIM_WAY
	VALUES ("a5e8de88-af17-0429-17a3-aad85aaad24b",
	928.000000,
	1616.000000,
	"e46af6c7-6398-8003-0f21-78bdb927f7f3",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("4d4ee8a0-76cc-0c19-f61a-c518bc22a74c",
	928.000000,
	1680.000000,
	"e46af6c7-6398-8003-0f21-78bdb927f7f3",
	"00000000-0000-0000-0000-000000000000",
	"a5e8de88-af17-0429-17a3-aad85aaad24b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e46af6c7-6398-8003-0f21-78bdb927f7f3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e46af6c7-6398-8003-0f21-78bdb927f7f3",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("71fe4c8a-ca99-f1eb-0f54-9abe1af5bf25",
	"38800e92-a134-3288-9259-9796a2ef3232",
	"e46af6c7-6398-8003-0f21-78bdb927f7f3");
INSERT INTO GD_GE
	VALUES ("8adf8a16-8989-2fdf-1cf0-e6fa8303b0ea",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"cdd13c86-54db-7f68-6857-5ca99f29f6ba",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET13: Start not test');
INSERT INTO GD_CON
	VALUES ("8adf8a16-8989-2fdf-1cf0-e6fa8303b0ea",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3f2cd81c-dd02-6f82-5dd0-d86021467f22",
	"8adf8a16-8989-2fdf-1cf0-e6fa8303b0ea",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3f2cd81c-dd02-6f82-5dd0-d86021467f22");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3f2cd81c-dd02-6f82-5dd0-d86021467f22",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3f2cd81c-dd02-6f82-5dd0-d86021467f22",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f39dc9db-2e7f-fe10-0f8d-01c08938fa4c",
	"8adf8a16-8989-2fdf-1cf0-e6fa8303b0ea",
	3,
	-220.000000,
	-6.000000);
INSERT INTO DIM_ND
	VALUES (226.000000,
	40.000000,
	"f39dc9db-2e7f-fe10-0f8d-01c08938fa4c");
INSERT INTO DIM_GE
	VALUES (692.000000,
	1475.000000,
	"f39dc9db-2e7f-fe10-0f8d-01c08938fa4c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f39dc9db-2e7f-fe10-0f8d-01c08938fa4c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e2b0bb43-0017-7223-1a42-6e871814d802",
	"8adf8a16-8989-2fdf-1cf0-e6fa8303b0ea",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e2b0bb43-0017-7223-1a42-6e871814d802");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e2b0bb43-0017-7223-1a42-6e871814d802",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e2b0bb43-0017-7223-1a42-6e871814d802",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("8eb395f5-9be8-7cdb-6477-60b861cb0649",
	"8adf8a16-8989-2fdf-1cf0-e6fa8303b0ea",
	"00000000-0000-0000-0000-000000000000",
	"acc61c23-765e-01b3-59c8-3f62dd8897ad",
	"562c8b03-6fab-713b-32b9-cf040082dfda");
INSERT INTO DIM_WAY
	VALUES ("acc61c23-765e-01b3-59c8-3f62dd8897ad",
	928.000000,
	1456.000000,
	"8adf8a16-8989-2fdf-1cf0-e6fa8303b0ea",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("562c8b03-6fab-713b-32b9-cf040082dfda",
	928.000000,
	1536.000000,
	"8adf8a16-8989-2fdf-1cf0-e6fa8303b0ea",
	"00000000-0000-0000-0000-000000000000",
	"acc61c23-765e-01b3-59c8-3f62dd8897ad");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8adf8a16-8989-2fdf-1cf0-e6fa8303b0ea",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8adf8a16-8989-2fdf-1cf0-e6fa8303b0ea",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e8f56324-bc28-72f7-d857-cf298a683192",
	"91e90702-10d8-0dbe-0079-cadf69411895",
	"8adf8a16-8989-2fdf-1cf0-e6fa8303b0ea");
INSERT INTO GD_GE
	VALUES ("3e1e8185-3e2a-ba66-2e75-757c8c5b46ef",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"ff6f1b48-36d8-488e-f7ea-8a35c8743cbe",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator::ET14: Start subtract test');
INSERT INTO GD_CON
	VALUES ("3e1e8185-3e2a-ba66-2e75-757c8c5b46ef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7c7d3b73-5be0-3ed0-7d13-7af7c3f7e59e",
	"3e1e8185-3e2a-ba66-2e75-757c8c5b46ef",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7c7d3b73-5be0-3ed0-7d13-7af7c3f7e59e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7c7d3b73-5be0-3ed0-7d13-7af7c3f7e59e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7c7d3b73-5be0-3ed0-7d13-7af7c3f7e59e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c630fd29-e76d-2012-ff78-33df438d700d",
	"3e1e8185-3e2a-ba66-2e75-757c8c5b46ef",
	3,
	-54.000000,
	-372.000000);
INSERT INTO DIM_ND
	VALUES (233.000000,
	39.000000,
	"c630fd29-e76d-2012-ff78-33df438d700d");
INSERT INTO DIM_GE
	VALUES (1098.000000,
	1333.000000,
	"c630fd29-e76d-2012-ff78-33df438d700d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c630fd29-e76d-2012-ff78-33df438d700d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("48286b37-f027-28f3-02bc-66fceed52dc8",
	"3e1e8185-3e2a-ba66-2e75-757c8c5b46ef",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"48286b37-f027-28f3-02bc-66fceed52dc8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"48286b37-f027-28f3-02bc-66fceed52dc8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("48286b37-f027-28f3-02bc-66fceed52dc8",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2b4a05ac-9831-97d8-0cc8-3ee062ba4ee7",
	"3e1e8185-3e2a-ba66-2e75-757c8c5b46ef",
	"00000000-0000-0000-0000-000000000000",
	"3a6b883a-1ac8-00b3-11f4-99dc258a5375",
	"f58383f7-6a4c-8a15-5ced-828116ee84cb");
INSERT INTO GD_LS
	VALUES ("2725b05b-bcf1-c063-4842-831c2cfa7c0e",
	"3e1e8185-3e2a-ba66-2e75-757c8c5b46ef",
	"2b4a05ac-9831-97d8-0cc8-3ee062ba4ee7",
	"f58383f7-6a4c-8a15-5ced-828116ee84cb",
	"34db4792-7400-1ff1-df37-29f4e2fc7588");
INSERT INTO GD_LS
	VALUES ("59f6b045-65a1-2e45-0b41-17c14daeee7b",
	"3e1e8185-3e2a-ba66-2e75-757c8c5b46ef",
	"2725b05b-bcf1-c063-4842-831c2cfa7c0e",
	"34db4792-7400-1ff1-df37-29f4e2fc7588",
	"fc315c19-083b-4088-e60f-a9cc8e176fd1");
INSERT INTO DIM_WAY
	VALUES ("3a6b883a-1ac8-00b3-11f4-99dc258a5375",
	1072.000000,
	2080.000000,
	"3e1e8185-3e2a-ba66-2e75-757c8c5b46ef",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("f58383f7-6a4c-8a15-5ced-828116ee84cb",
	1168.000000,
	2080.000000,
	"3e1e8185-3e2a-ba66-2e75-757c8c5b46ef",
	"00000000-0000-0000-0000-000000000000",
	"3a6b883a-1ac8-00b3-11f4-99dc258a5375");
INSERT INTO DIM_WAY
	VALUES ("34db4792-7400-1ff1-df37-29f4e2fc7588",
	1168.000000,
	1376.000000,
	"3e1e8185-3e2a-ba66-2e75-757c8c5b46ef",
	"00000000-0000-0000-0000-000000000000",
	"f58383f7-6a4c-8a15-5ced-828116ee84cb");
INSERT INTO DIM_WAY
	VALUES ("fc315c19-083b-4088-e60f-a9cc8e176fd1",
	1280.000000,
	1376.000000,
	"3e1e8185-3e2a-ba66-2e75-757c8c5b46ef",
	"00000000-0000-0000-0000-000000000000",
	"34db4792-7400-1ff1-df37-29f4e2fc7588");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3e1e8185-3e2a-ba66-2e75-757c8c5b46ef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3e1e8185-3e2a-ba66-2e75-757c8c5b46ef",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("706a5d42-f0b7-454a-cf9d-e012436be455",
	"10c9d04b-e3f0-b32b-8ed1-15dcbc5966e3",
	"3e1e8185-3e2a-ba66-2e75-757c8c5b46ef");
INSERT INTO GD_GE
	VALUES ("18721dc7-a79a-e336-7999-ef1bef3c7637",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"784504ea-ab07-1eac-c5e9-37e4a4b84356",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("18721dc7-a79a-e336-7999-ef1bef3c7637",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6bd5a5a2-c10b-ccc1-4f0b-bf931b8afa5e",
	"18721dc7-a79a-e336-7999-ef1bef3c7637",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6bd5a5a2-c10b-ccc1-4f0b-bf931b8afa5e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6bd5a5a2-c10b-ccc1-4f0b-bf931b8afa5e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6bd5a5a2-c10b-ccc1-4f0b-bf931b8afa5e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5045fbc5-0f53-b01d-206a-2f99974d74d7",
	"18721dc7-a79a-e336-7999-ef1bef3c7637",
	3,
	-210.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (220.000000,
	34.000000,
	"5045fbc5-0f53-b01d-206a-2f99974d74d7");
INSERT INTO DIM_GE
	VALUES (1198.000000,
	1469.000000,
	"5045fbc5-0f53-b01d-206a-2f99974d74d7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5045fbc5-0f53-b01d-206a-2f99974d74d7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ad3070b6-bc2f-73c9-6fb0-419b8644141e",
	"18721dc7-a79a-e336-7999-ef1bef3c7637",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ad3070b6-bc2f-73c9-6fb0-419b8644141e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ad3070b6-bc2f-73c9-6fb0-419b8644141e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ad3070b6-bc2f-73c9-6fb0-419b8644141e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2839dd50-bda9-c967-1ebb-731592cc69c2",
	"18721dc7-a79a-e336-7999-ef1bef3c7637",
	"00000000-0000-0000-0000-000000000000",
	"0e518439-d61c-8be6-691e-70537de6c006",
	"ae6d424a-f7c9-ac2f-a5c9-0a33a20b84b9");
INSERT INTO DIM_WAY
	VALUES ("0e518439-d61c-8be6-691e-70537de6c006",
	1424.000000,
	1456.000000,
	"18721dc7-a79a-e336-7999-ef1bef3c7637",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("ae6d424a-f7c9-ac2f-a5c9-0a33a20b84b9",
	1424.000000,
	1520.000000,
	"18721dc7-a79a-e336-7999-ef1bef3c7637",
	"00000000-0000-0000-0000-000000000000",
	"0e518439-d61c-8be6-691e-70537de6c006");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"18721dc7-a79a-e336-7999-ef1bef3c7637",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("18721dc7-a79a-e336-7999-ef1bef3c7637",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("d9bdfbf6-8ece-acd4-16d7-499bd2ccf542",
	"90fe0fdb-9056-e96c-58e5-7c787e4304a8",
	"18721dc7-a79a-e336-7999-ef1bef3c7637");
INSERT INTO GD_GE
	VALUES ("23b2a2d7-ef7d-791e-f186-7a8253566503",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"262cf679-02e3-a7ce-b418-7f8e0211e719",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing assign::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("23b2a2d7-ef7d-791e-f186-7a8253566503",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("84a20499-66e9-176e-fb5d-cee8945b0e64",
	"23b2a2d7-ef7d-791e-f186-7a8253566503",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"84a20499-66e9-176e-fb5d-cee8945b0e64");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"84a20499-66e9-176e-fb5d-cee8945b0e64",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("84a20499-66e9-176e-fb5d-cee8945b0e64",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("80d86dde-c71b-8fa7-f204-d6e5b30e608f",
	"23b2a2d7-ef7d-791e-f186-7a8253566503",
	3,
	-246.000000,
	-3.000000);
INSERT INTO DIM_ND
	VALUES (263.000000,
	34.000000,
	"80d86dde-c71b-8fa7-f204-d6e5b30e608f");
INSERT INTO DIM_GE
	VALUES (1194.000000,
	1630.000000,
	"80d86dde-c71b-8fa7-f204-d6e5b30e608f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("80d86dde-c71b-8fa7-f204-d6e5b30e608f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cb30e96a-bba6-64d1-8651-4715c515a07b",
	"23b2a2d7-ef7d-791e-f186-7a8253566503",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"cb30e96a-bba6-64d1-8651-4715c515a07b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cb30e96a-bba6-64d1-8651-4715c515a07b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cb30e96a-bba6-64d1-8651-4715c515a07b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("20cc23cb-dc58-a20a-8c09-6238ffd96857",
	"23b2a2d7-ef7d-791e-f186-7a8253566503",
	"00000000-0000-0000-0000-000000000000",
	"676fddf4-6360-47a8-7920-56a6566cc272",
	"f963bb11-6fe0-061c-5e35-221358d28944");
INSERT INTO DIM_WAY
	VALUES ("676fddf4-6360-47a8-7920-56a6566cc272",
	1456.000000,
	1616.000000,
	"23b2a2d7-ef7d-791e-f186-7a8253566503",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("f963bb11-6fe0-061c-5e35-221358d28944",
	1456.000000,
	1680.000000,
	"23b2a2d7-ef7d-791e-f186-7a8253566503",
	"00000000-0000-0000-0000-000000000000",
	"676fddf4-6360-47a8-7920-56a6566cc272");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"23b2a2d7-ef7d-791e-f186-7a8253566503",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("23b2a2d7-ef7d-791e-f186-7a8253566503",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("bbd6a9a2-62ec-8561-8efc-8e4d600c2d85",
	"b92662d0-200a-0fd1-2bc4-826127adfcbf",
	"23b2a2d7-ef7d-791e-f186-7a8253566503");
INSERT INTO GD_GE
	VALUES ("a7e2c156-5b83-4ca9-54e1-5a1bd6c55365",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"7d77c1bc-3502-17f9-db93-6a04522cbc13",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Additional assign tests::ET16: Start and test');
INSERT INTO GD_CON
	VALUES ("a7e2c156-5b83-4ca9-54e1-5a1bd6c55365",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("18810d67-c9bf-5031-857d-5cfa629f086f",
	"a7e2c156-5b83-4ca9-54e1-5a1bd6c55365",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"18810d67-c9bf-5031-857d-5cfa629f086f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"18810d67-c9bf-5031-857d-5cfa629f086f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("18810d67-c9bf-5031-857d-5cfa629f086f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bd004cc4-ec73-04ba-560d-9b1c3db59a00",
	"a7e2c156-5b83-4ca9-54e1-5a1bd6c55365",
	3,
	22.000000,
	16.000000);
INSERT INTO DIM_ND
	VALUES (187.000000,
	35.000000,
	"bd004cc4-ec73-04ba-560d-9b1c3db59a00");
INSERT INTO DIM_GE
	VALUES (1654.000000,
	1641.000000,
	"bd004cc4-ec73-04ba-560d-9b1c3db59a00",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bd004cc4-ec73-04ba-560d-9b1c3db59a00",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("71ea512c-5a61-4c83-0a9e-2f87f9edb81e",
	"a7e2c156-5b83-4ca9-54e1-5a1bd6c55365",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"71ea512c-5a61-4c83-0a9e-2f87f9edb81e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"71ea512c-5a61-4c83-0a9e-2f87f9edb81e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("71ea512c-5a61-4c83-0a9e-2f87f9edb81e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("35ae7550-4939-3ce4-d8bc-b0850187ac01",
	"a7e2c156-5b83-4ca9-54e1-5a1bd6c55365",
	"00000000-0000-0000-0000-000000000000",
	"a746a32a-ed20-9b19-bae2-eaa5229f1112",
	"b0001ae0-8f8b-6b93-69a7-ffe283642013");
INSERT INTO GD_LS
	VALUES ("b0609da8-4634-d404-a01b-90cdb7914533",
	"a7e2c156-5b83-4ca9-54e1-5a1bd6c55365",
	"35ae7550-4939-3ce4-d8bc-b0850187ac01",
	"b0001ae0-8f8b-6b93-69a7-ffe283642013",
	"e0788c8d-f389-e0ef-5724-1feae1de4211");
INSERT INTO GD_LS
	VALUES ("65be6c4f-3b09-0700-1515-660fbb2ef3dc",
	"a7e2c156-5b83-4ca9-54e1-5a1bd6c55365",
	"b0609da8-4634-d404-a01b-90cdb7914533",
	"e0788c8d-f389-e0ef-5724-1feae1de4211",
	"e9d1d488-d3af-058a-5d49-061ad21b43e6");
INSERT INTO DIM_WAY
	VALUES ("a746a32a-ed20-9b19-bae2-eaa5229f1112",
	1600.000000,
	1728.000000,
	"a7e2c156-5b83-4ca9-54e1-5a1bd6c55365",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("b0001ae0-8f8b-6b93-69a7-ffe283642013",
	1648.000000,
	1728.000000,
	"a7e2c156-5b83-4ca9-54e1-5a1bd6c55365",
	"00000000-0000-0000-0000-000000000000",
	"a746a32a-ed20-9b19-bae2-eaa5229f1112");
INSERT INTO DIM_WAY
	VALUES ("e0788c8d-f389-e0ef-5724-1feae1de4211",
	1648.000000,
	1568.000000,
	"a7e2c156-5b83-4ca9-54e1-5a1bd6c55365",
	"00000000-0000-0000-0000-000000000000",
	"b0001ae0-8f8b-6b93-69a7-ffe283642013");
INSERT INTO DIM_WAY
	VALUES ("e9d1d488-d3af-058a-5d49-061ad21b43e6",
	1712.000000,
	1568.000000,
	"a7e2c156-5b83-4ca9-54e1-5a1bd6c55365",
	"00000000-0000-0000-0000-000000000000",
	"e0788c8d-f389-e0ef-5724-1feae1de4211");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a7e2c156-5b83-4ca9-54e1-5a1bd6c55365",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a7e2c156-5b83-4ca9-54e1-5a1bd6c55365",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("75bd3797-718e-7a0f-b345-953b72c18b10",
	"79ab22de-3dd9-8aa8-e14e-27fc622c0877",
	"a7e2c156-5b83-4ca9-54e1-5a1bd6c55365");
INSERT INTO DIM_DIA
	VALUES ("ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	'Many Instances',
	7,
	'MI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("4a3279f8-a91f-56ff-eda9-af36e35c2279",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_BATTR
	VALUES ("4a3279f8-a91f-56ff-eda9-af36e35c2279",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_ATTR
	VALUES ("4a3279f8-a91f-56ff-eda9-af36e35c2279",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"00000000-0000-0000-0000-000000000000",
	'mi_id',
	'',
	'',
	'mi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	"3fada4f9-1878-6dd7-1906-5914adad93cc",
	"bd201d9f-9c61-13d7-45a4-6d424fce92da",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R4');
INSERT INTO O_RATTR
	VALUES ("3fada4f9-1878-6dd7-1906-5914adad93cc",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("3fada4f9-1878-6dd7-1906-5914adad93cc",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"4a3279f8-a91f-56ff-eda9-af36e35c2279",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_OIDA
	VALUES ("4a3279f8-a91f-56ff-eda9-af36e35c2279",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	0,
	'mi_id');
INSERT INTO O_ID
	VALUES (1,
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_ID
	VALUES (2,
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO PE_PE
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	'No Instances',
	5,
	'NOI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("f5f57f5e-d91e-e8e2-1864-b49204340583",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed");
INSERT INTO O_BATTR
	VALUES ("f5f57f5e-d91e-e8e2-1864-b49204340583",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed");
INSERT INTO O_ATTR
	VALUES ("f5f57f5e-d91e-e8e2-1864-b49204340583",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"00000000-0000-0000-0000-000000000000",
	'noi_id',
	'',
	'',
	'noi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	"5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	"bf73a6b3-0f53-09cc-e95f-9595e1214551",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R2');
INSERT INTO O_RATTR
	VALUES ("5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"f5f57f5e-d91e-e8e2-1864-b49204340583",
	'r2et_id',
	'',
	'r2',
	'et_id',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	"b7979066-d39c-7d74-2a9c-fe70783adc4d",
	"144d12fb-7e88-d1fb-53aa-424716231706",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R5');
INSERT INTO O_RATTR
	VALUES ("b7979066-d39c-7d74-2a9c-fe70783adc4d",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("b7979066-d39c-7d74-2a9c-fe70783adc4d",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	'r5et_id',
	'',
	'r5',
	'et_id',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"89bd3ddc-220e-59d9-128d-384c8758d6ed");
INSERT INTO O_OIDA
	VALUES ("f5f57f5e-d91e-e8e2-1864-b49204340583",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	0,
	'noi_id');
INSERT INTO O_ID
	VALUES (1,
	"89bd3ddc-220e-59d9-128d-384c8758d6ed");
INSERT INTO O_ID
	VALUES (2,
	"89bd3ddc-220e-59d9-128d-384c8758d6ed");
INSERT INTO PE_PE
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	'One Instance',
	6,
	'OI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_BATTR
	VALUES ("5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_ATTR
	VALUES ("5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"00000000-0000-0000-0000-000000000000",
	'oi_id',
	'',
	'',
	'oi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	"d5561ac6-abf8-eae6-cc8c-5770b39b5332",
	"a03c3f93-7906-d9ec-c231-9da2ea71de99",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R3');
INSERT INTO O_RATTR
	VALUES ("d5561ac6-abf8-eae6-cc8c-5770b39b5332",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("d5561ac6-abf8-eae6-cc8c-5770b39b5332",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_OIDA
	VALUES ("5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	'oi_id');
INSERT INTO O_ID
	VALUES (1,
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_ID
	VALUES (2,
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO PE_PE
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	'Other Boolean Expression Test',
	16,
	'OBET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO O_BATTR
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO O_ATTR
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"00000000-0000-0000-0000-000000000000",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5cf88885-59d8-3195-ae35-135d1c796b97",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO O_BATTR
	VALUES ("5cf88885-59d8-3195-ae35-135d1c796b97",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO O_ATTR
	VALUES ("5cf88885-59d8-3195-ae35-135d1c796b97",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_REF
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	0,
	"d35abe68-761c-4805-6622-ec58904bb650",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"8718f67e-1427-6471-bb23-360a7ff64490",
	"53ecd13f-5a18-e009-f37e-4d00cc943a99",
	"ac41f78c-bf20-3716-942e-d02f0d05f339",
	"6f9cac5f-d145-2003-3c68-d84bc896ad7f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Boolean Expression Test',
	'id',
	'R10');
INSERT INTO O_RATTR
	VALUES ("ac41f78c-bf20-3716-942e-d02f0d05f339",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"d35abe68-761c-4805-6622-ec58904bb650",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	1,
	'id');
INSERT INTO O_ATTR
	VALUES ("ac41f78c-bf20-3716-942e-d02f0d05f339",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"5cf88885-59d8-3195-ae35-135d1c796b97",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"6281fd6a-984d-f963-d287-24c4b8696965",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"d6b7451d-2f26-5d8f-7ceb-911d25c59960",
	"b15c758a-e852-d3b7-368c-45b43b3e1826",
	"d904a561-2f2a-08fc-c059-479eb1e72fe1",
	"c9a07dee-437c-ad45-d4da-33b893d485c8",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Third Boolean Expression Test',
	'btrue',
	'R11');
INSERT INTO O_RATTR
	VALUES ("d904a561-2f2a-08fc-c059-479eb1e72fe1",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"6281fd6a-984d-f963-d287-24c4b8696965",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("d904a561-2f2a-08fc-c059-479eb1e72fe1",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"ac41f78c-bf20-3716-942e-d02f0d05f339",
	'r11btrue',
	'',
	'r11',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"d6b7451d-2f26-5d8f-7ceb-911d25c59960",
	"b15c758a-e852-d3b7-368c-45b43b3e1826",
	"546af508-6644-720b-b9b9-0c2296469456",
	"2ccd5696-7ac7-25f4-5be6-b71dfc46c6e3",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Third Boolean Expression Test',
	'bfalse',
	'R11');
INSERT INTO O_RATTR
	VALUES ("546af508-6644-720b-b9b9-0c2296469456",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("546af508-6644-720b-b9b9-0c2296469456",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"d904a561-2f2a-08fc-c059-479eb1e72fe1",
	'r11bfalse',
	'',
	'r11',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO O_OIDA
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("5cf88885-59d8-3195-ae35-135d1c796b97",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	0,
	'btrue');
INSERT INTO O_ID
	VALUES (1,
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO O_ID
	VALUES (2,
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO PE_PE
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	'Third Boolean Expression Test',
	17,
	'TBET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("6281fd6a-984d-f963-d287-24c4b8696965",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_BATTR
	VALUES ("6281fd6a-984d-f963-d287-24c4b8696965",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ATTR
	VALUES ("6281fd6a-984d-f963-d287-24c4b8696965",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"00000000-0000-0000-0000-000000000000",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_BATTR
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ATTR
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"6281fd6a-984d-f963-d287-24c4b8696965",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_OIDA
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("6281fd6a-984d-f963-d287-24c4b8696965",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	'btrue');
INSERT INTO O_ID
	VALUES (1,
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ID
	VALUES (2,
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO PE_PE
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	'User Boolean Test',
	18,
	'UBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("359b56d2-80e5-9014-e822-7a8143d26491",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_BATTR
	VALUES ("359b56d2-80e5-9014-e822-7a8143d26491",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_ATTR
	VALUES ("359b56d2-80e5-9014-e822-7a8143d26491",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("db15a1f3-97b7-8e2e-310f-24660457e73d",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_BATTR
	VALUES ("db15a1f3-97b7-8e2e-310f-24660457e73d",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_ATTR
	VALUES ("db15a1f3-97b7-8e2e-310f-24660457e73d",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"359b56d2-80e5-9014-e822-7a8143d26491",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("18167654-c3d7-dcb9-eb04-63978bd2964c",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_BATTR
	VALUES ("18167654-c3d7-dcb9-eb04-63978bd2964c",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_ATTR
	VALUES ("18167654-c3d7-dcb9-eb04-63978bd2964c",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"db15a1f3-97b7-8e2e-310f-24660457e73d",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_REF
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"12e4e6ff-22c0-1870-1168-57551556f0ac",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	"973dbe08-33fa-a285-2845-2c8684a3fb11",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Other Boolean Test',
	'bfalse',
	'R12');
INSERT INTO O_RATTR
	VALUES ("517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"18167654-c3d7-dcb9-eb04-63978bd2964c",
	'r9bfalse',
	'',
	'r9',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"12e4e6ff-22c0-1870-1168-57551556f0ac",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"0302a6ef-07ab-c2dc-cd44-8aa4ee370951",
	"e0c89490-70ea-71e1-db27-031f50b642d4",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Other Boolean Test',
	'btrue',
	'R12');
INSERT INTO O_RATTR
	VALUES ("0302a6ef-07ab-c2dc-cd44-8aa4ee370951",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("0302a6ef-07ab-c2dc-cd44-8aa4ee370951",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	'r9btrue',
	'',
	'r9',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_BATTR
	VALUES ("e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_ATTR
	VALUES ("e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"0302a6ef-07ab-c2dc-cd44-8aa4ee370951",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_OIDA
	VALUES ("359b56d2-80e5-9014-e822-7a8143d26491",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_ID
	VALUES (2,
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO SM_ISM
	VALUES ("c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO SM_SM
	VALUES ("c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	'',
	6);
INSERT INTO SM_MOORE
	VALUES ("c4434268-f5df-e3b5-f5d6-52b6cfc24535");
INSERT INTO SM_EVTDI
	VALUES ("dc941269-2256-0660-884e-7d5a2f582d1d",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	'tfalse',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("ed46ca60-d19a-efb1-e730-129a702d308e",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	'ttrue',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"dc941269-2256-0660-884e-7d5a2f582d1d");
INSERT INTO SM_EVTDI
	VALUES ("74eb5380-80d0-f6c3-a4b5-7ca5ddb7054a",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	'tfalse',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("2e822a91-20bb-2eff-0b72-bff89b8d78d9",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	'tfalse',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("61b30634-6c3f-48f3-adec-67ff83b6c9e0",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	'tfalse',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("c7f0d3f0-e3f2-f62c-2753-92973dcb24d6",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	'ttrue',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"74eb5380-80d0-f6c3-a4b5-7ca5ddb7054a");
INSERT INTO SM_EVTDI
	VALUES ("7ada4c8c-fe54-8082-acfd-5deb709f4dc1",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	'ttrue',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"2e822a91-20bb-2eff-0b72-bff89b8d78d9");
INSERT INTO SM_EVTDI
	VALUES ("51673811-f9dc-1523-9ec1-8acc34c29def",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	'ttrue',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"61b30634-6c3f-48f3-adec-67ff83b6c9e0");
INSERT INTO SM_LEVT
	VALUES ("38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start and test',
	0,
	'',
	'UBT1',
	'');
INSERT INTO SM_LEVT
	VALUES ("c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Continue and test',
	0,
	'',
	'UBT2',
	'');
INSERT INTO SM_LEVT
	VALUES ("aa75aff3-40b8-c218-1567-bee8e6661517",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("aa75aff3-40b8-c218-1567-bee8e6661517",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("aa75aff3-40b8-c218-1567-bee8e6661517",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Start or test',
	0,
	'',
	'UBT3',
	'');
INSERT INTO SM_LEVT
	VALUES ("81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Continue or test',
	0,
	'',
	'UBT4',
	'');
INSERT INTO SM_STATE
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'And test 1a',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("2f0f85e9-2700-5245-0dc6-e43cb8c107df",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"fe2c1d5c-e9aa-19d9-5397-ebe748f5c546");
INSERT INTO SM_AH
	VALUES ("2f0f85e9-2700-5245-0dc6-e43cb8c107df",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535");
INSERT INTO SM_ACT
	VALUES ("2f0f85e9-2700-5245-0dc6-e43cb8c107df",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	1,
	'LOG::LogInfo(message:"Starting and (user-defined type) test") ;

//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    rcvd_evt
assign t5 = temp1 and rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 and rcvd_evt.ttrue ;
if ( t6 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t7 = temp2 and rcvd_evt.tfalse ;
if ( t7 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t8 = temp2 and rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 and self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 and self.btrue ;
if ( t14 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t15 = temp2 and self.bfalse ;
if ( t15 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t16 = temp2 and self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" and local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 and self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 and self.r9btrue ;
if ( t18 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t19 = temp2 and self.r9bfalse ;
if ( t19 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = temp2 and self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of UOBT;
assign t21 = temp1 and saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 and saf.btrue ;
if ( t22 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t23 = temp2 and saf.bfalse ;
if ( t23 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t24 = temp2 and saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of UOBT;
for each smf in smfs
assign t25 = temp1 and smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 and smf.btrue ;
if ( t26 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t27 = temp2 and smf.bfalse ;
if ( t27 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t28 = temp2 and smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->UOBT[R12];
assign t29 = temp1 and sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 and sor.btrue ;
if ( t30 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t31 = temp2 and sor.bfalse ;
if ( t31 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t32 = temp2 and sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->UOBT[R13];
assign t33 = temp1 and sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 and sar.btrue ;
if ( t34 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t35 = temp2 and sar.bfalse ;
if ( t35 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t36 = temp2 and sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->UOBT[R13];
for each smr in smrs
assign t37 = temp1 and smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 and smr.btrue ;
if ( t38 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t39 = temp2 and smr.bfalse ;
if ( t39 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t40 = temp2 and smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 and saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 and saf.r11btrue ;
if ( t42 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t43 = temp2 and saf.r11bfalse ;
if ( t43 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t44 = temp2 and saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 and smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 and smf.r11btrue ;
if ( t46 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t47 = temp2 and smf.r11bfalse ;
if ( t47 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t48 = temp2 and smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 and sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 and sor.r11btrue ;
if ( t50 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t51 = temp2 and sor.r11bfalse ;
if ( t51 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t52 = temp2 and sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 and sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 and sar.r11btrue ;
if ( t54 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t55 = temp2 and sar.r11bfalse ;
if ( t55 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t56 = temp2 and sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 and smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 and smr.r11btrue ;
if ( t58 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t59 = temp2 and smr.r11bfalse ;
if ( t59 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t60 = temp2 and smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse and temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue and temp1 ;
if ( t62 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t63 = rcvd_evt.tfalse and temp2 ;
if ( t63 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t64 = rcvd_evt.ttrue and temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse and rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue and rcvd_evt.tfalse ;
if ( t66 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t67 = rcvd_evt.tfalse and rcvd_evt.ttrue ;
if ( t67 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t68 = rcvd_evt.ttrue and rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse and false ;
if ( t69 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue and false ;
if ( t70 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t71 = rcvd_evt.tfalse and true ;
if ( t71 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t72 = rcvd_evt.ttrue and true ;
if ( t72 == true )
  LOG::LogSuccess(message:" and rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse and self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue and self.bfalse ;
if ( t74 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t75 = rcvd_evt.tfalse and self.btrue ;
if ( t75 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t76 = rcvd_evt.ttrue and self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse and self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue and self.r9bfalse ;
if ( t78 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t79 = rcvd_evt.tfalse and self.r9btrue ;
if ( t79 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t80 = rcvd_evt.ttrue and self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse and saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse and saf.btrue ;
if ( t82 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t83 = rcvd_evt.ttrue and saf.bfalse ;
if ( t83 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t84 = rcvd_evt.ttrue and saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse and smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse and smf.btrue ;
if ( t86 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t87 = rcvd_evt.ttrue and smf.bfalse ;
if ( t87 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t88 = rcvd_evt.ttrue and smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse and sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse and sor.btrue ;
if ( t90 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t91 = rcvd_evt.ttrue and sor.bfalse ;
if ( t91 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t92 = rcvd_evt.ttrue and sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse and sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse and sar.btrue ;
if ( t94 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t95 = rcvd_evt.ttrue and sar.bfalse ;
if ( t95 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t96 = rcvd_evt.ttrue and sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse and smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse and smr.btrue ;
if ( t98 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t99 = rcvd_evt.ttrue and smr.bfalse ;
if ( t99 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t100 = rcvd_evt.ttrue and smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse and saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse and saf.r11btrue ;
if ( t102 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t103 = rcvd_evt.ttrue and saf.r11bfalse ;
if ( t103 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t104 = rcvd_evt.ttrue and saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse and smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse and smf.r11btrue ;
if ( t106 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t107 = rcvd_evt.ttrue and smf.r11bfalse ;
if ( t107 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t108 = rcvd_evt.ttrue and smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse and sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse and sor.r11btrue ;
if ( t110 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t111 = rcvd_evt.ttrue and sor.r11bfalse ;
if ( t111 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t112 = rcvd_evt.ttrue and sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse and sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse and sar.r11btrue ;
if ( t114 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t115 = rcvd_evt.ttrue and sar.r11bfalse ;
if ( t115 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t116 = rcvd_evt.ttrue and sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse and smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse and smr.r11btrue ;
if ( t118 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t119 = rcvd_evt.ttrue and smr.r11bfalse ;
if ( t119 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t120 = rcvd_evt.ttrue and smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'And test 1b',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("a94ca778-b6a6-c284-0609-e388eb673d25",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"369250b7-b070-e2c7-a88f-fd29caeee7b7");
INSERT INTO SM_AH
	VALUES ("a94ca778-b6a6-c284-0609-e388eb673d25",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535");
INSERT INTO SM_ACT
	VALUES ("a94ca778-b6a6-c284-0609-e388eb673d25",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	1,
	'assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true and temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse and temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue and temp1 ;
if ( t182 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t183 = self.bfalse and temp2 ;
if ( t183 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t184 = self.btrue and temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" and self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse and rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue and rcvd_evt.tfalse ;
if ( t186 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t187 = self.bfalse and rcvd_evt.ttrue ;
if ( t187 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t188 = self.btrue and rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse and false ;
if ( t189 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue and false ;
if ( t190 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t191 = self.bfalse and true ;
if ( t191 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t192 = self.btrue and true ;
if ( t192 == true )
  LOG::LogSuccess(message:" and self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse and self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue and self.bfalse ;
if ( t194 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t195 = self.bfalse and self.btrue ;
if ( t195 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t196 = self.btrue and self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse and self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue and self.r9bfalse ;
if ( t198 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t199 = self.bfalse and self.r9btrue ;
if ( t199 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t200 = self.btrue and self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse and saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse and saf.btrue ;
if ( t202 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t203 = self.btrue and saf.bfalse ;
if ( t203 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t204 = self.btrue and saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse and smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse and smf.btrue ;
if ( t206 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t207 = self.btrue and smf.bfalse ;
if ( t207 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t208 = self.btrue and smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse and sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse and sor.btrue ;
if ( t210 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t211 = self.btrue and sor.bfalse ;
if ( t211 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t212 = self.btrue and sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse and sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse and sar.btrue ;
if ( t214 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t215 = self.btrue and sar.bfalse ;
if ( t215 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t216 = self.btrue and sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse and smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse and smr.btrue ;
if ( t218 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t219 = self.btrue and smr.bfalse ;
if ( t219 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t220 = self.btrue and smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse and saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse and saf.r11btrue ;
if ( t222 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t223 = self.btrue and saf.r11bfalse ;
if ( t223 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t224 = self.btrue and saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse and smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse and smf.r11btrue ;
if ( t226 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t227 = self.btrue and smf.r11bfalse ;
if ( t227 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t228 = self.btrue and smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse and sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse and sor.r11btrue ;
if ( t230 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t231 = self.btrue and sor.r11bfalse ;
if ( t231 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t232 = self.btrue and sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse and sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse and sar.r11btrue ;
if ( t234 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t235 = self.btrue and sar.r11bfalse ;
if ( t235 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t236 = self.btrue and sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse and smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse and smr.r11btrue ;
if ( t238 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t239 = self.btrue and smr.r11bfalse ;
if ( t239 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t240 = self.btrue and smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse and temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue and temp1 ;
if ( t242 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t243 = self.r9bfalse and temp2 ;
if ( t243 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t244 = self.r9btrue and temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse and rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue and rcvd_evt.tfalse ;
if ( t246 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t247 = self.r9bfalse and rcvd_evt.ttrue ;
if ( t247 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t248 = self.r9btrue and rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse and false ;
if ( t249 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue and false ;
if ( t250 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t251 = self.r9bfalse and true ;
if ( t251 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t252 = self.r9btrue and true ;
if ( t252 == true )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse and self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue and self.bfalse ;
if ( t254 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t255 = self.r9bfalse and self.btrue ;
if ( t255 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t256 = self.r9btrue and self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse and self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue and self.r9bfalse ;
if ( t258 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t259 = self.r9bfalse and self.r9btrue ;
if ( t259 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t260 = self.r9btrue and self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse and saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse and saf.btrue ;
if ( t262 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t263 = self.r9btrue and saf.bfalse ;
if ( t263 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t264 = self.r9btrue and saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse and smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse and smf.btrue ;
if ( t266 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t267 = self.r9btrue and smf.bfalse ;
if ( t267 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t268 = self.r9btrue and smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse and sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse and sor.btrue ;
if ( t270 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t271 = self.r9btrue and sor.bfalse ;
if ( t271 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t272 = self.r9btrue and sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse and sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse and sar.btrue ;
if ( t274 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t275 = self.r9btrue and sar.bfalse ;
if ( t275 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t276 = self.r9btrue and sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse and smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse and smr.btrue ;
if ( t278 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t279 = self.r9btrue and smr.bfalse ;
if ( t279 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t280 = self.r9btrue and smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse and saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse and saf.r11btrue ;
if ( t282 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t283 = self.r9btrue and saf.r11bfalse ;
if ( t283 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t284 = self.r9btrue and saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse and smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse and smf.r11btrue ;
if ( t286 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t287 = self.r9btrue and smf.r11bfalse ;
if ( t287 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t288 = self.r9btrue and smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse and sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse and sor.r11btrue ;
if ( t290 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t291 = self.r9btrue and sor.r11bfalse ;
if ( t291 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t292 = self.r9btrue and sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse and sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse and sar.r11btrue ;
if ( t294 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t295 = self.r9btrue and sar.r11bfalse ;
if ( t295 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t296 = self.r9btrue and sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse and smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse and smr.r11btrue ;
if ( t298 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t299 = self.r9btrue and smr.r11bfalse ;
if ( t299 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t300 = self.r9btrue and smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'And test 2',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("3f3193ac-6c0f-4e97-0c37-ffa659ffcf27",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"111fd4f6-f9af-ca6c-0f36-c9cac085d0a4");
INSERT INTO SM_AH
	VALUES ("3f3193ac-6c0f-4e97-0c37-ffa659ffcf27",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535");
INSERT INTO SM_ACT
	VALUES ("3f3193ac-6c0f-4e97-0c37-ffa659ffcf27",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	1,
	'//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse and temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue and temp1 ;
if ( t302 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t303 = saf.bfalse and temp2 ;
if ( t303 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t304 = saf.btrue and temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse and rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue and rcvd_evt.tfalse ;
if ( t306 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t307 = saf.bfalse and rcvd_evt.ttrue ;
if ( t307 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t308 = saf.btrue and rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse and false ;
if ( t309 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue and false ;
if ( t310 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t311 = saf.bfalse and true ;
if ( t311 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t312 = saf.btrue and true ;
if ( t312 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse and self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue and self.bfalse ;
if ( t314 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t315 = saf.bfalse and self.btrue ;
if ( t315 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t316 = saf.btrue and self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse and self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue and self.r9bfalse ;
if ( t318 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t319 = saf.bfalse and self.r9btrue ;
if ( t319 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t320 = saf.btrue and self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse and saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse and saf.btrue ;
if ( t322 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t323 = saf.btrue and saf.bfalse ;
if ( t323 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t324 = saf.btrue and saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse and smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse and smf.btrue ;
if ( t326 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t327 = saf.btrue and smf.bfalse ;
if ( t327 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t328 = saf.btrue and smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse and sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse and sor.btrue ;
if ( t330 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t331 = saf.btrue and sor.bfalse ;
if ( t331 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t332 = saf.btrue and sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse and sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse and sar.btrue ;
if ( t334 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t335 = saf.btrue and sar.bfalse ;
if ( t335 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t336 = saf.btrue and sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse and smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse and smr.btrue ;
if ( t338 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t339 = saf.btrue and smr.bfalse ;
if ( t339 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t340 = saf.btrue and smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse and saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse and saf.r11btrue ;
if ( t342 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t343 = saf.btrue and saf.r11bfalse ;
if ( t343 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t344 = saf.btrue and saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse and smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse and smf.r11btrue ;
if ( t346 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t347 = saf.btrue and smf.r11bfalse ;
if ( t347 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t348 = saf.btrue and smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse and sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse and sor.r11btrue ;
if ( t350 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t351 = saf.btrue and sor.r11bfalse ;
if ( t351 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t352 = saf.btrue and sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse and sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse and sar.r11btrue ;
if ( t354 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t355 = saf.btrue and sar.r11bfalse ;
if ( t355 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t356 = saf.btrue and sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse and smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse and smr.r11btrue ;
if ( t358 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t359 = saf.btrue and smr.r11bfalse ;
if ( t359 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t360 = saf.btrue and smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse and temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue and temp1 ;
if ( t602 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t603 = saf.r11bfalse and temp2 ;
if ( t603 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t604 = saf.r11btrue and temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse and rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue and rcvd_evt.tfalse ;
if ( t606 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t607 = saf.r11bfalse and rcvd_evt.ttrue ;
if ( t607 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t608 = saf.r11btrue and rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse and false ;
if ( t609 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue and false ;
if ( t610 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t611 = saf.r11bfalse and true ;
if ( t611 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t612 = saf.r11btrue and true ;
if ( t612 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse and self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue and self.bfalse ;
if ( t614 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t615 = saf.r11bfalse and self.btrue ;
if ( t615 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t616 = saf.r11btrue and self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse and self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue and self.r9bfalse ;
if ( t618 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t619 = saf.r11bfalse and self.r9btrue ;
if ( t619 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t620 = saf.r11btrue and self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse and saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse and saf.btrue ;
if ( t622 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t623 = saf.r11btrue and saf.bfalse ;
if ( t623 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t624 = saf.r11btrue and saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse and smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse and smf.btrue ;
if ( t626 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t627 = saf.r11btrue and smf.bfalse ;
if ( t627 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t628 = saf.r11btrue and smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse and sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse and sor.btrue ;
if ( t630 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t631 = saf.r11btrue and sor.bfalse ;
if ( t631 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t632 = saf.r11btrue and sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse and sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse and sar.btrue ;
if ( t634 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t635 = saf.r11btrue and sar.bfalse ;
if ( t635 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t636 = saf.r11btrue and sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse and smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse and smr.btrue ;
if ( t638 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t639 = saf.r11btrue and smr.bfalse ;
if ( t639 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t640 = saf.r11btrue and smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse and saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse and saf.r11btrue ;
if ( t642 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t643 = saf.r11btrue and saf.r11bfalse ;
if ( t643 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t644 = saf.r11btrue and saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse and smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse and smf.r11btrue ;
if ( t646 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t647 = saf.r11btrue and smf.r11bfalse ;
if ( t647 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t648 = saf.r11btrue and smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse and sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse and sor.r11btrue ;
if ( t650 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t651 = saf.r11btrue and sor.r11bfalse ;
if ( t651 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t652 = saf.r11btrue and sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse and sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse and sar.r11btrue ;
if ( t654 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t655 = saf.r11btrue and sar.r11bfalse ;
if ( t655 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t656 = saf.r11btrue and sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse and smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse and smr.r11btrue ;
if ( t658 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t659 = saf.r11btrue and smr.r11bfalse ;
if ( t659 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t660 = saf.r11btrue and smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed and (user-defined type) test") ;

//generate event to commence next test
generate UBT3:''Start or test''(tfalse:false, ttrue:true) to self;
 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1a',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("fc6ed29c-5ba8-0dde-8730-78f7f73a14bf",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e");
INSERT INTO SM_AH
	VALUES ("fc6ed29c-5ba8-0dde-8730-78f7f73a14bf",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535");
INSERT INTO SM_ACT
	VALUES ("fc6ed29c-5ba8-0dde-8730-78f7f73a14bf",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	1,
	'LOG::LogInfo(message:"Starting or (user-defined type) test") ;

//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    rcvd_evt
assign t5 = temp1 or rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 or rcvd_evt.ttrue ;
if ( t6 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t7 = temp2 or rcvd_evt.tfalse ;
if ( t7 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t8 = temp2 or rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 or false ;
if ( t9 == false )
  LOG::LogSuccess(message:" or local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 or true ;
if ( t10 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t11 = temp2 or false ;
if ( t11 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t12 = temp2 or true ;
if ( t12 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 or self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" or local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 or self.btrue ;
if ( t14 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t15 = temp2 or self.bfalse ;
if ( t15 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t16 = temp2 or self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 or self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 or self.r9btrue ;
if ( t18 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t19 = temp2 or self.r9bfalse ;
if ( t19 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t20 = temp2 or self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of UOBT;
assign t21 = temp1 or saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 or saf.btrue ;
if ( t22 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t23 = temp2 or saf.bfalse ;
if ( t23 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t24 = temp2 or saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of UOBT;
for each smf in smfs
assign t25 = temp1 or smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 or smf.btrue ;
if ( t26 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t27 = temp2 or smf.bfalse ;
if ( t27 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t28 = temp2 or smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->UOBT[R12];
assign t29 = temp1 or sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 or sor.btrue ;
if ( t30 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t31 = temp2 or sor.bfalse ;
if ( t31 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t32 = temp2 or sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->UOBT[R13];
assign t33 = temp1 or sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 or sar.btrue ;
if ( t34 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t35 = temp2 or sar.bfalse ;
if ( t35 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t36 = temp2 or sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->UOBT[R13];
for each smr in smrs
assign t37 = temp1 or smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 or smr.btrue ;
if ( t38 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t39 = temp2 or smr.bfalse ;
if ( t39 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t40 = temp2 or smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 or saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 or saf.r11btrue ;
if ( t42 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t43 = temp2 or saf.r11bfalse ;
if ( t43 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t44 = temp2 or saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 or smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 or smf.r11btrue ;
if ( t46 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t47 = temp2 or smf.r11bfalse ;
if ( t47 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t48 = temp2 or smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 or sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 or sor.r11btrue ;
if ( t50 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t51 = temp2 or sor.r11bfalse ;
if ( t51 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t52 = temp2 or sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 or sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 or sar.r11btrue ;
if ( t54 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t55 = temp2 or sar.r11bfalse ;
if ( t55 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t56 = temp2 or sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 or smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 or smr.r11btrue ;
if ( t58 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t59 = temp2 or smr.r11bfalse ;
if ( t59 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t60 = temp2 or smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse or temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue or temp1 ;
if ( t62 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t63 = rcvd_evt.tfalse or temp2 ;
if ( t63 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t64 = rcvd_evt.ttrue or temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse or rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue or rcvd_evt.tfalse ;
if ( t66 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t67 = rcvd_evt.tfalse or rcvd_evt.ttrue ;
if ( t67 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t68 = rcvd_evt.ttrue or rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse or false ;
if ( t69 == false )
  LOG::LogSuccess(message:" or rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue or false ;
if ( t70 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t71 = rcvd_evt.tfalse or true ;
if ( t71 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t72 = rcvd_evt.ttrue or true ;
if ( t72 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse or self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue or self.bfalse ;
if ( t74 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t75 = rcvd_evt.tfalse or self.btrue ;
if ( t75 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t76 = rcvd_evt.ttrue or self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse or self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue or self.r9bfalse ;
if ( t78 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t79 = rcvd_evt.tfalse or self.r9btrue ;
if ( t79 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t80 = rcvd_evt.ttrue or self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse or saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse or saf.btrue ;
if ( t82 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t83 = rcvd_evt.ttrue or saf.bfalse ;
if ( t83 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t84 = rcvd_evt.ttrue or saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse or smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse or smf.btrue ;
if ( t86 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t87 = rcvd_evt.ttrue or smf.bfalse ;
if ( t87 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t88 = rcvd_evt.ttrue or smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse or sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse or sor.btrue ;
if ( t90 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t91 = rcvd_evt.ttrue or sor.bfalse ;
if ( t91 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t92 = rcvd_evt.ttrue or sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse or sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse or sar.btrue ;
if ( t94 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t95 = rcvd_evt.ttrue or sar.bfalse ;
if ( t95 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t96 = rcvd_evt.ttrue or sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse or smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse or smr.btrue ;
if ( t98 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t99 = rcvd_evt.ttrue or smr.bfalse ;
if ( t99 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t100 = rcvd_evt.ttrue or smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse or saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse or saf.r11btrue ;
if ( t102 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t103 = rcvd_evt.ttrue or saf.r11bfalse ;
if ( t103 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t104 = rcvd_evt.ttrue or saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse or smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse or smf.r11btrue ;
if ( t106 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t107 = rcvd_evt.ttrue or smf.r11bfalse ;
if ( t107 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t108 = rcvd_evt.ttrue or smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse or sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse or sor.r11btrue ;
if ( t110 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t111 = rcvd_evt.ttrue or sor.r11bfalse ;
if ( t111 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t112 = rcvd_evt.ttrue or sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse or sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse or sar.r11btrue ;
if ( t114 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t115 = rcvd_evt.ttrue or sar.r11bfalse ;
if ( t115 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t116 = rcvd_evt.ttrue or sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse or smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse or smr.r11btrue ;
if ( t118 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t119 = rcvd_evt.ttrue or smr.r11bfalse ;
if ( t119 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t120 = rcvd_evt.ttrue or smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT4:''Continue or test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1b',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("88afca6b-8a78-fe8f-4514-9f3c1a15b772",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"7bdc584a-4f77-8dab-8456-4def4dd6e6d9");
INSERT INTO SM_AH
	VALUES ("88afca6b-8a78-fe8f-4514-9f3c1a15b772",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535");
INSERT INTO SM_ACT
	VALUES ("88afca6b-8a78-fe8f-4514-9f3c1a15b772",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	1,
	'
assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true or temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse or temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" or self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue or temp1 ;
if ( t182 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t183 = self.bfalse or temp2 ;
if ( t183 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t184 = self.btrue or temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse or rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue or rcvd_evt.tfalse ;
if ( t186 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t187 = self.bfalse or rcvd_evt.ttrue ;
if ( t187 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t188 = self.btrue or rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse or false ;
if ( t189 == false )
  LOG::LogSuccess(message:" or self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue or false ;
if ( t190 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t191 = self.bfalse or true ;
if ( t191 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t192 = self.btrue or true ;
if ( t192 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse or self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue or self.bfalse ;
if ( t194 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t195 = self.bfalse or self.btrue ;
if ( t195 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t196 = self.btrue or self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse or self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue or self.r9bfalse ;
if ( t198 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t199 = self.bfalse or self.r9btrue ;
if ( t199 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t200 = self.btrue or self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse or saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse or saf.btrue ;
if ( t202 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t203 = self.btrue or saf.bfalse ;
if ( t203 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t204 = self.btrue or saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse or smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse or smf.btrue ;
if ( t206 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t207 = self.btrue or smf.bfalse ;
if ( t207 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t208 = self.btrue or smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse or sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse or sor.btrue ;
if ( t210 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t211 = self.btrue or sor.bfalse ;
if ( t211 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t212 = self.btrue or sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse or sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse or sar.btrue ;
if ( t214 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t215 = self.btrue or sar.bfalse ;
if ( t215 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t216 = self.btrue or sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse or smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse or smr.btrue ;
if ( t218 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t219 = self.btrue or smr.bfalse ;
if ( t219 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t220 = self.btrue or smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse or saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse or saf.r11btrue ;
if ( t222 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t223 = self.btrue or saf.r11bfalse ;
if ( t223 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t224 = self.btrue or saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse or smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse or smf.r11btrue ;
if ( t226 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t227 = self.btrue or smf.r11bfalse ;
if ( t227 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t228 = self.btrue or smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse or sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse or sor.r11btrue ;
if ( t230 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t231 = self.btrue or sor.r11bfalse ;
if ( t231 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t232 = self.btrue or sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse or sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse or sar.r11btrue ;
if ( t234 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t235 = self.btrue or sar.r11bfalse ;
if ( t235 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t236 = self.btrue or sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse or smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse or smr.r11btrue ;
if ( t238 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t239 = self.btrue or smr.r11bfalse ;
if ( t239 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t240 = self.btrue or smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse or temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue or temp1 ;
if ( t242 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t243 = self.r9bfalse or temp2 ;
if ( t243 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t244 = self.r9btrue or temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse or rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue or rcvd_evt.tfalse ;
if ( t246 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t247 = self.r9bfalse or rcvd_evt.ttrue ;
if ( t247 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t248 = self.r9btrue or rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse or false ;
if ( t249 == false )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue or false ;
if ( t250 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t251 = self.r9bfalse or true ;
if ( t251 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t252 = self.r9btrue or true ;
if ( t252 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse or self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue or self.bfalse ;
if ( t254 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t255 = self.r9bfalse or self.btrue ;
if ( t255 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t256 = self.r9btrue or self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse or self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue or self.r9bfalse ;
if ( t258 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t259 = self.r9bfalse or self.r9btrue ;
if ( t259 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t260 = self.r9btrue or self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse or saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse or saf.btrue ;
if ( t262 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t263 = self.r9btrue or saf.bfalse ;
if ( t263 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t264 = self.r9btrue or saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse or smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse or smf.btrue ;
if ( t266 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t267 = self.r9btrue or smf.bfalse ;
if ( t267 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t268 = self.r9btrue or smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse or sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse or sor.btrue ;
if ( t270 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t271 = self.r9btrue or sor.bfalse ;
if ( t271 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t272 = self.r9btrue or sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse or sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse or sar.btrue ;
if ( t274 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t275 = self.r9btrue or sar.bfalse ;
if ( t275 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t276 = self.r9btrue or sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse or smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse or smr.btrue ;
if ( t278 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t279 = self.r9btrue or smr.bfalse ;
if ( t279 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t280 = self.r9btrue or smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse or saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse or saf.r11btrue ;
if ( t282 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t283 = self.r9btrue or saf.r11bfalse ;
if ( t283 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t284 = self.r9btrue or saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse or smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse or smf.r11btrue ;
if ( t286 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t287 = self.r9btrue or smf.r11bfalse ;
if ( t287 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t288 = self.r9btrue or smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse or sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse or sor.r11btrue ;
if ( t290 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t291 = self.r9btrue or sor.r11bfalse ;
if ( t291 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t292 = self.r9btrue or sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse or sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse or sar.r11btrue ;
if ( t294 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t295 = self.r9btrue or sar.r11bfalse ;
if ( t295 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t296 = self.r9btrue or sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse or smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse or smr.r11btrue ;
if ( t298 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t299 = self.r9btrue or smr.r11bfalse ;
if ( t299 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t300 = self.r9btrue or smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT4:''Continue or test''( ttrue: true, tfalse: false ) to self;


',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'Or test 2',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("bbe32523-9872-e4eb-93d5-89b4c2d02554",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"b99fcff7-7910-98b4-13b4-48497fa24a4a");
INSERT INTO SM_AH
	VALUES ("bbe32523-9872-e4eb-93d5-89b4c2d02554",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535");
INSERT INTO SM_ACT
	VALUES ("bbe32523-9872-e4eb-93d5-89b4c2d02554",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	1,
	'//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse or temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue or temp1 ;
if ( t302 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t303 = saf.bfalse or temp2 ;
if ( t303 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t304 = saf.btrue or temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse or rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue or rcvd_evt.tfalse ;
if ( t306 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t307 = saf.bfalse or rcvd_evt.ttrue ;
if ( t307 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t308 = saf.btrue or rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse or false ;
if ( t309 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue or false ;
if ( t310 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t311 = saf.bfalse or true ;
if ( t311 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t312 = saf.btrue or true ;
if ( t312 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse or self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue or self.bfalse ;
if ( t314 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t315 = saf.bfalse or self.btrue ;
if ( t315 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t316 = saf.btrue or self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse or self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue or self.r9bfalse ;
if ( t318 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t319 = saf.bfalse or self.r9btrue ;
if ( t319 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t320 = saf.btrue or self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse or saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse or saf.btrue ;
if ( t322 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t323 = saf.btrue or saf.bfalse ;
if ( t323 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t324 = saf.btrue or saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse or smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse or smf.btrue ;
if ( t326 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t327 = saf.btrue or smf.bfalse ;
if ( t327 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t328 = saf.btrue or smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse or sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse or sor.btrue ;
if ( t330 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t331 = saf.btrue or sor.bfalse ;
if ( t331 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t332 = saf.btrue or sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse or sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse or sar.btrue ;
if ( t334 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t335 = saf.btrue or sar.bfalse ;
if ( t335 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t336 = saf.btrue or sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse or smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse or smr.btrue ;
if ( t338 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t339 = saf.btrue or smr.bfalse ;
if ( t339 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t340 = saf.btrue or smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse or saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse or saf.r11btrue ;
if ( t342 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t343 = saf.btrue or saf.r11bfalse ;
if ( t343 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t344 = saf.btrue or saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse or smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse or smf.r11btrue ;
if ( t346 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t347 = saf.btrue or smf.r11bfalse ;
if ( t347 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t348 = saf.btrue or smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse or sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse or sor.r11btrue ;
if ( t350 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t351 = saf.btrue or sor.r11bfalse ;
if ( t351 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t352 = saf.btrue or sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse or sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse or sar.r11btrue ;
if ( t354 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t355 = saf.btrue or sar.r11bfalse ;
if ( t355 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t356 = saf.btrue or sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse or smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse or smr.r11btrue ;
if ( t358 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t359 = saf.btrue or smr.r11bfalse ;
if ( t359 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t360 = saf.btrue or smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse or temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue or temp1 ;
if ( t602 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t603 = saf.r11bfalse or temp2 ;
if ( t603 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t604 = saf.r11btrue or temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse or rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue or rcvd_evt.tfalse ;
if ( t606 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t607 = saf.r11bfalse or rcvd_evt.ttrue ;
if ( t607 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t608 = saf.r11btrue or rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse or false ;
if ( t609 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue or false ;
if ( t610 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t611 = saf.r11bfalse or true ;
if ( t611 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t612 = saf.r11btrue or true ;
if ( t612 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse or self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue or self.bfalse ;
if ( t614 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t615 = saf.r11bfalse or self.btrue ;
if ( t615 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t616 = saf.r11btrue or self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse or self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue or self.r9bfalse ;
if ( t618 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t619 = saf.r11bfalse or self.r9btrue ;
if ( t619 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t620 = saf.r11btrue or self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse or saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse or saf.btrue ;
if ( t622 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t623 = saf.r11btrue or saf.bfalse ;
if ( t623 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t624 = saf.r11btrue or saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse or smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse or smf.btrue ;
if ( t626 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t627 = saf.r11btrue or smf.bfalse ;
if ( t627 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t628 = saf.r11btrue or smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse or sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse or sor.btrue ;
if ( t630 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t631 = saf.r11btrue or sor.bfalse ;
if ( t631 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t632 = saf.r11btrue or sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse or sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse or sar.btrue ;
if ( t634 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t635 = saf.r11btrue or sar.bfalse ;
if ( t635 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t636 = saf.r11btrue or sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse or smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse or smr.btrue ;
if ( t638 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t639 = saf.r11btrue or smr.bfalse ;
if ( t639 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t640 = saf.r11btrue or smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse or saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse or saf.r11btrue ;
if ( t642 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t643 = saf.r11btrue or saf.r11bfalse ;
if ( t643 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t644 = saf.r11btrue or saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse or smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse or smf.r11btrue ;
if ( t646 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t647 = saf.r11btrue or smf.r11bfalse ;
if ( t647 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t648 = saf.r11btrue or smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse or sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse or sor.r11btrue ;
if ( t650 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t651 = saf.r11btrue or sor.r11bfalse ;
if ( t651 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t652 = saf.r11btrue or sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse or sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse or sar.r11btrue ;
if ( t654 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t655 = saf.r11btrue or sar.r11bfalse ;
if ( t655 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t656 = saf.r11btrue or sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse or smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse or smr.r11btrue ;
if ( t658 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t659 = saf.r11btrue or smr.r11bfalse ;
if ( t659 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t660 = saf.r11btrue or smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed or (user-defined type) test") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
 
 

',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("8d3d1fba-de33-a5f4-13c7-ca1fbe6e5091",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("c7f5303c-3c3e-2b8c-d390-28c85f70b013",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"8d3d1fba-de33-a5f4-13c7-ca1fbe6e5091");
INSERT INTO SM_AH
	VALUES ("c7f5303c-3c3e-2b8c-d390-28c85f70b013",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535");
INSERT INTO SM_ACT
	VALUES ("c7f5303c-3c3e-2b8c-d390-28c85f70b013",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("8d3d1fba-de33-a5f4-13c7-ca1fbe6e5091",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("0d33209d-819b-d9d4-c071-879715aa4ad5",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("79c2ce6b-ba68-b91f-a28e-089df8daa0e7",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"0d33209d-819b-d9d4-c071-879715aa4ad5");
INSERT INTO SM_AH
	VALUES ("79c2ce6b-ba68-b91f-a28e-089df8daa0e7",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535");
INSERT INTO SM_ACT
	VALUES ("79c2ce6b-ba68-b91f-a28e-089df8daa0e7",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("0d33209d-819b-d9d4-c071-879715aa4ad5",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("074f9794-c854-36f8-7fbe-953d45cd09da",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("3c8cf23b-0510-eb6e-a642-ac3e73928b75",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"074f9794-c854-36f8-7fbe-953d45cd09da");
INSERT INTO SM_AH
	VALUES ("3c8cf23b-0510-eb6e-a642-ac3e73928b75",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535");
INSERT INTO SM_ACT
	VALUES ("3c8cf23b-0510-eb6e-a642-ac3e73928b75",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("074f9794-c854-36f8-7fbe-953d45cd09da",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("ddc29b70-eecb-11e9-eb31-a98dd7dfef2d",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("666fff98-7a9f-75fb-7705-0dffaafcae4b",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"ddc29b70-eecb-11e9-eb31-a98dd7dfef2d");
INSERT INTO SM_AH
	VALUES ("666fff98-7a9f-75fb-7705-0dffaafcae4b",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535");
INSERT INTO SM_ACT
	VALUES ("666fff98-7a9f-75fb-7705-0dffaafcae4b",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("ddc29b70-eecb-11e9-eb31-a98dd7dfef2d",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("a29fdda1-5cd2-d79e-2a19-8384dff593e4",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("c5b34c36-a9b2-9a32-45ae-03a1cee07e82",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"a29fdda1-5cd2-d79e-2a19-8384dff593e4");
INSERT INTO SM_AH
	VALUES ("c5b34c36-a9b2-9a32-45ae-03a1cee07e82",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535");
INSERT INTO SM_ACT
	VALUES ("c5b34c36-a9b2-9a32-45ae-03a1cee07e82",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("a29fdda1-5cd2-d79e-2a19-8384dff593e4",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("9a4d225a-f77a-10c1-490a-4b9ecd091fb6",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("6216018b-e5df-ec9d-2d04-2abbcc1ddb9e",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"9a4d225a-f77a-10c1-490a-4b9ecd091fb6");
INSERT INTO SM_AH
	VALUES ("6216018b-e5df-ec9d-2d04-2abbcc1ddb9e",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535");
INSERT INTO SM_ACT
	VALUES ("6216018b-e5df-ec9d-2d04-2abbcc1ddb9e",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("9a4d225a-f77a-10c1-490a-4b9ecd091fb6",
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	"b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("8eab82da-0d06-df01-df8f-3ed3ddc91835",
	8,
	"c4434268-f5df-e3b5-f5d6-52b6cfc24535",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("10ad20d2-3a5e-f7d6-aebc-327ab13345a1",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a');
INSERT INTO GD_SHP
	VALUES ("10ad20d2-3a5e-f7d6-aebc-327ab13345a1");
INSERT INTO GD_NCS
	VALUES ("10ad20d2-3a5e-f7d6-aebc-327ab13345a1");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"10ad20d2-3a5e-f7d6-aebc-327ab13345a1");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1264.000000,
	"10ad20d2-3a5e-f7d6-aebc-327ab13345a1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("10ad20d2-3a5e-f7d6-aebc-327ab13345a1",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("d7cfbb61-ffa9-c7ff-6db1-4e25103e25e5",
	1872.000000,
	1296.000000,
	"10ad20d2-3a5e-f7d6-aebc-327ab13345a1");
INSERT INTO DIM_CON
	VALUES ("c1eaba25-eee6-2b65-f162-624f5353be39",
	1824.000000,
	1264.000000,
	"10ad20d2-3a5e-f7d6-aebc-327ab13345a1");
INSERT INTO DIM_CON
	VALUES ("e87a2046-7ead-972a-0ff9-2d195d540968",
	1792.000000,
	1344.000000,
	"10ad20d2-3a5e-f7d6-aebc-327ab13345a1");
INSERT INTO GD_GE
	VALUES ("94c09579-87b2-d313-09ab-980be12f5856",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"369250b7-b070-e2c7-a88f-fd29caeee7b7",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1b');
INSERT INTO GD_SHP
	VALUES ("94c09579-87b2-d313-09ab-980be12f5856");
INSERT INTO GD_NCS
	VALUES ("94c09579-87b2-d313-09ab-980be12f5856");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"94c09579-87b2-d313-09ab-980be12f5856");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1456.000000,
	"94c09579-87b2-d313-09ab-980be12f5856",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("94c09579-87b2-d313-09ab-980be12f5856",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("4e5d95a2-24eb-ff1e-48db-2e3a745434e9",
	1792.000000,
	1456.000000,
	"94c09579-87b2-d313-09ab-980be12f5856");
INSERT INTO DIM_CON
	VALUES ("39582f86-a79e-d216-98d7-b50c75ed3328",
	1792.000000,
	1536.000000,
	"94c09579-87b2-d313-09ab-980be12f5856");
INSERT INTO GD_GE
	VALUES ("b02828fb-3f8a-3f92-51bc-eddd0d624e25",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 2');
INSERT INTO GD_SHP
	VALUES ("b02828fb-3f8a-3f92-51bc-eddd0d624e25");
INSERT INTO GD_NCS
	VALUES ("b02828fb-3f8a-3f92-51bc-eddd0d624e25");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"b02828fb-3f8a-3f92-51bc-eddd0d624e25");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1648.000000,
	"b02828fb-3f8a-3f92-51bc-eddd0d624e25",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b02828fb-3f8a-3f92-51bc-eddd0d624e25",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("9dd8e6c0-8463-5626-f4db-41e4d54d77ed",
	1792.000000,
	1648.000000,
	"b02828fb-3f8a-3f92-51bc-eddd0d624e25");
INSERT INTO DIM_CON
	VALUES ("905a5872-30d8-fd51-05aa-dfcb3f4b255a",
	1872.000000,
	1696.000000,
	"b02828fb-3f8a-3f92-51bc-eddd0d624e25");
INSERT INTO GD_GE
	VALUES ("b326844d-650c-7e08-5172-3efcd2f8747a",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1a');
INSERT INTO GD_SHP
	VALUES ("b326844d-650c-7e08-5172-3efcd2f8747a");
INSERT INTO GD_NCS
	VALUES ("b326844d-650c-7e08-5172-3efcd2f8747a");
INSERT INTO DIM_ND
	VALUES (128.000000,
	64.000000,
	"b326844d-650c-7e08-5172-3efcd2f8747a");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1296.000000,
	"b326844d-650c-7e08-5172-3efcd2f8747a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b326844d-650c-7e08-5172-3efcd2f8747a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("444e6779-84c8-accc-c757-a00a38e5b53d",
	2096.000000,
	1360.000000,
	"b326844d-650c-7e08-5172-3efcd2f8747a");
INSERT INTO DIM_CON
	VALUES ("bcd04156-d5c7-6e29-d5c5-59821eca0034",
	2096.000000,
	1296.000000,
	"b326844d-650c-7e08-5172-3efcd2f8747a");
INSERT INTO GD_GE
	VALUES ("aefec37c-9364-7f75-50d6-75ae211a839d",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1b');
INSERT INTO GD_SHP
	VALUES ("aefec37c-9364-7f75-50d6-75ae211a839d");
INSERT INTO GD_NCS
	VALUES ("aefec37c-9364-7f75-50d6-75ae211a839d");
INSERT INTO DIM_ND
	VALUES (128.000000,
	80.000000,
	"aefec37c-9364-7f75-50d6-75ae211a839d");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1456.000000,
	"aefec37c-9364-7f75-50d6-75ae211a839d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("aefec37c-9364-7f75-50d6-75ae211a839d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("be8853aa-c36c-49da-c84f-09dbb5e34dd7",
	2096.000000,
	1456.000000,
	"aefec37c-9364-7f75-50d6-75ae211a839d");
INSERT INTO DIM_CON
	VALUES ("85130354-f90a-92cc-6ae5-a3ed25eeeedb",
	2096.000000,
	1536.000000,
	"aefec37c-9364-7f75-50d6-75ae211a839d");
INSERT INTO GD_GE
	VALUES ("bda0a8f9-0908-38b8-6e2f-fd559202a65c",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"b99fcff7-7910-98b4-13b4-48497fa24a4a",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 2');
INSERT INTO GD_SHP
	VALUES ("bda0a8f9-0908-38b8-6e2f-fd559202a65c");
INSERT INTO GD_NCS
	VALUES ("bda0a8f9-0908-38b8-6e2f-fd559202a65c");
INSERT INTO DIM_ND
	VALUES (128.000000,
	80.000000,
	"bda0a8f9-0908-38b8-6e2f-fd559202a65c");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1648.000000,
	"bda0a8f9-0908-38b8-6e2f-fd559202a65c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bda0a8f9-0908-38b8-6e2f-fd559202a65c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c8cfbe13-4aed-3641-9e0f-02c2b9382b01",
	2096.000000,
	1648.000000,
	"bda0a8f9-0908-38b8-6e2f-fd559202a65c");
INSERT INTO GD_GE
	VALUES ("94df999a-13e9-2525-12ce-7539d6eb5409",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"8d3d1fba-de33-a5f4-13c7-ca1fbe6e5091",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a::UBT1: Start and test');
INSERT INTO GD_CON
	VALUES ("94df999a-13e9-2525-12ce-7539d6eb5409",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("03971579-56d9-da44-0d0b-8832d7cb004d",
	"94df999a-13e9-2525-12ce-7539d6eb5409",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"03971579-56d9-da44-0d0b-8832d7cb004d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"03971579-56d9-da44-0d0b-8832d7cb004d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("03971579-56d9-da44-0d0b-8832d7cb004d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1fa689ea-9d3c-6574-8db6-914ce7e9fa40",
	"94df999a-13e9-2525-12ce-7539d6eb5409",
	3,
	-66.000000,
	-5.000000);
INSERT INTO DIM_ND
	VALUES (252.000000,
	41.000000,
	"1fa689ea-9d3c-6574-8db6-914ce7e9fa40");
INSERT INTO DIM_GE
	VALUES (1821.000000,
	1186.000000,
	"1fa689ea-9d3c-6574-8db6-914ce7e9fa40",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1fa689ea-9d3c-6574-8db6-914ce7e9fa40",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("34575319-c4ca-53d8-aa3a-cf9c5ac6247d",
	"94df999a-13e9-2525-12ce-7539d6eb5409",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"34575319-c4ca-53d8-aa3a-cf9c5ac6247d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"34575319-c4ca-53d8-aa3a-cf9c5ac6247d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("34575319-c4ca-53d8-aa3a-cf9c5ac6247d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("aaedd0d0-4db0-7c8f-9cfa-acdada5210d0",
	"94df999a-13e9-2525-12ce-7539d6eb5409",
	"00000000-0000-0000-0000-000000000000",
	"8a286daf-8f9a-eae9-7370-da9803ed416c",
	"622a5614-5108-ef8a-f7b4-ee9d67f53c8b");
INSERT INTO GD_LS
	VALUES ("5bca0c2b-5963-99d9-0204-37f2e74ff565",
	"94df999a-13e9-2525-12ce-7539d6eb5409",
	"aaedd0d0-4db0-7c8f-9cfa-acdada5210d0",
	"622a5614-5108-ef8a-f7b4-ee9d67f53c8b",
	"e03d1861-62d7-4033-ac0b-320a4c78d8b6");
INSERT INTO GD_LS
	VALUES ("ffdc0ae7-cc68-923d-255a-40910637ee42",
	"94df999a-13e9-2525-12ce-7539d6eb5409",
	"5bca0c2b-5963-99d9-0204-37f2e74ff565",
	"e03d1861-62d7-4033-ac0b-320a4c78d8b6",
	"95a3060c-7878-4301-29c5-630319b9f682");
INSERT INTO GD_LS
	VALUES ("5320c974-79d4-9094-4283-3b00427f2a6f",
	"94df999a-13e9-2525-12ce-7539d6eb5409",
	"ffdc0ae7-cc68-923d-255a-40910637ee42",
	"95a3060c-7878-4301-29c5-630319b9f682",
	"8bf8711d-cc83-ef75-d659-7e97d1b0f82e");
INSERT INTO DIM_WAY
	VALUES ("8a286daf-8f9a-eae9-7370-da9803ed416c",
	1872.000000,
	1296.000000,
	"94df999a-13e9-2525-12ce-7539d6eb5409",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("622a5614-5108-ef8a-f7b4-ee9d67f53c8b",
	1920.000000,
	1296.000000,
	"94df999a-13e9-2525-12ce-7539d6eb5409",
	"00000000-0000-0000-0000-000000000000",
	"8a286daf-8f9a-eae9-7370-da9803ed416c");
INSERT INTO DIM_WAY
	VALUES ("e03d1861-62d7-4033-ac0b-320a4c78d8b6",
	1920.000000,
	1216.000000,
	"94df999a-13e9-2525-12ce-7539d6eb5409",
	"00000000-0000-0000-0000-000000000000",
	"622a5614-5108-ef8a-f7b4-ee9d67f53c8b");
INSERT INTO DIM_WAY
	VALUES ("95a3060c-7878-4301-29c5-630319b9f682",
	1824.000000,
	1216.000000,
	"94df999a-13e9-2525-12ce-7539d6eb5409",
	"00000000-0000-0000-0000-000000000000",
	"e03d1861-62d7-4033-ac0b-320a4c78d8b6");
INSERT INTO DIM_WAY
	VALUES ("8bf8711d-cc83-ef75-d659-7e97d1b0f82e",
	1824.000000,
	1264.000000,
	"94df999a-13e9-2525-12ce-7539d6eb5409",
	"00000000-0000-0000-0000-000000000000",
	"95a3060c-7878-4301-29c5-630319b9f682");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"94df999a-13e9-2525-12ce-7539d6eb5409",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("94df999a-13e9-2525-12ce-7539d6eb5409",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("d7cfbb61-ffa9-c7ff-6db1-4e25103e25e5",
	"c1eaba25-eee6-2b65-f162-624f5353be39",
	"94df999a-13e9-2525-12ce-7539d6eb5409");
INSERT INTO GD_GE
	VALUES ("4d0b9932-1643-0c37-7624-e274942302fa",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"074f9794-c854-36f8-7fbe-953d45cd09da",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a::UBT2: Continue and test');
INSERT INTO GD_CON
	VALUES ("4d0b9932-1643-0c37-7624-e274942302fa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f3aa2736-6cba-d4bd-fb47-b128e3eacb46",
	"4d0b9932-1643-0c37-7624-e274942302fa",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f3aa2736-6cba-d4bd-fb47-b128e3eacb46");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f3aa2736-6cba-d4bd-fb47-b128e3eacb46",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f3aa2736-6cba-d4bd-fb47-b128e3eacb46",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("dc27bc78-e86d-c0ae-5290-c67d3d74c79f",
	"4d0b9932-1643-0c37-7624-e274942302fa",
	3,
	-231.000000,
	4.000000);
INSERT INTO DIM_ND
	VALUES (248.000000,
	37.000000,
	"dc27bc78-e86d-c0ae-5290-c67d3d74c79f");
INSERT INTO DIM_GE
	VALUES (1545.000000,
	1389.000000,
	"dc27bc78-e86d-c0ae-5290-c67d3d74c79f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dc27bc78-e86d-c0ae-5290-c67d3d74c79f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c2a8dcac-541a-2261-d68b-fedb884e3504",
	"4d0b9932-1643-0c37-7624-e274942302fa",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c2a8dcac-541a-2261-d68b-fedb884e3504");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c2a8dcac-541a-2261-d68b-fedb884e3504",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c2a8dcac-541a-2261-d68b-fedb884e3504",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("a0d67ed6-8c21-bb2f-6059-660e5999be18",
	"4d0b9932-1643-0c37-7624-e274942302fa",
	"00000000-0000-0000-0000-000000000000",
	"8aff0f2e-a9fb-4d2e-aca6-c5727ca4c2cd",
	"d4940b2a-9eb0-6a6b-730f-09a5f0a4ceb8");
INSERT INTO DIM_WAY
	VALUES ("8aff0f2e-a9fb-4d2e-aca6-c5727ca4c2cd",
	1792.000000,
	1344.000000,
	"4d0b9932-1643-0c37-7624-e274942302fa",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("d4940b2a-9eb0-6a6b-730f-09a5f0a4ceb8",
	1792.000000,
	1456.000000,
	"4d0b9932-1643-0c37-7624-e274942302fa",
	"00000000-0000-0000-0000-000000000000",
	"8aff0f2e-a9fb-4d2e-aca6-c5727ca4c2cd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4d0b9932-1643-0c37-7624-e274942302fa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4d0b9932-1643-0c37-7624-e274942302fa",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e87a2046-7ead-972a-0ff9-2d195d540968",
	"4e5d95a2-24eb-ff1e-48db-2e3a745434e9",
	"4d0b9932-1643-0c37-7624-e274942302fa");
INSERT INTO GD_GE
	VALUES ("dd13dae9-2eaa-13a5-ba6d-01fdafbdacc2",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"ddc29b70-eecb-11e9-eb31-a98dd7dfef2d",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1b::UBT2: Continue and test');
INSERT INTO GD_CON
	VALUES ("dd13dae9-2eaa-13a5-ba6d-01fdafbdacc2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cb71b41a-137e-95f5-7670-c8699999aa67",
	"dd13dae9-2eaa-13a5-ba6d-01fdafbdacc2",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"cb71b41a-137e-95f5-7670-c8699999aa67");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cb71b41a-137e-95f5-7670-c8699999aa67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cb71b41a-137e-95f5-7670-c8699999aa67",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("956b85bc-2e52-1fa5-8f3e-066781d6b60a",
	"dd13dae9-2eaa-13a5-ba6d-01fdafbdacc2",
	3,
	-212.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (226.000000,
	44.000000,
	"956b85bc-2e52-1fa5-8f3e-066781d6b60a");
INSERT INTO DIM_GE
	VALUES (1564.000000,
	1575.000000,
	"956b85bc-2e52-1fa5-8f3e-066781d6b60a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("956b85bc-2e52-1fa5-8f3e-066781d6b60a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("289a8a65-c2b0-07d0-c6a6-694458f2a31f",
	"dd13dae9-2eaa-13a5-ba6d-01fdafbdacc2",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"289a8a65-c2b0-07d0-c6a6-694458f2a31f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"289a8a65-c2b0-07d0-c6a6-694458f2a31f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("289a8a65-c2b0-07d0-c6a6-694458f2a31f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("3245b744-649d-41b6-7822-540e01590e09",
	"dd13dae9-2eaa-13a5-ba6d-01fdafbdacc2",
	"00000000-0000-0000-0000-000000000000",
	"533dd7c7-0a9e-9b15-2885-41669073e3bc",
	"00a0017c-eadb-0c48-6faa-7fa12f306e70");
INSERT INTO DIM_WAY
	VALUES ("533dd7c7-0a9e-9b15-2885-41669073e3bc",
	1792.000000,
	1536.000000,
	"dd13dae9-2eaa-13a5-ba6d-01fdafbdacc2",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("00a0017c-eadb-0c48-6faa-7fa12f306e70",
	1792.000000,
	1648.000000,
	"dd13dae9-2eaa-13a5-ba6d-01fdafbdacc2",
	"00000000-0000-0000-0000-000000000000",
	"533dd7c7-0a9e-9b15-2885-41669073e3bc");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"dd13dae9-2eaa-13a5-ba6d-01fdafbdacc2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dd13dae9-2eaa-13a5-ba6d-01fdafbdacc2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("39582f86-a79e-d216-98d7-b50c75ed3328",
	"9dd8e6c0-8463-5626-f4db-41e4d54d77ed",
	"dd13dae9-2eaa-13a5-ba6d-01fdafbdacc2");
INSERT INTO GD_GE
	VALUES ("15778706-b2e3-fcd0-c896-8ae0de22762b",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"a29fdda1-5cd2-d79e-2a19-8384dff593e4",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1a::UBT4: Continue or test');
INSERT INTO GD_CON
	VALUES ("15778706-b2e3-fcd0-c896-8ae0de22762b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("eeb9d73d-f692-804f-beab-72c20812b796",
	"15778706-b2e3-fcd0-c896-8ae0de22762b",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"eeb9d73d-f692-804f-beab-72c20812b796");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"eeb9d73d-f692-804f-beab-72c20812b796",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("eeb9d73d-f692-804f-beab-72c20812b796",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a89b9d00-66fb-5957-6bb2-865fa00dbc6d",
	"15778706-b2e3-fcd0-c896-8ae0de22762b",
	3,
	-13.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (274.000000,
	38.000000,
	"a89b9d00-66fb-5957-6bb2-865fa00dbc6d");
INSERT INTO DIM_GE
	VALUES (2067.000000,
	1394.000000,
	"a89b9d00-66fb-5957-6bb2-865fa00dbc6d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a89b9d00-66fb-5957-6bb2-865fa00dbc6d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fd761e0c-786d-d73c-422e-c35cb0e55860",
	"15778706-b2e3-fcd0-c896-8ae0de22762b",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"fd761e0c-786d-d73c-422e-c35cb0e55860");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fd761e0c-786d-d73c-422e-c35cb0e55860",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fd761e0c-786d-d73c-422e-c35cb0e55860",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("ba6d8fe8-b5ce-a41f-bb10-eb55230054dc",
	"15778706-b2e3-fcd0-c896-8ae0de22762b",
	"00000000-0000-0000-0000-000000000000",
	"2fc59091-2a70-5cfa-ff9a-8948a394cb30",
	"4e53eba5-fc9b-8350-fd16-62574de46b89");
INSERT INTO DIM_WAY
	VALUES ("2fc59091-2a70-5cfa-ff9a-8948a394cb30",
	2096.000000,
	1360.000000,
	"15778706-b2e3-fcd0-c896-8ae0de22762b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("4e53eba5-fc9b-8350-fd16-62574de46b89",
	2096.000000,
	1456.000000,
	"15778706-b2e3-fcd0-c896-8ae0de22762b",
	"00000000-0000-0000-0000-000000000000",
	"2fc59091-2a70-5cfa-ff9a-8948a394cb30");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"15778706-b2e3-fcd0-c896-8ae0de22762b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("15778706-b2e3-fcd0-c896-8ae0de22762b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("444e6779-84c8-accc-c757-a00a38e5b53d",
	"be8853aa-c36c-49da-c84f-09dbb5e34dd7",
	"15778706-b2e3-fcd0-c896-8ae0de22762b");
INSERT INTO GD_GE
	VALUES ("9f086c83-be8e-3d2c-625f-b5e1079c1d53",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"9a4d225a-f77a-10c1-490a-4b9ecd091fb6",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1b::UBT4: Continue or test');
INSERT INTO GD_CON
	VALUES ("9f086c83-be8e-3d2c-625f-b5e1079c1d53",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d6452233-156a-67b3-da85-20c52c51a1e0",
	"9f086c83-be8e-3d2c-625f-b5e1079c1d53",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d6452233-156a-67b3-da85-20c52c51a1e0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d6452233-156a-67b3-da85-20c52c51a1e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d6452233-156a-67b3-da85-20c52c51a1e0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d0e6a11a-013d-bb3a-cfc7-9cc3974c6aba",
	"9f086c83-be8e-3d2c-625f-b5e1079c1d53",
	3,
	-15.000000,
	7.000000);
INSERT INTO DIM_ND
	VALUES (272.000000,
	41.000000,
	"d0e6a11a-013d-bb3a-cfc7-9cc3974c6aba");
INSERT INTO DIM_GE
	VALUES (2065.000000,
	1584.000000,
	"d0e6a11a-013d-bb3a-cfc7-9cc3974c6aba",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d0e6a11a-013d-bb3a-cfc7-9cc3974c6aba",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c0e99c24-0e36-d744-7d1b-a52ee0ca88ac",
	"9f086c83-be8e-3d2c-625f-b5e1079c1d53",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c0e99c24-0e36-d744-7d1b-a52ee0ca88ac");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c0e99c24-0e36-d744-7d1b-a52ee0ca88ac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c0e99c24-0e36-d744-7d1b-a52ee0ca88ac",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("fd3f2023-6b1a-03bc-36b4-a7075d81700a",
	"9f086c83-be8e-3d2c-625f-b5e1079c1d53",
	"00000000-0000-0000-0000-000000000000",
	"92f1b74c-53bc-0d0f-bc64-4d1ac195210a",
	"2ab991dd-eba2-8ee9-b45c-32fc4ec02eb3");
INSERT INTO DIM_WAY
	VALUES ("92f1b74c-53bc-0d0f-bc64-4d1ac195210a",
	2096.000000,
	1536.000000,
	"9f086c83-be8e-3d2c-625f-b5e1079c1d53",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("2ab991dd-eba2-8ee9-b45c-32fc4ec02eb3",
	2096.000000,
	1648.000000,
	"9f086c83-be8e-3d2c-625f-b5e1079c1d53",
	"00000000-0000-0000-0000-000000000000",
	"92f1b74c-53bc-0d0f-bc64-4d1ac195210a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9f086c83-be8e-3d2c-625f-b5e1079c1d53",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9f086c83-be8e-3d2c-625f-b5e1079c1d53",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("85130354-f90a-92cc-6ae5-a3ed25eeeedb",
	"c8cfbe13-4aed-3641-9e0f-02c2b9382b01",
	"9f086c83-be8e-3d2c-625f-b5e1079c1d53");
INSERT INTO GD_GE
	VALUES ("5328d9ee-09d1-19d3-0b2f-9b7b11392edf",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"0d33209d-819b-d9d4-c071-879715aa4ad5",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 2::UBT3: Start or test');
INSERT INTO GD_CON
	VALUES ("5328d9ee-09d1-19d3-0b2f-9b7b11392edf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("22403ff2-56a2-3c71-df3a-d002632af6d7",
	"5328d9ee-09d1-19d3-0b2f-9b7b11392edf",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"22403ff2-56a2-3c71-df3a-d002632af6d7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"22403ff2-56a2-3c71-df3a-d002632af6d7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("22403ff2-56a2-3c71-df3a-d002632af6d7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3b099897-2538-d79e-8956-1825d84945fc",
	"5328d9ee-09d1-19d3-0b2f-9b7b11392edf",
	3,
	105.000000,
	-196.000000);
INSERT INTO DIM_ND
	VALUES (235.000000,
	45.000000,
	"3b099897-2538-d79e-8956-1825d84945fc");
INSERT INTO DIM_GE
	VALUES (2057.000000,
	1221.000000,
	"3b099897-2538-d79e-8956-1825d84945fc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3b099897-2538-d79e-8956-1825d84945fc",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6a40afa7-103e-0700-ba9e-4e7055e53ba9",
	"5328d9ee-09d1-19d3-0b2f-9b7b11392edf",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6a40afa7-103e-0700-ba9e-4e7055e53ba9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6a40afa7-103e-0700-ba9e-4e7055e53ba9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6a40afa7-103e-0700-ba9e-4e7055e53ba9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("17fc6797-a49f-4ec6-4e88-43676f88cc63",
	"5328d9ee-09d1-19d3-0b2f-9b7b11392edf",
	"00000000-0000-0000-0000-000000000000",
	"29d3898d-e9e9-2b2c-dd07-1d761f4cd73b",
	"0fe8a83f-7cfc-e186-620c-cc88dd05f91a");
INSERT INTO GD_LS
	VALUES ("0e7b6f41-ae7e-dd0b-1f64-5f4a987a0f55",
	"5328d9ee-09d1-19d3-0b2f-9b7b11392edf",
	"17fc6797-a49f-4ec6-4e88-43676f88cc63",
	"0fe8a83f-7cfc-e186-620c-cc88dd05f91a",
	"8ae8dcc3-f3eb-62de-6185-73f5c903ada4");
INSERT INTO GD_LS
	VALUES ("05234d4a-0035-485d-a982-a014ec3e103f",
	"5328d9ee-09d1-19d3-0b2f-9b7b11392edf",
	"0e7b6f41-ae7e-dd0b-1f64-5f4a987a0f55",
	"8ae8dcc3-f3eb-62de-6185-73f5c903ada4",
	"50ff5c2c-cb6e-c6e4-3b0f-45a8af0e7412");
INSERT INTO GD_LS
	VALUES ("02bef75e-5de4-36ba-d351-bb203c517097",
	"5328d9ee-09d1-19d3-0b2f-9b7b11392edf",
	"05234d4a-0035-485d-a982-a014ec3e103f",
	"50ff5c2c-cb6e-c6e4-3b0f-45a8af0e7412",
	"1c96ea90-c692-e658-7f27-834d2bb4339a");
INSERT INTO DIM_WAY
	VALUES ("29d3898d-e9e9-2b2c-dd07-1d761f4cd73b",
	1872.000000,
	1696.000000,
	"5328d9ee-09d1-19d3-0b2f-9b7b11392edf",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("0fe8a83f-7cfc-e186-620c-cc88dd05f91a",
	1968.000000,
	1696.000000,
	"5328d9ee-09d1-19d3-0b2f-9b7b11392edf",
	"00000000-0000-0000-0000-000000000000",
	"29d3898d-e9e9-2b2c-dd07-1d761f4cd73b");
INSERT INTO DIM_WAY
	VALUES ("8ae8dcc3-f3eb-62de-6185-73f5c903ada4",
	1968.000000,
	1248.000000,
	"5328d9ee-09d1-19d3-0b2f-9b7b11392edf",
	"00000000-0000-0000-0000-000000000000",
	"0fe8a83f-7cfc-e186-620c-cc88dd05f91a");
INSERT INTO DIM_WAY
	VALUES ("50ff5c2c-cb6e-c6e4-3b0f-45a8af0e7412",
	2096.000000,
	1248.000000,
	"5328d9ee-09d1-19d3-0b2f-9b7b11392edf",
	"00000000-0000-0000-0000-000000000000",
	"8ae8dcc3-f3eb-62de-6185-73f5c903ada4");
INSERT INTO DIM_WAY
	VALUES ("1c96ea90-c692-e658-7f27-834d2bb4339a",
	2096.000000,
	1296.000000,
	"5328d9ee-09d1-19d3-0b2f-9b7b11392edf",
	"00000000-0000-0000-0000-000000000000",
	"50ff5c2c-cb6e-c6e4-3b0f-45a8af0e7412");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5328d9ee-09d1-19d3-0b2f-9b7b11392edf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5328d9ee-09d1-19d3-0b2f-9b7b11392edf",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("905a5872-30d8-fd51-05aa-dfcb3f4b255a",
	"bcd04156-d5c7-6e29-d5c5-59821eca0034",
	"5328d9ee-09d1-19d3-0b2f-9b7b11392edf");
INSERT INTO DIM_DIA
	VALUES ("8eab82da-0d06-df01-df8f-3ed3ddc91835",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	'User Other Boolean Test',
	19,
	'UOBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"00000000-0000-0000-0000-000000000000",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	0,
	"359b56d2-80e5-9014-e822-7a8143d26491",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	"70054206-7dbc-c3f5-9370-b2276758b235",
	"02a6af0f-5e07-5df5-adca-c863af9c8e81",
	"44c3dc13-bcb9-8e9c-b58e-badcbb1af8e9",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Boolean Test',
	'id',
	'R13');
INSERT INTO O_RATTR
	VALUES ("02a6af0f-5e07-5df5-adca-c863af9c8e81",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"359b56d2-80e5-9014-e822-7a8143d26491",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	1,
	'id');
INSERT INTO O_ATTR
	VALUES ("02a6af0f-5e07-5df5-adca-c863af9c8e81",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	0,
	"4af751e0-065f-944b-738c-c44aa3cde0a8",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"ed9c4f46-9c5a-f4d9-dc4f-8a20f2cec12d",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	"3be90946-54fc-5e5a-7864-544a9e840a8e",
	"acac9317-23a1-95d7-41a4-e6f4f347ccf1",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Third Boolean Test',
	'btrue',
	'R14');
INSERT INTO O_RATTR
	VALUES ("3be90946-54fc-5e5a-7864-544a9e840a8e",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"4af751e0-065f-944b-738c-c44aa3cde0a8",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("3be90946-54fc-5e5a-7864-544a9e840a8e",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"02a6af0f-5e07-5df5-adca-c863af9c8e81",
	'r11btrue',
	'',
	'r11',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	0,
	"79855c61-83ec-92fa-d755-cd213e44c0bd",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"ed9c4f46-9c5a-f4d9-dc4f-8a20f2cec12d",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	"acd4233c-9242-4aa2-f164-a3c2ab6e0fac",
	"56579ffb-8fdb-490d-7d0b-97cc1d2e611e",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Third Boolean Test',
	'bfalse',
	'R14');
INSERT INTO O_RATTR
	VALUES ("acd4233c-9242-4aa2-f164-a3c2ab6e0fac",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"79855c61-83ec-92fa-d755-cd213e44c0bd",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("acd4233c-9242-4aa2-f164-a3c2ab6e0fac",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"3be90946-54fc-5e5a-7864-544a9e840a8e",
	'r11bfalse',
	'',
	'r11',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_OIDA
	VALUES ("bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	'bfalse');
INSERT INTO O_ID
	VALUES (1,
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ID
	VALUES (2,
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO PE_PE
	VALUES ("49b8a183-8eb8-e487-d095-f42598fda7d3",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("49b8a183-8eb8-e487-d095-f42598fda7d3",
	'User Third Boolean Test',
	20,
	'UTBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("4af751e0-065f-944b-738c-c44aa3cde0a8",
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO O_BATTR
	VALUES ("4af751e0-065f-944b-738c-c44aa3cde0a8",
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO O_ATTR
	VALUES ("4af751e0-065f-944b-738c-c44aa3cde0a8",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	"00000000-0000-0000-0000-000000000000",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("79855c61-83ec-92fa-d755-cd213e44c0bd",
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO O_BATTR
	VALUES ("79855c61-83ec-92fa-d755-cd213e44c0bd",
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO O_ATTR
	VALUES ("79855c61-83ec-92fa-d755-cd213e44c0bd",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	"4af751e0-065f-944b-738c-c44aa3cde0a8",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO O_OIDA
	VALUES ("4af751e0-065f-944b-738c-c44aa3cde0a8",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("79855c61-83ec-92fa-d755-cd213e44c0bd",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	0,
	'bfalse');
INSERT INTO O_ID
	VALUES (1,
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO O_ID
	VALUES (2,
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO PE_PE
	VALUES ("1e6c89ff-f941-7c51-013e-1dc86807a023",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("1e6c89ff-f941-7c51-013e-1dc86807a023",
	'ex init',
	1,
	'USERINIT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("58f7272d-c26a-c488-d369-32224ccdd58b",
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_BATTR
	VALUES ("58f7272d-c26a-c488-d369-32224ccdd58b",
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_ATTR
	VALUES ("58f7272d-c26a-c488-d369-32224ccdd58b",
	"1e6c89ff-f941-7c51-013e-1dc86807a023",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("2ff88cd2-2b4e-a585-4e33-5e27e012aa84",
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_BATTR
	VALUES ("2ff88cd2-2b4e-a585-4e33-5e27e012aa84",
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_ATTR
	VALUES ("2ff88cd2-2b4e-a585-4e33-5e27e012aa84",
	"1e6c89ff-f941-7c51-013e-1dc86807a023",
	"58f7272d-c26a-c488-d369-32224ccdd58b",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_OIDA
	VALUES ("58f7272d-c26a-c488-d369-32224ccdd58b",
	"1e6c89ff-f941-7c51-013e-1dc86807a023",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_ID
	VALUES (2,
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO SM_ISM
	VALUES ("d1f8b744-2777-9b2d-4857-0633a69050c8",
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO SM_SM
	VALUES ("d1f8b744-2777-9b2d-4857-0633a69050c8",
	'',
	3);
INSERT INTO SM_MOORE
	VALUES ("d1f8b744-2777-9b2d-4857-0633a69050c8");
INSERT INTO SM_LEVT
	VALUES ("e6176175-e590-5ee8-e918-dcff3a86153e",
	"d1f8b744-2777-9b2d-4857-0633a69050c8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("e6176175-e590-5ee8-e918-dcff3a86153e",
	"d1f8b744-2777-9b2d-4857-0633a69050c8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("e6176175-e590-5ee8-e918-dcff3a86153e",
	"d1f8b744-2777-9b2d-4857-0633a69050c8",
	"00000000-0000-0000-0000-000000000000",
	1,
	'init',
	0,
	'',
	'USERINIT1',
	'');
INSERT INTO SM_STATE
	VALUES ("893d2440-c506-0df1-bcd8-ee40e22c920f",
	"d1f8b744-2777-9b2d-4857-0633a69050c8",
	"00000000-0000-0000-0000-000000000000",
	'ex init',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("893d2440-c506-0df1-bcd8-ee40e22c920f",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"d1f8b744-2777-9b2d-4857-0633a69050c8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("ad708723-b288-e81a-31fc-b6fd52d8eccc",
	"d1f8b744-2777-9b2d-4857-0633a69050c8",
	"893d2440-c506-0df1-bcd8-ee40e22c920f");
INSERT INTO SM_AH
	VALUES ("ad708723-b288-e81a-31fc-b6fd52d8eccc",
	"d1f8b744-2777-9b2d-4857-0633a69050c8");
INSERT INTO SM_ACT
	VALUES ("ad708723-b288-e81a-31fc-b6fd52d8eccc",
	"d1f8b744-2777-9b2d-4857-0633a69050c8",
	1,
	'LOG::LogInfo(message:"a1test_exconfig: a1test_exconfig init") ;

// create preexisting instances
create object instance ev of EV;
assign ev.shutdown_count = 3;
create object instance et of ET;
assign et.btrue = TRUE;
assign et.et_id = 1;
create object instance one_inst of OI;
relate et to one_inst across R3;
create object instance mi1 of MI;
relate et to mi1 across R4;
create object instance mi2 of MI;
relate et to mi2 across R4;

create object instance etob1 of ETOB;
assign etob1.etob_id = 2;
assign etob1.r = 2.1718;
assign etob1.btrue = TRUE;
assign etob1.bfalse = FALSE;
assign etob1.s = "etob1 string";
bridge etob1.d = TIM::create_date(second:17,minute:7,hour:13,day:9,month:8,year:1991);
select any event_instance from instances of EV;
create event instance ev_temp of EV1:''Event Instance''(message:"etob1 event instance") to event_instance;
assign etob1.ev = ev_temp;
bridge etob1.tim = TIM::timer_start ( microseconds:2000000, event_inst:ev_temp);
relate et to etob1 across R1;
relate et to etob1 across R8;
create object instance etob2 of ETOB;
assign etob2.etob_id = 3;
assign etob2.r = 1.616;
assign etob2.btrue = TRUE;
assign etob2.bfalse = FALSE;
assign etob2.s = "etob2 string";
relate et to etob2 across R8;

create object instance etoc of ETOC;
assign etoc.etoc_id = 4;
assign etoc.r = 11.311;
assign etoc.btrue = TRUE;
assign etoc.bfalse = FALSE;
assign etoc.s = "etoc string";
bridge etoc.d = TIM::create_date(second:10,minute:0,hour:0,day:13,month:12,year:1997);
create event instance ev_temp2 of EV1:''Event Instance''(message:"etoc event instance") to event_instance;
assign etoc.ev = ev_temp2;
bridge etoc.tim = TIM::timer_start ( microseconds:2000000, event_inst:ev_temp2);

relate etob1 to etoc across R6;
create object instance etoc2 of ETOC;
assign etoc2.etoc_id = 5;
assign etoc2.r = 17.311;
assign etoc2.btrue = TRUE;
assign etoc2.bfalse = FALSE;
assign etoc2.s = "etoc2 string";
relate etob2 to etoc2 across R6;

create object instance bet of BET;
assign bet.btrue = TRUE;
assign bet.bfalse = FALSE;
create object instance obet1 of OBET;
assign obet1.btrue = TRUE;
assign obet1.bfalse = FALSE;
relate bet to obet1 across R9;
relate bet to obet1 across R10;
create object instance obet2 of OBET;
assign obet2.btrue = TRUE;
assign obet2.bfalse = FALSE;
relate bet to obet2 across R10;
create object instance tbet1 of TBET;
assign tbet1.btrue = TRUE;
assign tbet1.bfalse = FALSE;
relate tbet1 to obet1 across R11;
create object instance tbet2 of TBET;
assign tbet2.btrue = TRUE;
assign tbet2.bfalse = FALSE;
relate tbet2 to obet2 across R11;

create object instance ubt of UBT;
assign ubt.btrue = TRUE;
assign ubt.bfalse = FALSE;

create object instance uobt1 of UOBT;
assign uobt1.btrue = TRUE;
assign uobt1.bfalse = FALSE;
relate ubt to uobt1 across R12;
relate ubt to uobt1 across R13;

create object instance uobt2 of UOBT;
assign uobt2.btrue = TRUE;
assign uobt2.bfalse = FALSE;
relate ubt to uobt2 across R13;

create object instance utbt1 of UTBT;
assign utbt1.btrue = TRUE;
assign utbt1.bfalse = FALSE;
relate utbt1 to uobt1 across R14;

create object instance utbt2 of UTBT;
assign utbt2.btrue = TRUE;
assign utbt2.bfalse = FALSE;
relate utbt2 to uobt2 across R14;


// no instances of NOI should be created

// start the expression test
generate ET1:''Start Expression Test''() to et;

generate BET1:''Start and test''( ttrue: true, tfalse: false) to bet;
generate UBT1:''Start and test''( ttrue: true, tfalse: false) to ubt;
',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("42a487c0-edd1-525b-10fc-9c9c8d5d5303",
	"d1f8b744-2777-9b2d-4857-0633a69050c8",
	"893d2440-c506-0df1-bcd8-ee40e22c920f",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("d9b4be29-1e41-5c8c-32ad-44f1d972ab53",
	"d1f8b744-2777-9b2d-4857-0633a69050c8",
	"42a487c0-edd1-525b-10fc-9c9c8d5d5303");
INSERT INTO SM_AH
	VALUES ("d9b4be29-1e41-5c8c-32ad-44f1d972ab53",
	"d1f8b744-2777-9b2d-4857-0633a69050c8");
INSERT INTO SM_ACT
	VALUES ("d9b4be29-1e41-5c8c-32ad-44f1d972ab53",
	"d1f8b744-2777-9b2d-4857-0633a69050c8",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("42a487c0-edd1-525b-10fc-9c9c8d5d5303",
	"d1f8b744-2777-9b2d-4857-0633a69050c8",
	"893d2440-c506-0df1-bcd8-ee40e22c920f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	8,
	"d1f8b744-2777-9b2d-4857-0633a69050c8",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("2fcf179e-52ae-1627-a935-fc97998803fe",
	"e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	"893d2440-c506-0df1-bcd8-ee40e22c920f",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine::ex init');
INSERT INTO GD_SHP
	VALUES ("2fcf179e-52ae-1627-a935-fc97998803fe");
INSERT INTO GD_NCS
	VALUES ("2fcf179e-52ae-1627-a935-fc97998803fe");
INSERT INTO DIM_ND
	VALUES (496.000000,
	480.000000,
	"2fcf179e-52ae-1627-a935-fc97998803fe");
INSERT INTO DIM_GE
	VALUES (1744.000000,
	1248.000000,
	"2fcf179e-52ae-1627-a935-fc97998803fe",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2fcf179e-52ae-1627-a935-fc97998803fe",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("e290c63c-a2bd-911c-0628-3a177f020365",
	2240.000000,
	1296.000000,
	"2fcf179e-52ae-1627-a935-fc97998803fe");
INSERT INTO DIM_CON
	VALUES ("d2babca5-1291-9b33-da29-b3862e93797f",
	2176.000000,
	1248.000000,
	"2fcf179e-52ae-1627-a935-fc97998803fe");
INSERT INTO GD_GE
	VALUES ("98d9086e-9733-579b-fc66-4bf4170c6299",
	"e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	"42a487c0-edd1-525b-10fc-9c9c8d5d5303",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine::ex init::USERINIT1: init');
INSERT INTO GD_CON
	VALUES ("98d9086e-9733-579b-fc66-4bf4170c6299",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("350d73e8-c827-ab7c-ed48-6f875ad1014e",
	"98d9086e-9733-579b-fc66-4bf4170c6299",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"350d73e8-c827-ab7c-ed48-6f875ad1014e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"350d73e8-c827-ab7c-ed48-6f875ad1014e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("350d73e8-c827-ab7c-ed48-6f875ad1014e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cf672165-4d94-c317-c36a-4862a1dd2707",
	"98d9086e-9733-579b-fc66-4bf4170c6299",
	3,
	-109.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (145.000000,
	33.000000,
	"cf672165-4d94-c317-c36a-4862a1dd2707");
INSERT INTO DIM_GE
	VALUES (2178.000000,
	1171.000000,
	"cf672165-4d94-c317-c36a-4862a1dd2707",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cf672165-4d94-c317-c36a-4862a1dd2707",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e9981861-8902-3d47-d1aa-68f513aa1a92",
	"98d9086e-9733-579b-fc66-4bf4170c6299",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e9981861-8902-3d47-d1aa-68f513aa1a92");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e9981861-8902-3d47-d1aa-68f513aa1a92",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e9981861-8902-3d47-d1aa-68f513aa1a92",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("ee569a3e-4dbe-bb16-2e0c-648b0a53d03d",
	"98d9086e-9733-579b-fc66-4bf4170c6299",
	"00000000-0000-0000-0000-000000000000",
	"aa09aa8e-21e3-906c-376b-bac6978d2823",
	"7e7b7d88-d5c5-1e30-d72e-bd2aae7b32a0");
INSERT INTO GD_LS
	VALUES ("3584009c-c8fd-7449-8a8b-e4013a7ffee8",
	"98d9086e-9733-579b-fc66-4bf4170c6299",
	"ee569a3e-4dbe-bb16-2e0c-648b0a53d03d",
	"7e7b7d88-d5c5-1e30-d72e-bd2aae7b32a0",
	"0465d275-43ca-79b6-b605-aea4ca55774b");
INSERT INTO GD_LS
	VALUES ("5f1d7bea-50b8-2491-8e09-bb71f2ebe1cc",
	"98d9086e-9733-579b-fc66-4bf4170c6299",
	"3584009c-c8fd-7449-8a8b-e4013a7ffee8",
	"0465d275-43ca-79b6-b605-aea4ca55774b",
	"f66bdcae-674d-3cf9-3249-a2e17f052382");
INSERT INTO GD_LS
	VALUES ("231ce1f9-211d-6f72-5420-a51e1094115d",
	"98d9086e-9733-579b-fc66-4bf4170c6299",
	"5f1d7bea-50b8-2491-8e09-bb71f2ebe1cc",
	"f66bdcae-674d-3cf9-3249-a2e17f052382",
	"5892f4a9-765b-2738-3d29-b5dee56ec5c8");
INSERT INTO DIM_WAY
	VALUES ("aa09aa8e-21e3-906c-376b-bac6978d2823",
	2240.000000,
	1296.000000,
	"98d9086e-9733-579b-fc66-4bf4170c6299",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("7e7b7d88-d5c5-1e30-d72e-bd2aae7b32a0",
	2320.000000,
	1296.000000,
	"98d9086e-9733-579b-fc66-4bf4170c6299",
	"00000000-0000-0000-0000-000000000000",
	"aa09aa8e-21e3-906c-376b-bac6978d2823");
INSERT INTO DIM_WAY
	VALUES ("0465d275-43ca-79b6-b605-aea4ca55774b",
	2320.000000,
	1200.000000,
	"98d9086e-9733-579b-fc66-4bf4170c6299",
	"00000000-0000-0000-0000-000000000000",
	"7e7b7d88-d5c5-1e30-d72e-bd2aae7b32a0");
INSERT INTO DIM_WAY
	VALUES ("f66bdcae-674d-3cf9-3249-a2e17f052382",
	2176.000000,
	1200.000000,
	"98d9086e-9733-579b-fc66-4bf4170c6299",
	"00000000-0000-0000-0000-000000000000",
	"0465d275-43ca-79b6-b605-aea4ca55774b");
INSERT INTO DIM_WAY
	VALUES ("5892f4a9-765b-2738-3d29-b5dee56ec5c8",
	2176.000000,
	1248.000000,
	"98d9086e-9733-579b-fc66-4bf4170c6299",
	"00000000-0000-0000-0000-000000000000",
	"f66bdcae-674d-3cf9-3249-a2e17f052382");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"98d9086e-9733-579b-fc66-4bf4170c6299",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("98d9086e-9733-579b-fc66-4bf4170c6299",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e290c63c-a2bd-911c-0628-3a177f020365",
	"d2babca5-1291-9b33-da29-b3862e93797f",
	"98d9086e-9733-579b-fc66-4bf4170c6299");
INSERT INTO DIM_DIA
	VALUES ("e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("25978d20-cb0f-39be-b5d6-1e525901dbae",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("25978d20-cb0f-39be-b5d6-1e525901dbae",
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("25978d20-cb0f-39be-b5d6-1e525901dbae");
INSERT INTO R_PART
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("076f5dab-39e1-6926-b521-ba06f0c790f6",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("97cee472-2e50-7195-74b3-bb36d4da2a04",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("a1177025-3929-3edb-7d0e-df9e89492a37",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("1a564168-a2e9-41ae-d31c-8c10def2b395",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO R_RTO
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	0);
INSERT INTO R_OIR
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9");
INSERT INTO R_OIR
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	2,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932");
INSERT INTO R_PART
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"db49e71d-0dee-550f-a922-b30ac8d361b3");
INSERT INTO R_RTO
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	0);
INSERT INTO R_OIR
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	1,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6");
INSERT INTO R_OIR
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	3,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("1f5f87bc-2a9d-28c3-2f51-bdc91114a118");
INSERT INTO R_PART
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"23362b4b-de59-df84-7eeb-3f5165750202");
INSERT INTO R_RTO
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	0);
INSERT INTO R_OIR
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f");
INSERT INTO R_OIR
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("7b55c826-c95e-086c-b33e-106fbdbdf22f",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("7b55c826-c95e-086c-b33e-106fbdbdf22f",
	4,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("7b55c826-c95e-086c-b33e-106fbdbdf22f");
INSERT INTO R_PART
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c");
INSERT INTO R_RTO
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	0);
INSERT INTO R_OIR
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"084c910b-ea58-912a-7353-1cda5c0ece3e");
INSERT INTO R_OIR
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	5,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("dd07f00b-ea86-c8e6-4113-4cedb1c03100");
INSERT INTO R_PART
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c");
INSERT INTO R_RTO
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	0);
INSERT INTO R_OIR
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d");
INSERT INTO R_OIR
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	6,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd");
INSERT INTO R_FORM
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00");
INSERT INTO R_OIR
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("50fc1111-665c-8a1b-06da-c6289edcd78a",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("24801b0c-27a4-11d2-8d50-aa1ada226943",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO R_RTO
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	0);
INSERT INTO R_OIR
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("18fcaec9-9922-f752-6391-77763be8b1cb",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("18fcaec9-9922-f752-6391-77763be8b1cb",
	8,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("18fcaec9-9922-f752-6391-77763be8b1cb");
INSERT INTO R_PART
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3");
INSERT INTO R_RTO
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	0);
INSERT INTO R_OIR
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"b2e2ec8b-dea4-27ff-bf04-36a5ef39a581",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"b2e2ec8b-dea4-27ff-bf04-36a5ef39a581");
INSERT INTO R_OIR
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"b2e2ec8b-dea4-27ff-bf04-36a5ef39a581",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("cb2ccf26-fc90-2543-da09-5c968e1db3de",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("cb2ccf26-fc90-2543-da09-5c968e1db3de",
	9,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("cb2ccf26-fc90-2543-da09-5c968e1db3de");
INSERT INTO R_FORM
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"ccf70a38-daf9-138f-229a-d539eead1ec6",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"ccf70a38-daf9-138f-229a-d539eead1ec6");
INSERT INTO R_OIR
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"ccf70a38-daf9-138f-229a-d539eead1ec6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	0,
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb");
INSERT INTO O_RTIDA
	VALUES ("5cf88885-59d8-3195-ae35-135d1c796b97",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	0,
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb");
INSERT INTO R_RTO
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb",
	0);
INSERT INTO R_OIR
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	10,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("d0c5a6ef-14b5-f428-0555-3259bc6dcd19");
INSERT INTO R_PART
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"53ecd13f-5a18-e009-f37e-4d00cc943a99",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("d35abe68-761c-4805-6622-ec58904bb650",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	0,
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"53ecd13f-5a18-e009-f37e-4d00cc943a99");
INSERT INTO R_RTO
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"53ecd13f-5a18-e009-f37e-4d00cc943a99",
	0);
INSERT INTO R_OIR
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"53ecd13f-5a18-e009-f37e-4d00cc943a99",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"8718f67e-1427-6471-bb23-360a7ff64490",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"8718f67e-1427-6471-bb23-360a7ff64490");
INSERT INTO R_OIR
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"8718f67e-1427-6471-bb23-360a7ff64490",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	11,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc");
INSERT INTO R_FORM
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"d6b7451d-2f26-5d8f-7ceb-911d25c59960",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"d6b7451d-2f26-5d8f-7ceb-911d25c59960");
INSERT INTO R_OIR
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"d6b7451d-2f26-5d8f-7ceb-911d25c59960",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"b15c758a-e852-d3b7-368c-45b43b3e1826",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"b15c758a-e852-d3b7-368c-45b43b3e1826");
INSERT INTO O_RTIDA
	VALUES ("6281fd6a-984d-f963-d287-24c4b8696965",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"b15c758a-e852-d3b7-368c-45b43b3e1826");
INSERT INTO R_RTO
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"b15c758a-e852-d3b7-368c-45b43b3e1826",
	0);
INSERT INTO R_OIR
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"b15c758a-e852-d3b7-368c-45b43b3e1826",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	12,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("f778cf6f-ad60-2d3c-e026-c0725b5292bf");
INSERT INTO R_FORM
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"12e4e6ff-22c0-1870-1168-57551556f0ac",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"12e4e6ff-22c0-1870-1168-57551556f0ac");
INSERT INTO R_OIR
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"12e4e6ff-22c0-1870-1168-57551556f0ac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"707287a5-c35b-e22f-7537-2c582e2fcad4");
INSERT INTO O_RTIDA
	VALUES ("43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"707287a5-c35b-e22f-7537-2c582e2fcad4");
INSERT INTO R_RTO
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	0);
INSERT INTO R_OIR
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	13,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea");
INSERT INTO R_PART
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"70054206-7dbc-c3f5-9370-b2276758b235",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("359b56d2-80e5-9014-e822-7a8143d26491",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	0,
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"70054206-7dbc-c3f5-9370-b2276758b235");
INSERT INTO R_RTO
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"70054206-7dbc-c3f5-9370-b2276758b235",
	0);
INSERT INTO R_OIR
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"70054206-7dbc-c3f5-9370-b2276758b235",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"22d47560-b904-1ecb-2823-fa6adbb028c5");
INSERT INTO R_OIR
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	14,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690");
INSERT INTO R_FORM
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"ed9c4f46-9c5a-f4d9-dc4f-8a20f2cec12d",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"ed9c4f46-9c5a-f4d9-dc4f-8a20f2cec12d");
INSERT INTO R_OIR
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"ed9c4f46-9c5a-f4d9-dc4f-8a20f2cec12d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("49b8a183-8eb8-e487-d095-f42598fda7d3",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("4af751e0-065f-944b-738c-c44aa3cde0a8",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	0,
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9");
INSERT INTO O_RTIDA
	VALUES ("79855c61-83ec-92fa-d755-cd213e44c0bd",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	0,
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9");
INSERT INTO R_RTO
	VALUES ("49b8a183-8eb8-e487-d095-f42598fda7d3",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	0);
INSERT INTO R_OIR
	VALUES ("49b8a183-8eb8-e487-d095-f42598fda7d3",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	1,
	"8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	"00000000-0000-0000-0000-000000000000",
	"50642553-6a49-751c-68da-981eb9cfa6bf",
	'External Entities',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("b9328e91-b56e-3508-183b-1649cc05a74c",
	112,
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::External Entities');
INSERT INTO DIM_DIA
	VALUES ("b9328e91-b56e-3508-183b-1649cc05a74c",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	1,
	"8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	"00000000-0000-0000-0000-000000000000",
	"50642553-6a49-751c-68da-981eb9cfa6bf",
	'Datatypes',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("2da66692-6a75-5f23-3235-2836f7d3d562",
	112,
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes');
INSERT INTO GD_GE
	VALUES ("2f9e9f09-b126-589b-4fcc-217eb5ece251",
	"2da66692-6a75-5f23-3235-2836f7d3d562",
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_b');
INSERT INTO GD_SHP
	VALUES ("2f9e9f09-b126-589b-4fcc-217eb5ece251");
INSERT INTO GD_NCS
	VALUES ("2f9e9f09-b126-589b-4fcc-217eb5ece251");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"2f9e9f09-b126-589b-4fcc-217eb5ece251");
INSERT INTO DIM_GE
	VALUES (2280.000000,
	1690.000000,
	"2f9e9f09-b126-589b-4fcc-217eb5ece251",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2f9e9f09-b126-589b-4fcc-217eb5ece251",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("ef38c3b5-f258-31d7-cca0-e03e6ba1e0cd",
	"2da66692-6a75-5f23-3235-2836f7d3d562",
	"4c39b4f9-523d-8cc3-5126-d0bde9640322",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_i');
INSERT INTO GD_SHP
	VALUES ("ef38c3b5-f258-31d7-cca0-e03e6ba1e0cd");
INSERT INTO GD_NCS
	VALUES ("ef38c3b5-f258-31d7-cca0-e03e6ba1e0cd");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"ef38c3b5-f258-31d7-cca0-e03e6ba1e0cd");
INSERT INTO DIM_GE
	VALUES (2500.000000,
	1690.000000,
	"ef38c3b5-f258-31d7-cca0-e03e6ba1e0cd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ef38c3b5-f258-31d7-cca0-e03e6ba1e0cd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("552aca5c-822a-1fc9-6cfd-733d2f54c442",
	"2da66692-6a75-5f23-3235-2836f7d3d562",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_r');
INSERT INTO GD_SHP
	VALUES ("552aca5c-822a-1fc9-6cfd-733d2f54c442");
INSERT INTO GD_NCS
	VALUES ("552aca5c-822a-1fc9-6cfd-733d2f54c442");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"552aca5c-822a-1fc9-6cfd-733d2f54c442");
INSERT INTO DIM_GE
	VALUES (1620.000000,
	1855.000000,
	"552aca5c-822a-1fc9-6cfd-733d2f54c442",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("552aca5c-822a-1fc9-6cfd-733d2f54c442",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("31981f00-1c00-c787-1273-0313fd938759",
	"2da66692-6a75-5f23-3235-2836f7d3d562",
	"ce87aa8d-1bb4-01ea-0916-96321b55867c",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_s');
INSERT INTO GD_SHP
	VALUES ("31981f00-1c00-c787-1273-0313fd938759");
INSERT INTO GD_NCS
	VALUES ("31981f00-1c00-c787-1273-0313fd938759");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"31981f00-1c00-c787-1273-0313fd938759");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1855.000000,
	"31981f00-1c00-c787-1273-0313fd938759",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("31981f00-1c00-c787-1273-0313fd938759",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("546953c2-6000-011a-ad4a-f85cfbccf360",
	"2da66692-6a75-5f23-3235-2836f7d3d562",
	"bc4d8a5f-8892-bff5-cf51-68bad811491a",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_u');
INSERT INTO GD_SHP
	VALUES ("546953c2-6000-011a-ad4a-f85cfbccf360");
INSERT INTO GD_NCS
	VALUES ("546953c2-6000-011a-ad4a-f85cfbccf360");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"546953c2-6000-011a-ad4a-f85cfbccf360");
INSERT INTO DIM_GE
	VALUES (2060.000000,
	1855.000000,
	"546953c2-6000-011a-ad4a-f85cfbccf360",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("546953c2-6000-011a-ad4a-f85cfbccf360",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("2da66692-6a75-5f23-3235-2836f7d3d562",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("16bcd859-2dc0-5548-9dec-0cda91abf583",
	1,
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("16bcd859-2dc0-5548-9dec-0cda91abf583",
	"00000000-0000-0000-0000-000000000000",
	'my_b',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("16bcd859-2dc0-5548-9dec-0cda91abf583",
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("4c39b4f9-523d-8cc3-5126-d0bde9640322",
	1,
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("4c39b4f9-523d-8cc3-5126-d0bde9640322",
	"00000000-0000-0000-0000-000000000000",
	'my_i',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("4c39b4f9-523d-8cc3-5126-d0bde9640322",
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	1,
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"00000000-0000-0000-0000-000000000000",
	'my_r',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("ce87aa8d-1bb4-01ea-0916-96321b55867c",
	1,
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("ce87aa8d-1bb4-01ea-0916-96321b55867c",
	"00000000-0000-0000-0000-000000000000",
	'my_s',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("ce87aa8d-1bb4-01ea-0916-96321b55867c",
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("bc4d8a5f-8892-bff5-cf51-68bad811491a",
	1,
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("bc4d8a5f-8892-bff5-cf51-68bad811491a",
	"00000000-0000-0000-0000-000000000000",
	'my_u',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("bc4d8a5f-8892-bff5-cf51-68bad811491a",
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	0,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO GD_GE
	VALUES ("194805df-b42d-b3e1-d4b6-c54e016a7fa4",
	"5052799e-0696-68e5-32d2-458dfcb6c36b",
	"8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1');
INSERT INTO GD_SHP
	VALUES ("194805df-b42d-b3e1-d4b6-c54e016a7fa4");
INSERT INTO GD_NCS
	VALUES ("194805df-b42d-b3e1-d4b6-c54e016a7fa4");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"194805df-b42d-b3e1-d4b6-c54e016a7fa4");
INSERT INTO DIM_GE
	VALUES (4010.000000,
	0.000000,
	"194805df-b42d-b3e1-d4b6-c54e016a7fa4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("194805df-b42d-b3e1-d4b6-c54e016a7fa4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYS_PROXY
	VALUES ("50642553-6a49-751c-68da-981eb9cfa6bf",
	'org.xtuml.bp.io.mdl.test',
	1,
	'../org.xtuml.bp.io.mdl.test.xtuml');
