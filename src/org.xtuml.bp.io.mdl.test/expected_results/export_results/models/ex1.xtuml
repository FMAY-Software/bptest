-- root-types-contained: Package_c
-- BP 7.1 content: StreamData syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("a1102055-ed45-4184-c449-a339dcb295b0",
	"edb4e2c6-e0a9-15b2-ab17-b566adbf3747",
	"edb4e2c6-e0a9-15b2-ab17-b566adbf3747",
	'ex1',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("ca0f5a78-a999-df17-56d6-4783717d8662",
	112,
	"a1102055-ed45-4184-c449-a339dcb295b0",
	108,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1');
INSERT INTO GD_GE
	VALUES ("01b97957-847d-5120-3edd-a5923b0a9cc7",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex');
INSERT INTO GD_SHP
	VALUES ("01b97957-847d-5120-3edd-a5923b0a9cc7");
INSERT INTO GD_NCS
	VALUES ("01b97957-847d-5120-3edd-a5923b0a9cc7");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"01b97957-847d-5120-3edd-a5923b0a9cc7");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1344.000000,
	"01b97957-847d-5120-3edd-a5923b0a9cc7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("01b97957-847d-5120-3edd-a5923b0a9cc7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("b826b9d0-7355-be97-a5ea-d42f4c5d2742",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"63f9f41e-d838-de05-2cd4-39e8e8731894",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes');
INSERT INTO GD_SHP
	VALUES ("b826b9d0-7355-be97-a5ea-d42f4c5d2742");
INSERT INTO GD_NCS
	VALUES ("b826b9d0-7355-be97-a5ea-d42f4c5d2742");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"b826b9d0-7355-be97-a5ea-d42f4c5d2742");
INSERT INTO DIM_GE
	VALUES (2240.000000,
	1568.000000,
	"b826b9d0-7355-be97-a5ea-d42f4c5d2742",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b826b9d0-7355-be97-a5ea-d42f4c5d2742",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("f9d75ef1-a679-b057-b0e8-f96974190b59",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"ca932cb9-dd71-5e66-804d-2fc3c8e4d9ff",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::External Entities');
INSERT INTO GD_SHP
	VALUES ("f9d75ef1-a679-b057-b0e8-f96974190b59");
INSERT INTO GD_NCS
	VALUES ("f9d75ef1-a679-b057-b0e8-f96974190b59");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"f9d75ef1-a679-b057-b0e8-f96974190b59");
INSERT INTO DIM_GE
	VALUES (2064.000000,
	1568.000000,
	"f9d75ef1-a679-b057-b0e8-f96974190b59",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f9d75ef1-a679-b057-b0e8-f96974190b59",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("ca0f5a78-a999-df17-56d6-4783717d8662",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	1,
	"a1102055-ed45-4184-c449-a339dcb295b0",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	"edb4e2c6-e0a9-15b2-ab17-b566adbf3747",
	'ex',
	'',
	1);
INSERT INTO GD_MD
	VALUES ("ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	112,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	108,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex');
INSERT INTO GD_GE
	VALUES ("bf887835-7183-7771-23eb-da7622611e8f",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init');
INSERT INTO GD_SHP
	VALUES ("bf887835-7183-7771-23eb-da7622611e8f");
INSERT INTO GD_NCS
	VALUES ("bf887835-7183-7771-23eb-da7622611e8f");
INSERT INTO DIM_ND
	VALUES (224.000000,
	144.000000,
	"bf887835-7183-7771-23eb-da7622611e8f");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1216.000000,
	"bf887835-7183-7771-23eb-da7622611e8f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bf887835-7183-7771-23eb-da7622611e8f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("1bbf499e-d365-b399-4bfe-639e2752bf6f",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test');
INSERT INTO GD_SHP
	VALUES ("1bbf499e-d365-b399-4bfe-639e2752bf6f");
INSERT INTO GD_NCS
	VALUES ("1bbf499e-d365-b399-4bfe-639e2752bf6f");
INSERT INTO DIM_ND
	VALUES (240.000000,
	464.000000,
	"1bbf499e-d365-b399-4bfe-639e2752bf6f");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1392.000000,
	"1bbf499e-d365-b399-4bfe-639e2752bf6f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1bbf499e-d365-b399-4bfe-639e2752bf6f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("18dfbdb4-e648-6e14-a468-46c9c1622429",
	1760.000000,
	1856.000000,
	"1bbf499e-d365-b399-4bfe-639e2752bf6f");
INSERT INTO DIM_CON
	VALUES ("78f8057a-4cd2-88dd-a29d-5731216bdc63",
	1888.000000,
	1440.000000,
	"1bbf499e-d365-b399-4bfe-639e2752bf6f");
INSERT INTO DIM_CON
	VALUES ("077f242a-1c87-c229-0f12-590f1393846b",
	1888.000000,
	1584.000000,
	"1bbf499e-d365-b399-4bfe-639e2752bf6f");
INSERT INTO DIM_CON
	VALUES ("c41ee70a-2172-e12d-397c-41497909ef1b",
	1888.000000,
	1728.000000,
	"1bbf499e-d365-b399-4bfe-639e2752bf6f");
INSERT INTO DIM_CON
	VALUES ("08420ad0-a5e5-0c8d-7e99-1d08b1010fe0",
	1888.000000,
	1472.000000,
	"1bbf499e-d365-b399-4bfe-639e2752bf6f");
INSERT INTO DIM_CON
	VALUES ("e3e3ec7d-c857-8e49-492e-66e08b485524",
	1856.000000,
	1856.000000,
	"1bbf499e-d365-b399-4bfe-639e2752bf6f");
INSERT INTO GD_GE
	VALUES ("c0d405a9-92d5-5daa-3f92-9e34d4e75c7f",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::No Instances');
INSERT INTO GD_SHP
	VALUES ("c0d405a9-92d5-5daa-3f92-9e34d4e75c7f");
INSERT INTO GD_NCS
	VALUES ("c0d405a9-92d5-5daa-3f92-9e34d4e75c7f");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"c0d405a9-92d5-5daa-3f92-9e34d4e75c7f");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1392.000000,
	"c0d405a9-92d5-5daa-3f92-9e34d4e75c7f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c0d405a9-92d5-5daa-3f92-9e34d4e75c7f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("6b623577-b93c-8b9d-3635-06ba0aef8b0b",
	2112.000000,
	1440.000000,
	"c0d405a9-92d5-5daa-3f92-9e34d4e75c7f");
INSERT INTO DIM_CON
	VALUES ("cc867255-765e-d032-17ab-281080f44805",
	2112.000000,
	1472.000000,
	"c0d405a9-92d5-5daa-3f92-9e34d4e75c7f");
INSERT INTO GD_GE
	VALUES ("4afe35cd-fe9e-cc17-1cb4-10c0817de483",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::One Instance');
INSERT INTO GD_SHP
	VALUES ("4afe35cd-fe9e-cc17-1cb4-10c0817de483");
INSERT INTO GD_NCS
	VALUES ("4afe35cd-fe9e-cc17-1cb4-10c0817de483");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"4afe35cd-fe9e-cc17-1cb4-10c0817de483");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1520.000000,
	"4afe35cd-fe9e-cc17-1cb4-10c0817de483",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4afe35cd-fe9e-cc17-1cb4-10c0817de483",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("902f1673-d309-8b24-f730-684e2ea1533f",
	2112.000000,
	1584.000000,
	"4afe35cd-fe9e-cc17-1cb4-10c0817de483");
INSERT INTO GD_GE
	VALUES ("6e6b7a1f-447a-2bcd-6ac3-6b20207607c5",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"1e6c89ff-f941-7c51-013e-1dc86807a023",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Many Instances');
INSERT INTO GD_SHP
	VALUES ("6e6b7a1f-447a-2bcd-6ac3-6b20207607c5");
INSERT INTO GD_NCS
	VALUES ("6e6b7a1f-447a-2bcd-6ac3-6b20207607c5");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"6e6b7a1f-447a-2bcd-6ac3-6b20207607c5");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1664.000000,
	"6e6b7a1f-447a-2bcd-6ac3-6b20207607c5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6e6b7a1f-447a-2bcd-6ac3-6b20207607c5",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("a6ec277c-92b5-4b72-133b-0072c56d4be7",
	2112.000000,
	1728.000000,
	"6e6b7a1f-447a-2bcd-6ac3-6b20207607c5");
INSERT INTO GD_GE
	VALUES ("fb32646b-24b4-f11b-03c6-fccea9b56702",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Any Object');
INSERT INTO GD_SHP
	VALUES ("fb32646b-24b4-f11b-03c6-fccea9b56702");
INSERT INTO GD_NCS
	VALUES ("fb32646b-24b4-f11b-03c6-fccea9b56702");
INSERT INTO DIM_ND
	VALUES (192.000000,
	160.000000,
	"fb32646b-24b4-f11b-03c6-fccea9b56702");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1216.000000,
	"fb32646b-24b4-f11b-03c6-fccea9b56702",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fb32646b-24b4-f11b-03c6-fccea9b56702",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("86aba38a-88e1-934e-bcf1-a0f8b388a638",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test Object B');
INSERT INTO GD_SHP
	VALUES ("86aba38a-88e1-934e-bcf1-a0f8b388a638");
INSERT INTO GD_NCS
	VALUES ("86aba38a-88e1-934e-bcf1-a0f8b388a638");
INSERT INTO DIM_ND
	VALUES (272.000000,
	368.000000,
	"86aba38a-88e1-934e-bcf1-a0f8b388a638");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1952.000000,
	"86aba38a-88e1-934e-bcf1-a0f8b388a638",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("86aba38a-88e1-934e-bcf1-a0f8b388a638",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("d4fcfe0c-2f9e-993e-01c2-a279e7a45b29",
	1760.000000,
	1952.000000,
	"86aba38a-88e1-934e-bcf1-a0f8b388a638");
INSERT INTO DIM_CON
	VALUES ("f55e7f65-4e12-3aba-bd0c-ed137df8be5a",
	1712.000000,
	2320.000000,
	"86aba38a-88e1-934e-bcf1-a0f8b388a638");
INSERT INTO DIM_CON
	VALUES ("86ad5a62-b25d-c5d0-1a99-30bcee45672e",
	1856.000000,
	1952.000000,
	"86aba38a-88e1-934e-bcf1-a0f8b388a638");
INSERT INTO GD_GE
	VALUES ("8b8966c8-103c-23db-f3ec-9b6ee20c616a",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test Object C');
INSERT INTO GD_SHP
	VALUES ("8b8966c8-103c-23db-f3ec-9b6ee20c616a");
INSERT INTO GD_NCS
	VALUES ("8b8966c8-103c-23db-f3ec-9b6ee20c616a");
INSERT INTO DIM_ND
	VALUES (256.000000,
	192.000000,
	"8b8966c8-103c-23db-f3ec-9b6ee20c616a");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	2432.000000,
	"8b8966c8-103c-23db-f3ec-9b6ee20c616a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8b8966c8-103c-23db-f3ec-9b6ee20c616a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("4c1aa79f-0475-b402-6cff-215a4fea1340",
	1712.000000,
	2432.000000,
	"8b8966c8-103c-23db-f3ec-9b6ee20c616a");
INSERT INTO GD_GE
	VALUES ("4347b032-b03b-b7fc-8235-b9e1141f8693",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("4347b032-b03b-b7fc-8235-b9e1141f8693");
INSERT INTO GD_NCS
	VALUES ("4347b032-b03b-b7fc-8235-b9e1141f8693");
INSERT INTO DIM_ND
	VALUES (272.000000,
	160.000000,
	"4347b032-b03b-b7fc-8235-b9e1141f8693");
INSERT INTO DIM_GE
	VALUES (1344.000000,
	1536.000000,
	"4347b032-b03b-b7fc-8235-b9e1141f8693",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4347b032-b03b-b7fc-8235-b9e1141f8693",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c48c0b93-f622-4764-510f-c877495de02f",
	1392.000000,
	1696.000000,
	"4347b032-b03b-b7fc-8235-b9e1141f8693");
INSERT INTO DIM_CON
	VALUES ("299fa8d0-9bef-ce4f-28ce-d7a72d494f25",
	1552.000000,
	1696.000000,
	"4347b032-b03b-b7fc-8235-b9e1141f8693");
INSERT INTO GD_GE
	VALUES ("6a73f85b-b11a-afa8-3b67-ba918209b321",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Other Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("6a73f85b-b11a-afa8-3b67-ba918209b321");
INSERT INTO GD_NCS
	VALUES ("6a73f85b-b11a-afa8-3b67-ba918209b321");
INSERT INTO DIM_ND
	VALUES (256.000000,
	192.000000,
	"6a73f85b-b11a-afa8-3b67-ba918209b321");
INSERT INTO DIM_GE
	VALUES (1344.000000,
	1856.000000,
	"6a73f85b-b11a-afa8-3b67-ba918209b321",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6a73f85b-b11a-afa8-3b67-ba918209b321",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("0cd26bff-26d9-e286-d8b9-32d809b66a90",
	1392.000000,
	1856.000000,
	"6a73f85b-b11a-afa8-3b67-ba918209b321");
INSERT INTO DIM_CON
	VALUES ("10fa79e1-1295-1174-be97-5cfc8bad1d3b",
	1552.000000,
	1856.000000,
	"6a73f85b-b11a-afa8-3b67-ba918209b321");
INSERT INTO DIM_CON
	VALUES ("8654d0f8-5419-6ce0-5b9f-f2c2405901f9",
	1456.000000,
	2048.000000,
	"6a73f85b-b11a-afa8-3b67-ba918209b321");
INSERT INTO GD_GE
	VALUES ("77546f1c-0d3d-0c1f-7041-bb7e75eddf01",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Third Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("77546f1c-0d3d-0c1f-7041-bb7e75eddf01");
INSERT INTO GD_NCS
	VALUES ("77546f1c-0d3d-0c1f-7041-bb7e75eddf01");
INSERT INTO DIM_ND
	VALUES (240.000000,
	160.000000,
	"77546f1c-0d3d-0c1f-7041-bb7e75eddf01");
INSERT INTO DIM_GE
	VALUES (1360.000000,
	2160.000000,
	"77546f1c-0d3d-0c1f-7041-bb7e75eddf01",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("77546f1c-0d3d-0c1f-7041-bb7e75eddf01",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("28d03cf7-81ba-d216-1f55-555fe4865a70",
	1456.000000,
	2160.000000,
	"77546f1c-0d3d-0c1f-7041-bb7e75eddf01");
INSERT INTO GD_GE
	VALUES ("36882b00-052c-5316-229b-459327949eaa",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test');
INSERT INTO GD_SHP
	VALUES ("36882b00-052c-5316-229b-459327949eaa");
INSERT INTO GD_NCS
	VALUES ("36882b00-052c-5316-229b-459327949eaa");
INSERT INTO DIM_ND
	VALUES (304.000000,
	160.000000,
	"36882b00-052c-5316-229b-459327949eaa");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1536.000000,
	"36882b00-052c-5316-229b-459327949eaa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("36882b00-052c-5316-229b-459327949eaa",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("8ecb79d6-12df-5a9b-929d-95c532692d30",
	1024.000000,
	1696.000000,
	"36882b00-052c-5316-229b-459327949eaa");
INSERT INTO DIM_CON
	VALUES ("19bafc69-6994-2ea0-50aa-48be53089d89",
	1200.000000,
	1696.000000,
	"36882b00-052c-5316-229b-459327949eaa");
INSERT INTO GD_GE
	VALUES ("f2e2e4ae-e098-0efd-4d40-bfbd0fe5928c",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Other Boolean Test');
INSERT INTO GD_SHP
	VALUES ("f2e2e4ae-e098-0efd-4d40-bfbd0fe5928c");
INSERT INTO GD_NCS
	VALUES ("f2e2e4ae-e098-0efd-4d40-bfbd0fe5928c");
INSERT INTO DIM_ND
	VALUES (320.000000,
	208.000000,
	"f2e2e4ae-e098-0efd-4d40-bfbd0fe5928c");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1856.000000,
	"f2e2e4ae-e098-0efd-4d40-bfbd0fe5928c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f2e2e4ae-e098-0efd-4d40-bfbd0fe5928c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("3d28a1e4-1b5d-7c88-b08f-51a30129a2a7",
	1024.000000,
	1856.000000,
	"f2e2e4ae-e098-0efd-4d40-bfbd0fe5928c");
INSERT INTO DIM_CON
	VALUES ("a051dcfa-10f3-cbe6-6fd7-ad59b5c72fc9",
	1200.000000,
	1856.000000,
	"f2e2e4ae-e098-0efd-4d40-bfbd0fe5928c");
INSERT INTO DIM_CON
	VALUES ("b09a66ce-eb45-a894-51ac-f071378f173c",
	1104.000000,
	2064.000000,
	"f2e2e4ae-e098-0efd-4d40-bfbd0fe5928c");
INSERT INTO GD_GE
	VALUES ("0436aca9-027f-4679-c078-ffbea3cc2d4c",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Third Boolean Test');
INSERT INTO GD_SHP
	VALUES ("0436aca9-027f-4679-c078-ffbea3cc2d4c");
INSERT INTO GD_NCS
	VALUES ("0436aca9-027f-4679-c078-ffbea3cc2d4c");
INSERT INTO DIM_ND
	VALUES (288.000000,
	176.000000,
	"0436aca9-027f-4679-c078-ffbea3cc2d4c");
INSERT INTO DIM_GE
	VALUES (976.000000,
	2160.000000,
	"0436aca9-027f-4679-c078-ffbea3cc2d4c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0436aca9-027f-4679-c078-ffbea3cc2d4c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("1c769c44-00b3-c64b-62bd-76ed704cc578",
	1104.000000,
	2160.000000,
	"0436aca9-027f-4679-c078-ffbea3cc2d4c");
INSERT INTO GD_GE
	VALUES ("78c90a56-d40f-9af5-be1b-042783bf3ee6",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance');
INSERT INTO GD_SHP
	VALUES ("78c90a56-d40f-9af5-be1b-042783bf3ee6");
INSERT INTO GD_NCS
	VALUES ("78c90a56-d40f-9af5-be1b-042783bf3ee6");
INSERT INTO DIM_ND
	VALUES (256.000000,
	160.000000,
	"78c90a56-d40f-9af5-be1b-042783bf3ee6");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1312.000000,
	"78c90a56-d40f-9af5-be1b-042783bf3ee6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("78c90a56-d40f-9af5-be1b-042783bf3ee6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("c12bbd05-e673-ca0b-720e-e12924d62216",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R1');
INSERT INTO GD_CON
	VALUES ("c12bbd05-e673-ca0b-720e-e12924d62216",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("acda0729-68bf-59a1-a1ed-5f7d55637bb5",
	"c12bbd05-e673-ca0b-720e-e12924d62216",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"acda0729-68bf-59a1-a1ed-5f7d55637bb5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"acda0729-68bf-59a1-a1ed-5f7d55637bb5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("acda0729-68bf-59a1-a1ed-5f7d55637bb5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fee34ddd-b4bc-a7a5-16a2-02cd8e847efa",
	"c12bbd05-e673-ca0b-720e-e12924d62216",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"fee34ddd-b4bc-a7a5-16a2-02cd8e847efa");
INSERT INTO DIM_GE
	VALUES (1744.000000,
	1888.000000,
	"fee34ddd-b4bc-a7a5-16a2-02cd8e847efa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fee34ddd-b4bc-a7a5-16a2-02cd8e847efa",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1820ef2a-2f09-aca2-9639-4bbc050d513d",
	"c12bbd05-e673-ca0b-720e-e12924d62216",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1820ef2a-2f09-aca2-9639-4bbc050d513d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1820ef2a-2f09-aca2-9639-4bbc050d513d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1820ef2a-2f09-aca2-9639-4bbc050d513d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("52ecec6f-e889-6f04-cfde-bbe669629ff8",
	"c12bbd05-e673-ca0b-720e-e12924d62216",
	"00000000-0000-0000-0000-000000000000",
	"cba580c1-e3f2-4ca0-514e-4ef499301915",
	"2c25e762-4fa4-3b07-2335-3cd6b75d867a");
INSERT INTO DIM_WAY
	VALUES ("cba580c1-e3f2-4ca0-514e-4ef499301915",
	1760.000000,
	1952.000000,
	"c12bbd05-e673-ca0b-720e-e12924d62216",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("2c25e762-4fa4-3b07-2335-3cd6b75d867a",
	1760.000000,
	1856.000000,
	"c12bbd05-e673-ca0b-720e-e12924d62216",
	"00000000-0000-0000-0000-000000000000",
	"cba580c1-e3f2-4ca0-514e-4ef499301915");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c12bbd05-e673-ca0b-720e-e12924d62216",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c12bbd05-e673-ca0b-720e-e12924d62216",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("d4fcfe0c-2f9e-993e-01c2-a279e7a45b29",
	"18dfbdb4-e648-6e14-a468-46c9c1622429",
	"c12bbd05-e673-ca0b-720e-e12924d62216");
INSERT INTO GD_GE
	VALUES ("16baac01-b9a9-b188-0840-fe139b2dabea",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"bc4d8a5f-8892-bff5-cf51-68bad811491a",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R2');
INSERT INTO GD_CON
	VALUES ("16baac01-b9a9-b188-0840-fe139b2dabea",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1334fdc4-2bcf-4255-edbc-ead0d95511f4",
	"16baac01-b9a9-b188-0840-fe139b2dabea",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1334fdc4-2bcf-4255-edbc-ead0d95511f4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1334fdc4-2bcf-4255-edbc-ead0d95511f4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1334fdc4-2bcf-4255-edbc-ead0d95511f4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("48989b07-e312-8a3d-fb65-f1316741b003",
	"16baac01-b9a9-b188-0840-fe139b2dabea",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"48989b07-e312-8a3d-fb65-f1316741b003");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1408.000000,
	"48989b07-e312-8a3d-fb65-f1316741b003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("48989b07-e312-8a3d-fb65-f1316741b003",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0c9f6bd9-b6bb-8769-2368-8ec5bebb3b35",
	"16baac01-b9a9-b188-0840-fe139b2dabea",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0c9f6bd9-b6bb-8769-2368-8ec5bebb3b35");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0c9f6bd9-b6bb-8769-2368-8ec5bebb3b35",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0c9f6bd9-b6bb-8769-2368-8ec5bebb3b35",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2cfbdbdb-372b-f364-ed71-fd5521b737ac",
	"16baac01-b9a9-b188-0840-fe139b2dabea",
	"00000000-0000-0000-0000-000000000000",
	"363d915b-51e7-ffbb-0b06-b55017b5efe9",
	"505b1cb3-60ec-ef31-6192-c13e93dccbd2");
INSERT INTO DIM_WAY
	VALUES ("363d915b-51e7-ffbb-0b06-b55017b5efe9",
	1888.000000,
	1440.000000,
	"16baac01-b9a9-b188-0840-fe139b2dabea",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("505b1cb3-60ec-ef31-6192-c13e93dccbd2",
	2112.000000,
	1440.000000,
	"16baac01-b9a9-b188-0840-fe139b2dabea",
	"00000000-0000-0000-0000-000000000000",
	"363d915b-51e7-ffbb-0b06-b55017b5efe9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"16baac01-b9a9-b188-0840-fe139b2dabea",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("16baac01-b9a9-b188-0840-fe139b2dabea",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("78f8057a-4cd2-88dd-a29d-5731216bdc63",
	"6b623577-b93c-8b9d-3635-06ba0aef8b0b",
	"16baac01-b9a9-b188-0840-fe139b2dabea");
INSERT INTO GD_GE
	VALUES ("caff657a-c277-a466-a42c-bbd63b1f2989",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"91b9bb3d-87c1-e36f-7cac-ec4969f32864",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R3');
INSERT INTO GD_CON
	VALUES ("caff657a-c277-a466-a42c-bbd63b1f2989",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("45848147-606c-7bd1-c838-297f0b415ff3",
	"caff657a-c277-a466-a42c-bbd63b1f2989",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"45848147-606c-7bd1-c838-297f0b415ff3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"45848147-606c-7bd1-c838-297f0b415ff3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("45848147-606c-7bd1-c838-297f0b415ff3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6333bf48-6a57-cbd4-d8f5-2ab0d65de66d",
	"caff657a-c277-a466-a42c-bbd63b1f2989",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"6333bf48-6a57-cbd4-d8f5-2ab0d65de66d");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1552.000000,
	"6333bf48-6a57-cbd4-d8f5-2ab0d65de66d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6333bf48-6a57-cbd4-d8f5-2ab0d65de66d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("78b6ba42-addc-1d15-a19d-9afc4bc9a88d",
	"caff657a-c277-a466-a42c-bbd63b1f2989",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"78b6ba42-addc-1d15-a19d-9afc4bc9a88d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"78b6ba42-addc-1d15-a19d-9afc4bc9a88d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("78b6ba42-addc-1d15-a19d-9afc4bc9a88d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("d24ff522-140a-7e51-162e-d417afd5f26f",
	"caff657a-c277-a466-a42c-bbd63b1f2989",
	"00000000-0000-0000-0000-000000000000",
	"1b97a54a-4943-a171-f341-e43a6e30e029",
	"d2ca61bf-07a2-8b4b-904c-c22896e30cba");
INSERT INTO DIM_WAY
	VALUES ("1b97a54a-4943-a171-f341-e43a6e30e029",
	1888.000000,
	1584.000000,
	"caff657a-c277-a466-a42c-bbd63b1f2989",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("d2ca61bf-07a2-8b4b-904c-c22896e30cba",
	2112.000000,
	1584.000000,
	"caff657a-c277-a466-a42c-bbd63b1f2989",
	"00000000-0000-0000-0000-000000000000",
	"1b97a54a-4943-a171-f341-e43a6e30e029");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"caff657a-c277-a466-a42c-bbd63b1f2989",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("caff657a-c277-a466-a42c-bbd63b1f2989",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("077f242a-1c87-c229-0f12-590f1393846b",
	"902f1673-d309-8b24-f730-684e2ea1533f",
	"caff657a-c277-a466-a42c-bbd63b1f2989");
INSERT INTO GD_GE
	VALUES ("1480372d-64d4-d586-de77-22ab0db9551b",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"b79a8723-0d3d-ea2b-a0b5-347e8ec5518e",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R4');
INSERT INTO GD_CON
	VALUES ("1480372d-64d4-d586-de77-22ab0db9551b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("dbe758c3-655e-d2ff-99e6-a652ab3909f6",
	"1480372d-64d4-d586-de77-22ab0db9551b",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"dbe758c3-655e-d2ff-99e6-a652ab3909f6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"dbe758c3-655e-d2ff-99e6-a652ab3909f6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dbe758c3-655e-d2ff-99e6-a652ab3909f6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e98fe3e0-5c4b-b704-932c-5f94592e6eab",
	"1480372d-64d4-d586-de77-22ab0db9551b",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"e98fe3e0-5c4b-b704-932c-5f94592e6eab");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1696.000000,
	"e98fe3e0-5c4b-b704-932c-5f94592e6eab",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e98fe3e0-5c4b-b704-932c-5f94592e6eab",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("70410c38-f5e5-b107-83fd-9f7525d51e40",
	"1480372d-64d4-d586-de77-22ab0db9551b",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"70410c38-f5e5-b107-83fd-9f7525d51e40");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"70410c38-f5e5-b107-83fd-9f7525d51e40",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("70410c38-f5e5-b107-83fd-9f7525d51e40",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("f6ffad59-311d-c3f2-e57c-9e94537c16cd",
	"1480372d-64d4-d586-de77-22ab0db9551b",
	"00000000-0000-0000-0000-000000000000",
	"fc3b13f7-7d9e-1594-1ae8-888825b67729",
	"32e8ad51-3c4c-d469-da09-00137d431390");
INSERT INTO DIM_WAY
	VALUES ("fc3b13f7-7d9e-1594-1ae8-888825b67729",
	1888.000000,
	1728.000000,
	"1480372d-64d4-d586-de77-22ab0db9551b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("32e8ad51-3c4c-d469-da09-00137d431390",
	2112.000000,
	1728.000000,
	"1480372d-64d4-d586-de77-22ab0db9551b",
	"00000000-0000-0000-0000-000000000000",
	"fc3b13f7-7d9e-1594-1ae8-888825b67729");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1480372d-64d4-d586-de77-22ab0db9551b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1480372d-64d4-d586-de77-22ab0db9551b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("c41ee70a-2172-e12d-397c-41497909ef1b",
	"a6ec277c-92b5-4b72-133b-0072c56d4be7",
	"1480372d-64d4-d586-de77-22ab0db9551b");
INSERT INTO GD_GE
	VALUES ("3e7ff521-d769-eea9-03da-35d59bd71f75",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"2a28f481-70d3-e76a-440c-6738e62430b6",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R5');
INSERT INTO GD_CON
	VALUES ("3e7ff521-d769-eea9-03da-35d59bd71f75",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7023c7f9-9c42-b538-4052-d6854fb3e953",
	"3e7ff521-d769-eea9-03da-35d59bd71f75",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7023c7f9-9c42-b538-4052-d6854fb3e953");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7023c7f9-9c42-b538-4052-d6854fb3e953",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7023c7f9-9c42-b538-4052-d6854fb3e953",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("efe1a904-1fd3-7f33-a6ab-c66874ce95c3",
	"3e7ff521-d769-eea9-03da-35d59bd71f75",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"efe1a904-1fd3-7f33-a6ab-c66874ce95c3");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1440.000000,
	"efe1a904-1fd3-7f33-a6ab-c66874ce95c3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("efe1a904-1fd3-7f33-a6ab-c66874ce95c3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("68b7c351-c6cf-0ab2-129a-1a88a26612c2",
	"3e7ff521-d769-eea9-03da-35d59bd71f75",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"68b7c351-c6cf-0ab2-129a-1a88a26612c2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"68b7c351-c6cf-0ab2-129a-1a88a26612c2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("68b7c351-c6cf-0ab2-129a-1a88a26612c2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("36f86b69-60c1-49db-3425-7127783c9951",
	"3e7ff521-d769-eea9-03da-35d59bd71f75",
	"00000000-0000-0000-0000-000000000000",
	"c00c2d89-33e0-b8b4-7ddc-21a55850e619",
	"1b51832d-e015-3b2e-273e-bdd453881ec9");
INSERT INTO DIM_WAY
	VALUES ("c00c2d89-33e0-b8b4-7ddc-21a55850e619",
	1888.000000,
	1472.000000,
	"3e7ff521-d769-eea9-03da-35d59bd71f75",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("1b51832d-e015-3b2e-273e-bdd453881ec9",
	2112.000000,
	1472.000000,
	"3e7ff521-d769-eea9-03da-35d59bd71f75",
	"00000000-0000-0000-0000-000000000000",
	"c00c2d89-33e0-b8b4-7ddc-21a55850e619");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3e7ff521-d769-eea9-03da-35d59bd71f75",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3e7ff521-d769-eea9-03da-35d59bd71f75",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("08420ad0-a5e5-0c8d-7e99-1d08b1010fe0",
	"cc867255-765e-d032-17ab-281080f44805",
	"3e7ff521-d769-eea9-03da-35d59bd71f75");
INSERT INTO GD_GE
	VALUES ("bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R6');
INSERT INTO GD_CON
	VALUES ("bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("eb7d1c7c-5e0f-028f-6c02-2d0354c8fbe8",
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"eb7d1c7c-5e0f-028f-6c02-2d0354c8fbe8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"eb7d1c7c-5e0f-028f-6c02-2d0354c8fbe8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("eb7d1c7c-5e0f-028f-6c02-2d0354c8fbe8",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ce02539e-2300-4897-ee1e-599dc1c3e904",
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"ce02539e-2300-4897-ee1e-599dc1c3e904");
INSERT INTO DIM_GE
	VALUES (1696.000000,
	2344.000000,
	"ce02539e-2300-4897-ee1e-599dc1c3e904",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ce02539e-2300-4897-ee1e-599dc1c3e904",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c96eea7e-d944-e89f-048e-39aaab310af2",
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c96eea7e-d944-e89f-048e-39aaab310af2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c96eea7e-d944-e89f-048e-39aaab310af2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c96eea7e-d944-e89f-048e-39aaab310af2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("862ac7a4-6866-72bb-a55d-6023755306d2",
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	"00000000-0000-0000-0000-000000000000",
	"484ce62d-3782-bbfb-9008-846cda725c05",
	"f9af3fcf-b8b2-574c-a1cd-be96f086cb09");
INSERT INTO DIM_WAY
	VALUES ("484ce62d-3782-bbfb-9008-846cda725c05",
	1712.000000,
	2320.000000,
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("f9af3fcf-b8b2-574c-a1cd-be96f086cb09",
	1712.000000,
	2432.000000,
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	"00000000-0000-0000-0000-000000000000",
	"484ce62d-3782-bbfb-9008-846cda725c05");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("f55e7f65-4e12-3aba-bd0c-ed137df8be5a",
	"4c1aa79f-0475-b402-6cff-215a4fea1340",
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f");
INSERT INTO GD_GE
	VALUES ("3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"04fd3f21-66da-682e-ca18-9142f16d3b3b",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R8');
INSERT INTO GD_CON
	VALUES ("3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("617b2964-58da-8fa2-7fc1-753ed7b9b282",
	"3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"617b2964-58da-8fa2-7fc1-753ed7b9b282");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"617b2964-58da-8fa2-7fc1-753ed7b9b282",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("617b2964-58da-8fa2-7fc1-753ed7b9b282",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c6e782c1-e312-9998-114c-dfa553868924",
	"3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"c6e782c1-e312-9998-114c-dfa553868924");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1888.000000,
	"c6e782c1-e312-9998-114c-dfa553868924",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c6e782c1-e312-9998-114c-dfa553868924",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b8641910-1e7e-4db8-0834-614393304208",
	"3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b8641910-1e7e-4db8-0834-614393304208");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b8641910-1e7e-4db8-0834-614393304208",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b8641910-1e7e-4db8-0834-614393304208",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("fa23a5c0-398a-ba96-7fdb-a83bd639342c",
	"3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	"00000000-0000-0000-0000-000000000000",
	"17bf0551-9c63-b61a-379c-9dfa6077b75d",
	"75caa8b6-477d-665c-4a74-660d9e28fc64");
INSERT INTO DIM_WAY
	VALUES ("17bf0551-9c63-b61a-379c-9dfa6077b75d",
	1856.000000,
	1856.000000,
	"3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("75caa8b6-477d-665c-4a74-660d9e28fc64",
	1856.000000,
	1952.000000,
	"3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	"00000000-0000-0000-0000-000000000000",
	"17bf0551-9c63-b61a-379c-9dfa6077b75d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e3e3ec7d-c857-8e49-492e-66e08b485524",
	"86ad5a62-b25d-c5d0-1a99-30bcee45672e",
	"3392bf2c-717e-c636-ba6c-d6d8d1ca0161");
INSERT INTO GD_GE
	VALUES ("3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"66b0822f-3b1c-2ccc-e633-131ae1933aec",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R9');
INSERT INTO GD_CON
	VALUES ("3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8e998346-73f6-2123-12bc-156382656fe7",
	"3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8e998346-73f6-2123-12bc-156382656fe7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8e998346-73f6-2123-12bc-156382656fe7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8e998346-73f6-2123-12bc-156382656fe7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cf687e6a-5c77-8527-bf92-0d8115c7941b",
	"3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	3,
	14.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"cf687e6a-5c77-8527-bf92-0d8115c7941b");
INSERT INTO DIM_GE
	VALUES (1390.000000,
	1749.000000,
	"cf687e6a-5c77-8527-bf92-0d8115c7941b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cf687e6a-5c77-8527-bf92-0d8115c7941b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f19798a9-2d31-ffb2-fd7a-6183bc0e92e0",
	"3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f19798a9-2d31-ffb2-fd7a-6183bc0e92e0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f19798a9-2d31-ffb2-fd7a-6183bc0e92e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f19798a9-2d31-ffb2-fd7a-6183bc0e92e0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("6bb25b5a-4a35-3758-0855-be042161a28e",
	"3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	"00000000-0000-0000-0000-000000000000",
	"c36c00a5-a9bb-0b8e-bf2f-8a593ca83e5f",
	"6dfc83dd-5de0-037c-b889-0a0837a23c15");
INSERT INTO DIM_WAY
	VALUES ("c36c00a5-a9bb-0b8e-bf2f-8a593ca83e5f",
	1392.000000,
	1696.000000,
	"3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("6dfc83dd-5de0-037c-b889-0a0837a23c15",
	1392.000000,
	1856.000000,
	"3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	"00000000-0000-0000-0000-000000000000",
	"c36c00a5-a9bb-0b8e-bf2f-8a593ca83e5f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("c48c0b93-f622-4764-510f-c877495de02f",
	"0cd26bff-26d9-e286-d8b9-32d809b66a90",
	"3a5deccb-e89d-2892-b7cc-a4adb8ea7db0");
INSERT INTO GD_GE
	VALUES ("8a1d9db5-ead7-833e-755b-4a7a7a72054f",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"b7f9c61a-a006-11e4-e21c-27ddfde92e61",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R10');
INSERT INTO GD_CON
	VALUES ("8a1d9db5-ead7-833e-755b-4a7a7a72054f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4346965b-d91f-0e45-c402-408024ad6c13",
	"8a1d9db5-ead7-833e-755b-4a7a7a72054f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4346965b-d91f-0e45-c402-408024ad6c13");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4346965b-d91f-0e45-c402-408024ad6c13",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4346965b-d91f-0e45-c402-408024ad6c13",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d011bf31-109f-3f96-8340-ce0a48912908",
	"8a1d9db5-ead7-833e-755b-4a7a7a72054f",
	3,
	16.000000,
	3.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"d011bf31-109f-3f96-8340-ce0a48912908");
INSERT INTO DIM_GE
	VALUES (1552.000000,
	1756.000000,
	"d011bf31-109f-3f96-8340-ce0a48912908",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d011bf31-109f-3f96-8340-ce0a48912908",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b18798e4-47dc-9860-d810-a166d66f9bd3",
	"8a1d9db5-ead7-833e-755b-4a7a7a72054f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b18798e4-47dc-9860-d810-a166d66f9bd3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b18798e4-47dc-9860-d810-a166d66f9bd3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b18798e4-47dc-9860-d810-a166d66f9bd3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("613af8ef-0db0-fdc7-5117-c6ceafe47ee2",
	"8a1d9db5-ead7-833e-755b-4a7a7a72054f",
	"00000000-0000-0000-0000-000000000000",
	"23dfc4ec-1ef8-6ea5-b963-bc3b71ce71c8",
	"fac03486-07ad-43ab-a6b1-7468b2c491ad");
INSERT INTO DIM_WAY
	VALUES ("23dfc4ec-1ef8-6ea5-b963-bc3b71ce71c8",
	1552.000000,
	1696.000000,
	"8a1d9db5-ead7-833e-755b-4a7a7a72054f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("fac03486-07ad-43ab-a6b1-7468b2c491ad",
	1552.000000,
	1856.000000,
	"8a1d9db5-ead7-833e-755b-4a7a7a72054f",
	"00000000-0000-0000-0000-000000000000",
	"23dfc4ec-1ef8-6ea5-b963-bc3b71ce71c8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8a1d9db5-ead7-833e-755b-4a7a7a72054f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8a1d9db5-ead7-833e-755b-4a7a7a72054f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("299fa8d0-9bef-ce4f-28ce-d7a72d494f25",
	"10fa79e1-1295-1174-be97-5cfc8bad1d3b",
	"8a1d9db5-ead7-833e-755b-4a7a7a72054f");
INSERT INTO GD_GE
	VALUES ("be99c961-b3d4-00d5-42cb-00f6a4c4e305",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"6de8269d-227c-c695-f4ee-f9d275b3bafc",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R11');
INSERT INTO GD_CON
	VALUES ("be99c961-b3d4-00d5-42cb-00f6a4c4e305",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d6b80e3e-52ef-48d0-b43d-7fa13465fe92",
	"be99c961-b3d4-00d5-42cb-00f6a4c4e305",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d6b80e3e-52ef-48d0-b43d-7fa13465fe92");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d6b80e3e-52ef-48d0-b43d-7fa13465fe92",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d6b80e3e-52ef-48d0-b43d-7fa13465fe92",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("af501899-2eae-461d-589f-082c09364923",
	"be99c961-b3d4-00d5-42cb-00f6a4c4e305",
	3,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"af501899-2eae-461d-589f-082c09364923");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"af501899-2eae-461d-589f-082c09364923",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("af501899-2eae-461d-589f-082c09364923",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("17dee590-c5a4-590f-8a74-4ab8357d7440",
	"be99c961-b3d4-00d5-42cb-00f6a4c4e305",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"17dee590-c5a4-590f-8a74-4ab8357d7440");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"17dee590-c5a4-590f-8a74-4ab8357d7440",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("17dee590-c5a4-590f-8a74-4ab8357d7440",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("3eaca266-b223-6fa7-ee68-086858136fb5",
	"be99c961-b3d4-00d5-42cb-00f6a4c4e305",
	"00000000-0000-0000-0000-000000000000",
	"107f16e3-4ae4-086b-225b-4c2d0b9e746d",
	"7d85e0d3-2fcf-de14-ce21-7498565b9c9e");
INSERT INTO DIM_WAY
	VALUES ("107f16e3-4ae4-086b-225b-4c2d0b9e746d",
	1456.000000,
	2048.000000,
	"be99c961-b3d4-00d5-42cb-00f6a4c4e305",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("7d85e0d3-2fcf-de14-ce21-7498565b9c9e",
	1456.000000,
	2160.000000,
	"be99c961-b3d4-00d5-42cb-00f6a4c4e305",
	"00000000-0000-0000-0000-000000000000",
	"107f16e3-4ae4-086b-225b-4c2d0b9e746d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"be99c961-b3d4-00d5-42cb-00f6a4c4e305",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("be99c961-b3d4-00d5-42cb-00f6a4c4e305",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("8654d0f8-5419-6ce0-5b9f-f2c2405901f9",
	"28d03cf7-81ba-d216-1f55-555fe4865a70",
	"be99c961-b3d4-00d5-42cb-00f6a4c4e305");
INSERT INTO GD_GE
	VALUES ("d3e56e01-9b59-dafc-a5cd-c40d0e539bbe",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"125a0c87-0542-7326-b999-f318842c61d7",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R12');
INSERT INTO GD_CON
	VALUES ("d3e56e01-9b59-dafc-a5cd-c40d0e539bbe",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f0391faf-e3e6-ecbd-d65c-c5d405f00d3f",
	"d3e56e01-9b59-dafc-a5cd-c40d0e539bbe",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f0391faf-e3e6-ecbd-d65c-c5d405f00d3f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f0391faf-e3e6-ecbd-d65c-c5d405f00d3f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f0391faf-e3e6-ecbd-d65c-c5d405f00d3f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("03319ae2-342d-b976-670b-5da01bad18a7",
	"d3e56e01-9b59-dafc-a5cd-c40d0e539bbe",
	3,
	18.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"03319ae2-342d-b976-670b-5da01bad18a7");
INSERT INTO DIM_GE
	VALUES (1026.000000,
	1761.000000,
	"03319ae2-342d-b976-670b-5da01bad18a7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("03319ae2-342d-b976-670b-5da01bad18a7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("dbd6a55f-1997-3f16-4c57-1eba1d21bd4f",
	"d3e56e01-9b59-dafc-a5cd-c40d0e539bbe",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"dbd6a55f-1997-3f16-4c57-1eba1d21bd4f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"dbd6a55f-1997-3f16-4c57-1eba1d21bd4f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dbd6a55f-1997-3f16-4c57-1eba1d21bd4f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("3c239bbb-8e2a-ed04-b184-cea89a1955f1",
	"d3e56e01-9b59-dafc-a5cd-c40d0e539bbe",
	"00000000-0000-0000-0000-000000000000",
	"21f1423a-4579-c4d3-964b-f2b5687a90e6",
	"bed07d06-618b-0255-62ec-f70b4a70be1a");
INSERT INTO DIM_WAY
	VALUES ("21f1423a-4579-c4d3-964b-f2b5687a90e6",
	1024.000000,
	1696.000000,
	"d3e56e01-9b59-dafc-a5cd-c40d0e539bbe",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("bed07d06-618b-0255-62ec-f70b4a70be1a",
	1024.000000,
	1856.000000,
	"d3e56e01-9b59-dafc-a5cd-c40d0e539bbe",
	"00000000-0000-0000-0000-000000000000",
	"21f1423a-4579-c4d3-964b-f2b5687a90e6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d3e56e01-9b59-dafc-a5cd-c40d0e539bbe",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d3e56e01-9b59-dafc-a5cd-c40d0e539bbe",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("8ecb79d6-12df-5a9b-929d-95c532692d30",
	"3d28a1e4-1b5d-7c88-b08f-51a30129a2a7",
	"d3e56e01-9b59-dafc-a5cd-c40d0e539bbe");
INSERT INTO GD_GE
	VALUES ("9c9470f8-6c5f-cc27-b563-6d4226f5b389",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"6bdd685b-cf83-cfaf-0a6d-f4b80c10e29d",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R13');
INSERT INTO GD_CON
	VALUES ("9c9470f8-6c5f-cc27-b563-6d4226f5b389",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d820617d-429e-1c9d-505f-fac289ab0974",
	"9c9470f8-6c5f-cc27-b563-6d4226f5b389",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d820617d-429e-1c9d-505f-fac289ab0974");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d820617d-429e-1c9d-505f-fac289ab0974",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d820617d-429e-1c9d-505f-fac289ab0974",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("43bd1e34-320b-ef70-26c3-0b27e3dfa3ca",
	"9c9470f8-6c5f-cc27-b563-6d4226f5b389",
	3,
	10.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"43bd1e34-320b-ef70-26c3-0b27e3dfa3ca");
INSERT INTO DIM_GE
	VALUES (1194.000000,
	1760.000000,
	"43bd1e34-320b-ef70-26c3-0b27e3dfa3ca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("43bd1e34-320b-ef70-26c3-0b27e3dfa3ca",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3d08eaa4-506a-8cce-886b-c11eafc22683",
	"9c9470f8-6c5f-cc27-b563-6d4226f5b389",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3d08eaa4-506a-8cce-886b-c11eafc22683");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3d08eaa4-506a-8cce-886b-c11eafc22683",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3d08eaa4-506a-8cce-886b-c11eafc22683",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("b627aa8b-a0d0-42c2-6fda-dbb180ef24b9",
	"9c9470f8-6c5f-cc27-b563-6d4226f5b389",
	"00000000-0000-0000-0000-000000000000",
	"1a97d850-521b-9837-c293-38478fae3463",
	"2d7e2684-f145-932b-50f0-021ac63839f4");
INSERT INTO DIM_WAY
	VALUES ("1a97d850-521b-9837-c293-38478fae3463",
	1200.000000,
	1696.000000,
	"9c9470f8-6c5f-cc27-b563-6d4226f5b389",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("2d7e2684-f145-932b-50f0-021ac63839f4",
	1200.000000,
	1856.000000,
	"9c9470f8-6c5f-cc27-b563-6d4226f5b389",
	"00000000-0000-0000-0000-000000000000",
	"1a97d850-521b-9837-c293-38478fae3463");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9c9470f8-6c5f-cc27-b563-6d4226f5b389",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9c9470f8-6c5f-cc27-b563-6d4226f5b389",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("19bafc69-6994-2ea0-50aa-48be53089d89",
	"a051dcfa-10f3-cbe6-6fd7-ad59b5c72fc9",
	"9c9470f8-6c5f-cc27-b563-6d4226f5b389");
INSERT INTO GD_GE
	VALUES ("48125337-637e-3a04-d1e0-0a3c22e406ad",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"74e91883-d0d6-cd68-fd74-260cf0292fe0",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R14');
INSERT INTO GD_CON
	VALUES ("48125337-637e-3a04-d1e0-0a3c22e406ad",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3c7bfb56-2ba6-2a62-6926-923fa90a0278",
	"48125337-637e-3a04-d1e0-0a3c22e406ad",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3c7bfb56-2ba6-2a62-6926-923fa90a0278");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3c7bfb56-2ba6-2a62-6926-923fa90a0278",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3c7bfb56-2ba6-2a62-6926-923fa90a0278",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7c4556db-4039-e67e-b95e-57691c06f6ba",
	"48125337-637e-3a04-d1e0-0a3c22e406ad",
	3,
	21.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"7c4556db-4039-e67e-b95e-57691c06f6ba");
INSERT INTO DIM_GE
	VALUES (1109.000000,
	2098.000000,
	"7c4556db-4039-e67e-b95e-57691c06f6ba",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7c4556db-4039-e67e-b95e-57691c06f6ba",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b13a30e9-ed7e-8c63-7672-105d6eb83ec0",
	"48125337-637e-3a04-d1e0-0a3c22e406ad",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b13a30e9-ed7e-8c63-7672-105d6eb83ec0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b13a30e9-ed7e-8c63-7672-105d6eb83ec0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b13a30e9-ed7e-8c63-7672-105d6eb83ec0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("8d248dd2-bb7a-8e7c-0f70-0609b567ef99",
	"48125337-637e-3a04-d1e0-0a3c22e406ad",
	"00000000-0000-0000-0000-000000000000",
	"ad2e803a-730d-05f5-6093-886e970b7794",
	"1903b830-2058-cba0-8a8b-5e6fdcca915d");
INSERT INTO DIM_WAY
	VALUES ("ad2e803a-730d-05f5-6093-886e970b7794",
	1104.000000,
	2064.000000,
	"48125337-637e-3a04-d1e0-0a3c22e406ad",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("1903b830-2058-cba0-8a8b-5e6fdcca915d",
	1104.000000,
	2160.000000,
	"48125337-637e-3a04-d1e0-0a3c22e406ad",
	"00000000-0000-0000-0000-000000000000",
	"ad2e803a-730d-05f5-6093-886e970b7794");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"48125337-637e-3a04-d1e0-0a3c22e406ad",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("48125337-637e-3a04-d1e0-0a3c22e406ad",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b09a66ce-eb45-a894-51ac-f071378f173c",
	"1c769c44-00b3-c64b-62bd-76ed704cc578",
	"48125337-637e-3a04-d1e0-0a3c22e406ad");
INSERT INTO DIM_DIA
	VALUES ("ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	'',
	0.433884,
	707.000000,
	1216.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("6529e378-ed05-186d-687c-2136905dcbf9",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("6529e378-ed05-186d-687c-2136905dcbf9",
	'Any Object',
	8,
	'AO',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("2c4dfa33-317a-2057-4799-ca233db1e10a",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	'i_parm_ret_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'LOG::LogFailure(message:"Operation AO::i_parm_ret_i should not have been translated.");
return param.i;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TPARM
	VALUES ("92851ea0-e968-8852-3977-05c80e689712",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_NBATTR
	VALUES ("2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_BATTR
	VALUES ("2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ATTR
	VALUES ("2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	"00000000-0000-0000-0000-000000000000",
	'ao_id',
	'',
	'',
	'ao_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("76ace3b7-9333-cfa2-e7e7-3ca1a75c2ea9",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_BATTR
	VALUES ("76ace3b7-9333-cfa2-e7e7-3ca1a75c2ea9",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ATTR
	VALUES ("76ace3b7-9333-cfa2-e7e7-3ca1a75c2ea9",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	"2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	'b',
	'',
	'',
	'b',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("f3716951-41eb-0058-f792-b6bb11cd041a",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_BATTR
	VALUES ("f3716951-41eb-0058-f792-b6bb11cd041a",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ATTR
	VALUES ("f3716951-41eb-0058-f792-b6bb11cd041a",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	"76ace3b7-9333-cfa2-e7e7-3ca1a75c2ea9",
	'i',
	'',
	'',
	'i',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5731a408-b0d9-e43c-5a20-bcc9ce92a73e",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_BATTR
	VALUES ("5731a408-b0d9-e43c-5a20-bcc9ce92a73e",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ATTR
	VALUES ("5731a408-b0d9-e43c-5a20-bcc9ce92a73e",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	"f3716951-41eb-0058-f792-b6bb11cd041a",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("b13d524e-75cf-e2b2-d0a5-2c7ea47ea340",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_BATTR
	VALUES ("b13d524e-75cf-e2b2-d0a5-2c7ea47ea340",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ATTR
	VALUES ("b13d524e-75cf-e2b2-d0a5-2c7ea47ea340",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	"5731a408-b0d9-e43c-5a20-bcc9ce92a73e",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4cd6642b-7b1a-8cd2-f164-e7ab7d51d6f6",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_BATTR
	VALUES ("4cd6642b-7b1a-8cd2-f164-e7ab7d51d6f6",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ATTR
	VALUES ("4cd6642b-7b1a-8cd2-f164-e7ab7d51d6f6",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	"b13d524e-75cf-e2b2-d0a5-2c7ea47ea340",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_OIDA
	VALUES ("2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	0,
	'ao_id');
INSERT INTO O_ID
	VALUES (1,
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ID
	VALUES (2,
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO PE_PE
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	'Boolean Expression Test',
	15,
	'BET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("f64b8be7-7c94-1146-33c9-6b525c0b9014",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("f64b8be7-7c94-1146-33c9-6b525c0b9014",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("f64b8be7-7c94-1146-33c9-6b525c0b9014",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"f64b8be7-7c94-1146-33c9-6b525c0b9014",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_REF
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	0,
	"33987c18-574f-fa99-ec74-5e3ca6de81e5",
	"66b0822f-3b1c-2ccc-e633-131ae1933aec",
	"f6c268ca-e109-3988-725a-ea63b35be15c",
	"07c01707-9e75-8097-ee75-357c05543f5c",
	"40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"1abaa67a-6790-7d12-6bbd-6c896f90ecf0",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Other Boolean Expression Test',
	'bfalse',
	'R9');
INSERT INTO O_RATTR
	VALUES ("40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"33987c18-574f-fa99-ec74-5e3ca6de81e5",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"bc9dbdb4-2492-1090-5bc2-0d289b206342",
	'r9bfalse',
	'',
	'r9',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	0,
	"f0cf3dfb-53b5-3803-d3d0-c3d73daa7494",
	"66b0822f-3b1c-2ccc-e633-131ae1933aec",
	"f6c268ca-e109-3988-725a-ea63b35be15c",
	"07c01707-9e75-8097-ee75-357c05543f5c",
	"076f5dab-39e1-6926-b521-ba06f0c790f6",
	"894ef6cf-6024-ed13-cc94-85b694333c5b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Other Boolean Expression Test',
	'btrue',
	'R9');
INSERT INTO O_RATTR
	VALUES ("076f5dab-39e1-6926-b521-ba06f0c790f6",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"f0cf3dfb-53b5-3803-d3d0-c3d73daa7494",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("076f5dab-39e1-6926-b521-ba06f0c790f6",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"40bc5372-18e1-9d7a-9826-711ca7e3db47",
	'r9btrue',
	'',
	'r9',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("97cee472-2e50-7195-74b3-bb36d4da2a04",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("97cee472-2e50-7195-74b3-bb36d4da2a04",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("97cee472-2e50-7195-74b3-bb36d4da2a04",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"076f5dab-39e1-6926-b521-ba06f0c790f6",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_OIDA
	VALUES ("f64b8be7-7c94-1146-33c9-6b525c0b9014",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ID
	VALUES (2,
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO SM_ISM
	VALUES ("c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO SM_SM
	VALUES ("c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	'',
	5);
INSERT INTO SM_MOORE
	VALUES ("c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_EVTDI
	VALUES ("db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("77a1ce5f-9a4d-adb1-584b-030c67832708",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3");
INSERT INTO SM_EVTDI
	VALUES ("2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("d335290a-7204-0b63-db53-25d3f63fd8ea",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"7985e41c-606c-12dd-f296-171a2171df48",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35");
INSERT INTO SM_EVTDI
	VALUES ("44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"d335290a-7204-0b63-db53-25d3f63fd8ea");
INSERT INTO SM_EVTDI
	VALUES ("ce156462-1465-51f4-1a56-0e636e83effe",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"7985e41c-606c-12dd-f296-171a2171df48",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67");
INSERT INTO SM_LEVT
	VALUES ("2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start and test',
	0,
	'',
	'BET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Start or test',
	0,
	'',
	'BET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("7985e41c-606c-12dd-f296-171a2171df48",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("7985e41c-606c-12dd-f296-171a2171df48",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("7985e41c-606c-12dd-f296-171a2171df48",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Continue and test',
	0,
	'',
	'BET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Continue or test',
	0,
	'',
	'BET4',
	'');
INSERT INTO SM_STATE
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'And test 1a',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"171c28d1-9e02-36a8-58a4-0818b61cc903");
INSERT INTO SM_AH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_ACT
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	1,
	'LOG::LogInfo(message:"Starting and test") ;

//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    local existing
assign t1 = temp1 and temp1 ;
if ( t1 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t2 = temp1 and temp2 ;
if ( t2 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t3 = temp2 and temp1 ;
if ( t3 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t4 = temp2 and temp2 ;
if ( t4 == true )
  LOG::LogSuccess(message:" and local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( true )") ;
end if;
 
  // local existing    rcvd_evt
assign t5 = temp1 and rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 and rcvd_evt.ttrue ;
if ( t6 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t7 = temp2 and rcvd_evt.tfalse ;
if ( t7 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t8 = temp2 and rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 and false ;
if ( t9 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 and true ;
if ( t10 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t11 = temp2 and false ;
if ( t11 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t12 = temp2 and true ;
if ( t12 == true )
  LOG::LogSuccess(message:" and local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 and self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 and self.btrue ;
if ( t14 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t15 = temp2 and self.bfalse ;
if ( t15 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t16 = temp2 and self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" and local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 and self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 and self.r9btrue ;
if ( t18 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t19 = temp2 and self.r9bfalse ;
if ( t19 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = temp2 and self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of OBET;
assign t21 = temp1 and saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 and saf.btrue ;
if ( t22 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t23 = temp2 and saf.bfalse ;
if ( t23 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t24 = temp2 and saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of OBET;
for each smf in smfs
assign t25 = temp1 and smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 and smf.btrue ;
if ( t26 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t27 = temp2 and smf.bfalse ;
if ( t27 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t28 = temp2 and smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->OBET[R9];
assign t29 = temp1 and sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 and sor.btrue ;
if ( t30 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t31 = temp2 and sor.bfalse ;
if ( t31 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t32 = temp2 and sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->OBET[R10];
assign t33 = temp1 and sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 and sar.btrue ;
if ( t34 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t35 = temp2 and sar.bfalse ;
if ( t35 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t36 = temp2 and sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->OBET[R10];
for each smr in smrs
assign t37 = temp1 and smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 and smr.btrue ;
if ( t38 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t39 = temp2 and smr.bfalse ;
if ( t39 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t40 = temp2 and smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 and saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 and saf.r11btrue ;
if ( t42 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t43 = temp2 and saf.r11bfalse ;
if ( t43 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t44 = temp2 and saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 and smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 and smf.r11btrue ;
if ( t46 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t47 = temp2 and smf.r11bfalse ;
if ( t47 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t48 = temp2 and smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 and sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 and sor.r11btrue ;
if ( t50 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t51 = temp2 and sor.r11bfalse ;
if ( t51 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t52 = temp2 and sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 and sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 and sar.r11btrue ;
if ( t54 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t55 = temp2 and sar.r11bfalse ;
if ( t55 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t56 = temp2 and sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 and smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 and smr.r11btrue ;
if ( t58 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t59 = temp2 and smr.r11bfalse ;
if ( t59 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t60 = temp2 and smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse and temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue and temp1 ;
if ( t62 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t63 = rcvd_evt.tfalse and temp2 ;
if ( t63 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t64 = rcvd_evt.ttrue and temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse and rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue and rcvd_evt.tfalse ;
if ( t66 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t67 = rcvd_evt.tfalse and rcvd_evt.ttrue ;
if ( t67 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t68 = rcvd_evt.ttrue and rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse and false ;
if ( t69 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue and false ;
if ( t70 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t71 = rcvd_evt.tfalse and true ;
if ( t71 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t72 = rcvd_evt.ttrue and true ;
if ( t72 == true )
  LOG::LogSuccess(message:" and rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse and self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue and self.bfalse ;
if ( t74 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t75 = rcvd_evt.tfalse and self.btrue ;
if ( t75 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t76 = rcvd_evt.ttrue and self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse and self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue and self.r9bfalse ;
if ( t78 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t79 = rcvd_evt.tfalse and self.r9btrue ;
if ( t79 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t80 = rcvd_evt.ttrue and self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse and saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse and saf.btrue ;
if ( t82 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t83 = rcvd_evt.ttrue and saf.bfalse ;
if ( t83 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t84 = rcvd_evt.ttrue and saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse and smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse and smf.btrue ;
if ( t86 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t87 = rcvd_evt.ttrue and smf.bfalse ;
if ( t87 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t88 = rcvd_evt.ttrue and smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse and sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse and sor.btrue ;
if ( t90 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t91 = rcvd_evt.ttrue and sor.bfalse ;
if ( t91 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t92 = rcvd_evt.ttrue and sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse and sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse and sar.btrue ;
if ( t94 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t95 = rcvd_evt.ttrue and sar.bfalse ;
if ( t95 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t96 = rcvd_evt.ttrue and sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse and smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse and smr.btrue ;
if ( t98 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t99 = rcvd_evt.ttrue and smr.bfalse ;
if ( t99 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t100 = rcvd_evt.ttrue and smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse and saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse and saf.r11btrue ;
if ( t102 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t103 = rcvd_evt.ttrue and saf.r11bfalse ;
if ( t103 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t104 = rcvd_evt.ttrue and saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse and smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse and smf.r11btrue ;
if ( t106 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t107 = rcvd_evt.ttrue and smf.r11bfalse ;
if ( t107 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t108 = rcvd_evt.ttrue and smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse and sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse and sor.r11btrue ;
if ( t110 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t111 = rcvd_evt.ttrue and sor.r11bfalse ;
if ( t111 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t112 = rcvd_evt.ttrue and sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse and sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse and sar.r11btrue ;
if ( t114 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t115 = rcvd_evt.ttrue and sar.r11bfalse ;
if ( t115 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t116 = rcvd_evt.ttrue and sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse and smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse and smr.r11btrue ;
if ( t118 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t119 = rcvd_evt.ttrue and smr.r11bfalse ;
if ( t119 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t120 = rcvd_evt.ttrue and smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'And test 2',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49");
INSERT INTO SM_AH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_ACT
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	1,
	'//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse and temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue and temp1 ;
if ( t302 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t303 = saf.bfalse and temp2 ;
if ( t303 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t304 = saf.btrue and temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse and rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue and rcvd_evt.tfalse ;
if ( t306 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t307 = saf.bfalse and rcvd_evt.ttrue ;
if ( t307 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t308 = saf.btrue and rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse and false ;
if ( t309 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue and false ;
if ( t310 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t311 = saf.bfalse and true ;
if ( t311 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t312 = saf.btrue and true ;
if ( t312 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse and self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue and self.bfalse ;
if ( t314 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t315 = saf.bfalse and self.btrue ;
if ( t315 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t316 = saf.btrue and self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse and self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue and self.r9bfalse ;
if ( t318 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t319 = saf.bfalse and self.r9btrue ;
if ( t319 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t320 = saf.btrue and self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse and saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse and saf.btrue ;
if ( t322 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t323 = saf.btrue and saf.bfalse ;
if ( t323 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t324 = saf.btrue and saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse and smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse and smf.btrue ;
if ( t326 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t327 = saf.btrue and smf.bfalse ;
if ( t327 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t328 = saf.btrue and smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse and sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse and sor.btrue ;
if ( t330 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t331 = saf.btrue and sor.bfalse ;
if ( t331 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t332 = saf.btrue and sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse and sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse and sar.btrue ;
if ( t334 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t335 = saf.btrue and sar.bfalse ;
if ( t335 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t336 = saf.btrue and sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse and smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse and smr.btrue ;
if ( t338 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t339 = saf.btrue and smr.bfalse ;
if ( t339 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t340 = saf.btrue and smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse and saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse and saf.r11btrue ;
if ( t342 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t343 = saf.btrue and saf.r11bfalse ;
if ( t343 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t344 = saf.btrue and saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse and smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse and smf.r11btrue ;
if ( t346 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t347 = saf.btrue and smf.r11bfalse ;
if ( t347 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t348 = saf.btrue and smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse and sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse and sor.r11btrue ;
if ( t350 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t351 = saf.btrue and sor.r11bfalse ;
if ( t351 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t352 = saf.btrue and sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse and sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse and sar.r11btrue ;
if ( t354 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t355 = saf.btrue and sar.r11bfalse ;
if ( t355 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t356 = saf.btrue and sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse and smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse and smr.r11btrue ;
if ( t358 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t359 = saf.btrue and smr.r11bfalse ;
if ( t359 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t360 = saf.btrue and smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse and temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue and temp1 ;
if ( t602 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t603 = saf.r11bfalse and temp2 ;
if ( t603 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t604 = saf.r11btrue and temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse and rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue and rcvd_evt.tfalse ;
if ( t606 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t607 = saf.r11bfalse and rcvd_evt.ttrue ;
if ( t607 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t608 = saf.r11btrue and rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse and false ;
if ( t609 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue and false ;
if ( t610 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t611 = saf.r11bfalse and true ;
if ( t611 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t612 = saf.r11btrue and true ;
if ( t612 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse and self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue and self.bfalse ;
if ( t614 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t615 = saf.r11bfalse and self.btrue ;
if ( t615 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t616 = saf.r11btrue and self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse and self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue and self.r9bfalse ;
if ( t618 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t619 = saf.r11bfalse and self.r9btrue ;
if ( t619 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t620 = saf.r11btrue and self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse and saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse and saf.btrue ;
if ( t622 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t623 = saf.r11btrue and saf.bfalse ;
if ( t623 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t624 = saf.r11btrue and saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse and smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse and smf.btrue ;
if ( t626 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t627 = saf.r11btrue and smf.bfalse ;
if ( t627 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t628 = saf.r11btrue and smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse and sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse and sor.btrue ;
if ( t630 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t631 = saf.r11btrue and sor.bfalse ;
if ( t631 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t632 = saf.r11btrue and sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse and sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse and sar.btrue ;
if ( t634 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t635 = saf.r11btrue and sar.bfalse ;
if ( t635 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t636 = saf.r11btrue and sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse and smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse and smr.btrue ;
if ( t638 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t639 = saf.r11btrue and smr.bfalse ;
if ( t639 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t640 = saf.r11btrue and smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse and saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse and saf.r11btrue ;
if ( t642 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t643 = saf.r11btrue and saf.r11bfalse ;
if ( t643 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t644 = saf.r11btrue and saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse and smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse and smf.r11btrue ;
if ( t646 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t647 = saf.r11btrue and smf.r11bfalse ;
if ( t647 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t648 = saf.r11btrue and smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse and sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse and sor.r11btrue ;
if ( t650 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t651 = saf.r11btrue and sor.r11bfalse ;
if ( t651 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t652 = saf.r11btrue and sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse and sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse and sar.r11btrue ;
if ( t654 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t655 = saf.r11btrue and sar.r11bfalse ;
if ( t655 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t656 = saf.r11btrue and sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse and smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse and smr.r11btrue ;
if ( t658 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t659 = saf.r11btrue and smr.r11bfalse ;
if ( t659 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t660 = saf.r11btrue and smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed and test") ;

//generate event to commence next test
generate BET3:''Start or test''(tfalse:false, ttrue:true) to self;
 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1a',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"989e680b-bc70-b1d8-985c-a034d0050e31");
INSERT INTO SM_AH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_ACT
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	1,
	'LOG::LogInfo(message:"Starting or test") ;

//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    local existing
assign t1 = temp1 or temp1 ;
if ( t1 == false )
  LOG::LogSuccess(message:" or local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( false )") ;
end if;
 
assign t2 = temp1 or temp2 ;
if ( t2 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
assign t3 = temp2 or temp1 ;
if ( t3 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
assign t4 = temp2 or temp2 ;
if ( t4 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
  // local existing    rcvd_evt
assign t5 = temp1 or rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 or rcvd_evt.ttrue ;
if ( t6 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t7 = temp2 or rcvd_evt.tfalse ;
if ( t7 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t8 = temp2 or rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 or false ;
if ( t9 == false )
  LOG::LogSuccess(message:" or local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 or true ;
if ( t10 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t11 = temp2 or false ;
if ( t11 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t12 = temp2 or true ;
if ( t12 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 or self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" or local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 or self.btrue ;
if ( t14 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t15 = temp2 or self.bfalse ;
if ( t15 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t16 = temp2 or self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 or self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 or self.r9btrue ;
if ( t18 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t19 = temp2 or self.r9bfalse ;
if ( t19 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t20 = temp2 or self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of OBET;
assign t21 = temp1 or saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 or saf.btrue ;
if ( t22 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t23 = temp2 or saf.bfalse ;
if ( t23 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t24 = temp2 or saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of OBET;
for each smf in smfs
assign t25 = temp1 or smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 or smf.btrue ;
if ( t26 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t27 = temp2 or smf.bfalse ;
if ( t27 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t28 = temp2 or smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->OBET[R9];
assign t29 = temp1 or sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 or sor.btrue ;
if ( t30 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t31 = temp2 or sor.bfalse ;
if ( t31 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t32 = temp2 or sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->OBET[R10];
assign t33 = temp1 or sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 or sar.btrue ;
if ( t34 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t35 = temp2 or sar.bfalse ;
if ( t35 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t36 = temp2 or sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->OBET[R10];
for each smr in smrs
assign t37 = temp1 or smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 or smr.btrue ;
if ( t38 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t39 = temp2 or smr.bfalse ;
if ( t39 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t40 = temp2 or smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 or saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 or saf.r11btrue ;
if ( t42 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t43 = temp2 or saf.r11bfalse ;
if ( t43 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t44 = temp2 or saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 or smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 or smf.r11btrue ;
if ( t46 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t47 = temp2 or smf.r11bfalse ;
if ( t47 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t48 = temp2 or smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 or sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 or sor.r11btrue ;
if ( t50 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t51 = temp2 or sor.r11bfalse ;
if ( t51 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t52 = temp2 or sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 or sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 or sar.r11btrue ;
if ( t54 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t55 = temp2 or sar.r11bfalse ;
if ( t55 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t56 = temp2 or sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 or smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 or smr.r11btrue ;
if ( t58 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t59 = temp2 or smr.r11bfalse ;
if ( t59 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t60 = temp2 or smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse or temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue or temp1 ;
if ( t62 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t63 = rcvd_evt.tfalse or temp2 ;
if ( t63 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t64 = rcvd_evt.ttrue or temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse or rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue or rcvd_evt.tfalse ;
if ( t66 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t67 = rcvd_evt.tfalse or rcvd_evt.ttrue ;
if ( t67 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t68 = rcvd_evt.ttrue or rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse or false ;
if ( t69 == false )
  LOG::LogSuccess(message:" or rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue or false ;
if ( t70 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t71 = rcvd_evt.tfalse or true ;
if ( t71 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t72 = rcvd_evt.ttrue or true ;
if ( t72 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse or self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue or self.bfalse ;
if ( t74 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t75 = rcvd_evt.tfalse or self.btrue ;
if ( t75 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t76 = rcvd_evt.ttrue or self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse or self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue or self.r9bfalse ;
if ( t78 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t79 = rcvd_evt.tfalse or self.r9btrue ;
if ( t79 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t80 = rcvd_evt.ttrue or self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse or saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse or saf.btrue ;
if ( t82 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t83 = rcvd_evt.ttrue or saf.bfalse ;
if ( t83 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t84 = rcvd_evt.ttrue or saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse or smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse or smf.btrue ;
if ( t86 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t87 = rcvd_evt.ttrue or smf.bfalse ;
if ( t87 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t88 = rcvd_evt.ttrue or smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse or sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse or sor.btrue ;
if ( t90 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t91 = rcvd_evt.ttrue or sor.bfalse ;
if ( t91 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t92 = rcvd_evt.ttrue or sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse or sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse or sar.btrue ;
if ( t94 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t95 = rcvd_evt.ttrue or sar.bfalse ;
if ( t95 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t96 = rcvd_evt.ttrue or sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse or smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse or smr.btrue ;
if ( t98 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t99 = rcvd_evt.ttrue or smr.bfalse ;
if ( t99 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t100 = rcvd_evt.ttrue or smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse or saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse or saf.r11btrue ;
if ( t102 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t103 = rcvd_evt.ttrue or saf.r11bfalse ;
if ( t103 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t104 = rcvd_evt.ttrue or saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse or smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse or smf.r11btrue ;
if ( t106 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t107 = rcvd_evt.ttrue or smf.r11bfalse ;
if ( t107 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t108 = rcvd_evt.ttrue or smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse or sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse or sor.r11btrue ;
if ( t110 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t111 = rcvd_evt.ttrue or sor.r11bfalse ;
if ( t111 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t112 = rcvd_evt.ttrue or sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse or sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse or sar.r11btrue ;
if ( t114 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t115 = rcvd_evt.ttrue or sar.r11bfalse ;
if ( t115 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t116 = rcvd_evt.ttrue or sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse or smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse or smr.r11btrue ;
if ( t118 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t119 = rcvd_evt.ttrue or smr.r11bfalse ;
if ( t119 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t120 = rcvd_evt.ttrue or smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET4:''Continue or test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("02a1463d-a43e-ecc7-3993-a91501615408",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'Or test 2',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("02a1463d-a43e-ecc7-3993-a91501615408",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("02a1463d-a43e-ecc7-3993-a91501615408",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("02a1463d-a43e-ecc7-3993-a91501615408",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("02a1463d-a43e-ecc7-3993-a91501615408",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("02a1463d-a43e-ecc7-3993-a91501615408",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("02a1463d-a43e-ecc7-3993-a91501615408",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("02a1463d-a43e-ecc7-3993-a91501615408",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("02a1463d-a43e-ecc7-3993-a91501615408",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"02a1463d-a43e-ecc7-3993-a91501615408");
INSERT INTO SM_AH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_ACT
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	1,
	'
//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse or temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue or temp1 ;
if ( t302 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t303 = saf.bfalse or temp2 ;
if ( t303 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t304 = saf.btrue or temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse or rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue or rcvd_evt.tfalse ;
if ( t306 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t307 = saf.bfalse or rcvd_evt.ttrue ;
if ( t307 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t308 = saf.btrue or rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse or false ;
if ( t309 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue or false ;
if ( t310 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t311 = saf.bfalse or true ;
if ( t311 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t312 = saf.btrue or true ;
if ( t312 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse or self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue or self.bfalse ;
if ( t314 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t315 = saf.bfalse or self.btrue ;
if ( t315 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t316 = saf.btrue or self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse or self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue or self.r9bfalse ;
if ( t318 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t319 = saf.bfalse or self.r9btrue ;
if ( t319 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t320 = saf.btrue or self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse or saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse or saf.btrue ;
if ( t322 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t323 = saf.btrue or saf.bfalse ;
if ( t323 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t324 = saf.btrue or saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse or smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse or smf.btrue ;
if ( t326 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t327 = saf.btrue or smf.bfalse ;
if ( t327 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t328 = saf.btrue or smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse or sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse or sor.btrue ;
if ( t330 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t331 = saf.btrue or sor.bfalse ;
if ( t331 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t332 = saf.btrue or sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse or sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse or sar.btrue ;
if ( t334 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t335 = saf.btrue or sar.bfalse ;
if ( t335 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t336 = saf.btrue or sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse or smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse or smr.btrue ;
if ( t338 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t339 = saf.btrue or smr.bfalse ;
if ( t339 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t340 = saf.btrue or smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse or saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse or saf.r11btrue ;
if ( t342 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t343 = saf.btrue or saf.r11bfalse ;
if ( t343 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t344 = saf.btrue or saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse or smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse or smf.r11btrue ;
if ( t346 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t347 = saf.btrue or smf.r11bfalse ;
if ( t347 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t348 = saf.btrue or smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse or sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse or sor.r11btrue ;
if ( t350 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t351 = saf.btrue or sor.r11bfalse ;
if ( t351 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t352 = saf.btrue or sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse or sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse or sar.r11btrue ;
if ( t354 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t355 = saf.btrue or sar.r11bfalse ;
if ( t355 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t356 = saf.btrue or sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse or smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse or smr.r11btrue ;
if ( t358 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t359 = saf.btrue or smr.r11bfalse ;
if ( t359 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t360 = saf.btrue or smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse or temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue or temp1 ;
if ( t602 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t603 = saf.r11bfalse or temp2 ;
if ( t603 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t604 = saf.r11btrue or temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse or rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue or rcvd_evt.tfalse ;
if ( t606 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t607 = saf.r11bfalse or rcvd_evt.ttrue ;
if ( t607 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t608 = saf.r11btrue or rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse or false ;
if ( t609 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue or false ;
if ( t610 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t611 = saf.r11bfalse or true ;
if ( t611 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t612 = saf.r11btrue or true ;
if ( t612 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse or self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue or self.bfalse ;
if ( t614 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t615 = saf.r11bfalse or self.btrue ;
if ( t615 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t616 = saf.r11btrue or self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse or self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue or self.r9bfalse ;
if ( t618 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t619 = saf.r11bfalse or self.r9btrue ;
if ( t619 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t620 = saf.r11btrue or self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse or saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse or saf.btrue ;
if ( t622 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t623 = saf.r11btrue or saf.bfalse ;
if ( t623 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t624 = saf.r11btrue or saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse or smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse or smf.btrue ;
if ( t626 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t627 = saf.r11btrue or smf.bfalse ;
if ( t627 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t628 = saf.r11btrue or smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse or sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse or sor.btrue ;
if ( t630 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t631 = saf.r11btrue or sor.bfalse ;
if ( t631 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t632 = saf.r11btrue or sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse or sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse or sar.btrue ;
if ( t634 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t635 = saf.r11btrue or sar.bfalse ;
if ( t635 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t636 = saf.r11btrue or sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse or smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse or smr.btrue ;
if ( t638 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t639 = saf.r11btrue or smr.bfalse ;
if ( t639 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t640 = saf.r11btrue or smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse or saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse or saf.r11btrue ;
if ( t642 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t643 = saf.r11btrue or saf.r11bfalse ;
if ( t643 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t644 = saf.r11btrue or saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse or smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse or smf.r11btrue ;
if ( t646 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t647 = saf.r11btrue or smf.r11bfalse ;
if ( t647 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t648 = saf.r11btrue or smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse or sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse or sor.r11btrue ;
if ( t650 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t651 = saf.r11btrue or sor.r11bfalse ;
if ( t651 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t652 = saf.r11btrue or sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse or sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse or sar.r11btrue ;
if ( t654 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t655 = saf.r11btrue or sar.r11bfalse ;
if ( t655 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t656 = saf.r11btrue or sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse or smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse or smr.r11btrue ;
if ( t658 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t659 = saf.r11btrue or smr.r11bfalse ;
if ( t659 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t660 = saf.r11btrue or smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed or test") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'And test 1b',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"9842cf40-2a8c-cb2b-673b-e159c7987edd");
INSERT INTO SM_AH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_ACT
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	1,
	'assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true and temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse and temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue and temp1 ;
if ( t182 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t183 = self.bfalse and temp2 ;
if ( t183 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t184 = self.btrue and temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" and self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse and rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue and rcvd_evt.tfalse ;
if ( t186 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t187 = self.bfalse and rcvd_evt.ttrue ;
if ( t187 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t188 = self.btrue and rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse and false ;
if ( t189 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue and false ;
if ( t190 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t191 = self.bfalse and true ;
if ( t191 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t192 = self.btrue and true ;
if ( t192 == true )
  LOG::LogSuccess(message:" and self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse and self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue and self.bfalse ;
if ( t194 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t195 = self.bfalse and self.btrue ;
if ( t195 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t196 = self.btrue and self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse and self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue and self.r9bfalse ;
if ( t198 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t199 = self.bfalse and self.r9btrue ;
if ( t199 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t200 = self.btrue and self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse and saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse and saf.btrue ;
if ( t202 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t203 = self.btrue and saf.bfalse ;
if ( t203 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t204 = self.btrue and saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse and smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse and smf.btrue ;
if ( t206 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t207 = self.btrue and smf.bfalse ;
if ( t207 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t208 = self.btrue and smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse and sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse and sor.btrue ;
if ( t210 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t211 = self.btrue and sor.bfalse ;
if ( t211 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t212 = self.btrue and sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse and sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse and sar.btrue ;
if ( t214 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t215 = self.btrue and sar.bfalse ;
if ( t215 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t216 = self.btrue and sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse and smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse and smr.btrue ;
if ( t218 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t219 = self.btrue and smr.bfalse ;
if ( t219 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t220 = self.btrue and smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse and saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse and saf.r11btrue ;
if ( t222 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t223 = self.btrue and saf.r11bfalse ;
if ( t223 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t224 = self.btrue and saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse and smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse and smf.r11btrue ;
if ( t226 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t227 = self.btrue and smf.r11bfalse ;
if ( t227 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t228 = self.btrue and smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse and sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse and sor.r11btrue ;
if ( t230 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t231 = self.btrue and sor.r11bfalse ;
if ( t231 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t232 = self.btrue and sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse and sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse and sar.r11btrue ;
if ( t234 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t235 = self.btrue and sar.r11bfalse ;
if ( t235 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t236 = self.btrue and sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse and smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse and smr.r11btrue ;
if ( t238 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t239 = self.btrue and smr.r11bfalse ;
if ( t239 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t240 = self.btrue and smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse and temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue and temp1 ;
if ( t242 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t243 = self.r9bfalse and temp2 ;
if ( t243 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t244 = self.r9btrue and temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse and rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue and rcvd_evt.tfalse ;
if ( t246 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t247 = self.r9bfalse and rcvd_evt.ttrue ;
if ( t247 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t248 = self.r9btrue and rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse and false ;
if ( t249 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue and false ;
if ( t250 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t251 = self.r9bfalse and true ;
if ( t251 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t252 = self.r9btrue and true ;
if ( t252 == true )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse and self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue and self.bfalse ;
if ( t254 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t255 = self.r9bfalse and self.btrue ;
if ( t255 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t256 = self.r9btrue and self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse and self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue and self.r9bfalse ;
if ( t258 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t259 = self.r9bfalse and self.r9btrue ;
if ( t259 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t260 = self.r9btrue and self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse and saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse and saf.btrue ;
if ( t262 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t263 = self.r9btrue and saf.bfalse ;
if ( t263 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t264 = self.r9btrue and saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse and smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse and smf.btrue ;
if ( t266 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t267 = self.r9btrue and smf.bfalse ;
if ( t267 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t268 = self.r9btrue and smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse and sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse and sor.btrue ;
if ( t270 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t271 = self.r9btrue and sor.bfalse ;
if ( t271 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t272 = self.r9btrue and sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse and sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse and sar.btrue ;
if ( t274 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t275 = self.r9btrue and sar.bfalse ;
if ( t275 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t276 = self.r9btrue and sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse and smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse and smr.btrue ;
if ( t278 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t279 = self.r9btrue and smr.bfalse ;
if ( t279 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t280 = self.r9btrue and smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse and saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse and saf.r11btrue ;
if ( t282 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t283 = self.r9btrue and saf.r11bfalse ;
if ( t283 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t284 = self.r9btrue and saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse and smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse and smf.r11btrue ;
if ( t286 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t287 = self.r9btrue and smf.r11bfalse ;
if ( t287 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t288 = self.r9btrue and smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse and sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse and sor.r11btrue ;
if ( t290 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t291 = self.r9btrue and sor.r11bfalse ;
if ( t291 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t292 = self.r9btrue and sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse and sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse and sar.r11btrue ;
if ( t294 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t295 = self.r9btrue and sar.r11bfalse ;
if ( t295 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t296 = self.r9btrue and sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse and smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse and smr.r11btrue ;
if ( t298 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t299 = self.r9btrue and smr.r11bfalse ;
if ( t299 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t300 = self.r9btrue and smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1b',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e");
INSERT INTO SM_AH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_ACT
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	1,
	'// 1.3
// set my logging instance

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true or temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse or temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" or self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue or temp1 ;
if ( t182 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t183 = self.bfalse or temp2 ;
if ( t183 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t184 = self.btrue or temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse or rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue or rcvd_evt.tfalse ;
if ( t186 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t187 = self.bfalse or rcvd_evt.ttrue ;
if ( t187 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t188 = self.btrue or rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse or false ;
if ( t189 == false )
  LOG::LogSuccess(message:" or self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue or false ;
if ( t190 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t191 = self.bfalse or true ;
if ( t191 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t192 = self.btrue or true ;
if ( t192 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse or self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue or self.bfalse ;
if ( t194 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t195 = self.bfalse or self.btrue ;
if ( t195 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t196 = self.btrue or self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse or self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue or self.r9bfalse ;
if ( t198 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t199 = self.bfalse or self.r9btrue ;
if ( t199 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t200 = self.btrue or self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse or saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse or saf.btrue ;
if ( t202 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t203 = self.btrue or saf.bfalse ;
if ( t203 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t204 = self.btrue or saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse or smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse or smf.btrue ;
if ( t206 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t207 = self.btrue or smf.bfalse ;
if ( t207 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t208 = self.btrue or smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse or sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse or sor.btrue ;
if ( t210 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t211 = self.btrue or sor.bfalse ;
if ( t211 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t212 = self.btrue or sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse or sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse or sar.btrue ;
if ( t214 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t215 = self.btrue or sar.bfalse ;
if ( t215 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t216 = self.btrue or sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse or smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse or smr.btrue ;
if ( t218 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t219 = self.btrue or smr.bfalse ;
if ( t219 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t220 = self.btrue or smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse or saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse or saf.r11btrue ;
if ( t222 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t223 = self.btrue or saf.r11bfalse ;
if ( t223 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t224 = self.btrue or saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse or smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse or smf.r11btrue ;
if ( t226 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t227 = self.btrue or smf.r11bfalse ;
if ( t227 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t228 = self.btrue or smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse or sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse or sor.r11btrue ;
if ( t230 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t231 = self.btrue or sor.r11bfalse ;
if ( t231 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t232 = self.btrue or sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse or sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse or sar.r11btrue ;
if ( t234 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t235 = self.btrue or sar.r11bfalse ;
if ( t235 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t236 = self.btrue or sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse or smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse or smr.r11btrue ;
if ( t238 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t239 = self.btrue or smr.r11bfalse ;
if ( t239 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t240 = self.btrue or smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse or temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue or temp1 ;
if ( t242 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t243 = self.r9bfalse or temp2 ;
if ( t243 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t244 = self.r9btrue or temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse or rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue or rcvd_evt.tfalse ;
if ( t246 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t247 = self.r9bfalse or rcvd_evt.ttrue ;
if ( t247 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t248 = self.r9btrue or rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse or false ;
if ( t249 == false )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue or false ;
if ( t250 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t251 = self.r9bfalse or true ;
if ( t251 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t252 = self.r9btrue or true ;
if ( t252 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse or self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue or self.bfalse ;
if ( t254 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t255 = self.r9bfalse or self.btrue ;
if ( t255 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t256 = self.r9btrue or self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse or self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue or self.r9bfalse ;
if ( t258 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t259 = self.r9bfalse or self.r9btrue ;
if ( t259 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t260 = self.r9btrue or self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse or saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse or saf.btrue ;
if ( t262 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t263 = self.r9btrue or saf.bfalse ;
if ( t263 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t264 = self.r9btrue or saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse or smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse or smf.btrue ;
if ( t266 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t267 = self.r9btrue or smf.bfalse ;
if ( t267 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t268 = self.r9btrue or smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse or sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse or sor.btrue ;
if ( t270 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t271 = self.r9btrue or sor.bfalse ;
if ( t271 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t272 = self.r9btrue or sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse or sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse or sar.btrue ;
if ( t274 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t275 = self.r9btrue or sar.bfalse ;
if ( t275 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t276 = self.r9btrue or sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse or smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse or smr.btrue ;
if ( t278 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t279 = self.r9btrue or smr.bfalse ;
if ( t279 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t280 = self.r9btrue or smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse or saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse or saf.r11btrue ;
if ( t282 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t283 = self.r9btrue or saf.r11bfalse ;
if ( t283 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t284 = self.r9btrue or saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse or smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse or smf.r11btrue ;
if ( t286 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t287 = self.r9btrue or smf.r11bfalse ;
if ( t287 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t288 = self.r9btrue or smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse or sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse or sor.r11btrue ;
if ( t290 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t291 = self.r9btrue or sor.r11bfalse ;
if ( t291 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t292 = self.r9btrue or sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse or sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse or sar.r11btrue ;
if ( t294 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t295 = self.r9btrue or sar.r11bfalse ;
if ( t295 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t296 = self.r9btrue or sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse or smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse or smr.r11btrue ;
if ( t298 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t299 = self.r9btrue or smr.r11bfalse ;
if ( t299 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t300 = self.r9btrue or smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET4:''Continue or test''( ttrue: true, tfalse: false ) to self;


',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"171c28d1-9e02-36a8-58a4-0818b61cc903",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14");
INSERT INTO SM_AH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_ACT
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"171c28d1-9e02-36a8-58a4-0818b61cc903",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("a256916d-332b-8bb2-d4ff-eae907f0d71a",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"a256916d-332b-8bb2-d4ff-eae907f0d71a");
INSERT INTO SM_AH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_ACT
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("a256916d-332b-8bb2-d4ff-eae907f0d71a",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"989e680b-bc70-b1d8-985c-a034d0050e31",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("54c573d1-aade-513b-dec9-05a9342535a9",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"54c573d1-aade-513b-dec9-05a9342535a9");
INSERT INTO SM_AH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_ACT
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("54c573d1-aade-513b-dec9-05a9342535a9",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("87d7123c-9ec5-c389-2fda-613f981c3404",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"171c28d1-9e02-36a8-58a4-0818b61cc903",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"87d7123c-9ec5-c389-2fda-613f981c3404");
INSERT INTO SM_AH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_ACT
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("87d7123c-9ec5-c389-2fda-613f981c3404",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("79786b0c-2583-a95c-3b50-3c627a6a2a28",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"79786b0c-2583-a95c-3b50-3c627a6a2a28");
INSERT INTO SM_AH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_ACT
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("79786b0c-2583-a95c-3b50-3c627a6a2a28",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"02a1463d-a43e-ecc7-3993-a91501615408",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("3f8bf9ce-83b8-e625-b6be-03ca73a5014a",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"989e680b-bc70-b1d8-985c-a034d0050e31",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"3f8bf9ce-83b8-e625-b6be-03ca73a5014a");
INSERT INTO SM_AH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_ACT
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("3f8bf9ce-83b8-e625-b6be-03ca73a5014a",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	8,
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("13ac9efd-387e-3507-fc78-b1117c03d5cf",
	"e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	"171c28d1-9e02-36a8-58a4-0818b61cc903",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a');
INSERT INTO GD_SHP
	VALUES ("13ac9efd-387e-3507-fc78-b1117c03d5cf");
INSERT INTO GD_NCS
	VALUES ("13ac9efd-387e-3507-fc78-b1117c03d5cf");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"13ac9efd-387e-3507-fc78-b1117c03d5cf");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1280.000000,
	"13ac9efd-387e-3507-fc78-b1117c03d5cf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("13ac9efd-387e-3507-fc78-b1117c03d5cf",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("936009c8-9eca-9720-c69a-51851af31c07",
	2064.000000,
	1312.000000,
	"13ac9efd-387e-3507-fc78-b1117c03d5cf");
INSERT INTO DIM_CON
	VALUES ("fee97219-9bb8-fa92-00bd-da8495f82676",
	1968.000000,
	1280.000000,
	"13ac9efd-387e-3507-fc78-b1117c03d5cf");
INSERT INTO DIM_CON
	VALUES ("2ae4b577-2136-a2a2-0ccd-50c4393a67f8",
	1968.000000,
	1376.000000,
	"13ac9efd-387e-3507-fc78-b1117c03d5cf");
INSERT INTO GD_GE
	VALUES ("d4147514-f5eb-6508-1088-71f0b34edc86",
	"e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	"6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 2');
INSERT INTO GD_SHP
	VALUES ("d4147514-f5eb-6508-1088-71f0b34edc86");
INSERT INTO GD_NCS
	VALUES ("d4147514-f5eb-6508-1088-71f0b34edc86");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"d4147514-f5eb-6508-1088-71f0b34edc86");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1680.000000,
	"d4147514-f5eb-6508-1088-71f0b34edc86",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d4147514-f5eb-6508-1088-71f0b34edc86",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("e7e22cad-ba21-df36-520e-c95b3db61389",
	2064.000000,
	1712.000000,
	"d4147514-f5eb-6508-1088-71f0b34edc86");
INSERT INTO DIM_CON
	VALUES ("571bb0b2-5984-7f7f-f616-985226a04514",
	1968.000000,
	1680.000000,
	"d4147514-f5eb-6508-1088-71f0b34edc86");
INSERT INTO GD_GE
	VALUES ("adf30557-aad4-718e-9b76-bd2d0f595cbd",
	"e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	"989e680b-bc70-b1d8-985c-a034d0050e31",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1a');
INSERT INTO GD_SHP
	VALUES ("adf30557-aad4-718e-9b76-bd2d0f595cbd");
INSERT INTO GD_NCS
	VALUES ("adf30557-aad4-718e-9b76-bd2d0f595cbd");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"adf30557-aad4-718e-9b76-bd2d0f595cbd");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1280.000000,
	"adf30557-aad4-718e-9b76-bd2d0f595cbd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("adf30557-aad4-718e-9b76-bd2d0f595cbd",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("201c296e-485d-da8e-5951-abb0343badc1",
	2320.000000,
	1280.000000,
	"adf30557-aad4-718e-9b76-bd2d0f595cbd");
INSERT INTO DIM_CON
	VALUES ("08c8674f-9f93-f4e9-d40a-6dc89537e3ca",
	2320.000000,
	1376.000000,
	"adf30557-aad4-718e-9b76-bd2d0f595cbd");
INSERT INTO GD_GE
	VALUES ("948e457a-2c6c-5f32-dd91-ddcb66c0f094",
	"e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	"02a1463d-a43e-ecc7-3993-a91501615408",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 2');
INSERT INTO GD_SHP
	VALUES ("948e457a-2c6c-5f32-dd91-ddcb66c0f094");
INSERT INTO GD_NCS
	VALUES ("948e457a-2c6c-5f32-dd91-ddcb66c0f094");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"948e457a-2c6c-5f32-dd91-ddcb66c0f094");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1680.000000,
	"948e457a-2c6c-5f32-dd91-ddcb66c0f094",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("948e457a-2c6c-5f32-dd91-ddcb66c0f094",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("2e85bc54-9d2e-cb31-e843-2b684697281e",
	2320.000000,
	1680.000000,
	"948e457a-2c6c-5f32-dd91-ddcb66c0f094");
INSERT INTO GD_GE
	VALUES ("3d30eb6f-93e9-c68f-85b2-3851faf41a18",
	"e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	"9842cf40-2a8c-cb2b-673b-e159c7987edd",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1b');
INSERT INTO GD_SHP
	VALUES ("3d30eb6f-93e9-c68f-85b2-3851faf41a18");
INSERT INTO GD_NCS
	VALUES ("3d30eb6f-93e9-c68f-85b2-3851faf41a18");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"3d30eb6f-93e9-c68f-85b2-3851faf41a18");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1472.000000,
	"3d30eb6f-93e9-c68f-85b2-3851faf41a18",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3d30eb6f-93e9-c68f-85b2-3851faf41a18",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("733301ab-c967-b343-ac41-48c37884fe79",
	1968.000000,
	1472.000000,
	"3d30eb6f-93e9-c68f-85b2-3851faf41a18");
INSERT INTO DIM_CON
	VALUES ("7447030e-f67e-3698-55db-32edac7f81a0",
	1968.000000,
	1568.000000,
	"3d30eb6f-93e9-c68f-85b2-3851faf41a18");
INSERT INTO GD_GE
	VALUES ("9aa25e6c-5594-0790-e685-9fbd9e908df6",
	"e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	"8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1b');
INSERT INTO GD_SHP
	VALUES ("9aa25e6c-5594-0790-e685-9fbd9e908df6");
INSERT INTO GD_NCS
	VALUES ("9aa25e6c-5594-0790-e685-9fbd9e908df6");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"9aa25e6c-5594-0790-e685-9fbd9e908df6");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1472.000000,
	"9aa25e6c-5594-0790-e685-9fbd9e908df6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9aa25e6c-5594-0790-e685-9fbd9e908df6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("b906f96d-cf60-215f-e23d-fbcce8b9d135",
	2320.000000,
	1472.000000,
	"9aa25e6c-5594-0790-e685-9fbd9e908df6");
INSERT INTO DIM_CON
	VALUES ("5464e623-c51f-46ba-584a-b0826d42b82e",
	2320.000000,
	1568.000000,
	"9aa25e6c-5594-0790-e685-9fbd9e908df6");
INSERT INTO GD_GE
	VALUES ("c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	"e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	"32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a::BET1: Start and test');
INSERT INTO GD_CON
	VALUES ("c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("54283ae1-dcbb-a381-2cac-70ecdadee1e6",
	"c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"54283ae1-dcbb-a381-2cac-70ecdadee1e6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"54283ae1-dcbb-a381-2cac-70ecdadee1e6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("54283ae1-dcbb-a381-2cac-70ecdadee1e6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("80c7e94c-4c3b-53b6-810c-c60ea08793d6",
	"c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	3,
	-77.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (235.000000,
	34.000000,
	"80c7e94c-4c3b-53b6-810c-c60ea08793d6");
INSERT INTO DIM_GE
	VALUES (1994.000000,
	1189.000000,
	"80c7e94c-4c3b-53b6-810c-c60ea08793d6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("80c7e94c-4c3b-53b6-810c-c60ea08793d6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8cf7e2a1-b4c3-b4fd-066a-39276dd9f0a6",
	"c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8cf7e2a1-b4c3-b4fd-066a-39276dd9f0a6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8cf7e2a1-b4c3-b4fd-066a-39276dd9f0a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8cf7e2a1-b4c3-b4fd-066a-39276dd9f0a6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("02f2ada1-0c37-c6db-88a3-7e1637960005",
	"c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	"00000000-0000-0000-0000-000000000000",
	"1cfa99bb-1c38-b75b-0b52-4eb5dc1ca412",
	"8a6ebbf5-d2b5-37d0-18de-b1c7a11adceb");
INSERT INTO GD_LS
	VALUES ("c50bdca7-80c5-2a02-76cd-c22b22ec494d",
	"c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	"02f2ada1-0c37-c6db-88a3-7e1637960005",
	"8a6ebbf5-d2b5-37d0-18de-b1c7a11adceb",
	"37ea0655-1936-c37c-5043-a71cc500480a");
INSERT INTO GD_LS
	VALUES ("72262f08-6ff1-ec14-ad8d-7c8b2e1864b9",
	"c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	"c50bdca7-80c5-2a02-76cd-c22b22ec494d",
	"37ea0655-1936-c37c-5043-a71cc500480a",
	"e2a3042d-0849-3883-b251-e7f23a66e857");
INSERT INTO GD_LS
	VALUES ("53123847-51ab-366e-717c-05d12d3ef992",
	"c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	"72262f08-6ff1-ec14-ad8d-7c8b2e1864b9",
	"e2a3042d-0849-3883-b251-e7f23a66e857",
	"12371b97-b406-eeb8-1d95-1f6a15065ec7");
INSERT INTO DIM_WAY
	VALUES ("1cfa99bb-1c38-b75b-0b52-4eb5dc1ca412",
	2064.000000,
	1312.000000,
	"c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("8a6ebbf5-d2b5-37d0-18de-b1c7a11adceb",
	2128.000000,
	1312.000000,
	"c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	"00000000-0000-0000-0000-000000000000",
	"1cfa99bb-1c38-b75b-0b52-4eb5dc1ca412");
INSERT INTO DIM_WAY
	VALUES ("37ea0655-1936-c37c-5043-a71cc500480a",
	2128.000000,
	1216.000000,
	"c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	"00000000-0000-0000-0000-000000000000",
	"8a6ebbf5-d2b5-37d0-18de-b1c7a11adceb");
INSERT INTO DIM_WAY
	VALUES ("e2a3042d-0849-3883-b251-e7f23a66e857",
	1968.000000,
	1216.000000,
	"c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	"00000000-0000-0000-0000-000000000000",
	"37ea0655-1936-c37c-5043-a71cc500480a");
INSERT INTO DIM_WAY
	VALUES ("12371b97-b406-eeb8-1d95-1f6a15065ec7",
	1968.000000,
	1280.000000,
	"c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	"00000000-0000-0000-0000-000000000000",
	"e2a3042d-0849-3883-b251-e7f23a66e857");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("936009c8-9eca-9720-c69a-51851af31c07",
	"fee97219-9bb8-fa92-00bd-da8495f82676",
	"c29a29c7-d18b-9d69-4a2c-63284ffaa109");
INSERT INTO GD_GE
	VALUES ("93e75d9f-5389-f049-4aa4-bcf18e746f48",
	"e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	"a256916d-332b-8bb2-d4ff-eae907f0d71a",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 2::BET3: Start or test');
INSERT INTO GD_CON
	VALUES ("93e75d9f-5389-f049-4aa4-bcf18e746f48",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fd343066-31f4-5612-ebbf-47519c2c8e81",
	"93e75d9f-5389-f049-4aa4-bcf18e746f48",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"fd343066-31f4-5612-ebbf-47519c2c8e81");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fd343066-31f4-5612-ebbf-47519c2c8e81",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fd343066-31f4-5612-ebbf-47519c2c8e81",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2c65c305-f856-caf7-c72c-137b997f9f98",
	"93e75d9f-5389-f049-4aa4-bcf18e746f48",
	3,
	155.000000,
	-202.000000);
INSERT INTO DIM_ND
	VALUES (205.000000,
	41.000000,
	"2c65c305-f856-caf7-c72c-137b997f9f98");
INSERT INTO DIM_GE
	VALUES (2331.000000,
	1231.000000,
	"2c65c305-f856-caf7-c72c-137b997f9f98",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2c65c305-f856-caf7-c72c-137b997f9f98",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("660bcee0-9ae0-c9ca-609f-2a822a9edc2f",
	"93e75d9f-5389-f049-4aa4-bcf18e746f48",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"660bcee0-9ae0-c9ca-609f-2a822a9edc2f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"660bcee0-9ae0-c9ca-609f-2a822a9edc2f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("660bcee0-9ae0-c9ca-609f-2a822a9edc2f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("a0920df0-ee6a-0d06-32f8-cd1fab3f3f95",
	"93e75d9f-5389-f049-4aa4-bcf18e746f48",
	"00000000-0000-0000-0000-000000000000",
	"e9987261-2b65-868f-191d-dce391f19a8e",
	"928901e8-c8a9-b5bc-527e-fb6a84ff9d0f");
INSERT INTO GD_LS
	VALUES ("79bf8e4d-1a6e-bab7-937b-9a62ab777aad",
	"93e75d9f-5389-f049-4aa4-bcf18e746f48",
	"a0920df0-ee6a-0d06-32f8-cd1fab3f3f95",
	"928901e8-c8a9-b5bc-527e-fb6a84ff9d0f",
	"b73ae68d-f709-c73f-f045-aed2dc47c67d");
INSERT INTO GD_LS
	VALUES ("68224be3-a11a-1776-8803-a0600b17dbea",
	"93e75d9f-5389-f049-4aa4-bcf18e746f48",
	"79bf8e4d-1a6e-bab7-937b-9a62ab777aad",
	"b73ae68d-f709-c73f-f045-aed2dc47c67d",
	"57359216-9f67-9a0a-c9a6-7c1ecbef4d1b");
INSERT INTO GD_LS
	VALUES ("61d75536-3a6e-5360-5929-c6af5b9e1503",
	"93e75d9f-5389-f049-4aa4-bcf18e746f48",
	"68224be3-a11a-1776-8803-a0600b17dbea",
	"57359216-9f67-9a0a-c9a6-7c1ecbef4d1b",
	"fb2fe5f6-ca28-7f6a-d035-3c1de04f0e15");
INSERT INTO DIM_WAY
	VALUES ("e9987261-2b65-868f-191d-dce391f19a8e",
	2064.000000,
	1712.000000,
	"93e75d9f-5389-f049-4aa4-bcf18e746f48",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("928901e8-c8a9-b5bc-527e-fb6a84ff9d0f",
	2192.000000,
	1712.000000,
	"93e75d9f-5389-f049-4aa4-bcf18e746f48",
	"00000000-0000-0000-0000-000000000000",
	"e9987261-2b65-868f-191d-dce391f19a8e");
INSERT INTO DIM_WAY
	VALUES ("b73ae68d-f709-c73f-f045-aed2dc47c67d",
	2192.000000,
	1232.000000,
	"93e75d9f-5389-f049-4aa4-bcf18e746f48",
	"00000000-0000-0000-0000-000000000000",
	"928901e8-c8a9-b5bc-527e-fb6a84ff9d0f");
INSERT INTO DIM_WAY
	VALUES ("57359216-9f67-9a0a-c9a6-7c1ecbef4d1b",
	2320.000000,
	1232.000000,
	"93e75d9f-5389-f049-4aa4-bcf18e746f48",
	"00000000-0000-0000-0000-000000000000",
	"b73ae68d-f709-c73f-f045-aed2dc47c67d");
INSERT INTO DIM_WAY
	VALUES ("fb2fe5f6-ca28-7f6a-d035-3c1de04f0e15",
	2320.000000,
	1280.000000,
	"93e75d9f-5389-f049-4aa4-bcf18e746f48",
	"00000000-0000-0000-0000-000000000000",
	"57359216-9f67-9a0a-c9a6-7c1ecbef4d1b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"93e75d9f-5389-f049-4aa4-bcf18e746f48",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("93e75d9f-5389-f049-4aa4-bcf18e746f48",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e7e22cad-ba21-df36-520e-c95b3db61389",
	"201c296e-485d-da8e-5951-abb0343badc1",
	"93e75d9f-5389-f049-4aa4-bcf18e746f48");
INSERT INTO GD_GE
	VALUES ("9111c24a-6c88-dc5a-34ce-b14e75c390dd",
	"e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	"87d7123c-9ec5-c389-2fda-613f981c3404",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a::BET2: Continue and test');
INSERT INTO GD_CON
	VALUES ("9111c24a-6c88-dc5a-34ce-b14e75c390dd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("415f27b5-0df3-d9f1-66d7-6e5eeba91537",
	"9111c24a-6c88-dc5a-34ce-b14e75c390dd",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"415f27b5-0df3-d9f1-66d7-6e5eeba91537");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"415f27b5-0df3-d9f1-66d7-6e5eeba91537",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("415f27b5-0df3-d9f1-66d7-6e5eeba91537",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("dbae4ca3-e993-86ef-e13e-41b3bc3e2189",
	"9111c24a-6c88-dc5a-34ce-b14e75c390dd",
	3,
	-247.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (270.000000,
	40.000000,
	"dbae4ca3-e993-86ef-e13e-41b3bc3e2189");
INSERT INTO DIM_GE
	VALUES (1705.000000,
	1407.000000,
	"dbae4ca3-e993-86ef-e13e-41b3bc3e2189",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dbae4ca3-e993-86ef-e13e-41b3bc3e2189",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("297abbd9-0b45-049a-446a-6e18044ac8d9",
	"9111c24a-6c88-dc5a-34ce-b14e75c390dd",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"297abbd9-0b45-049a-446a-6e18044ac8d9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"297abbd9-0b45-049a-446a-6e18044ac8d9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("297abbd9-0b45-049a-446a-6e18044ac8d9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("14d617d3-050e-27fc-c8ee-b16603a5d98e",
	"9111c24a-6c88-dc5a-34ce-b14e75c390dd",
	"00000000-0000-0000-0000-000000000000",
	"c23535ad-2c25-fbb1-c091-511a9ff0daef",
	"e2950012-d614-2402-b66b-8d21b42b1888");
INSERT INTO DIM_WAY
	VALUES ("c23535ad-2c25-fbb1-c091-511a9ff0daef",
	1968.000000,
	1376.000000,
	"9111c24a-6c88-dc5a-34ce-b14e75c390dd",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("e2950012-d614-2402-b66b-8d21b42b1888",
	1968.000000,
	1472.000000,
	"9111c24a-6c88-dc5a-34ce-b14e75c390dd",
	"00000000-0000-0000-0000-000000000000",
	"c23535ad-2c25-fbb1-c091-511a9ff0daef");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9111c24a-6c88-dc5a-34ce-b14e75c390dd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9111c24a-6c88-dc5a-34ce-b14e75c390dd",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("2ae4b577-2136-a2a2-0ccd-50c4393a67f8",
	"733301ab-c967-b343-ac41-48c37884fe79",
	"9111c24a-6c88-dc5a-34ce-b14e75c390dd");
INSERT INTO GD_GE
	VALUES ("caeaf7c1-3958-3c89-12ca-7d3c88c66791",
	"e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	"54c573d1-aade-513b-dec9-05a9342535a9",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1b::BET2: Continue and test');
INSERT INTO GD_CON
	VALUES ("caeaf7c1-3958-3c89-12ca-7d3c88c66791",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("41e74fe7-9537-a710-47c7-e26d778d4a3d",
	"caeaf7c1-3958-3c89-12ca-7d3c88c66791",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"41e74fe7-9537-a710-47c7-e26d778d4a3d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"41e74fe7-9537-a710-47c7-e26d778d4a3d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("41e74fe7-9537-a710-47c7-e26d778d4a3d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e21e76e8-2057-b1c7-c170-faca380ceef5",
	"caeaf7c1-3958-3c89-12ca-7d3c88c66791",
	3,
	-257.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (279.000000,
	44.000000,
	"e21e76e8-2057-b1c7-c170-faca380ceef5");
INSERT INTO DIM_GE
	VALUES (1695.000000,
	1610.000000,
	"e21e76e8-2057-b1c7-c170-faca380ceef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e21e76e8-2057-b1c7-c170-faca380ceef5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a2ac026c-e9c5-3e22-c8d0-e4584d4d1801",
	"caeaf7c1-3958-3c89-12ca-7d3c88c66791",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a2ac026c-e9c5-3e22-c8d0-e4584d4d1801");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a2ac026c-e9c5-3e22-c8d0-e4584d4d1801",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a2ac026c-e9c5-3e22-c8d0-e4584d4d1801",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2278e903-1bc7-8e5f-2d7e-6c2a11ed1ba4",
	"caeaf7c1-3958-3c89-12ca-7d3c88c66791",
	"00000000-0000-0000-0000-000000000000",
	"5470ed30-3458-27d2-28f9-790ed12ff821",
	"87653efc-6941-9e2f-a4b4-e6d37c41ac97");
INSERT INTO DIM_WAY
	VALUES ("5470ed30-3458-27d2-28f9-790ed12ff821",
	1968.000000,
	1568.000000,
	"caeaf7c1-3958-3c89-12ca-7d3c88c66791",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("87653efc-6941-9e2f-a4b4-e6d37c41ac97",
	1968.000000,
	1680.000000,
	"caeaf7c1-3958-3c89-12ca-7d3c88c66791",
	"00000000-0000-0000-0000-000000000000",
	"5470ed30-3458-27d2-28f9-790ed12ff821");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"caeaf7c1-3958-3c89-12ca-7d3c88c66791",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("caeaf7c1-3958-3c89-12ca-7d3c88c66791",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("7447030e-f67e-3698-55db-32edac7f81a0",
	"571bb0b2-5984-7f7f-f616-985226a04514",
	"caeaf7c1-3958-3c89-12ca-7d3c88c66791");
INSERT INTO GD_GE
	VALUES ("280e025a-fdf4-2ea1-9c41-bfac6f4e77e2",
	"e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	"3f8bf9ce-83b8-e625-b6be-03ca73a5014a",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1a::BET4: Continue or test');
INSERT INTO GD_CON
	VALUES ("280e025a-fdf4-2ea1-9c41-bfac6f4e77e2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01",
	"280e025a-fdf4-2ea1-9c41-bfac6f4e77e2",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("47a9b9c7-267e-aaf3-c134-0c06ff67a6a9",
	"280e025a-fdf4-2ea1-9c41-bfac6f4e77e2",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (252.000000,
	49.000000,
	"47a9b9c7-267e-aaf3-c134-0c06ff67a6a9");
INSERT INTO DIM_GE
	VALUES (2304.000000,
	1408.000000,
	"47a9b9c7-267e-aaf3-c134-0c06ff67a6a9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("47a9b9c7-267e-aaf3-c134-0c06ff67a6a9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f9e15034-377d-39d0-8b3b-ef5db77cc107",
	"280e025a-fdf4-2ea1-9c41-bfac6f4e77e2",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f9e15034-377d-39d0-8b3b-ef5db77cc107");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f9e15034-377d-39d0-8b3b-ef5db77cc107",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f9e15034-377d-39d0-8b3b-ef5db77cc107",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("62fabf75-d12e-b724-d534-f299ae593855",
	"280e025a-fdf4-2ea1-9c41-bfac6f4e77e2",
	"00000000-0000-0000-0000-000000000000",
	"efac1e86-25b5-ae49-7129-35167aed6a09",
	"f3fb82ad-fab3-79bf-5dbf-9b077cb63690");
INSERT INTO DIM_WAY
	VALUES ("efac1e86-25b5-ae49-7129-35167aed6a09",
	2320.000000,
	1376.000000,
	"280e025a-fdf4-2ea1-9c41-bfac6f4e77e2",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("f3fb82ad-fab3-79bf-5dbf-9b077cb63690",
	2320.000000,
	1472.000000,
	"280e025a-fdf4-2ea1-9c41-bfac6f4e77e2",
	"00000000-0000-0000-0000-000000000000",
	"efac1e86-25b5-ae49-7129-35167aed6a09");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"280e025a-fdf4-2ea1-9c41-bfac6f4e77e2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("280e025a-fdf4-2ea1-9c41-bfac6f4e77e2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("08c8674f-9f93-f4e9-d40a-6dc89537e3ca",
	"b906f96d-cf60-215f-e23d-fbcce8b9d135",
	"280e025a-fdf4-2ea1-9c41-bfac6f4e77e2");
INSERT INTO GD_GE
	VALUES ("7344faf6-a459-9df4-2097-d65b73230dce",
	"e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	"79786b0c-2583-a95c-3b50-3c627a6a2a28",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1b::BET4: Continue or test');
INSERT INTO GD_CON
	VALUES ("7344faf6-a459-9df4-2097-d65b73230dce",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7f2c380c-8996-8c3d-cf94-807617f1eba6",
	"7344faf6-a459-9df4-2097-d65b73230dce",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7f2c380c-8996-8c3d-cf94-807617f1eba6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7f2c380c-8996-8c3d-cf94-807617f1eba6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7f2c380c-8996-8c3d-cf94-807617f1eba6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e213ff4f-61f3-8a1d-3b5b-b1f585dc17ed",
	"7344faf6-a459-9df4-2097-d65b73230dce",
	3,
	9.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (241.000000,
	48.000000,
	"e213ff4f-61f3-8a1d-3b5b-b1f585dc17ed");
INSERT INTO DIM_GE
	VALUES (2313.000000,
	1601.000000,
	"e213ff4f-61f3-8a1d-3b5b-b1f585dc17ed",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e213ff4f-61f3-8a1d-3b5b-b1f585dc17ed",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("29b46e67-7cb7-fe3e-bced-97988a822570",
	"7344faf6-a459-9df4-2097-d65b73230dce",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"29b46e67-7cb7-fe3e-bced-97988a822570");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"29b46e67-7cb7-fe3e-bced-97988a822570",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("29b46e67-7cb7-fe3e-bced-97988a822570",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("e633d4ca-7091-5142-eada-b98385994feb",
	"7344faf6-a459-9df4-2097-d65b73230dce",
	"00000000-0000-0000-0000-000000000000",
	"a9b189f0-d19d-08bd-936a-c175b31462c8",
	"5efbb9d4-4c1d-7c59-dbc6-af3ba7a0b9ad");
INSERT INTO DIM_WAY
	VALUES ("a9b189f0-d19d-08bd-936a-c175b31462c8",
	2320.000000,
	1568.000000,
	"7344faf6-a459-9df4-2097-d65b73230dce",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("5efbb9d4-4c1d-7c59-dbc6-af3ba7a0b9ad",
	2320.000000,
	1680.000000,
	"7344faf6-a459-9df4-2097-d65b73230dce",
	"00000000-0000-0000-0000-000000000000",
	"a9b189f0-d19d-08bd-936a-c175b31462c8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7344faf6-a459-9df4-2097-d65b73230dce",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7344faf6-a459-9df4-2097-d65b73230dce",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("5464e623-c51f-46ba-584a-b0826d42b82e",
	"2e85bc54-9d2e-cb31-e843-2b684697281e",
	"7344faf6-a459-9df4-2097-d65b73230dce");
INSERT INTO DIM_DIA
	VALUES ("e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	'Event Instance',
	21,
	'EV',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("7695bbaf-5f4d-4f46-3a0d-4621d0da66b7",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_BATTR
	VALUES ("7695bbaf-5f4d-4f46-3a0d-4621d0da66b7",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_ATTR
	VALUES ("7695bbaf-5f4d-4f46-3a0d-4621d0da66b7",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("d78af3a9-3b82-a0fd-47cb-fa24b6dcf6b9",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_BATTR
	VALUES ("d78af3a9-3b82-a0fd-47cb-fa24b6dcf6b9",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_ATTR
	VALUES ("d78af3a9-3b82-a0fd-47cb-fa24b6dcf6b9",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"7695bbaf-5f4d-4f46-3a0d-4621d0da66b7",
	'shutdown_count',
	'',
	'',
	'shutdown_count',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5fa613f1-f692-0bb9-f3a6-cd5b467e292c",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_BATTR
	VALUES ("5fa613f1-f692-0bb9-f3a6-cd5b467e292c",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_ATTR
	VALUES ("5fa613f1-f692-0bb9-f3a6-cd5b467e292c",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"d78af3a9-3b82-a0fd-47cb-fa24b6dcf6b9",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_OIDA
	VALUES ("7695bbaf-5f4d-4f46-3a0d-4621d0da66b7",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_ID
	VALUES (2,
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO SM_ISM
	VALUES ("5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO SM_SM
	VALUES ("5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	'',
	7);
INSERT INTO SM_MOORE
	VALUES ("5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_EVTDI
	VALUES ("adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	'message',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_LEVT
	VALUES ("32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Event Instance',
	0,
	'',
	'EV1',
	'');
INSERT INTO SM_LEVT
	VALUES ("f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	2,
	'shutdown',
	0,
	'',
	'EV2',
	'');
INSERT INTO SM_STATE
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'dummy',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"ffc4c4e4-39fe-1812-0376-186008fa5df8");
INSERT INTO SM_AH
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_ACT
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	1,
	'',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'shutdown',
	2,
	0);
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"a6d095bc-384d-5c44-e5c9-f26c6982921e");
INSERT INTO SM_AH
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_ACT
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	1,
	'self.shutdown_count = self.shutdown_count - 1;

if ( self.shutdown_count == 0 )
  bridge ARCH::shutdown();
end if;',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("73641449-6e50-c4dc-893d-b010d8f1d724",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"73641449-6e50-c4dc-893d-b010d8f1d724");
INSERT INTO SM_AH
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_ACT
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("73641449-6e50-c4dc-893d-b010d8f1d724",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("58982c68-0b67-fb2a-d66b-84b6496fe03a",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("20d4cebb-d756-0fca-c8ee-b55a7a981de4",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"58982c68-0b67-fb2a-d66b-84b6496fe03a");
INSERT INTO SM_AH
	VALUES ("20d4cebb-d756-0fca-c8ee-b55a7a981de4",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_ACT
	VALUES ("20d4cebb-d756-0fca-c8ee-b55a7a981de4",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("58982c68-0b67-fb2a-d66b-84b6496fe03a",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("4e680752-57da-475b-d8c4-11963be191ba",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("ceb67e61-7e47-925b-4f46-37bb66861e62",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"4e680752-57da-475b-d8c4-11963be191ba");
INSERT INTO SM_AH
	VALUES ("ceb67e61-7e47-925b-4f46-37bb66861e62",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_ACT
	VALUES ("ceb67e61-7e47-925b-4f46-37bb66861e62",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("4e680752-57da-475b-d8c4-11963be191ba",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("cf95098f-4252-ba65-3456-c9b4a1343e0f",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("c7bfa5ad-ef47-cc7f-eec9-dc3c5dd57874",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"cf95098f-4252-ba65-3456-c9b4a1343e0f");
INSERT INTO SM_AH
	VALUES ("c7bfa5ad-ef47-cc7f-eec9-dc3c5dd57874",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_ACT
	VALUES ("c7bfa5ad-ef47-cc7f-eec9-dc3c5dd57874",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("cf95098f-4252-ba65-3456-c9b4a1343e0f",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("2da66692-6a75-5f23-3235-2836f7d3d562",
	8,
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("514129c6-4a43-542b-780a-dd795002d26d",
	"2da66692-6a75-5f23-3235-2836f7d3d562",
	"ffc4c4e4-39fe-1812-0376-186008fa5df8",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy');
INSERT INTO GD_SHP
	VALUES ("514129c6-4a43-542b-780a-dd795002d26d");
INSERT INTO GD_NCS
	VALUES ("514129c6-4a43-542b-780a-dd795002d26d");
INSERT INTO DIM_ND
	VALUES (288.000000,
	128.000000,
	"514129c6-4a43-542b-780a-dd795002d26d");
INSERT INTO DIM_GE
	VALUES (1856.000000,
	1328.000000,
	"514129c6-4a43-542b-780a-dd795002d26d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("514129c6-4a43-542b-780a-dd795002d26d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("a24f6cbf-0b02-6f93-6120-ad9575eb8fc0",
	1888.000000,
	1328.000000,
	"514129c6-4a43-542b-780a-dd795002d26d");
INSERT INTO DIM_CON
	VALUES ("84e04458-b87c-a413-28d6-0842e5a6c0ca",
	2016.000000,
	1328.000000,
	"514129c6-4a43-542b-780a-dd795002d26d");
INSERT INTO DIM_CON
	VALUES ("4ba85157-cf5f-9b26-a37d-b5d72993497a",
	2144.000000,
	1408.000000,
	"514129c6-4a43-542b-780a-dd795002d26d");
INSERT INTO DIM_CON
	VALUES ("21176cc7-0ded-dcd6-6262-1ec3c049d929",
	1856.000000,
	1392.000000,
	"514129c6-4a43-542b-780a-dd795002d26d");
INSERT INTO GD_GE
	VALUES ("f3667aa4-d111-2978-b8a2-34845d1aaad1",
	"2da66692-6a75-5f23-3235-2836f7d3d562",
	"a6d095bc-384d-5c44-e5c9-f26c6982921e",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown');
INSERT INTO GD_SHP
	VALUES ("f3667aa4-d111-2978-b8a2-34845d1aaad1");
INSERT INTO GD_NCS
	VALUES ("f3667aa4-d111-2978-b8a2-34845d1aaad1");
INSERT INTO DIM_ND
	VALUES (288.000000,
	128.000000,
	"f3667aa4-d111-2978-b8a2-34845d1aaad1");
INSERT INTO DIM_GE
	VALUES (1856.000000,
	1056.000000,
	"f3667aa4-d111-2978-b8a2-34845d1aaad1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f3667aa4-d111-2978-b8a2-34845d1aaad1",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("10c08d68-cba9-d26c-1601-1b47c050757b",
	1920.000000,
	1056.000000,
	"f3667aa4-d111-2978-b8a2-34845d1aaad1");
INSERT INTO DIM_CON
	VALUES ("f7fd8c56-135b-0b11-0905-250d54335cb8",
	2096.000000,
	1056.000000,
	"f3667aa4-d111-2978-b8a2-34845d1aaad1");
INSERT INTO DIM_CON
	VALUES ("ca6396a8-76b3-3d49-9830-04fc2fe09dd2",
	2144.000000,
	1120.000000,
	"f3667aa4-d111-2978-b8a2-34845d1aaad1");
INSERT INTO DIM_CON
	VALUES ("501d3d4d-1c13-9ea0-c023-c86a77b4991e",
	1856.000000,
	1120.000000,
	"f3667aa4-d111-2978-b8a2-34845d1aaad1");
INSERT INTO GD_GE
	VALUES ("c20c8c82-a549-e6aa-4380-384a5d117f1b",
	"2da66692-6a75-5f23-3235-2836f7d3d562",
	"73641449-6e50-c4dc-893d-b010d8f1d724",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy::EV1: Event Instance');
INSERT INTO GD_CON
	VALUES ("c20c8c82-a549-e6aa-4380-384a5d117f1b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("979bcac5-c929-76ac-7b18-d2090f6fca01",
	"c20c8c82-a549-e6aa-4380-384a5d117f1b",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"979bcac5-c929-76ac-7b18-d2090f6fca01");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"979bcac5-c929-76ac-7b18-d2090f6fca01",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("979bcac5-c929-76ac-7b18-d2090f6fca01",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b086e9ea-a537-4927-083c-5cf5f26646d4",
	"c20c8c82-a549-e6aa-4380-384a5d117f1b",
	3,
	-7.000000,
	-28.000000);
INSERT INTO DIM_ND
	VALUES (284.000000,
	59.000000,
	"b086e9ea-a537-4927-083c-5cf5f26646d4");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1243.000000,
	"b086e9ea-a537-4927-083c-5cf5f26646d4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b086e9ea-a537-4927-083c-5cf5f26646d4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a53975b8-f2b9-bb08-a25c-ed8b44beebd1",
	"c20c8c82-a549-e6aa-4380-384a5d117f1b",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a53975b8-f2b9-bb08-a25c-ed8b44beebd1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a53975b8-f2b9-bb08-a25c-ed8b44beebd1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a53975b8-f2b9-bb08-a25c-ed8b44beebd1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("9b541927-4b64-f0e1-f970-af01a8cc34e4",
	"c20c8c82-a549-e6aa-4380-384a5d117f1b",
	"00000000-0000-0000-0000-000000000000",
	"11df28f9-1db0-9565-d329-8ea513feb1bf",
	"48a6fca6-968f-2828-5ff2-814537099057");
INSERT INTO GD_LS
	VALUES ("6d8d2bc5-9a35-58fb-5e2b-1c2f68d2b312",
	"c20c8c82-a549-e6aa-4380-384a5d117f1b",
	"9b541927-4b64-f0e1-f970-af01a8cc34e4",
	"48a6fca6-968f-2828-5ff2-814537099057",
	"e071f86c-532a-2b20-6ff8-9fc7a55fe55f");
INSERT INTO GD_LS
	VALUES ("6cf90629-629b-6679-56ea-d7cb73ee0c7a",
	"c20c8c82-a549-e6aa-4380-384a5d117f1b",
	"6d8d2bc5-9a35-58fb-5e2b-1c2f68d2b312",
	"e071f86c-532a-2b20-6ff8-9fc7a55fe55f",
	"0b8bc06f-dcbf-0f3b-4810-54ab15b7d938");
INSERT INTO DIM_WAY
	VALUES ("11df28f9-1db0-9565-d329-8ea513feb1bf",
	1888.000000,
	1328.000000,
	"c20c8c82-a549-e6aa-4380-384a5d117f1b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("48a6fca6-968f-2828-5ff2-814537099057",
	1888.000000,
	1296.000000,
	"c20c8c82-a549-e6aa-4380-384a5d117f1b",
	"00000000-0000-0000-0000-000000000000",
	"11df28f9-1db0-9565-d329-8ea513feb1bf");
INSERT INTO DIM_WAY
	VALUES ("e071f86c-532a-2b20-6ff8-9fc7a55fe55f",
	2016.000000,
	1296.000000,
	"c20c8c82-a549-e6aa-4380-384a5d117f1b",
	"00000000-0000-0000-0000-000000000000",
	"48a6fca6-968f-2828-5ff2-814537099057");
INSERT INTO DIM_WAY
	VALUES ("0b8bc06f-dcbf-0f3b-4810-54ab15b7d938",
	2016.000000,
	1328.000000,
	"c20c8c82-a549-e6aa-4380-384a5d117f1b",
	"00000000-0000-0000-0000-000000000000",
	"e071f86c-532a-2b20-6ff8-9fc7a55fe55f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c20c8c82-a549-e6aa-4380-384a5d117f1b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c20c8c82-a549-e6aa-4380-384a5d117f1b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a24f6cbf-0b02-6f93-6120-ad9575eb8fc0",
	"84e04458-b87c-a413-28d6-0842e5a6c0ca",
	"c20c8c82-a549-e6aa-4380-384a5d117f1b");
INSERT INTO GD_GE
	VALUES ("6c37d629-b338-7f16-56a4-2aed21f9a674",
	"2da66692-6a75-5f23-3235-2836f7d3d562",
	"58982c68-0b67-fb2a-d66b-84b6496fe03a",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown::EV2: shutdown');
INSERT INTO GD_CON
	VALUES ("6c37d629-b338-7f16-56a4-2aed21f9a674",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c683b7ac-e29e-eb08-a1ac-7667d5109705",
	"6c37d629-b338-7f16-56a4-2aed21f9a674",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c683b7ac-e29e-eb08-a1ac-7667d5109705");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c683b7ac-e29e-eb08-a1ac-7667d5109705",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c683b7ac-e29e-eb08-a1ac-7667d5109705",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7239632a-b562-e8e4-2fca-c8baa4176484",
	"6c37d629-b338-7f16-56a4-2aed21f9a674",
	3,
	0.000000,
	-29.000000);
INSERT INTO DIM_ND
	VALUES (144.000000,
	44.000000,
	"7239632a-b562-e8e4-2fca-c8baa4176484");
INSERT INTO DIM_GE
	VALUES (1983.000000,
	954.000000,
	"7239632a-b562-e8e4-2fca-c8baa4176484",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7239632a-b562-e8e4-2fca-c8baa4176484",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d7e6575f-7e22-9a60-9f19-f0346d0193a1",
	"6c37d629-b338-7f16-56a4-2aed21f9a674",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d7e6575f-7e22-9a60-9f19-f0346d0193a1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d7e6575f-7e22-9a60-9f19-f0346d0193a1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d7e6575f-7e22-9a60-9f19-f0346d0193a1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("8eb395f5-9be8-7cdb-6477-60b861cb0649",
	"6c37d629-b338-7f16-56a4-2aed21f9a674",
	"00000000-0000-0000-0000-000000000000",
	"93df0664-2c25-c27a-2db8-1c4ea8bc1e68",
	"3dd8eef2-c1d0-8a9c-da45-4316106b58c3");
INSERT INTO GD_LS
	VALUES ("2725b05b-bcf1-c063-4842-831c2cfa7c0e",
	"6c37d629-b338-7f16-56a4-2aed21f9a674",
	"8eb395f5-9be8-7cdb-6477-60b861cb0649",
	"3dd8eef2-c1d0-8a9c-da45-4316106b58c3",
	"7f730a7f-c73e-4ae1-5af5-671cc99d32f5");
INSERT INTO GD_LS
	VALUES ("2839dd50-bda9-c967-1ebb-731592cc69c2",
	"6c37d629-b338-7f16-56a4-2aed21f9a674",
	"2725b05b-bcf1-c063-4842-831c2cfa7c0e",
	"7f730a7f-c73e-4ae1-5af5-671cc99d32f5",
	"75aefc8d-f9da-06c9-ea7f-21c63ca638fe");
INSERT INTO DIM_WAY
	VALUES ("93df0664-2c25-c27a-2db8-1c4ea8bc1e68",
	1920.000000,
	1056.000000,
	"6c37d629-b338-7f16-56a4-2aed21f9a674",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("3dd8eef2-c1d0-8a9c-da45-4316106b58c3",
	1920.000000,
	1008.000000,
	"6c37d629-b338-7f16-56a4-2aed21f9a674",
	"00000000-0000-0000-0000-000000000000",
	"93df0664-2c25-c27a-2db8-1c4ea8bc1e68");
INSERT INTO DIM_WAY
	VALUES ("7f730a7f-c73e-4ae1-5af5-671cc99d32f5",
	2096.000000,
	1008.000000,
	"6c37d629-b338-7f16-56a4-2aed21f9a674",
	"00000000-0000-0000-0000-000000000000",
	"3dd8eef2-c1d0-8a9c-da45-4316106b58c3");
INSERT INTO DIM_WAY
	VALUES ("75aefc8d-f9da-06c9-ea7f-21c63ca638fe",
	2096.000000,
	1056.000000,
	"6c37d629-b338-7f16-56a4-2aed21f9a674",
	"00000000-0000-0000-0000-000000000000",
	"7f730a7f-c73e-4ae1-5af5-671cc99d32f5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6c37d629-b338-7f16-56a4-2aed21f9a674",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6c37d629-b338-7f16-56a4-2aed21f9a674",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("10c08d68-cba9-d26c-1601-1b47c050757b",
	"f7fd8c56-135b-0b11-0905-250d54335cb8",
	"6c37d629-b338-7f16-56a4-2aed21f9a674");
INSERT INTO GD_GE
	VALUES ("e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"2da66692-6a75-5f23-3235-2836f7d3d562",
	"cf95098f-4252-ba65-3456-c9b4a1343e0f",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy::EV2: shutdown');
INSERT INTO GD_CON
	VALUES ("e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5ab9d6e1-8766-9159-a969-0d66cc94932c",
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5ab9d6e1-8766-9159-a969-0d66cc94932c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5ab9d6e1-8766-9159-a969-0d66cc94932c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5ab9d6e1-8766-9159-a969-0d66cc94932c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3cc53b7c-42d2-8e6b-02b1-d61320ceec16",
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	3,
	23.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (134.000000,
	42.000000,
	"3cc53b7c-42d2-8e6b-02b1-d61320ceec16");
INSERT INTO DIM_GE
	VALUES (2247.000000,
	1247.000000,
	"3cc53b7c-42d2-8e6b-02b1-d61320ceec16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3cc53b7c-42d2-8e6b-02b1-d61320ceec16",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("08258c40-544c-0ab3-3b93-58c75dda90bd",
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"08258c40-544c-0ab3-3b93-58c75dda90bd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"08258c40-544c-0ab3-3b93-58c75dda90bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("08258c40-544c-0ab3-3b93-58c75dda90bd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("35ae7550-4939-3ce4-d8bc-b0850187ac01",
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"00000000-0000-0000-0000-000000000000",
	"35172b1e-10f8-dcca-d1cf-9f3a157410fb",
	"cdbaf05f-0694-983b-44a6-a6a5f65ac65a");
INSERT INTO GD_LS
	VALUES ("65be6c4f-3b09-0700-1515-660fbb2ef3dc",
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"35ae7550-4939-3ce4-d8bc-b0850187ac01",
	"cdbaf05f-0694-983b-44a6-a6a5f65ac65a",
	"6f42aa8d-2e23-872b-29d6-dcdf69e0b736");
INSERT INTO GD_LS
	VALUES ("5bca0c2b-5963-99d9-0204-37f2e74ff565",
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"65be6c4f-3b09-0700-1515-660fbb2ef3dc",
	"6f42aa8d-2e23-872b-29d6-dcdf69e0b736",
	"c2623948-d7cd-cd44-5187-04be744f500b");
INSERT INTO DIM_WAY
	VALUES ("35172b1e-10f8-dcca-d1cf-9f3a157410fb",
	2144.000000,
	1408.000000,
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("cdbaf05f-0694-983b-44a6-a6a5f65ac65a",
	2240.000000,
	1408.000000,
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"00000000-0000-0000-0000-000000000000",
	"35172b1e-10f8-dcca-d1cf-9f3a157410fb");
INSERT INTO DIM_WAY
	VALUES ("6f42aa8d-2e23-872b-29d6-dcdf69e0b736",
	2240.000000,
	1120.000000,
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"00000000-0000-0000-0000-000000000000",
	"cdbaf05f-0694-983b-44a6-a6a5f65ac65a");
INSERT INTO DIM_WAY
	VALUES ("c2623948-d7cd-cd44-5187-04be744f500b",
	2144.000000,
	1120.000000,
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"00000000-0000-0000-0000-000000000000",
	"6f42aa8d-2e23-872b-29d6-dcdf69e0b736");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("4ba85157-cf5f-9b26-a37d-b5d72993497a",
	"ca6396a8-76b3-3d49-9830-04fc2fe09dd2",
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d");
INSERT INTO GD_GE
	VALUES ("96e0e5f6-ad11-bb27-6c00-cae432b09fa1",
	"2da66692-6a75-5f23-3235-2836f7d3d562",
	"4e680752-57da-475b-d8c4-11963be191ba",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown::EV1: Event Instance');
INSERT INTO GD_CON
	VALUES ("96e0e5f6-ad11-bb27-6c00-cae432b09fa1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8315c36d-0463-2c68-1806-7ff699223cbd",
	"96e0e5f6-ad11-bb27-6c00-cae432b09fa1",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8315c36d-0463-2c68-1806-7ff699223cbd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8315c36d-0463-2c68-1806-7ff699223cbd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8315c36d-0463-2c68-1806-7ff699223cbd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0ad29d7c-9255-4a11-c08c-047a44190070",
	"96e0e5f6-ad11-bb27-6c00-cae432b09fa1",
	3,
	18.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (136.000000,
	44.000000,
	"0ad29d7c-9255-4a11-c08c-047a44190070");
INSERT INTO DIM_GE
	VALUES (1778.000000,
	1237.000000,
	"0ad29d7c-9255-4a11-c08c-047a44190070",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0ad29d7c-9255-4a11-c08c-047a44190070",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("09fec0dc-87f6-acba-c9d5-db625243768a",
	"96e0e5f6-ad11-bb27-6c00-cae432b09fa1",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"09fec0dc-87f6-acba-c9d5-db625243768a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"09fec0dc-87f6-acba-c9d5-db625243768a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("09fec0dc-87f6-acba-c9d5-db625243768a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("5320c974-79d4-9094-4283-3b00427f2a6f",
	"96e0e5f6-ad11-bb27-6c00-cae432b09fa1",
	"00000000-0000-0000-0000-000000000000",
	"7f555884-0acb-7381-a376-e4322c8739d8",
	"b1488ba2-4530-c2a1-55a6-f02814b8b040");
INSERT INTO GD_LS
	VALUES ("3245b744-649d-41b6-7822-540e01590e09",
	"96e0e5f6-ad11-bb27-6c00-cae432b09fa1",
	"5320c974-79d4-9094-4283-3b00427f2a6f",
	"b1488ba2-4530-c2a1-55a6-f02814b8b040",
	"09e7c2f1-7cd0-d825-cdc7-58f8963c3342");
INSERT INTO GD_LS
	VALUES ("fd3f2023-6b1a-03bc-36b4-a7075d81700a",
	"96e0e5f6-ad11-bb27-6c00-cae432b09fa1",
	"3245b744-649d-41b6-7822-540e01590e09",
	"09e7c2f1-7cd0-d825-cdc7-58f8963c3342",
	"2662724c-abf7-4436-c0db-bc6063846415");
INSERT INTO DIM_WAY
	VALUES ("7f555884-0acb-7381-a376-e4322c8739d8",
	1856.000000,
	1120.000000,
	"96e0e5f6-ad11-bb27-6c00-cae432b09fa1",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("b1488ba2-4530-c2a1-55a6-f02814b8b040",
	1776.000000,
	1120.000000,
	"96e0e5f6-ad11-bb27-6c00-cae432b09fa1",
	"00000000-0000-0000-0000-000000000000",
	"7f555884-0acb-7381-a376-e4322c8739d8");
INSERT INTO DIM_WAY
	VALUES ("09e7c2f1-7cd0-d825-cdc7-58f8963c3342",
	1776.000000,
	1392.000000,
	"96e0e5f6-ad11-bb27-6c00-cae432b09fa1",
	"00000000-0000-0000-0000-000000000000",
	"b1488ba2-4530-c2a1-55a6-f02814b8b040");
INSERT INTO DIM_WAY
	VALUES ("2662724c-abf7-4436-c0db-bc6063846415",
	1856.000000,
	1392.000000,
	"96e0e5f6-ad11-bb27-6c00-cae432b09fa1",
	"00000000-0000-0000-0000-000000000000",
	"09e7c2f1-7cd0-d825-cdc7-58f8963c3342");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"96e0e5f6-ad11-bb27-6c00-cae432b09fa1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("96e0e5f6-ad11-bb27-6c00-cae432b09fa1",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("501d3d4d-1c13-9ea0-c023-c86a77b4991e",
	"21176cc7-0ded-dcd6-6262-1ec3c049d929",
	"96e0e5f6-ad11-bb27-6c00-cae432b09fa1");
INSERT INTO DIM_DIA
	VALUES ("2da66692-6a75-5f23-3235-2836f7d3d562",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	'Expression Test Object B',
	12,
	'ETOB',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_BATTR
	VALUES ("3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_ATTR
	VALUES ("3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"00000000-0000-0000-0000-000000000000",
	'etob_id',
	'',
	'',
	'etob_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_BATTR
	VALUES ("45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_ATTR
	VALUES ("45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4953388e-55f5-ecd5-7d4e-dd164baf3ed8",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_BATTR
	VALUES ("4953388e-55f5-ecd5-7d4e-dd164baf3ed8",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_ATTR
	VALUES ("4953388e-55f5-ecd5-7d4e-dd164baf3ed8",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_BATTR
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_ATTR
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"4953388e-55f5-ecd5-7d4e-dd164baf3ed8",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_BATTR
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_ATTR
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"80fde00a-1975-1181-0799-19d319814ba2",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_BATTR
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_ATTR
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"11d0b125-877e-7584-80f0-85bcac5e64a7",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_BATTR
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_ATTR
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"fc4a3564-c576-99ad-d738-ce2e134dc98e",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_BATTR
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_ATTR
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"11b3b33a-863f-0583-331c-066d47b7e24d",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("71ec8e80-08af-8589-0172-cbee963c83a1",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_BATTR
	VALUES ("71ec8e80-08af-8589-0172-cbee963c83a1",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_ATTR
	VALUES ("71ec8e80-08af-8589-0172-cbee963c83a1",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("15799752-721b-413b-9fed-b6332ef07f8f",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_BATTR
	VALUES ("15799752-721b-413b-9fed-b6332ef07f8f",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_ATTR
	VALUES ("15799752-721b-413b-9fed-b6332ef07f8f",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"71ec8e80-08af-8589-0172-cbee963c83a1",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_REF
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"04fd3f21-66da-682e-ca18-9142f16d3b3b",
	"02262cc5-d9d5-4e97-5fae-f6e0aac3c193",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	"6a88fca5-3e6e-6dae-9650-e58b6b4911d8",
	"951ad794-2873-d475-7cd7-c9e00e17e71d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R8');
INSERT INTO O_RATTR
	VALUES ("6a88fca5-3e6e-6dae-9650-e58b6b4911d8",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("6a88fca5-3e6e-6dae-9650-e58b6b4911d8",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"15799752-721b-413b-9fed-b6332ef07f8f",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"22c96144-8305-abca-b854-591cdee5564f",
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	"bf144f14-8ae8-1ec0-968f-c96132ad729a",
	"ad8e527f-7f8a-b1d3-17a2-a8ece2a813be",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'etoc_id',
	'R6');
INSERT INTO O_RATTR
	VALUES ("bf144f14-8ae8-1ec0-968f-c96132ad729a",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"22c96144-8305-abca-b854-591cdee5564f",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	'etoc_id');
INSERT INTO O_ATTR
	VALUES ("bf144f14-8ae8-1ec0-968f-c96132ad729a",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"6a88fca5-3e6e-6dae-9650-e58b6b4911d8",
	'etoc_id',
	'',
	'',
	'etoc_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"3fada4f9-1878-6dd7-1906-5914adad93cc",
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	"acc6975a-0c4a-aaff-99ec-0fbf102ba84c",
	"989cd201-f183-fd27-1734-0db7efb14e23",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'btrue',
	'R6');
INSERT INTO O_RATTR
	VALUES ("acc6975a-0c4a-aaff-99ec-0fbf102ba84c",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"3fada4f9-1878-6dd7-1906-5914adad93cc",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("acc6975a-0c4a-aaff-99ec-0fbf102ba84c",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"bf144f14-8ae8-1ec0-968f-c96132ad729a",
	'r6btrue',
	'',
	'r6',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	"fead1f11-9dcf-0a41-a2f5-acf1fd55c7f7",
	"8fee6254-b6ab-a206-a6ba-2f8dbb47ce1b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'bfalse',
	'R6');
INSERT INTO O_RATTR
	VALUES ("fead1f11-9dcf-0a41-a2f5-acf1fd55c7f7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("fead1f11-9dcf-0a41-a2f5-acf1fd55c7f7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"acc6975a-0c4a-aaff-99ec-0fbf102ba84c",
	'r6bfalse',
	'',
	'r6',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	"7c27111b-5601-8905-ba68-bebcb5c02057",
	"3753592a-8926-f5c0-8141-f5aab60b273a",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'r',
	'R6');
INSERT INTO O_RATTR
	VALUES ("7c27111b-5601-8905-ba68-bebcb5c02057",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	'r');
INSERT INTO O_ATTR
	VALUES ("7c27111b-5601-8905-ba68-bebcb5c02057",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"fead1f11-9dcf-0a41-a2f5-acf1fd55c7f7",
	'r6r',
	'',
	'r6',
	'r',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	"4e9575cf-d6f9-66da-bb31-8b5eb7fb8a00",
	"1646c2b6-e1b8-2ff6-804d-2816d4def61f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	's',
	'R6');
INSERT INTO O_RATTR
	VALUES ("4e9575cf-d6f9-66da-bb31-8b5eb7fb8a00",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	's');
INSERT INTO O_ATTR
	VALUES ("4e9575cf-d6f9-66da-bb31-8b5eb7fb8a00",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"7c27111b-5601-8905-ba68-bebcb5c02057",
	'r6s',
	'',
	'r6',
	's',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"ac41f78c-bf20-3716-942e-d02f0d05f339",
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	"80785ddb-c1bf-72f4-caf0-6069104575c7",
	"7bdb5dde-4d1f-9322-83f1-d4aef5ce28fc",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'u',
	'R6');
INSERT INTO O_RATTR
	VALUES ("80785ddb-c1bf-72f4-caf0-6069104575c7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"ac41f78c-bf20-3716-942e-d02f0d05f339",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	'u');
INSERT INTO O_ATTR
	VALUES ("80785ddb-c1bf-72f4-caf0-6069104575c7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"4e9575cf-d6f9-66da-bb31-8b5eb7fb8a00",
	'r6u',
	'',
	'r6',
	'u',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"546af508-6644-720b-b9b9-0c2296469456",
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	"ce920c66-93c6-5e2e-9802-e3be3c671874",
	"955f9dc3-6792-d471-00ec-91b38ae7fb69",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'd',
	'R6');
INSERT INTO O_RATTR
	VALUES ("ce920c66-93c6-5e2e-9802-e3be3c671874",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"546af508-6644-720b-b9b9-0c2296469456",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	'd');
INSERT INTO O_ATTR
	VALUES ("ce920c66-93c6-5e2e-9802-e3be3c671874",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"80785ddb-c1bf-72f4-caf0-6069104575c7",
	'r6d',
	'',
	'r6',
	'd',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	"a09bf289-ccd2-e9bf-d8a3-b058257466dc",
	"0cf5ecb2-9f89-da33-bb16-ce0693261674",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	't',
	'R6');
INSERT INTO O_RATTR
	VALUES ("a09bf289-ccd2-e9bf-d8a3-b058257466dc",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	't');
INSERT INTO O_ATTR
	VALUES ("a09bf289-ccd2-e9bf-d8a3-b058257466dc",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"ce920c66-93c6-5e2e-9802-e3be3c671874",
	'r6t',
	'',
	'r6',
	't',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"db15a1f3-97b7-8e2e-310f-24660457e73d",
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	"2b5de8a5-ad3c-d612-49ae-b4ebc064fdd5",
	"bd201d9f-9c61-13d7-45a4-6d424fce92da",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'tim',
	'R6');
INSERT INTO O_RATTR
	VALUES ("2b5de8a5-ad3c-d612-49ae-b4ebc064fdd5",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"db15a1f3-97b7-8e2e-310f-24660457e73d",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	'tim');
INSERT INTO O_ATTR
	VALUES ("2b5de8a5-ad3c-d612-49ae-b4ebc064fdd5",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"a09bf289-ccd2-e9bf-d8a3-b058257466dc",
	'r6tim',
	'',
	'r6',
	'tim',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	"3c64d10e-3f58-5dfb-cff3-b51bd0915110",
	"144d12fb-7e88-d1fb-53aa-424716231706",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'ev',
	'R6');
INSERT INTO O_RATTR
	VALUES ("3c64d10e-3f58-5dfb-cff3-b51bd0915110",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	'ev');
INSERT INTO O_ATTR
	VALUES ("3c64d10e-3f58-5dfb-cff3-b51bd0915110",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"2b5de8a5-ad3c-d612-49ae-b4ebc064fdd5",
	'r6ev',
	'',
	'r6',
	'ev',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_OIDA
	VALUES ("15799752-721b-413b-9fed-b6332ef07f8f",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	'ev');
INSERT INTO O_OIDA
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	'u');
INSERT INTO O_OIDA
	VALUES ("45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	'd');
INSERT INTO O_OIDA
	VALUES ("71ec8e80-08af-8589-0172-cbee963c83a1",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	'tim');
INSERT INTO O_OIDA
	VALUES ("3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	'etob_id');
INSERT INTO O_OIDA
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	't');
INSERT INTO O_OIDA
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	'r');
INSERT INTO O_OIDA
	VALUES ("4953388e-55f5-ecd5-7d4e-dd164baf3ed8",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	's');
INSERT INTO O_ID
	VALUES (1,
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_ID
	VALUES (2,
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO PE_PE
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	'Expression Test Object C',
	13,
	'ETOC',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("22c96144-8305-abca-b854-591cdee5564f",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_BATTR
	VALUES ("22c96144-8305-abca-b854-591cdee5564f",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ATTR
	VALUES ("22c96144-8305-abca-b854-591cdee5564f",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"00000000-0000-0000-0000-000000000000",
	'etoc_id',
	'',
	'',
	'etoc_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3fada4f9-1878-6dd7-1906-5914adad93cc",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_BATTR
	VALUES ("3fada4f9-1878-6dd7-1906-5914adad93cc",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ATTR
	VALUES ("3fada4f9-1878-6dd7-1906-5914adad93cc",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"22c96144-8305-abca-b854-591cdee5564f",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_BATTR
	VALUES ("5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ATTR
	VALUES ("5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"3fada4f9-1878-6dd7-1906-5914adad93cc",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_BATTR
	VALUES ("5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ATTR
	VALUES ("5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_BATTR
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ATTR
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ac41f78c-bf20-3716-942e-d02f0d05f339",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_BATTR
	VALUES ("ac41f78c-bf20-3716-942e-d02f0d05f339",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ATTR
	VALUES ("ac41f78c-bf20-3716-942e-d02f0d05f339",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("546af508-6644-720b-b9b9-0c2296469456",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_BATTR
	VALUES ("546af508-6644-720b-b9b9-0c2296469456",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ATTR
	VALUES ("546af508-6644-720b-b9b9-0c2296469456",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"ac41f78c-bf20-3716-942e-d02f0d05f339",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_BATTR
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ATTR
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"546af508-6644-720b-b9b9-0c2296469456",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("db15a1f3-97b7-8e2e-310f-24660457e73d",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_BATTR
	VALUES ("db15a1f3-97b7-8e2e-310f-24660457e73d",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ATTR
	VALUES ("db15a1f3-97b7-8e2e-310f-24660457e73d",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_BATTR
	VALUES ("517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ATTR
	VALUES ("517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"db15a1f3-97b7-8e2e-310f-24660457e73d",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_OIDA
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	's');
INSERT INTO O_OIDA
	VALUES ("517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	'ev');
INSERT INTO O_OIDA
	VALUES ("546af508-6644-720b-b9b9-0c2296469456",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	'd');
INSERT INTO O_OIDA
	VALUES ("ac41f78c-bf20-3716-942e-d02f0d05f339",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	'u');
INSERT INTO O_OIDA
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	't');
INSERT INTO O_OIDA
	VALUES ("5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	'r');
INSERT INTO O_OIDA
	VALUES ("3fada4f9-1878-6dd7-1906-5914adad93cc",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("db15a1f3-97b7-8e2e-310f-24660457e73d",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	'tim');
INSERT INTO O_OIDA
	VALUES ("5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("22c96144-8305-abca-b854-591cdee5564f",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	'etoc_id');
INSERT INTO O_ID
	VALUES (1,
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ID
	VALUES (2,
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO PE_PE
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	'Expression Test',
	3,
	'ET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("fec823f3-30b7-8aec-c9b7-169afcf2e052",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	'no_parm_ret_void',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'LOG::LogFailure(message:"Operation ET::no_parm_ret_void should not have been translated.");
',
	1,
	'',
	"79d2f928-3950-26af-ffc1-c07aed1996ff",
	0);
INSERT INTO O_TFR
	VALUES ("e46687fc-d696-59c0-16bf-f541d57a57d1",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	'i_parm_ret_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'LOG::LogFailure(message:"Operation ET::i_parm_ret_i should not have been translated.");
return param.i;',
	1,
	'',
	"33c980d2-8225-907f-dfd4-e154279837ce",
	0);
INSERT INTO O_TPARM
	VALUES ("21f9c83c-5d29-cdd6-3825-1696153c01bb",
	"e46687fc-d696-59c0-16bf-f541d57a57d1",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("3c55c927-841a-b2ef-2e4f-65509835d7e6",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	'r_parm_ret_r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'LOG::LogFailure(message:"Operation ET::r_parm_ret_r should not have been translated.");
return param.r;',
	1,
	'',
	"fec823f3-30b7-8aec-c9b7-169afcf2e052",
	0);
INSERT INTO O_TPARM
	VALUES ("879d19f9-1ecd-9004-d179-1280d2b32a6e",
	"3c55c927-841a-b2ef-2e4f-65509835d7e6",
	'r',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("bd0d89e0-a4f6-1cf8-6797-98220022bdef",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	'b_parm_ret_b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'LOG::LogFailure(message:"Operation ET::b_parm_ret_b should not have been translated.");
return param.b;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TPARM
	VALUES ("0e284941-c030-3774-95ef-053390cb4782",
	"bd0d89e0-a4f6-1cf8-6797-98220022bdef",
	'b',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("e2d13fba-f144-700f-8a57-89cd77de0882",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	's_parm_ret_s',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'LOG::LogFailure(message:"Operation ET::s_parm_ret_s should not have been translated.");
return param.s;',
	1,
	'',
	"3c55c927-841a-b2ef-2e4f-65509835d7e6",
	0);
INSERT INTO O_TPARM
	VALUES ("b5d290fe-631e-9036-2fac-36d33583d0ff",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("51c69cc9-966b-1f42-77f3-40556127d89a",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	'u_parm_ret_u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'LOG::LogFailure(message:"Operation ET::u_parm_ret_u should not have been translated.");
return param.u;',
	1,
	'',
	"61b47bf0-bbf7-9b3e-1647-9b192abee0e4",
	0);
INSERT INTO O_TPARM
	VALUES ("943754b7-33dc-17e4-1c65-a3e77c58acce",
	"51c69cc9-966b-1f42-77f3-40556127d89a",
	'u',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("33c980d2-8225-907f-dfd4-e154279837ce",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	'd_parm_ret_d',
	'',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'LOG::LogFailure(message:"Operation ET::d_parm_ret_d should not have been translated.");
return param.d;',
	1,
	'',
	"bd0d89e0-a4f6-1cf8-6797-98220022bdef",
	0);
INSERT INTO O_TPARM
	VALUES ("b65ba35c-704d-f62f-6e35-d1893e03bd17",
	"33c980d2-8225-907f-dfd4-e154279837ce",
	'd',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("61b47bf0-bbf7-9b3e-1647-9b192abee0e4",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	't_parm_ret_t',
	'',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'LOG::LogFailure(message:"Operation ET::t_parm_ret_t should not have been translated.");
return param.t;',
	1,
	'',
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	0);
INSERT INTO O_TPARM
	VALUES ("87e77b74-e477-0fa3-1a29-7c650970f164",
	"61b47bf0-bbf7-9b3e-1647-9b192abee0e4",
	't',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("79d2f928-3950-26af-ffc1-c07aed1996ff",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	'i_parm_ret_void',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'LOG::LogFailure(message:"Operation ET::i_parm_ret_void should not have been translated.");',
	1,
	'',
	"e46687fc-d696-59c0-16bf-f541d57a57d1",
	0);
INSERT INTO O_TPARM
	VALUES ("e518562f-637b-b6a1-f4aa-28a21feea659",
	"79d2f928-3950-26af-ffc1-c07aed1996ff",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("9adc1dd1-bd35-472d-5c73-97f8244fa0fc",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	'waitOneSec',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'',
	1,
	'',
	"51c69cc9-966b-1f42-77f3-40556127d89a",
	0);
INSERT INTO O_NBATTR
	VALUES ("e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"00000000-0000-0000-0000-000000000000",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3be90946-54fc-5e5a-7864-544a9e840a8e",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("3be90946-54fc-5e5a-7864-544a9e840a8e",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("3be90946-54fc-5e5a-7864-544a9e840a8e",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4af751e0-065f-944b-738c-c44aa3cde0a8",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("4af751e0-065f-944b-738c-c44aa3cde0a8",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("4af751e0-065f-944b-738c-c44aa3cde0a8",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"3be90946-54fc-5e5a-7864-544a9e840a8e",
	'i',
	'',
	'',
	'i',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("58f7272d-c26a-c488-d369-32224ccdd58b",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("58f7272d-c26a-c488-d369-32224ccdd58b",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("58f7272d-c26a-c488-d369-32224ccdd58b",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"4af751e0-065f-944b-738c-c44aa3cde0a8",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1c4a6208-2dca-f33f-f764-2915fb4ba55b",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("1c4a6208-2dca-f33f-f764-2915fb4ba55b",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("1c4a6208-2dca-f33f-f764-2915fb4ba55b",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"58f7272d-c26a-c488-d369-32224ccdd58b",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("535f0f67-b157-d69f-8600-5dc54e0d2a8f",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("535f0f67-b157-d69f-8600-5dc54e0d2a8f",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("535f0f67-b157-d69f-8600-5dc54e0d2a8f",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"1c4a6208-2dca-f33f-f764-2915fb4ba55b",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a5e50109-cb96-2e62-7549-4e0c206d33a9",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("a5e50109-cb96-2e62-7549-4e0c206d33a9",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("a5e50109-cb96-2e62-7549-4e0c206d33a9",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"535f0f67-b157-d69f-8600-5dc54e0d2a8f",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("f0e47f64-d1b2-47c5-638e-81b7ce8c783c",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("f0e47f64-d1b2-47c5-638e-81b7ce8c783c",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("f0e47f64-d1b2-47c5-638e-81b7ce8c783c",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"a5e50109-cb96-2e62-7549-4e0c206d33a9",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5df09b76-e181-32ec-bb6f-df6728842e73",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("5df09b76-e181-32ec-bb6f-df6728842e73",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("5df09b76-e181-32ec-bb6f-df6728842e73",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"f0e47f64-d1b2-47c5-638e-81b7ce8c783c",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("58c00d4d-6c47-e318-e2ee-ec717809cb1a",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("58c00d4d-6c47-e318-e2ee-ec717809cb1a",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("58c00d4d-6c47-e318-e2ee-ec717809cb1a",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"5df09b76-e181-32ec-bb6f-df6728842e73",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a6a7fd57-5b34-8923-30d0-edcc991d4afb",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("a6a7fd57-5b34-8923-30d0-edcc991d4afb",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("a6a7fd57-5b34-8923-30d0-edcc991d4afb",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"58c00d4d-6c47-e318-e2ee-ec717809cb1a",
	'log_id',
	'',
	'',
	'log_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ede8fd5f-90ba-4f97-4ff3-25926e571b81",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("ede8fd5f-90ba-4f97-4ff3-25926e571b81",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("ede8fd5f-90ba-4f97-4ff3-25926e571b81",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"a6a7fd57-5b34-8923-30d0-edcc991d4afb",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("6e7e8651-03f3-f134-dbbc-7496b70b1369",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("6e7e8651-03f3-f134-dbbc-7496b70b1369",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("6e7e8651-03f3-f134-dbbc-7496b70b1369",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"ede8fd5f-90ba-4f97-4ff3-25926e571b81",
	'my_b',
	'',
	'',
	'my_b',
	0,
	"cb708e96-e508-4b74-651d-60a4e6c3d977",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("028cea28-10fe-feeb-3f7c-89cd9559cf7a",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("028cea28-10fe-feeb-3f7c-89cd9559cf7a",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("028cea28-10fe-feeb-3f7c-89cd9559cf7a",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"6e7e8651-03f3-f134-dbbc-7496b70b1369",
	'my_i',
	'',
	'',
	'my_i',
	0,
	"00a1b3b7-7b31-b91b-a015-0bdfb1adc348",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("acdbda07-60ee-9c66-03a2-fb4d9b1b35d9",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("acdbda07-60ee-9c66-03a2-fb4d9b1b35d9",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("acdbda07-60ee-9c66-03a2-fb4d9b1b35d9",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"028cea28-10fe-feeb-3f7c-89cd9559cf7a",
	'my_r',
	'',
	'',
	'my_r',
	0,
	"037ef492-b94c-32a9-42e1-b007dbceb9cf",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("57ef1595-1d7b-ebf8-d34e-b5f2c6740dd4",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("57ef1595-1d7b-ebf8-d34e-b5f2c6740dd4",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("57ef1595-1d7b-ebf8-d34e-b5f2c6740dd4",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"acdbda07-60ee-9c66-03a2-fb4d9b1b35d9",
	'my_s',
	'',
	'',
	'my_s',
	0,
	"ac25881d-a818-3549-8225-c50b0c11a3e2",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("b19353dc-8cb5-2cd2-c3e1-92c8146e8749",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("b19353dc-8cb5-2cd2-c3e1-92c8146e8749",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("b19353dc-8cb5-2cd2-c3e1-92c8146e8749",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"57ef1595-1d7b-ebf8-d34e-b5f2c6740dd4",
	'my_u',
	'',
	'',
	'my_u',
	0,
	"6d6edcea-5845-a918-db2c-105d9878c9a5",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"c9422f3a-4745-9614-ff03-d2088b29fad3",
	"6f9cac5f-d145-2003-3c68-d84bc896ad7f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'etob_id',
	'R1');
INSERT INTO O_RATTR
	VALUES ("c9422f3a-4745-9614-ff03-d2088b29fad3",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	1,
	'etob_id');
INSERT INTO O_ATTR
	VALUES ("c9422f3a-4745-9614-ff03-d2088b29fad3",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"b19353dc-8cb5-2cd2-c3e1-92c8146e8749",
	'etob_id',
	'',
	'',
	'etob_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"0586037a-11f0-7b24-a2e6-57e50ed284bd",
	"2ccd5696-7ac7-25f4-5be6-b71dfc46c6e3",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'btrue',
	'R1');
INSERT INTO O_RATTR
	VALUES ("0586037a-11f0-7b24-a2e6-57e50ed284bd",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("0586037a-11f0-7b24-a2e6-57e50ed284bd",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"c9422f3a-4745-9614-ff03-d2088b29fad3",
	'r1btrue',
	'',
	'r1',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"4953388e-55f5-ecd5-7d4e-dd164baf3ed8",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"f0bc107b-b8b5-3fdc-b420-daa3861f7d7b",
	"e0c89490-70ea-71e1-db27-031f50b642d4",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'bfalse',
	'R1');
INSERT INTO O_RATTR
	VALUES ("f0bc107b-b8b5-3fdc-b420-daa3861f7d7b",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"4953388e-55f5-ecd5-7d4e-dd164baf3ed8",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("f0bc107b-b8b5-3fdc-b420-daa3861f7d7b",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"0586037a-11f0-7b24-a2e6-57e50ed284bd",
	'r1bfalse',
	'',
	'r1',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"80fde00a-1975-1181-0799-19d319814ba2",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"912b147c-7463-c451-5136-76905daa649a",
	"acac9317-23a1-95d7-41a4-e6f4f347ccf1",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'r',
	'R1');
INSERT INTO O_RATTR
	VALUES ("912b147c-7463-c451-5136-76905daa649a",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"80fde00a-1975-1181-0799-19d319814ba2",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	1,
	'r');
INSERT INTO O_ATTR
	VALUES ("912b147c-7463-c451-5136-76905daa649a",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"f0bc107b-b8b5-3fdc-b420-daa3861f7d7b",
	'r1r',
	'',
	'r1',
	'r',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"11d0b125-877e-7584-80f0-85bcac5e64a7",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"c9168d4f-fbc1-eb23-248d-45fe56ffd3f0",
	"25efb86d-6612-1018-8acb-f77147ecf0e8",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	's',
	'R1');
INSERT INTO O_RATTR
	VALUES ("c9168d4f-fbc1-eb23-248d-45fe56ffd3f0",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"11d0b125-877e-7584-80f0-85bcac5e64a7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	1,
	's');
INSERT INTO O_ATTR
	VALUES ("c9168d4f-fbc1-eb23-248d-45fe56ffd3f0",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"912b147c-7463-c451-5136-76905daa649a",
	'r1s',
	'',
	'r1',
	's',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"6e09dde8-2507-361f-e8cd-c3c8fac61caf",
	"ccce8115-d43e-7de7-3359-7eca850c7ead",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'u',
	'R1');
INSERT INTO O_RATTR
	VALUES ("6e09dde8-2507-361f-e8cd-c3c8fac61caf",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	1,
	'u');
INSERT INTO O_ATTR
	VALUES ("6e09dde8-2507-361f-e8cd-c3c8fac61caf",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"c9168d4f-fbc1-eb23-248d-45fe56ffd3f0",
	'r1u',
	'',
	'r1',
	'u',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"11b3b33a-863f-0583-331c-066d47b7e24d",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"7b7f8dad-41ae-4543-30b8-63abe29df4fd",
	"46f99e6a-e777-d553-2d38-ff40d6cdbd61",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'd',
	'R1');
INSERT INTO O_RATTR
	VALUES ("7b7f8dad-41ae-4543-30b8-63abe29df4fd",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"11b3b33a-863f-0583-331c-066d47b7e24d",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	1,
	'd');
INSERT INTO O_ATTR
	VALUES ("7b7f8dad-41ae-4543-30b8-63abe29df4fd",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"6e09dde8-2507-361f-e8cd-c3c8fac61caf",
	'r1d',
	'',
	'r1',
	'd',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"64ec1b53-2ef8-1fea-09e5-79439cc8d284",
	"c6ca4bce-887f-805a-2422-cb8534463eb6",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	't',
	'R1');
INSERT INTO O_RATTR
	VALUES ("64ec1b53-2ef8-1fea-09e5-79439cc8d284",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	1,
	't');
INSERT INTO O_ATTR
	VALUES ("64ec1b53-2ef8-1fea-09e5-79439cc8d284",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"7b7f8dad-41ae-4543-30b8-63abe29df4fd",
	'r1t',
	'',
	'r1',
	't',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"71ec8e80-08af-8589-0172-cbee963c83a1",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"09ffe593-3092-070f-617a-4714e1214b30",
	"1b59e831-033b-9ce7-b65e-5fe2efb3849d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'tim',
	'R1');
INSERT INTO O_RATTR
	VALUES ("09ffe593-3092-070f-617a-4714e1214b30",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"71ec8e80-08af-8589-0172-cbee963c83a1",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	1,
	'tim');
INSERT INTO O_ATTR
	VALUES ("09ffe593-3092-070f-617a-4714e1214b30",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"64ec1b53-2ef8-1fea-09e5-79439cc8d284",
	'r1tim',
	'',
	'r1',
	'tim',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"15799752-721b-413b-9fed-b6332ef07f8f",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"f3aca90a-e2b6-f66f-5c68-6267c0465ad3",
	"a80aa59c-df79-e41d-8fbf-e286acbecbfd",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'ev',
	'R1');
INSERT INTO O_RATTR
	VALUES ("f3aca90a-e2b6-f66f-5c68-6267c0465ad3",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"15799752-721b-413b-9fed-b6332ef07f8f",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	1,
	'ev');
INSERT INTO O_ATTR
	VALUES ("f3aca90a-e2b6-f66f-5c68-6267c0465ad3",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"09ffe593-3092-070f-617a-4714e1214b30",
	'r1ev',
	'',
	'r1',
	'ev',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_OIDA
	VALUES ("e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	'et_id');
INSERT INTO O_ID
	VALUES (1,
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ID
	VALUES (2,
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO SM_ISM
	VALUES ("2ca0f623-dfdd-4df1-8677-9b666a519357",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO SM_SM
	VALUES ("2ca0f623-dfdd-4df1-8677-9b666a519357",
	'',
	4);
INSERT INTO SM_MOORE
	VALUES ("2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_EVTDI
	VALUES ("aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"17382d0d-d2a4-94fa-6451-5fc58c2d1141");
INSERT INTO SM_EVTDI
	VALUES ("285ab600-087c-6767-ab4a-a92f5f89988a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7");
INSERT INTO SM_EVTDI
	VALUES ("c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	's',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037");
INSERT INTO SM_EVTDI
	VALUES ("417f5810-e42c-e0e2-fb4b-3cec12ff8438",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"ed46ca60-d19a-efb1-e730-129a702d308e");
INSERT INTO SM_EVTDI
	VALUES ("668a418f-509c-95d6-adf3-7a0b0b85f32c",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'my_b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("19262542-efee-dfa5-f1ee-ae8a2ee50029",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'my_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"668a418f-509c-95d6-adf3-7a0b0b85f32c");
INSERT INTO SM_EVTDI
	VALUES ("d69d931a-ab14-b19a-8822-8d44b2ddd977",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'my_r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"19262542-efee-dfa5-f1ee-ae8a2ee50029");
INSERT INTO SM_EVTDI
	VALUES ("f935da26-6602-ad1d-c751-1840ea176c62",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'my_s',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"d69d931a-ab14-b19a-8822-8d44b2ddd977");
INSERT INTO SM_EVTDI
	VALUES ("82c8451b-c97e-5266-a12a-4a2dea331cb9",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'my_u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"f935da26-6602-ad1d-c751-1840ea176c62");
INSERT INTO SM_EVTDI
	VALUES ("f8060b52-33ff-f2ff-a3c2-5f336a27192b",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c");
INSERT INTO SM_EVTDI
	VALUES ("ed46ca60-d19a-efb1-e730-129a702d308e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"3bd43b79-3ee7-b5c0-4d2c-d0cdca98bbdc");
INSERT INTO SM_EVTDI
	VALUES ("2e822a91-20bb-2eff-0b72-bff89b8d78d9",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'tint1',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("c7f0d3f0-e3f2-f62c-2753-92973dcb24d6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'tint2',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2e822a91-20bb-2eff-0b72-bff89b8d78d9");
INSERT INTO SM_EVTDI
	VALUES ("51673811-f9dc-1523-9ec1-8acc34c29def",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'treal1',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"c7f0d3f0-e3f2-f62c-2753-92973dcb24d6");
INSERT INTO SM_EVTDI
	VALUES ("b92d57e3-26de-9e4c-b729-d04d45a923ae",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'treal2',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"51673811-f9dc-1523-9ec1-8acc34c29def");
INSERT INTO SM_EVTDI
	VALUES ("43b880fd-e329-65a2-3820-b56e1eaf0674",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'd',
	'',
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("3bd43b79-3ee7-b5c0-4d2c-d0cdca98bbdc",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'ts',
	'',
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"11fed328-e75b-4ea2-a45c-b34439ca3d25");
INSERT INTO SM_EVTDI
	VALUES ("11fed328-e75b-4ea2-a45c-b34439ca3d25",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'tim',
	'',
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"f8060b52-33ff-f2ff-a3c2-5f336a27192b");
INSERT INTO SM_EVTDI
	VALUES ("17382d0d-d2a4-94fa-6451-5fc58c2d1141",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'ev',
	'',
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"43b880fd-e329-65a2-3820-b56e1eaf0674");
INSERT INTO SM_EVTDI
	VALUES ("0ebd6a9f-2f7a-4bb9-0544-5e5be43f247f",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"70ce22f0-cd27-87e8-ed46-7cf50a68a7c5");
INSERT INTO SM_EVTDI
	VALUES ("70ce22f0-cd27-87e8-ed46-7cf50a68a7c5",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("631bd62e-2139-2b15-c49c-e65bbdf2aebe",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"0ebd6a9f-2f7a-4bb9-0544-5e5be43f247f");
INSERT INTO SM_EVTDI
	VALUES ("0d115be9-4bd4-408b-4dad-8ea2d7485284",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	's',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"631bd62e-2139-2b15-c49c-e65bbdf2aebe");
INSERT INTO SM_EVTDI
	VALUES ("53c0d9f3-9877-1fe8-108b-ef0aa0e3d5ef",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"0d115be9-4bd4-408b-4dad-8ea2d7485284");
INSERT INTO SM_EVTDI
	VALUES ("fc87dcf4-5df2-8a63-f80c-8ab8becaee86",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"1161663f-c88f-78cb-428f-efd305a13431",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("98c60950-5ded-6864-882e-cdf17ff1f723",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("f22248de-a356-80f9-4d56-48f83d9f815b",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("d292e26a-d6cd-5c8f-b613-73db5330c206",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"1161663f-c88f-78cb-428f-efd305a13431",
	"fc87dcf4-5df2-8a63-f80c-8ab8becaee86");
INSERT INTO SM_EVTDI
	VALUES ("c8a85cdd-f041-3c31-ec08-b0632f3752c7",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"98c60950-5ded-6864-882e-cdf17ff1f723");
INSERT INTO SM_EVTDI
	VALUES ("cfb130d5-ced6-fcef-6340-dce80111c560",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"f22248de-a356-80f9-4d56-48f83d9f815b");
INSERT INTO SM_LEVT
	VALUES ("81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start Expression Test',
	0,
	'',
	'ET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Run F3 Binary Ops',
	0,
	'',
	'ET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Run F15 Values',
	0,
	'',
	'ET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Run F16 Transformers',
	0,
	'',
	'ET4',
	'');
INSERT INTO SM_LEVT
	VALUES ("b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	5,
	'Run F17 Timestamp and F18 Date Operators',
	0,
	'',
	'ET5',
	'');
INSERT INTO SM_LEVT
	VALUES ("38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	6,
	'Run F1 and F2 for User Defined Types',
	0,
	'',
	'ET6',
	'');
INSERT INTO SM_LEVT
	VALUES ("aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	7,
	'Run F3 through F14 for User Defined Types',
	0,
	'',
	'ET7',
	'');
INSERT INTO SM_LEVT
	VALUES ("e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	8,
	'Run F15 for User Defined Types',
	0,
	'',
	'ET8',
	'');
INSERT INTO SM_LEVT
	VALUES ("7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	9,
	'Shut Down',
	0,
	'',
	'ET9',
	'');
INSERT INTO SM_LEVT
	VALUES ("f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	10,
	'Start not_empty test',
	0,
	'',
	'ET10',
	'');
INSERT INTO SM_LEVT
	VALUES ("0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	11,
	'Start cardinality test',
	0,
	'',
	'ET11',
	'');
INSERT INTO SM_LEVT
	VALUES ("66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	12,
	'Start empty test',
	0,
	'',
	'ET12',
	'');
INSERT INTO SM_LEVT
	VALUES ("1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	13,
	'Start not test',
	0,
	'',
	'ET13',
	'');
INSERT INTO SM_LEVT
	VALUES ("74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	14,
	'Start subtract test',
	0,
	'',
	'ET14',
	'');
INSERT INTO SM_LEVT
	VALUES ("adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	15,
	'Start assign test',
	0,
	'',
	'ET15',
	'');
INSERT INTO SM_LEVT
	VALUES ("c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	16,
	'Start and test',
	0,
	'',
	'ET16',
	'');
INSERT INTO SM_LEVT
	VALUES ("c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	17,
	'Start or test',
	0,
	'',
	'ET17',
	'');
INSERT INTO SM_STATE
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'Starting Expression Test F1 and F2',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("24ffb703-af64-b9b0-c79a-9b6accaa39a7",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"53509702-0f88-6160-ffe2-15f189bfedc8");
INSERT INTO SM_AH
	VALUES ("24ffb703-af64-b9b0-c79a-9b6accaa39a7",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("24ffb703-af64-b9b0-c79a-9b6accaa39a7",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	1,
	'LOG::LogInfo(message:"Starting Expression Test F1 and F2") ;

//BEGIN EX.F.1
//check defaults

if (self.bfalse != FALSE)
  LOG::LogFailure(message:"EX.F.1: b default") ;
else
  LOG::LogSuccess(message:"EX.F.1: b default") ;
end if;

if (self.i != 0)
  LOG::LogFailure(message:"EX.F.1: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1: i default") ; 
end if;

//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.1: r default") real;

if (self.s != "")
  LOG::LogFailure(message:"EX.F.1: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1: s default") ;
end if;

//END EX.F.1

//BEGIN EX.F.2
//check integer assign

assign self.i = 10;
if (self.i == 10)
  LOG::LogSuccess(message:"EX.F.2: self.i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.i assign") ;  
end if;

//check real assign
assign self.r = 3.14;
//generate LOGREAL1:''Log Real''(r:3.14,message:"EX.F.2: r assigned to") real;
//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.2: r assigned is") real;

//check bool assign
assign self.bfalse = TRUE;
if (self.bfalse == TRUE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;
assign self.bfalse = FALSE;
if (self.bfalse == FALSE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;

//check string assign
assign self.s = "String";
if (self.s == "String")
  LOG::LogSuccess(message:"EX.F.2: self.s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.s assign") ;  
end if;

LOG::LogInfo(message:"Finished Expression Test F1 and F2") ;

//generate event to commence Operations test
generate ET13:''Start not test''(tfalse:FALSE, ttrue:TRUE) to self;',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'Run F3 through F14 Binary Operations',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("5f3ff6f2-0242-4e0d-ad7c-59dcdcd857a4",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"cb78c7eb-12ed-04c2-1946-bbde5bdb763a");
INSERT INTO SM_AH
	VALUES ("5f3ff6f2-0242-4e0d-ad7c-59dcdcd857a4",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("5f3ff6f2-0242-4e0d-ad7c-59dcdcd857a4",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	1,
	'
LOG::LogInfo(message:"Running F3 through F14 Binary Operations") ;

//BEGIN EX.F.3
// boolean and, or, ==, and !=

//and
assign b1 = TRUE;
assign b2 = FALSE;
if (b1 and b2)
  LOG::LogFailure(message:"EX.F.3 boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean and") ;
end if;

// or
if (b1 or b2)
  LOG::LogSuccess(message:"EX.F.3 boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean or") ;
end if;

//==
if (b1 == b2)
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
end if;

//!=
if (b1 != b2)
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
end if;
//END EX.F.3

//BEGIN EX.F.4
// integer + - * / %

// +
assign i1 = 5;
assign i2 = -6;
assign i3 = i1 + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4 integer +") ;
else
  LOG::LogFailure(message:"EX.F.4 integer +") ;
end if;
//- 
assign i4 = i1 - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4 integer -") ;
else
  LOG::LogFailure(message:"EX.F.4 integer -") ;
end if;
// *
assign i5 = i1*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4 integer *") ;
else
  LOG::LogFailure(message:"EX.F.4 integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/i1;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4 integer /") ;
else
  LOG::LogFailure(message:"EX.F.4 integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%i1;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4 integer %") ;
else
  LOG::LogFailure(message:"EX.F.4 integer %") ;
end if;
//END EX.F.4

//BEGIN EX.F.5
// integer  < <= == != >= >

assign j1 = 12;
assign j2 = 6;
assign j3 = 6;
// <
if (j2 < j1)
  LOG::LogSuccess(message:"EX.F.5 integer <") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <") ;
end if;
// <=
if (j2 <= j3)
  LOG::LogSuccess(message:"EX.F.5 integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <=") ;
end if;
//==
if (j2 == j3)
  LOG::LogSuccess(message:"EX.F.5 integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5 integer ==") ;
end if;
//!=
if (j2 != j1)
  LOG::LogSuccess(message:"EX.F.5 integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer !=") ;
end if;
//>=
if (j1 >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >=") ;
end if;
//>
if (j1 > j2)
  LOG::LogSuccess(message:"EX.F.5 integer >") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >") ;
end if;
//END EX.F.5

//BEGIN EX.F.6
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = i1 + r1;
LOG::LogReal(r:r3,message:"EX.F.6 int real + : r should be -1.0") ;

//- 
assign r4 = i1 - r1;
LOG::LogReal(r:r4,message:"EX.F.6 int real - : r should be 11.0") ;

// *
assign r5 = i1*r1;
LOG::LogReal(r:r5,message:"EX.F.6 int real * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = i10/r2;
LOG::LogReal(r:r6,message:"EX.F.6 int real / : r should be 2.0") ;

//END EX.F.6

//BEGIN EX.F.7
//  < <= == != >= > int as left operand, real as right, and bool result

assign k1 = 12;
assign s1 = 6.0;
assign s2 = 12.0;
assign k2 = 6;

// <
if (k2 < s2)
  LOG::LogSuccess(message:"EX.F.7 int real <") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <") ;
end if;

// <=
if (k2 <= s1)
  LOG::LogSuccess(message:"EX.F.7 int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <=") ;
end if;

//==
if (k2 == s1)
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
end if;

//!=
if (k1 != s1)
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
end if;

//>=
if (k1 >= s1)
  LOG::LogSuccess(message:"EX.F.7 int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (k1 > s1)
  LOG::LogSuccess(message:"EX.F.7 int real >") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >") ;
end if;
//END EX.F.7

//BEGIN EX.F.8
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = r1 + i1;
LOG::LogReal(r:r3,message:"EX.F.8 real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - i1;
LOG::LogReal(r:r4,message:"EX.F.8 real int - : r should be -11.0") ;

// *
assign r5 = r1*i1;
LOG::LogReal(r:r5,message:"EX.F.8 real int * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = r2/i10;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8

//BEGIN EX.F.9
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign k1 = 6;
assign k2 = 12;
assign s2 = 6.0;

// <
if (s2 < k2)
  LOG::LogSuccess(message:"EX.F.9 real int <") ;
else
  LOG::LogFailure(message:"EX.F.9 real int <") ;
end if;

// <=
if (s1 <= k2)
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
end if;

//==
if (s2 == k1)
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
end if;

//!=
if (s1 != k1)
  LOG::LogSuccess(message:"EX.F.9 real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int !=") ;
end if;

//>=
if (s1 >= k1)
  LOG::LogSuccess(message:"EX.F.9 real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >=") ;
end if;

//>
if (s1 > k1)
  LOG::LogSuccess(message:"EX.F.9 real int >") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >") ;
end if;

//END EX.F.9

//BEGIN EX.F.10
// real + - * / 

// +
assign r1 = 5.0;
assign r2 = -6.0;
assign r3 = r1 + r2;
LOG::LogReal(r:r3,message:"EX.F.10 real real + : r should be -1.0") ;

//- 
assign r4 = r1 - r2;
LOG::LogReal(r:r4,message:"EX.F.10 real real - : r should be 11.0") ;

// *
assign r5 = r1*r2;
LOG::LogReal(r:r5,message:"EX.F.10 real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/r1;
LOG::LogReal(r:r7,message:"EX.F.10 real real / : r should be 2.0") ;

//END EX.F.10


//BEGIN EX.F.11
// real  < <= == != >= >

assign r1 = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
// <
if (r2 < r1)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11 real <") ;
end if;
// <=
if (r2 <= r1)
  LOG::LogSuccess(message:"EX.F.11 real <=") ;
else
  LOG::LogFailure(message:"EX.F.11 real <=") ;
end if;
//==
if (r2 == r3)
  LOG::LogInfo(message:"EX.F.11 real ==") ;
else
  LOG::LogInfo(message:"EX.F.11 real ==") ;
end if;
//!=
if (r2 != r1)
  LOG::LogSuccess(message:"EX.F.11 real !=") ;
else
  LOG::LogFailure(message:"EX.F.11 real !=") ;
end if;
//>=
if (r1 >= r2)
  LOG::LogSuccess(message:"EX.F.11 real >=") ;
else
  LOG::LogFailure(message:"EX.F.11 real >=") ;
end if;
//>
if (r1 > r2)
  LOG::LogSuccess(message:"EX.F.11 real >") ;
else
  LOG::LogFailure(message:"EX.F.11 real >") ;
end if;
//END EX.F.11

//BEGIN EX.F.12
// string string +
assign str1 = "Hello";
assign str2 = "World";
assign str3 = str1+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12 string +") ;
else
  LOG::LogFailure(message:"EX.F.12 string +") ;
end if;
//END EX.F.12

//BEGIN EX.F.13
//string < <= == != >= >
assign str1 = "a";
assign str2 = "b";
assign str3 = "b";
// <
if (str1 < str2)
  LOG::LogSuccess(message:"EX.F.13 string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (str2 <= str3)
  LOG::LogSuccess(message:"EX.F.13 string <=") ;
else
  LOG::LogFailure(message:"EX.F.13 string <=") ;
end if;
// ==
if (str3 == str2)
  LOG::LogSuccess(message:"EX.F.13 string ==") ;
else
  LOG::LogFailure(message:"EX.F.13 string ==") ;
end if;
// !=
if (str3 != str1)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13 string !=") ;
end if;
// >=
if (str3 >= str1)
  LOG::LogSuccess(message:"EX.F.13 string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str3 > str1)
  LOG::LogSuccess(message:"EX.F.13 string >") ;
else
  LOG::LogFailure(message:"EX.F.13 string >") ;
end if;
if (str3 < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13 string < quoted") ;
end if;
//END EX.F.13

//BEGIN EX.F.14
// unique_id == !=
assign u = self.et_id;
if (u == self.et_id)
  LOG::LogSuccess(message:"EX.F.14 unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14 unique ==") ;
end if;

select any oi from instances of OI;
if (self.u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14 unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14 unique !=") ;
end if;
//END EX.F.14

LOG::LogInfo(message:"Finished F3 through F14 Binary Operations") ;

generate ET3:''Run F15 Values''(b:TRUE) to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'Run F15 values',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("cc0fd1d9-9894-0762-a44d-440e19c7e63a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"34f33f82-96ae-a337-98df-f59d249b65ed");
INSERT INTO SM_AH
	VALUES ("cc0fd1d9-9894-0762-a44d-440e19c7e63a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("cc0fd1d9-9894-0762-a44d-440e19c7e63a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	1,
	'// Test all of the data items.
// Data items can be literals, object attributes, received event data items, 
// and transient variables.

LOG::LogInfo(message:"Running F15 values") ;

// Literals and Transient

assign str1 = "Hello";
if (str1 == "Hello")
  LOG::LogSuccess(message:"EX.F.15 left transient, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left transient, right literal") ;
end if;

if ("Hello" == str1)
  LOG::LogSuccess(message:"EX.F.15 left literal, right transient") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right transient") ;
end if;

// Object Attributes

assign self.i = 23;
if (self.i  == 23)
  LOG::LogSuccess(message:"EX.F.15 left self.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left self.attr, right literal") ;
end if;

if (23== self.i)
  LOG::LogSuccess(message:"EX.F.15 left literal, right self.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right self.attr") ;
end if;

create object instance ao of AO;
assign ao.b = FALSE;
if (ao.b == FALSE)
  LOG::LogSuccess(message:"EX.F.15 left other.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;
if (FALSE == ao.b)
  LOG::LogSuccess(message:"EX.F.15 left literal, right other.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right other.attr") ;
end if;

// Received Event 
if (rcvd_evt.b == TRUE)
  LOG::LogSuccess(message:"EX.F.15 left rcvd_evt.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;

if (TRUE == rcvd_evt.b )
  LOG::LogSuccess(message:"EX.F.15  left literal, right rcvd_evt.attr") ;
else 
 LOG::LogFailure(message:"EX.F.15  left literal, right rcvd_evt.attr") ; 
end if;

// Use id attr as an rval
assign this_id = self.et_id;

// use ref attr as an rval
create object instance my_etob of ETOB;
assign my_etob.etob_id = 2;
relate self to my_etob across R1;
assign my_etob_id = self.etob_id * 100;

// use transient from select as an rval
create object instance of ETOB;
select many etobs from instances of ETOB;
for each e_etob in etobs
  assign my_etob = e_etob;
end for;


LOG::LogInfo(message:"Finished F15 values") ;

assign self.i=42;
assign self.r=3.14;
assign self.bfalse=TRUE;
assign self.s="Hello";
generate ET4:''Run F16 Transformers''(i:self.i, r:self.r, b:self.bfalse,s:self.s,u:self.u) to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'Run F16 Transformers',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("34ed32b5-0d6c-c9a5-5b70-d7c47444037c",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"81374f42-af06-0e04-abb9-f6643a9eaa65");
INSERT INTO SM_AH
	VALUES ("34ed32b5-0d6c-c9a5-5b70-d7c47444037c",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("34ed32b5-0d6c-c9a5-5b70-d7c47444037c",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	1,
	'
LOG::LogInfo(message:"Running F16 Transformers") ;

// assign predetermined return values.  These will be the values that the coded 
// transforms use as return vals.

assign i_parm_ret_i_val = 42;
assign self.i = i_parm_ret_i_val;
assign r_parm_ret_r_val = 3.14;
assign b_parm_ret_b_val = TRUE;
assign s_parm_ret_s_val = "Hello";
assign u_parm_ret_u_val = rcvd_evt.u; //self.et_id
 
create object instance ao of AO;
assign ao.b = TRUE;

// no_parm_ret_void 
transform ET::no_parm_ret_void();

// i_parm_ret_void
transform ET::i_parm_ret_void(i:self.i);

// i_parm_ret_i
// use sefl.attr as parameter
transform i1 =  ET::i_parm_ret_i(i:self.i);
if (i1 == i_parm_ret_i_val )
  LOG::LogSuccess(message:"EX.F.16 i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 i_parm_ret_i") ;
end if;

// r_parm_ret_r
// use transient as parameter
assign r1 = 3.14;
transform r2 =  ET::r_parm_ret_r(r:r1);
LOG::LogReal(r:r2,message:"EX.F.16: r_parm_ret_r - r should be 3.14");

// b_parm_ret_b
// use attr of other object as parameter
transform b1 =  ET::b_parm_ret_b(b:ao.b);
if (b1 == b_parm_ret_b_val )
  LOG::LogSuccess(message:"EX.F.16 b_parm_ret_b") ;
else 
  LOG::LogFailure(message:"EX.F.16 b_parm_ret_b") ;
end if;

// s_parm_ret_s
// use literal as parm
transform s1 =  ET::s_parm_ret_s(s:"Hello");
if (s1 == s_parm_ret_s_val )
  LOG::LogSuccess(message:"EX.F.16 s_parm_ret_s") ;
else 
  LOG::LogFailure(message:"EX.F.16 s_parm_ret_s") ;
end if;

// u_parm_ret_u
// use received event as parm
transform u1 =  ET::u_parm_ret_u(u:rcvd_evt.u);
if (u1 == u_parm_ret_u_val )
  LOG::LogSuccess(message:"EX.F.16 u_parm_ret_u") ;
else 
  LOG::LogFailure(message:"EX.F.16 u_parm_ret_u") ;
end if;

// d_parm_ret_d

bridge d1 = TIM::create_date(second:30,minute:56,hour:19,day:3,month:1,year:1966);
LOG::LogDate(d:d1,message:"EX.F.16 d_parm_ret_d - d initial value");

bridge t1 = TIM::current_clock();
LOG::LogTime(t:t1,message:"EX.F.16 t_parm_ret_t - t initial value");


transform d2 = ET::d_parm_ret_d(d:d1);
LOG::LogDate(d:d2,message:"EX.F.16 d_parm_ret_d - d ret value");

// t_parm_ret_t

transform t2 = ET::t_parm_ret_t(t:t1);
LOG::LogTime(t:t2,message:"EX.F.16 t_parm_ret_t - t ret value");

// run a simple transform of another object
transform i3 = AO::i_parm_ret_i(i:24);

if (i3 == 24 )
  LOG::LogSuccess(message:"EX.F.16 other obj i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 other obj i_parm_ret_i") ;
end if;

LOG::LogInfo(message:"Finished F16 Transformers") ;

generate ET5:''Run F17 Timestamp and F18 Date Operators''() to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'Shutting Down',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("7298ca08-c752-b4f5-783a-781f30def751",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"369250b7-b070-e2c7-a88f-fd29caeee7b7");
INSERT INTO SM_AH
	VALUES ("7298ca08-c752-b4f5-783a-781f30def751",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("7298ca08-c752-b4f5-783a-781f30def751",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	1,
	'LOG::LogInfo(message:"a1test_exconfig Expression Test Complete") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'Runnning F17 Timestamp and F18 Date Operators',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("4328c9b8-fd96-e041-aad5-e78ec6f213c5",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e");
INSERT INTO SM_AH
	VALUES ("4328c9b8-fd96-e041-aad5-e78ec6f213c5",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("4328c9b8-fd96-e041-aad5-e78ec6f213c5",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	1,
	'
// BEGIN EX.F.17

bridge t1 = TIM::current_clock();

LOG::LogInfo(message:"Starting EX.F.17 and EX.F.18 Test") ;

assign t3 = t1;

transform ET::waitOneSec();
bridge t2 = TIM::current_clock();

if (t1== t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp == timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp == timestamp") ;
end if;

if (t1!= t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp != timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp != timestamp") ;
end if;

if (t1<  t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp < timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp < timestamp") ;
end if;

if (t1<= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp <= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp <= timestamp") ;
end if;

if (t2 > t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp > timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp > timestamp") ;
end if;

if (t1>= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp >= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp >= timestamp") ;
end if;

// END EX.F.17

// BEGIN EX.F.18

LOG::LogInfo(message:"Starting EX.F.18 Testing Date operators") ;


bridge d1 = TIM::current_date();
assign d4 = d1;
bridge d2 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1910);
bridge d3 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1911);

if (d1== d4)
  LOG::LogSuccess(message:"EX.F.18: date == date") ;
else
  LOG::LogFailure(message:"EX.F.18: date == date") ;
end if;

if (d2 != d3)
  LOG::LogSuccess(message:"EX.F.18: date != date") ;
else
  LOG::LogFailure(message:"EX.F.18: date != date") ;
end if;

if (d3<  d1)
  LOG::LogSuccess(message:"EX.F.18: date < date") ;
else
  LOG::LogFailure(message:"EX.F.18: date < date") ;
end if;

if (d1<= d4)
  LOG::LogSuccess(message:"EX.F.18: date <= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date <= date") ;
end if;

if (d1> d2)
  LOG::LogSuccess(message:"EX.F.18: date > date") ;
else
  LOG::LogFailure(message:"EX.F.18: date > date") ;
end if;

if (d1>= d4)
  LOG::LogSuccess(message:"EX.F.18: date >= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date >= date") ;
end if;

LOG::LogInfo(message:"Test EX.F.17 and EX.F.18 complete") ;
generate ET6:''Run F1 and F2 for User Defined Types''() to self;',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'Running F1 and F2 for User Defined Types',
	7,
	0);
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("dd48e27b-e094-b967-6ccf-cc713004a759",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"b99fcff7-7910-98b4-13b4-48497fa24a4a");
INSERT INTO SM_AH
	VALUES ("dd48e27b-e094-b967-6ccf-cc713004a759",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("dd48e27b-e094-b967-6ccf-cc713004a759",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	1,
	'
LOG::LogInfo(message:"Expression Test F1 and F2 for User Defined Types") ;

//BEGIN EX.F.1_UDT
//check defaults

if (self.my_b != FALSE)
  LOG::LogFailure(message:"EX.F.1_UDT: my_b default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: my_b default") ;
end if;

if (self.my_i != 0)
  LOG::LogFailure(message:"EX.F.1_UDT: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1_UDT: i default") ; 
end if;
LOG::LogReal(r:self.r,message:"EX.F.1_UDT: r default");

if (self.my_s != "")
  LOG::LogFailure(message:"EX.F.1_UDT: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: s default") ;
end if;

//END EX.F.1_UDT

//BEGIN EX.F.2_UDT
//check integer assign

assign self.my_i = 10;
if (self.my_i == 10)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_i assign") ;  
end if;

//check real assign
assign self.my_r = 3.14;
LOG::LogReal(r:3.14,message:"EX.F.2_UDT: my_r assigned to") ;
LOG::LogReal(r:self.my_r,message:"EX.F.2_UDT: my_r assigned is");

//check bool assign
assign self.my_b = TRUE;
if (self.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_b assign") ;  
end if;

//check string assign
assign self.my_s = "String";
if (self.my_s == "String")
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_s assign") ;  
end if;

// check unary not
assign self.my_b = FALSE;
if (not self.my_b)
  LOG::LogSuccess(message:"EX.F.2_UDT: unary not") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: unary not") ;  
end if;  

LOG::LogInfo(message:"Finished F1 and F2 for User Defined Types") ;


//generate event to commence Binary Operations test
generate ET7:''Run F3 through F14 for User Defined Types''() to self;',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'Running F3 through F14 for User Defined Types',
	8,
	0);
INSERT INTO SM_CH
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd114067-3732-0fe7-72c4-ddf356e031ab",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("a94ca778-b6a6-c284-0609-e388eb673d25",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"fd114067-3732-0fe7-72c4-ddf356e031ab");
INSERT INTO SM_AH
	VALUES ("a94ca778-b6a6-c284-0609-e388eb673d25",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("a94ca778-b6a6-c284-0609-e388eb673d25",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	1,
	'LOG::LogInfo(message:"Running F3 through F14 for User Defined Types") ;

//BEGIN EX.F.3_UDT
// boolean and, or, ==, and !=

//and
assign self.my_b = TRUE;
assign b2 = FALSE;
if (self.my_b and b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean and") ;
end if;

// or
if (self.my_b or b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean or") ;
end if;

//==
if (self.my_b == b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
end if;

//!=
if (self.my_b != b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
end if;
//END EX.F.3_UDT

//BEGIN EX.F.4_UDT
// integer + - * / %

// +
assign self.my_i = 5;
assign i2 = -6;
assign i3 = self.my_i + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4_UDT integer +") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer +") ;
end if;
//- 
assign i4 = self.my_i - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4_UDT integer -") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer -") ;
end if;
// *
assign i5 = self.my_i*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4_UDT integer *") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/self.my_i;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4_UDT integer /") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%self.my_i;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4_UDT integer %") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer %") ;
end if;
//END EX.F.4_UDT

//BEGIN EX.F.5_UDT
// integer  < <= == != >= >

assign self.my_i = 12;
assign j2 = 6;
assign j3 = 12;
// <
if (j2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <") ;
end if;
// <=
if (j2 <= self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <=") ;
end if;
//==
if (self.my_i == j3)
  LOG::LogSuccess(message:"EX.F.5_UDT integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer ==") ;
end if;
//!=
if (j2 != self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer !=") ;
end if;
//>=
if (self.my_i >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >=") ;
end if;
//>
if (self.my_i > j2)
  LOG::LogSuccess(message:"EX.F.5_UDT integer >") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >") ;
end if;
//END EX.F.5_UDT

//BEGIN EX.F.6_UDT
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = self.my_i + r1;
LOG::LogReal(r:r3,message:"EX.F.6_UDT int real + : r should be -1.0") ;

//- 
assign r4 = self.my_i - r1;
LOG::LogReal(r:r4,message:"EX.F.6_UDT int real - : r should be 11.0") ;

// *
assign r5 = self.my_i*r1;
LOG::LogReal(r:r5,message:"EX.F.6_UDT int real * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = self.my_i/r2;
LOG::LogReal(r:r6,message:"EX.F.6_UDT int real / : r should be 2.0") ;

//END EX.F.6_UDT

//BEGIN EX.F.7_UDT
//  < <= == != >= > int as left operand, real as right, and bool result

assign s1 = 6.0;
assign s2 = 12.0;
assign self.my_i = 6;

// <
if (self.my_i < s2)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <") ;
end if;

// <=
if (self.my_i <= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <=") ;
end if;

//==
if (self.my_i == s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
end if;

assign self.my_i=12;
//!=
if (self.my_i != s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
end if;

//>=
if (self.my_i >= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (self.my_i > s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real >") ;
end if;
//END EX.F.7_UDT

//BEGIN EX.F.8_UDT
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = r1 + self.my_i;
LOG::LogReal(r:r3,message:"EX.F.8_UDT real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - self.my_i;
LOG::LogReal(r:r4,message:"EX.F.8_UDT real int - : r should be -11.0") ;

// *
assign r5 = r1*self.my_i;
LOG::LogReal(r:r5,message:"EX.F.8_UDT real int * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = r2/self.my_i;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8_UDT

//BEGIN EX.F.9_UDT
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign self.my_i = 12;
assign s2 = 6.0;

// <
if (s2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int <") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int <") ;
end if;

// <=
if (s1 <= self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
end if;

assign self.my_i = 6;

//==
if (s2 == self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
end if;

//!=
if (s1 != self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int !=") ;
end if;

//>=
if (s1 >= self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >=") ;
end if;

//>
if (s1 > self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >") ;
end if;

//END EX.F.9_UDT

//BEGIN EX.F.10_UDT
// real + - * / 

// +
assign self.my_r = 5.0;
assign r2 = -6.0;
assign r3 = self.my_r + r2;
LOG::LogReal(r:r3,message:"EX.F.10_UDT real real + : r should be -1.0") ;

//- 
assign r4 = self.my_r - r2;
LOG::LogReal(r:r4,message:"EX.F.10_UDT real real - : r should be 11.0") ;

// *
assign r5 = self.my_r*r2;
LOG::LogReal(r:r5,message:"EX.F.10_UDT real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/self.my_r;
LOG::LogReal(r:r7,message:"EX.F.10_UDT real real / : r should be 2.0") ;

//END EX.F.10_UDT


//BEGIN EX.F.11_UDT
// real  < <= == != >= >

assign self.my_r = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
assign r4=12.0;
// <
if (r2 < self.my_r)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <") ;
end if;
// <=
if (r2 <= self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real <=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <=") ;
end if;
//==
if (self.my_r == r4)
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
else
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
end if;
//!=
if (r2 != self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real !=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real !=") ;
end if;
//>=
if (self.my_r >= r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >=") ;
end if;
//>
if (self.my_r > r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >") ;
end if;
//END EX.F.11_UDT

//BEGIN EX.F.12_UDT
// string string +
assign self.my_s = "Hello";
assign str2 = "World";
assign str3 = self.my_s+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12_UDT string +") ;
else
  LOG::LogFailure(message:"EX.F.12_UDT string +") ;
end if;
//END EX.F.12_UDT

//BEGIN EX.F.13_UDT
//string < <= == != >= >
assign self.my_s = "a";
assign str2 = "b";
assign str3 = "a";
// <
if (self.my_s < str2)
  LOG::LogSuccess(message:"EX.F.13_UDT string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (self.my_s <= str3)
  LOG::LogSuccess(message:"EX.F.13_UDT string <=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string <=") ;
end if;
// ==
if (str3 == self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string ==") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string ==") ;
end if;
// !=
if (str2 != self.my_s)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string !=") ;
end if;
// >=
if (str2 >= self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str2 > self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string >") ;
end if;
if (self.my_s < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string < quoted") ;
end if;
//END EX.F.13_UDT

//BEGIN EX.F.14_UDT
// unique_id == !=
assign self.my_u = self.u;
if (self.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.14_UDT unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique ==") ;
end if;

select any oi from instances of OI;
if (self.my_u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14_UDT unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique !=") ;
end if;
//END EX.F.14_UDT

LOG::LogInfo(message:"Finished F3 through F14 for User Defined Types") ;

generate ET8:''Run F15 for User Defined Types''(my_b:TRUE,my_i:42,my_r:3.14,my_s:"Hello",my_u:self.u) to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'Running F15 for User Defined Types',
	9,
	0);
INSERT INTO SM_CH
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a74823ef-932d-7059-75e8-96dc94e55397",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("fc6ed29c-5ba8-0dde-8730-78f7f73a14bf",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"a74823ef-932d-7059-75e8-96dc94e55397");
INSERT INTO SM_AH
	VALUES ("fc6ed29c-5ba8-0dde-8730-78f7f73a14bf",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("fc6ed29c-5ba8-0dde-8730-78f7f73a14bf",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	1,
	'LOG::LogInfo(message:"Running F15 for User Defined Types") ;

// Received Event 
if (rcvd_evt.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_b") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_b") ;
end if;

if (rcvd_evt.my_i == 42)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_i") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_i") ;
end if;

LOG::LogReal(message:"EX.F.15_UDT rcvd_evt.attr r",r:rcvd_evt.my_r) ; 

if (rcvd_evt.my_s == "Hello")
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_s") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_s") ;
end if;

if (rcvd_evt.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_u") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_u") ;
end if;

generate ET9:''Shut Down''() to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'Testing empty operator',
	10,
	0);
INSERT INTO SM_CH
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("bbe32523-9872-e4eb-93d5-89b4c2d02554",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"bd44bfc2-648c-15bd-8997-0046d5fc365a");
INSERT INTO SM_AH
	VALUES ("bbe32523-9872-e4eb-93d5-89b4c2d02554",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("bbe32523-9872-e4eb-93d5-89b4c2d02554",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	1,
	'LOG::LogInfo(message:"Starting Expression Test empty operator") ;

//empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = empty saf0;
if (t1 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (true)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = empty saf1;
if (t2 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (false)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = empty smf0;
if (t3 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (true)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = empty smf1;
if ( t4 == FALSE )
  LOG::LogSuccess(message:"EX.F.2: empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (false)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = empty sar0;
if (t5 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (true)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = empty sar1;
if (t6 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (false)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = empty sor0;
if (t7 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = empty sor1;
if (t8 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = empty smr0;
if (t9 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = empty smr1;
if (t10 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

//generate event to commence next test
generate ET10:''Start not_empty test''() to self;',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'Testing not_empty operator',
	11,
	0);
INSERT INTO SM_CH
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("79c2ce6b-ba68-b91f-a28e-089df8daa0e7",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"f9094041-b2be-ad10-2bf9-06a9c8c50553");
INSERT INTO SM_AH
	VALUES ("79c2ce6b-ba68-b91f-a28e-089df8daa0e7",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("79c2ce6b-ba68-b91f-a28e-089df8daa0e7",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not_empty operator") ;

//not_empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = not_empty saf0;
if (t1 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (false)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = not_empty saf1;
if (t2 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (true)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = not_empty smf0;
if (t3 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (false)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = not_empty smf1;
if ( t4 == TRUE )
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (true)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = not_empty sar0;
if (t5 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (false)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = not_empty sar1;
if (t6 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (true)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = not_empty sor0;
if (t7 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = not_empty sor1;
if (t8 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = not_empty smr0;
if (t9 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = not_empty smr1;
if (t10 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

//generate event to commence next test
generate ET11:''Start cardinality test''() to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'Testing cardinality operator',
	12,
	0);
INSERT INTO SM_CH
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("666fff98-7a9f-75fb-7705-0dffaafcae4b",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"58ab4b22-715a-13d1-2f64-9c8616b7221d");
INSERT INTO SM_AH
	VALUES ("666fff98-7a9f-75fb-7705-0dffaafcae4b",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("666fff98-7a9f-75fb-7705-0dffaafcae4b",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	1,
	'LOG::LogInfo(message:"Starting Expression Test cardinality operator") ;

// cardinality operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = cardinality saf0;
if (t1 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (0)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = cardinality saf1;
if (t2 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (1)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = cardinality smf0;
if (t3 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (0)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = cardinality smf1;
if ( t4 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (2)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = cardinality sar0;
if (t5 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (0)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = cardinality sar1;
if (t6 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (1)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = cardinality sor0;
if (t7 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = cardinality sor1;
if (t8 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (1)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = cardinality smr0;
if (t9 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = cardinality smr1;
if (t10 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (2)") ;  
end if;

// generate event to commence next test
generate ET14:''Start subtract test''( tint1:17, tint2:13, treal1:2.781828, treal2:11.2) to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'Testing not operator',
	13,
	0);
INSERT INTO SM_CH
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ff0bc232-d366-715b-39de-1aa826890436",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("6216018b-e5df-ec9d-2d04-2abbcc1ddb9e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"ff0bc232-d366-715b-39de-1aa826890436");
INSERT INTO SM_AH
	VALUES ("6216018b-e5df-ec9d-2d04-2abbcc1ddb9e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("6216018b-e5df-ec9d-2d04-2abbcc1ddb9e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not operator") ;

//not operation
  // local existing 
assign tfalse = false;
assign ttrue = true;
assign t1 = not tfalse;
if (t1 == TRUE)
  LOG::LogSuccess(message:"not local existing (true)") ;  
else
  LOG::LogFailure(message:"not local existing (true)") ;  
end if;

assign t2 = not ttrue;
if (t2 == FALSE)
  LOG::LogSuccess(message:"not local existing (false)") ;
else
  LOG::LogFailure(message:"not local existing (false)") ;
end if;

  // rcvd_evt
assign t3 = not rcvd_evt.tfalse;
if (t3 == TRUE)
  LOG::LogSuccess(message:"not rcvd_evt (true)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (true)") ;
end if;  
 
assign t4 = not rcvd_evt.ttrue;
if (t4 == FALSE)
  LOG::LogSuccess(message:"not rcvd_evt (false)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (false)") ;
end if;
 
  // constant 
assign t5 = not FALSE;
if (t5 == TRUE)
  LOG::LogSuccess(message:"not constant (true)") ;
else
  LOG::LogFailure(message:"not constant (true)") ;
end if;  
 
assign t6 = not TRUE;
if (t6 == FALSE)
  LOG::LogSuccess(message:"not constant (false)") ;
else
  LOG::LogFailure(message:"not constant (false)") ;
end if;
 
  // self.attribute
assign t7 = not self.bfalse;
if (t7 == TRUE)
  LOG::LogSuccess(message:"not self.attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.attribute (true)") ;
end if; 
 
assign t8 = not self.btrue;
if (t8 == FALSE)
  LOG::LogSuccess(message:"not self.attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.attribute (false)") ;
end if;
 
  // self.referential attribute
assign t9 = not self.r1bfalse;
if (t9 == TRUE)
  LOG::LogSuccess(message:"not self.referential attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (true)") ;
end if; 
 
assign t10 = not self.r1btrue;
if (t10 == FALSE)
  LOG::LogSuccess(message:"not self.referential attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (false)") ;
end if;

  // other.attribute (saf)
select any saf1 from instances of ETOB;
assign t11 = not saf1.bfalse;
if (t11 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (true)") ;
end if;
 
assign t12 = not saf1.btrue;
if (t12 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (false)") ;
end if;
 
  // other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  assign t13 = not smf.bfalse;
  if (t13 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (true)") ;
  end if;
 
  assign t14 = not smf.btrue;
  if (t14 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (false)") ;
  end if;
end for;
 
  // other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t15 = not sar1.bfalse;
if (t15 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (true)") ;
end if;
 
assign t16 = not sar1.btrue;
if (t16 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (false)") ;
end if;

  // other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t17 = not sor1.bfalse;
if (t17 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (true)") ;
end if;
 
assign t18 = not sor1.btrue;
if (t18 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (false)") ;
end if;


  // other.attribute (smr)
select many smr1 from instances of ETOB;
for each smr in smr1
  assign t19 = not smr.bfalse;
  if (t19 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (true)") ;
  end if;
 
  assign t20 = not smr.btrue;
  if (t20 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (false)") ;
  end if;
end for;

  // other.referential attribute (saf)
assign t21 = not saf1.r6bfalse;
if (t21 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (true)") ;
end if;
 
assign t22 = not saf1.r6btrue;
if (t22 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (false)") ;
end if;
 
  // other.referential attribute (smf)
for each smf in smf1
  assign t23 = not smf.r6bfalse;
  if (t23 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (true)") ;
  end if;
 
  assign t24 = not smf.r6btrue;
  if (t24 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (false)") ;
  end if;
end for;

  // other.referential attribute (sar)
assign t25 = not sar1.r6bfalse;
if (t25 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (true)") ;
end if;
 
assign t26 = not sar1.r6btrue;
if (t26 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (false)") ;
end if;

  // other.referential attribute (sor)
assign t27 = not sor1.r6bfalse;
if (t27 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (true)") ;
end if;
 
assign t28 = not sor1.r6btrue;
if (t28 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (false)") ;
end if;

  // other.referential attribute (smr)
for each smr in smr1
  assign t29 = not smr.r6bfalse;
  if (t29 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (true)") ;
  end if;
 
  assign t30 = not smr.r6btrue;
  if (t30 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (false)") ;
  end if;
end for;

 
LOG::LogInfo(message:"Finished Expression Test not operator") ;

//generate event to commence next test
generate ET12:''Start empty test''() to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'Testing subtraction operator',
	14,
	0);
INSERT INTO SM_CH
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("d9b4be29-1e41-5c8c-32ad-44f1d972ab53",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"4a0f189a-2e1a-092b-1e1b-4dee9304f699");
INSERT INTO SM_AH
	VALUES ("d9b4be29-1e41-5c8c-32ad-44f1d972ab53",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("d9b4be29-1e41-5c8c-32ad-44f1d972ab53",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	1,
	'LOG::LogInfo(message:"Starting subtract test") ;
select any event_instance from instances of EV;
//subtraction (-) operation
// perform each test combination with the following types:
     // integer integer
     // integer real
     // real integer
     // real real

  // local existing    local existing
assign temp1 = 13;
assign temp2 = 7;
assign temp3 = 2.4;
assign temp4 = 23.7;
assign t1 = temp1 - temp2 ;
if ( t1 == 6 )
  LOG::LogSuccess(message:" subtract local_existing local_existing ( 6 )") ;
else
  LOG::LogFailure(message:" subtract local_existing local_existing ( 6 )") ;
end if;
 
assign t2 = temp1 - temp3 ;
LOG::LogReal(r: t2 , message:" subtract local_existing local_existing ( 10.6 )") ;
 
assign t3 = temp3 - temp2 ;
LOG::LogReal(r: t3 , message:" subtract local_existing local_existing ( -4.6 )") ;
 
assign t4 = temp4 - temp3 ;
LOG::LogReal(r: t4 , message:" subtract local_existing local_existing ( 21.3 )") ;
 
  // local existing    rcvd_evt
// assume
// rcvd_evt.tint1 = 17
// rcvd_evt.treal1 = 2.781828
assign t5 = temp1 - rcvd_evt.tint1 ;
if ( t5 == -4 )
  LOG::LogSuccess(message:" subtract local_existing rcvd_evt ( -4 )") ;
else
  LOG::LogFailure(message:" subtract local_existing rcvd_evt ( -4 )") ;
end if;
 
assign t6 = temp1 - rcvd_evt.treal1 ;
LOG::LogReal(r: t6 , message:" subtract local_existing rcvd_evt ( 10.218172 )") ;
 
assign t7 = temp3 - rcvd_evt.tint1 ;
LOG::LogReal(r: t7 , message:" subtract local_existing rcvd_evt ( -14.6 )") ;
 
assign t8 = temp4 - rcvd_evt.treal1 ;
LOG::LogReal(r: t8 , message:" subtract local_existing rcvd_evt ( 20.918172 )") ;
 
  // local existing    constant
assign t9 = temp1 - 3 ;
if ( t9 == 10 )
  LOG::LogSuccess(message:" subtract local_existing constant ( 10 )") ;
else
  LOG::LogFailure(message:" subtract local_existing constant ( 10 )") ;
end if;
 
assign t10 = temp1 - 3.14 ;
LOG::LogReal(r: t10 , message:" subtract local_existing constant ( 9.86 )") ;
 
assign t11 = temp3 - 5.6 ;
LOG::LogReal(r: t11 , message:" subtract local_existing constant ( -3.2 )") ;
 
assign t12 = temp4 - 16.9 ;
LOG::LogReal(r: t12 , message:" subtract local_existing constant ( 6.8 )") ;
 
  // local existing    self.attribute
// assume self.i = 10
// assume self.r = 3.14
assign t13 = temp1 - self.i ;
if ( t13 == 3 )
  LOG::LogSuccess(message:" subtract local_existing self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.attribute ( 3 )") ;
end if;
 
assign t14 = temp1 - self.r ;
LOG::LogReal(r: t14 , message:" subtract local_existing self.attribute ( 9.86 )") ;
 
assign t15 = temp3 - self.i ;
LOG::LogReal(r: t15 , message:" subtract local_existing self.attribute ( -7.6 )") ;
 
assign t16 = temp4 - self.r ;
LOG::LogReal(r: t16 , message:" subtract local_existing self.attribute ( 20.56 )") ;
 
  // local existing    self.referential attribute
assign t17 = temp1 - self.etob_id ;
if ( t17 == 11 )
  LOG::LogSuccess(message:" subtract local_existing self.referential_attribute ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.referential_attribute ( 11 )") ;
end if;
 
assign t18 = temp1 - self.r1r ;
LOG::LogReal(r: t18 , message:" subtract local_existing self.referential_attribute ( 10.8282 )") ;
 
assign t19 = temp3 - self.etob_id ;
LOG::LogReal(r: t19 , message:" subtract local_existing self.referential_attribute ( 0.4 )") ;
 
assign t20 = temp4 - self.r1r ;
LOG::LogReal(r: t20 , message:" subtract local_existing self.referential_attribute ( 21.5282 )") ;
 
  // local existing    other.attribute (saf)
select any saf1 from instances of ETOB;
assign t21 = temp1 - saf1.etob_id ;
if ( t21 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
end if;
 
assign t22 = temp1 - saf1.r ;
LOG::LogReal(r: t22 , message:" subtract local_existing other.attribute(saf) ( 10.8282 )") ;
 
assign t23 = temp3 - saf1.etob_id ;
LOG::LogReal(r: t23 , message:" subtract local_existing other.attribute(saf) ( 0.4 )") ;
 
assign t24 = temp4 - saf1.r ;
LOG::LogReal(r: t24 , message:" subtract local_existing other.attribute(saf) ( 21.5282 )") ;
 
  // local existing    other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t25 = temp1 - smf.etob_id ;
if ( t25 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
end if;
 
assign t26 = temp1 - smf.r ;
LOG::LogReal(r: t26 , message:" subtract local_existing other.attribute(smf) ( 10.8282 )") ;
 
assign t27 = temp3 - smf.etob_id ;
LOG::LogReal(r: t27 , message:" subtract local_existing other.attribute(smf) ( 0.4 )") ;
 
assign t28 = temp4 - smf.r ;
LOG::LogReal(r: t28 , message:" subtract local_existing other.attribute(smf) ( 21.5282 )") ;
 
  // only do this once
  end if;
end for;
  // local existing    other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t29 = temp1 - sor1.etob_id ;
if ( t29 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
end if;
 
assign t30 = temp1 - sor1.r ;
LOG::LogReal(r: t30 , message:" subtract local_existing other.attribute(sor) ( 10.8282 )") ;
 
assign t31 = temp3 - sor1.etob_id ;
LOG::LogReal(r: t31 , message:" subtract local_existing other.attribute(sor) ( 0.4 )") ;
 
assign t32 = temp4 - sor1.r ;
LOG::LogReal(r: t32 , message:" subtract local_existing other.attribute(sor) ( 21.5282 )") ;
 
  // local existing    other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t33 = temp1 - sar1.etob_id ;
if ( t33 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
end if;
 
assign t34 = temp1 - sar1.r ;
LOG::LogReal(r: t34 , message:" subtract local_existing other.attribute(sar) ( 10.8282 )") ;
 
assign t35 = temp3 - sar1.etob_id ;
LOG::LogReal(r: t35 , message:" subtract local_existing other.attribute(sar) ( 0.4 )") ;
 
assign t36 = temp4 - sar1.r ;
LOG::LogReal(r: t36 , message:" subtract local_existing other.attribute(sar) ( 21.5282 )") ;
 
  // local existing    other.attribute (smr)
select many smr1 related by self->ETOB[R8];
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t37 = temp1 - smr.etob_id ;
if ( t37 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
end if;
 
assign t38 = temp1 - smr.r ;
LOG::LogReal(r: t38 , message:" subtract local_existing other.attribute(smr) ( 10.8282 )") ;
 
assign t39 = temp3 - smr.etob_id ;
LOG::LogReal(r: t39 , message:" subtract local_existing other.attribute(smr) ( 0.4 )") ;
 
assign t40 = temp4 - smr.r ;
LOG::LogReal(r: t40 , message:" subtract local_existing other.attribute(smr) ( 21.5282 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 - saf1.etoc_id ;
if ( t41 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
end if;
 
assign t42 = temp1 - saf1.r6r ;
LOG::LogReal(r: t42 , message:" subtract local_existing other.referential_attribute(saf) ( 1.689 )") ;
 
assign t43 = temp3 - saf1.etoc_id ;
LOG::LogReal(r: t43 , message:" subtract local_existing other.referential_attribute(saf) ( -1.6 )") ;
 
assign t44 = temp4 - saf1.r6r ;
LOG::LogReal(r: t44 , message:" subtract local_existing other.referential_attribute(saf) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smf)
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t45 = temp1 - smf.etoc_id ;
if ( t45 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
end if;
 
assign t46 = temp1 - smf.r6r ;
LOG::LogReal(r: t46 , message:" subtract local_existing other.referential_attribute(smf) ( 1.689 )") ;
 
assign t47 = temp3 - smf.etoc_id ;
LOG::LogReal(r: t47 , message:" subtract local_existing other.referential_attribute(smf) ( -1.6 )") ;
 
assign t48 = temp4 - smf.r6r ;
LOG::LogReal(r: t48 , message:" subtract local_existing other.referential_attribute(smf) ( 12.389 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 - sor1.etoc_id ;
if ( t49 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
end if;
 
assign t50 = temp1 - sor1.r6r ;
LOG::LogReal(r: t50 , message:" subtract local_existing other.referential_attribute(sor) ( 1.689 )") ;
 
assign t51 = temp3 - sor1.etoc_id ;
LOG::LogReal(r: t51 , message:" subtract local_existing other.referential_attribute(sor) ( -1.6 )") ;
 
assign t52 = temp4 - sor1.r6r ;
LOG::LogReal(r: t52 , message:" subtract local_existing other.referential_attribute(sor) ( 12.389 )") ;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 - sar1.etoc_id ;
if ( t53 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
end if;
 
assign t54 = temp1 - sar1.r6r ;
LOG::LogReal(r: t54 , message:" subtract local_existing other.referential_attribute(sar) ( 1.689 )") ;
 
assign t55 = temp3 - sar1.etoc_id ;
LOG::LogReal(r: t55 , message:" subtract local_existing other.referential_attribute(sar) ( -1.6 )") ;
 
assign t56 = temp4 - sar1.r6r ;
LOG::LogReal(r: t56 , message:" subtract local_existing other.referential_attribute(sar) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smr)
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t57 = temp1 - smr.etoc_id ;
if ( t57 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
end if;
 
assign t58 = temp1 - smr.r6r ;
LOG::LogReal(r: t58 , message:" subtract local_existing other.referential_attribute(smr) ( 1.689 )") ;
 
assign t59 = temp3 - smr.etoc_id ;
LOG::LogReal(r: t59 , message:" subtract local_existing other.referential_attribute(smr) ( -1.6 )") ;
 
assign t60 = temp4 - smr.r6r ;
LOG::LogReal(r: t60 , message:" subtract local_existing other.referential_attribute(smr) ( 12.389 )") ;
 
  end if;
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tint1 - temp1 ;
if ( t61 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt local_existing ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt local_existing ( 4 )") ;
end if;
 
assign t62 = rcvd_evt.tint1 - temp3 ;
LOG::LogReal(r: t62 , message:" subtract rcvd_evt local_existing ( 14.6 )") ;
 
assign t63 = rcvd_evt.treal1 - temp1 ;
LOG::LogReal(r: t63 , message:" subtract rcvd_evt local_existing ( -10.218172 )") ;
 
assign t64 = rcvd_evt.treal1 - temp3 ;
LOG::LogReal(r: t64 , message:" subtract rcvd_evt local_existing ( 0.381828 )") ;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tint1 - rcvd_evt.tint2 ;
if ( t65 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
end if;
 
assign t66 = rcvd_evt.tint1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t66 , message:" subtract rcvd_evt rcvd_evt ( 5.8 )") ;
 
assign t67 = rcvd_evt.treal1 - rcvd_evt.tint2 ;
LOG::LogReal(r: t67 , message:" subtract rcvd_evt rcvd_evt ( -10.218172 )") ;
 
assign t68 = rcvd_evt.treal1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t68 , message:" subtract rcvd_evt rcvd_evt ( -8.418172 )") ;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tint1 - 1 ;
if ( t69 == 16 )
  LOG::LogSuccess(message:" subtract rcvd_evt constant ( 16 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt constant ( 16 )") ;
end if;
 
assign t70 = rcvd_evt.tint1 - 1.0 ;
LOG::LogReal(r: t70 , message:" subtract rcvd_evt constant ( 16.0 )") ;
 
assign t71 = rcvd_evt.treal1 - 1 ;
LOG::LogReal(r: t71 , message:" subtract rcvd_evt constant ( 1.781828 )") ;
 
assign t72 = rcvd_evt.treal1 - 0.5 ;
LOG::LogReal(r: t72 , message:" subtract rcvd_evt constant ( 2.281828 )") ;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tint1 - self.i ;
if ( t73 == 7 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.attribute ( 7 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.attribute ( 7 )") ;
end if;
 
assign t74 = rcvd_evt.tint1 - self.r ;
LOG::LogReal(r: t74 , message:" subtract rcvd_evt self.attribute ( 13.86 )") ;
 
assign t75 = rcvd_evt.treal1 - self.i ;
LOG::LogReal(r: t75 , message:" subtract rcvd_evt self.attribute ( -7.218172 )") ;
 
assign t76 = rcvd_evt.treal1 - self.r ;
LOG::LogReal(r: t76 , message:" subtract rcvd_evt self.attribute ( -0.358172 )") ;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tint1 - self.etob_id ;
if ( t77 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
end if;
 
assign t78 = rcvd_evt.tint1 - self.r1r ;
LOG::LogReal(r: t78 , message:" subtract rcvd_evt self.referential_attribute ( 14.8282 )") ;
 
assign t79 = rcvd_evt.treal1 - self.etob_id ;
LOG::LogReal(r: t79 , message:" subtract rcvd_evt self.referential_attribute ( 0.781828 )") ;
 
assign t80 = rcvd_evt.treal1 - self.r1r ;
LOG::LogReal(r: t80 , message:" subtract rcvd_evt self.referential_attribute ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tint1 - saf1.etob_id ;
if ( t81 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
end if;
 
assign t82 = rcvd_evt.tint1 - saf1.r ;
LOG::LogReal(r: t82 , message:" subtract rcvd_evt other.attribute(saf) ( 14.8282 )") ;
 
assign t83 = rcvd_evt.treal1 - saf1.etob_id ;
LOG::LogReal(r: t83 , message:" subtract rcvd_evt other.attribute(saf) ( 0.781828 )") ;
 
assign t84 = rcvd_evt.treal1 - saf1.r ;
LOG::LogReal(r: t84 , message:" subtract rcvd_evt other.attribute(saf) ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (smf)
  // rcvd_evt    other.attribute (sor)
  // rcvd_evt    other.attribute (sar)
  // rcvd_evt    other.attribute (smr)
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tint1 - saf1.etoc_id ;
if ( t101 == 13 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
  // rcvd_evt    other.referential attribute (sor)
  // rcvd_evt    other.referential attribute (sar)
  // rcvd_evt    other.referential attribute (smr)
  // constant    local existing
assign t121 = 27 - temp1 ;
if ( t121 == 14 )
  LOG::LogSuccess(message:" subtract constant local_existing ( 14 )") ;
else
  LOG::LogFailure(message:" subtract constant local_existing ( 14 )") ;
end if;
 
  // constant    rcvd_evt
assign t126 = 27 - rcvd_evt.treal2 ;
LOG::LogReal(r: t126 , message:" subtract constant rcvd_evt ( 15.8 )") ;
 
  // constant    constant
assign t131 = 14.3 - 5 ;
LOG::LogReal(r: t131 , message:" subtract constant constant ( 9.3 )") ;
 
  // constant    self.attribute
assign t136 = 14.3 - self.r ;
LOG::LogReal(r: t136 , message:" subtract constant self.attribute ( 11.16 )") ;
 
  // constant    self.referential attribute
assign t137 = 27 - self.etob_id ;
if ( t137 == 25 )
  LOG::LogSuccess(message:" subtract constant self.referential_attribute ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant self.referential_attribute ( 25 )") ;
end if;
 
  // constant    other.attribute (saf)
assign t141 = 27 - saf1.etob_id ;
if ( t141 == 25 )
  LOG::LogSuccess(message:" subtract constant other.attribute(saf) ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant other.attribute(saf) ( 25 )") ;
end if;
 
  // constant    other.attribute (smf)
  // constant    other.attribute (sor)
  // constant    other.attribute (sar)
  // constant    other.attribute (smr)
  // constant    other.referential attribute (saf)
assign t161 = 27 - saf1.etoc_id ;
if ( t161 == 23 )
  LOG::LogSuccess(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
else
  LOG::LogFailure(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
end if;
 
  // constant    other.referential attribute (smf)
  // constant    other.referential attribute (sor)
  // constant    other.referential attribute (sar)
  // constant    other.referential attribute (smr)
  // self.attribute    local existing
assign t181 = self.i - temp1 ;
if ( t181 == -3 )
  LOG::LogSuccess(message:" subtract self.attribute local_existing ( -3 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute local_existing ( -3 )") ;
end if;
 
  // self.attribute    rcvd_evt
assign t186 = self.i - rcvd_evt.treal2 ;
LOG::LogReal(r: t186 , message:" subtract self.attribute rcvd_evt ( -1.2 )") ;
 
  // self.attribute    constant
assign t191 = self.r - 2 ;
LOG::LogReal(r: t191 , message:" subtract self.attribute constant ( 1.14 )") ;
 
  // self.attribute    self.attribute
assign t196 = self.i - self.r ;
LOG::LogReal(r: t196 , message:" subtract self.attribute self.attribute ( 6.86 )") ;
 
  // self.attribute    self.referential attribute
assign t197 = self.i - self.etob_id ;
if ( t197 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.i - saf1.etob_id ;
if ( t201 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (smf)
  // self.attribute    other.attribute (sor)
  // self.attribute    other.attribute (sar)
  // self.attribute    other.attribute (smr)
  // self.attribute    other.referential attribute (saf)
assign t221 = self.i - saf1.etoc_id ;
if ( t221 == 6 )
  LOG::LogSuccess(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
  // self.attribute    other.referential attribute (sor)
  // self.attribute    other.referential attribute (sar)
  // self.attribute    other.referential attribute (smr)
  // self.referential attribute    local existing
assign t241 = self.etob_id - temp1 ;
if ( t241 == -11 )
  LOG::LogSuccess(message:" subtract self.referential_attribute local_existing ( -11 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute local_existing ( -11 )") ;
end if;
 
  // self.referential attribute    rcvd_evt
assign t246 = self.etob_id - rcvd_evt.treal2 ;
LOG::LogReal(r: t246 , message:" subtract self.referential_attribute rcvd_evt ( -9.2 )") ;
 
  // self.referential attribute    constant
assign t251 = self.r1r - 2 ;
LOG::LogReal(r: t251 , message:" subtract self.referential_attribute constant ( 0.1718 )") ;
 
  // self.referential attribute    self.attribute
assign t256 = self.r1r - self.r ;
LOG::LogReal(r: t256 , message:" subtract self.referential_attribute self.attribute ( -0.9682 )") ;
 
  // self.referential attribute    self.referential attribute
assign t258 = self.etob_id - self.r1r ;
LOG::LogReal(r: t258 , message:" subtract self.referential_attribute self.referential_attribute ( -0.1718 )") ;
 
  // self.referential attribute    other.attribute (saf)
assign t261 = self.etob_id - saf1.etob_id ;
if ( t261 == 0 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
end if;
 
  // self.referential attribute    other.attribute (smf)
  // self.referential attribute    other.attribute (sor)
  // self.referential attribute    other.attribute (sar)
  // self.referential attribute    other.attribute (smr)
  // self.referential attribute    other.referential attribute (saf)
assign t281 = self.etob_id - saf1.etoc_id ;
if ( t281 == -2 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
end if;
 
  // self.referential attribute    other.referential attribute (smf)
  // self.referential attribute    other.referential attribute (sor)
  // self.referential attribute    other.referential attribute (sar)
  // self.referential attribute    other.referential attribute (smr)
  // other.attribute (saf)    local existing
  // other.attribute (saf)    rcvd_evt
  // other.attribute (saf)    constant
  // other.attribute (saf)    self.attribute
  // other.attribute (saf)    self.referential attribute
  // other.attribute (saf)    other.attribute (saf)
  // other.attribute (saf)    other.attribute (smf)
  // other.attribute (saf)    other.attribute (sor)
  // other.attribute (saf)    other.attribute (sar)
  // other.attribute (saf)    other.attribute (smr)
  // other.attribute (saf)    other.referential attribute (saf)
  // other.attribute (saf)    other.referential attribute (smf)
  // other.attribute (saf)    other.referential attribute (sor)
  // other.attribute (saf)    other.referential attribute (sar)
  // other.attribute (saf)    other.referential attribute (smr)
  // other.attribute (smf)    local existing
  // other.attribute (smf)    rcvd_evt
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    rcvd_evt
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    rcvd_evt
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    rcvd_evt
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
  // other.referential attribute (saf)    rcvd_evt
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    rcvd_evt
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    rcvd_evt
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    rcvd_evt
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    rcvd_evt
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed subtract test") ;

//generate event to commence next test
bridge d = TIM::current_date();
bridge ts = TIM::current_clock();
create event instance evinst of EV1:''Event Instance''(message:"timer event 1.2")  to event_instance;
bridge tim = TIM::timer_start ( microseconds:1000000, event_inst:evinst);
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: d, ts: ts, tim:tim, ev:evinst) to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'Testing assign',
	15,
	0);
INSERT INTO SM_CH
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("67465ae3-2259-f254-34d2-8c42c3599a87",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"6071daa0-47ee-e7fc-40b7-c1cb8de98519");
INSERT INTO SM_AH
	VALUES ("67465ae3-2259-f254-34d2-8c42c3599a87",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("67465ae3-2259-f254-34d2-8c42c3599a87",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	1,
	'LOG::LogInfo(message:"Starting assign test") ;
select any event_instance from instances of EV;
// Assign operation

  // boolean
assign t1 = true;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_initial constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( true )") ;
end if;
 
assign t2 = false;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_initial constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( false )") ;
end if;
 
  // integer
assign t3 = 5;
if ( t3 == 5 )
  LOG::LogSuccess(message:"assign local_initial constant ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( 5 )") ;
end if;
 
  // real
assign t4 = 16.98;
LOG::LogInfo( message:"assign local_initial constant ( 16.98 )") ;
 
  // string
assign t5 = "hissy";
if ( t5 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial constant ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( hissy )") ;
end if;

  // boolean
assign t6 = t1;
if ( t6 == true )
  LOG::LogSuccess(message:"assign local_initial local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( true )") ;
end if;
 
assign t7 = t2;
if ( t7 == false )
  LOG::LogSuccess(message:"assign local_initial local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( false )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 5 )
  LOG::LogSuccess(message:"assign local_initial local_existing ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( 5 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_initial local_existing ( 16.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial local_existing ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( hissy )") ;
end if;

// unique_id
assign temp_unique_id = self.u;
assign t11 = temp_unique_id;
if ( t11 == self.u )
  LOG::LogSuccess(message:"assign local_initial local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( self.u )") ;
end if;
 
  // date
bridge temp_date = TIM::create_date(second:30, minute:56, hour:19, day:3, month:1, year:1966);
assign t12 = temp_date;
LOG::LogDate(d:t12, message:"assign local_initial local_existing ( 3/1/1996 19:56:30 )");

  // timestamp
bridge temp_timestamp = TIM::current_clock();
assign t13 = temp_timestamp;
LOG::LogTime(t:t13, message:"assign local_initial local_existing ( )");

  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event")to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t14 = temp_timer;
if ( t14 == temp_timer )
  LOG::LogSuccess(message:"assign local_initial local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t15 = ev_inst1;
LOG::LogInfo( message:"assign local_initial local_existing ( LOG1(timer event) )") ;

  // inst_ref<Object>
select any none from instances of NOI;
assign t16 = none;
if ( t16 == none )
  LOG::LogSuccess(message:"assign local_initial local_existing ( none )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( none )") ;
end if;
 
select any inst from instances of OI;
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_initial local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( inst )") ;
end if;

// This is a special test case to verify that usage of 
// local variables of type inst_ref<Object> generate code
// without any error messages.  See the bp issue 659. 
assign t17b = self;
relate t17 to t17b across R3;
unrelate t17b from t17 across R3;

  // boolean
assign t19 = rcvd_evt.ttrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( true )") ;
end if;
 
assign t20 = rcvd_evt.tfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( false )") ;
end if;
 
  // integer
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( fit )") ;
end if;

  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst<Event>
assign t28 = rcvd_evt.ev;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( LOG1(timer event) )") ;

  // boolean
assign t29 = self.bfalse;
if ( t29 == false )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( false )") ;
end if;
 
assign t30 = self.btrue;
if ( t30 == true )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( true )") ;
end if;
 
  // integer
assign t31 = self.i;
if ( t31 == 10 )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( 10 )") ;
end if;
 
  // real
assign t32 = self.r;
LOG::LogInfo( message:"assign local_initial self.attribute ( 3.14 )") ;
 
  // string
assign t33 = self.s;
if ( t33 == "String" )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( String )") ;
end if;

  // unique_id
assign t34 = self.u;
if ( t34 == self.u )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.u )") ;
end if;
 
  // date
bridge self.d = TIM::create_date(second:31, minute:51, hour:18, day:4, month:4, year:1970);
assign t35 = self.d;
LOG::LogDate(d:t35, message:"assign local_initial self.attribute ( 4/4/1970 18:51:31 )");

  // timestamp
assign t36a = self.t;
LOG::LogTime(t:t36a, message:"assign local_initial self.attribute ( 0 )");
bridge self.t = TIM::current_clock();
assign t36b = self.t;
LOG::LogTime(t:t36b, message:"assign local_initial self.attribute ( current_time )") ;

  // inst_ref<Timer>
create event instance temp_ev of EV1:''Event Instance''(message:"timer event") to event_instance;
assign self.ev = temp_ev;
bridge self.tim = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t37 = self.tim;
if ( t37 == self.tim )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t38 = self.ev;
LOG::LogInfo( message:"assign local_initial self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t39 = self.r1btrue;
if ( t39 == true )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( true )") ;
end if;
 
assign t40 = self.r1bfalse;
if ( t40 == false )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( false )") ;
end if;
 
  // integer
assign t41 = self.etob_id;
if ( t41 == 2 )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t42 = self.r1r;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t43 = self.r1s;
if ( t43 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t44 = self.r1u;
if ( t44 == self.r1u )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t45 = self.r1d;
LOG::LogDate(d:t45, message:"assign local_initial self.referential_attribute ( 8/9/1991 13:07:17 )");

  // timestamp
assign t46 = self.r1t;
LOG::LogTime(t:t46, message:"assign local_initial self.referential_attribute ( 0 )");

  // inst_ref<Timer>
assign t47 = self.r1tim;
if ( t47 == self.r1tim )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t48 = self.r1ev;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( LOG1(timer event) )") ;

select any saf from instances of ETOB;
  // boolean
assign t49 = saf.btrue;
if ( t49 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( true )") ;
end if;
 
assign t50 = saf.bfalse;
if ( t50 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign t51 = saf.etob_id;
if ( t51 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t52 = saf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t53 = saf.s;
if ( t53 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t54 = saf.u;
if ( t54 == saf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t55 = saf.d;
LOG::LogDate(d:t55, message:"assign local_initial other.attribute(saf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t56 = saf.t;
LOG::LogTime(t:t56, message:"assign local_initial other.attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t57 = saf.tim;
if ( t57 == saf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t58 = saf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( LOG1(timer event) )") ;

select many smfs from instances of ETOB;
for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t59 = smf.btrue;
if ( t59 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( true )") ;
end if;
 
assign t60 = smf.bfalse;
if ( t60 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t61 = smf.etob_id;
if ( t61 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t62 = smf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t63 = smf.s;
if ( t63 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t64 = smf.u;
if ( t64 == smf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t65 = smf.d;
LOG::LogDate(d:t65, message:"assign local_initial other.attribute(smf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t66 = smf.t;
LOG::LogTime(t:t66, message:"assign local_initial other.attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t67 = smf.tim;
if ( t67 == smf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign t68 = smf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( LOG1(timer event) )") ;

  end if;
end for;

select one sor related by self->ETOB[R1];
  // boolean
assign t69 = sor.btrue;
if ( t69 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( true )") ;
end if;
 
assign t70 = sor.bfalse;
if ( t70 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( false )") ;
end if;
 
  // integer
assign t71 = sor.etob_id;
if ( t71 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( 2 )") ;
end if;
 
  // real
assign t72 = sor.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( 2.1718 )") ;
 
  // string
assign t73 = sor.s;
if ( t73 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
end if;
  // unique_id
assign t74 = sor.u;
if ( t74 == sor.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
end if;
 
  // date
assign t75 = sor.d;
LOG::LogDate(d:t75, message:"assign local_initial other.attribute(sor) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t76 = sor.t;
LOG::LogTime(t:t76, message:"assign local_initial other.attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t77 = sor.tim;
if ( t77 == sor.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
end if;
 
  // inst<Event>
assign t78 = sor.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( LOG1(timer event) )") ;

select any sar related by self->ETOB[R8];
  // boolean
assign t79 = sar.btrue;
if ( t79 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( true )") ;
end if;
 
assign t80 = sar.bfalse;
if ( t80 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( false )") ;
end if;
 
  // integer
assign t81 = sar.etob_id;
if ( t81 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( 2 )") ;
end if;
 
  // real
assign t82 = sar.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( 2.1718 )") ;
 
  // string
assign t83 = sar.s;
if ( t83 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
end if;
  // unique_id
assign t84 = sar.u;
if ( t84 == sar.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
end if;
 
  // date
assign t85 = sar.d;
LOG::LogDate(d:t85, message:"assign local_initial other.attribute(sar) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t86 = sar.t;
LOG::LogTime(t:t86, message:"assign local_initial other.attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t87 = sar.tim;
if ( t87 == sar.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
end if;
 
  // inst<Event>
assign t88 = sar.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( LOG1(timer event) )") ;

select many smrs related by self->ETOB[R8];
for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t89 = smr.btrue;
if ( t89 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( true )") ;
end if;
 
assign t90 = smr.bfalse;
if ( t90 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( false )") ;
end if;
 
  // integer
assign t91 = smr.etob_id;
if ( t91 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( 2 )") ;
end if;
 
  // real
assign t92 = smr.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( 2.1718 )") ;
 
  // string
assign t93 = smr.s;
if ( t93 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
end if;
  // unique_id
assign t94 = smr.u;
if ( t94 == smr.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
end if;
 
  // date
assign t95 = smr.d;
LOG::LogDate(d:t95, message:"assign local_initial other.attribute(smr) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t96 = smr.t;
LOG::LogTime(t:t96, message:"assign local_initial other.attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t97 = smr.tim;
if ( t97 == smr.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
end if;
 
  // inst<Event>
assign t98 = smr.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t99 = saf.r6btrue;
if ( t99 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
end if;
 
assign t100 = saf.r6bfalse;
if ( t100 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
end if;
 
  // integer
assign t101 = saf.etoc_id;
if ( t101 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
end if;
 
  // real
assign t102 = saf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( 11.311 )") ;
 
  // string
assign t103 = saf.r6s;
if ( t103 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
end if;
  // unique_id
assign t104 = saf.r6u;
if ( t104 == saf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
end if;
 
  // date
assign t105 = saf.r6d;
LOG::LogDate(d:t105, message:"assign local_initial other.referential_attribute(saf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t106 = saf.r6t;
LOG::LogTime(t:t106, message:"assign local_initial other.referential_attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t107 = saf.r6tim;
if ( t107 == saf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
end if;
 
  // inst<Event>
assign t108 = saf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if (smf.etob_id == 2)
  // boolean
assign t119 = smf.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( true )") ;
end if;
 
assign t110 = smf.r6bfalse;
if ( t110 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( false )") ;
end if;
 
  // integer
assign t111 = smf.etoc_id;
if ( t111 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( 4 )") ;
end if;
 
  // real
assign t112 = smf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute ( 11.311 )") ;
 
  // string
assign t113 = smf.r6s;
if ( t113 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
end if;
  // unique_id
assign t114 = smf.r6u;
if ( t114 == smf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
end if;
 
  // date
assign t115 = smf.r6d;
LOG::LogDate(d:t115, message:"assign local_initial other.referential_attribute(smf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t116 = smf.r6t;
LOG::LogTime(t:t116, message:"assign local_initial other.referential_attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t117 = smf.r6tim;
if ( t117 == smf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
end if;
 
  // inst<Event>
assign t118 = smf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smf) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t119 = sor.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
end if;
 
assign t120 = sor.r6bfalse;
if ( t120 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
end if;
 
  // integer
assign t121 = sor.etoc_id;
if ( t121 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
end if;
 
  // real
assign t122 = sor.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( 11.311 )") ;
 
  // string
assign t123 = sor.r6s;
if ( t123 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
end if;
  // unique_id
assign t124 = sor.r6u;
if ( t124 == sor.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
end if;
 
  // date
assign t125 = sor.r6d;
LOG::LogDate(d:t125, message:"assign local_initial other.referential_attribute(sor) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t126 = sor.r6t;
LOG::LogTime(t:t126, message:"assign local_initial other.referential_attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t127 = sor.r6tim;
if ( t127 == sor.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
end if;
 
  // inst<Event>
assign t128 = sor.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( LOG1(timer event) )") ;

  // boolean
assign t129 = sar.r6btrue;
if ( t129 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
end if;
 
assign t130 = sar.r6bfalse;
if ( t130 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
end if;
 
  // integer
assign t131 = sar.etoc_id;
if ( t131 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
end if;
 
  // real
assign t132 = sar.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( 11.311 )") ;
 
  // string
assign t133 = sar.r6s;
if ( t133 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
end if;
  // unique_id
assign t134 = sar.r6u;
if ( t134 == sar.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
end if;
 
  // date
assign t135 = sar.r6d;
LOG::LogDate(d:t135, message:"assign local_initial other.referential_attribute(sar) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t136 = sar.r6t;
LOG::LogTime(t:t136, message:"assign local_initial other.referential_attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t137 = sar.r6tim;
if ( t137 == sar.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
end if;
 
  // inst<Event>
assign t138 = sar.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( LOG1(timer event) )") ;

for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t139 = smr.r6btrue;
if ( t139 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
end if;
 
assign t140 = smr.r6bfalse;
if ( t140 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
end if;
 
  // integer
assign t141 = smr.etoc_id;
if ( t141 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
end if;
 
  // real
assign t142 = smr.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( 11.311 )") ;
 
  // string
assign t143 = smr.r6s;
if ( t143 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
end if;
  // unique_id
assign t144 = smr.r6u;
if ( t144 == smr.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
end if;
 
  // date
assign t145 = smr.r6d;
LOG::LogDate(d:t145, message:"assign local_initial other.referential_attribute(smr) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t146 = smr.r6t;
LOG::LogTime(t:t146, message:"assign local_initial other.referential_attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t147 = smr.r6tim;
if ( t147 == smr.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
end if;
 
  // inst<Event>
assign t148 = smr.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;


  // boolean
assign t1 = false;
if ( t1 == false )
  LOG::LogSuccess(message:"assign local_existing constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( false )") ;
end if;
 
assign t2 = true;
if ( t2 == true )
  LOG::LogSuccess(message:"assign local_existing constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( true )") ;
end if;
 
  // integer
assign t3 = 7;
if ( t3 == 7 )
  LOG::LogSuccess(message:"assign local_existing constant ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( 7 )") ;
end if;
 
  // real
assign t4 = 96.98;
LOG::LogInfo( message:"assign local_existing constant ( 96.98 )") ;
 
  // string
assign t5 = "fussy";
if ( t5 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing constant ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( fussy )") ;
end if;

  // boolean
assign t2 = t7;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( false )") ;
end if;
 
assign t1 = t6;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( true )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 7 )
  LOG::LogSuccess(message:"assign local_existing local_existing ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( 7 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_existing local_existing ( 96.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing local_existing ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( fussy )") ;
end if;

  // unique_id
assign t24 = t11;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( self.u )") ;
end if;
 
  // date
assign t25 = t12;
if ( t25 == temp_date )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_date )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_date )") ;
end if;
 
  // timestamp
assign t26 = t13;
if ( t26 == temp_timestamp )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timestamp )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timestamp )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = t14;
if ( t27 == temp_timer )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t28 = t15;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( LOG1(timer event) )");

  // inst_ref<Object>
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_existing local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( inst )") ;
end if;
 

  // boolean
assign t19 = rcvd_evt.tfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( false )") ;
end if;
 
assign t20 = rcvd_evt.ttrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( true )") ;
end if;
 
  // integer
assign t21 = 0;
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = 0.0;
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = "";
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( fit )") ;
end if;
 
  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // boolean
assign t19 = self.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( true )") ;
end if;
 
assign t20 = self.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( false )") ;
end if;
 
  // integer
assign t21 = self.i;
if ( t21 == 10 )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( 10 )") ;
end if;
 
  // real
assign t22 = self.r;
LOG::LogInfo( message:"assign local_existing self.attribute ( 3.14 )") ;
 
  // string
assign t23 = self.s;
if ( t23 == "String" )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( String )") ;
end if;
  // unique_id
assign t24 = self.u;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.u )") ;
end if;
 
  // date
assign t25 = self.d;
if ( t25 == self.d )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign t26 = self.t;
if ( t26 == self.t )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.tim;
if ( t27 == self.tim )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.ev;
LOG::LogInfo( message:"assign local_existing self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t19 = self.r1bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = self.r1btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( true )") ;
end if;
 
  // integer
assign t21 = self.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t22 = self.r1r;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t23 = self.r1s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t24 = self.r1u;
if ( t24 == self.r1u )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t25 = self.r1d;
if ( t25 == self.r1d )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign t26 = self.r1t;
if ( t26 == self.r1t )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.r1tim;
if ( t27 == self.r1tim )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.r1ev;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( LOG1(timer event) )") ;

// lval = local existing rval = other.attribute (saf)
  // boolean
assign t19 = saf.bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t20 = saf.btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign t21 = saf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t22 = saf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t23 = saf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = saf.u;
if ( t24 == saf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t25 = saf.d;
if ( t25 == saf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign t26 = saf.t;
if ( t26 == saf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = saf.tim;
if ( t27 == saf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t28 = saf.ev;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t19 = smf.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t20 = smf.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t21 = smf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t22 = smf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t23 = smf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = smf.u;
if ( t24 == smf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t25 = smf.d;
if ( t25 == smf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign t26 = smf.t;
if ( t26 == smf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = smf.tim;
if ( t27 == smf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
end if;
 
  end if;
end for;

//generate event to continue test
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: rcvd_evt.d, ts: rcvd_evt.ts, tim:rcvd_evt.tim, ev:rcvd_evt.ev) to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'Additional assign tests',
	17,
	0);
INSERT INTO SM_CH
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("182c7fe9-315e-a6c1-868f-13a18b137dee",
	"c130db49-8bb3-d6f3-b776-27cc1a33fe5a",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("ddf2fe3b-4203-25e5-2e45-75e20e455177",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"182c7fe9-315e-a6c1-868f-13a18b137dee");
INSERT INTO SM_AH
	VALUES ("ddf2fe3b-4203-25e5-2e45-75e20e455177",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("ddf2fe3b-4203-25e5-2e45-75e20e455177",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	1,
	'select any event_instance from instances of EV;
  // boolean
assign self.btrue = false;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( false )") ;
end if;
 
assign self.btrue = true;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( true )") ;
end if;
 
  // integer
assign self.i = -17;
if ( self.i == -17 )
  LOG::LogSuccess(message:"assign self.attribute constant ( -17 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( -17 )") ;
end if;
 
assign self.i = 15;
if ( self.i == 15 )
  LOG::LogSuccess(message:"assign self.attribute constant ( 15 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( 15 )") ;
end if;

  // real
assign self.r = 387.32;
if ( ((self.r - 387.32 ) < .1) OR ((387.32 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute constant ( 387.21 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant (387.21 )") ;
end if;

  // string
assign self.s = "test 1029";
if ( self.s == "test 1029" )
  LOG::LogSuccess(message:"assign self.attribute constant ( test 1029 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( test 1029 )") ;
end if;

  // boolean
assign t20 = false;
assign self.btrue = t20;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( false )") ;
end if;

assign t19 = true; 
assign self.btrue = t19;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( true )") ;
end if;
 
  // integer
assign t21 = 2;
assign self.i = t21;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( 2 )") ;
end if;
 
  // real
assign t22 = 2.1718;
assign self.r = t22;
if ( ((self.r - 2.1718) < .1) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 real )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 real )") ;
end if;

  // string
assign t23 = "etob1 string";
assign self.s = t23;
if ( self.s == "etob1 string" )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 string )") ;
end if;

  // unique_id
assign save_u = self.u;
assign t24 = rcvd_evt.u;
assign self.u = t24;
if ( self.u == rcvd_evt.u )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
assign self.d = t25;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
assign self.t = t26;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event") to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign self.tim = temp_timer;
if ( self.tim == temp_timer )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign self.ev = ev_inst1;
LOG::LogInfo(message:"assign self.attribute local_existing ( LOG1(timer event) )");

  // boolean
assign self.btrue = rcvd_evt.tfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( false )") ;
end if;
 
assign self.btrue = rcvd_evt.ttrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( true )") ;
end if;
 
  // integer
assign self.i = rcvd_evt.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11 )") ;
end if;
 
  // real
assign self.r = rcvd_evt.r;
if ( ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
assign self.r = rcvd_evt.i;
if ( self.r == 11.0 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign self.s = rcvd_evt.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( fit )") ; 
end if; 
 
  // unique_id   
assign self.u = rcvd_evt.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( save_u )") ;
end if;
 
  // date
assign self.d = rcvd_evt.d;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp 
assign self.t = rcvd_evt.ts;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = rcvd_evt.tim;
if ( self.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = rcvd_evt.ev;
LOG::LogInfo(message:"assign self.attribute rcvd_evt ( LOG1(timer event) )") ; 
 

  // boolean
assign self.btrue = self.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( false )") ;
end if;
 
assign self.btrue = true;
assign self.bfalse = self.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( true )") ;
end if;
 
assign self.bfalse = false;

  // integer
assign self.i = self.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( 11 )") ;
end if;
 
  // real
assign self.r = self.r;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r )") ; 
end if; 
 
assign self.r = self.i;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r i)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r i)") ; 
end if; 
 
  // string
assign self.s = self.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( fit )") ; 
end if; 
 
  // unique_id
assign self.u = self.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( save_u )") ;
end if;
 
  // date
assign self.d = self.d;
if ( self.d == self.d )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign self.t = self.t;
if ( self.t == self.t )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.tim;
if ( self.tim == self.tim )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.ev;
LOG::LogInfo( message:"assign self.attribute self.attribute ( LOG1(timer event) )") ; 

  // boolean
assign self.btrue = self.r1bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
assign self.btrue = self.r1btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
  // integer
assign self.i = self.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign self.r = self.r1r;
if ( (( self.r - 2.1718) < .1 ) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
assign self.r = self.etob_id;
if ( (( self.r - 2.0) < .1 ) OR ((2.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
  // string
assign self.s = self.r1s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute self.referential attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.referential attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = self.r1u;
if ( self.u == self.r1u )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign self.d = self.r1d;
if ( self.d == self.r1d )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign self.t = self.r1t;
if ( self.t == self.r1t )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.r1tim;
if ( self.tim == self.r1tim )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.r1ev;
LOG::LogInfo(message:"assign self.attribute self.referential attribute ( LOG1(timer event) )") ; 


  // boolean
select any saf from instances of ETOB;
assign self.btrue = saf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign self.btrue = saf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign self.i = saf.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign self.r = saf.r;
if (  ((self.r -2.1718) < .1) OR (( 2.1718 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
end if;
 
assign self.r = saf.etob_id;
if (  ((self.r -2.0) < .1) OR (( 2.0 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.etob_id; )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) (assign self.r = saf.etob_id; )") ;
end if;
 
  // string
assign self.s = saf.s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute saf.attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute saf.attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = saf.u;
if ( self.u == saf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign self.d = saf.d;
if ( self.d == saf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign self.t = saf.t;
if ( self.t == saf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = saf.tim;
if ( self.tim == saf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = saf.ev;
LOG::LogInfo(message:"assign self.attribute saf.attribute ( LOG1(timer event) )") ; 

  // boolean
select many smfs from instances of ETOB;
for each smf in smfs
assign self.btrue = smf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign self.btrue = smf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign self.i = smf.etob_id;
if ( self.i == smf.etob_id )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign self.r = smf.r;
if ( ((self.r - smf.r ) < .1) OR ((smf.r - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
end if;
 
assign self.r = smf.etob_id;
if ( ((self.r - smf.etob_id ) < .1) OR ((smf.etob_id - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) (assign self.r = smf.etob_id )") ;
end if;
 
  // string
assign self.s = smf.s; 
if ( self.s == smf.s ) 
  LOG::LogSuccess(message:"assign self.attribute smf.attribute  etob1 string") ;
else 
  LOG::LogFailure(message:"assign self.attribute smf.attribute ( etob1 string)") ; 
end if; 
  // unique_id
assign self.u = smf.u;
if ( self.u == smf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign self.d = smf.d;
if ( self.d == smf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign self.t = smf.t;
if ( self.t == smf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = smf.tim;
if ( self.tim == smf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign self.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;

  // boolean
assign saf.btrue = false;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
assign saf.btrue = true;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = true;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = false;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
  // integer
assign saf.etob_id = 435;
if ( saf.etob_id == 435 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 435 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 435 )") ;
end if;
 
  // real
assign saf.r = 12;
if ( saf.r == 12 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 12 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 12 )") ;
end if;
 
assign saf.r = 17.6;
LOG::LogInfo(message:"assign other.attribute(saf) constant ( 17.6 )");
 
  // string
assign saf.s = "test 222";
if ( saf.s == "test 222" )
  LOG::LogSuccess(message:"assign other.attribute constant ( test 222 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute constant ( test 222 )") ; 
end if;

  // boolean
assign temp10 = true;
assign temp11 = false;
assign saf.btrue = temp11;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
assign saf.btrue = temp10;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp10;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp11;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
  // integer
assign temp12 = 31;
assign saf.etob_id = temp12;
if ( saf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( 31 )") ;
end if;
 
  // real
assign temp13 = 9.874;
assign saf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 31.0 )") ;
 
assign saf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 9.874 )") ;
 
  // string
assign temp14 = "test 333";
assign saf.s = temp14;
if ( saf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute local_existing ( test 333 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute local_existing ( test 333 )") ; 
end if;

  // date
assign saf.d = t25;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = t26;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = temp_timer;
if ( saf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign saf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute local_existing ( LOG1(timer event) )") to event_instance; 
  // boolean
assign saf.btrue = rcvd_evt.tfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign saf.btrue = rcvd_evt.ttrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign saf.etob_id = rcvd_evt.i;
if ( saf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign saf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(saf) rcvd_evt ( 12.34 )") ;
 
assign saf.r = rcvd_evt.i;
if ( saf.r == 11.0 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign saf.s = rcvd_evt.s;
if ( saf.s == "fit" )
  LOG::LogSuccess(message:"assign saf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign saf.attribute rcvd_evt ( fit )") ;
end if;
 
  // date
assign saf.d = rcvd_evt.d;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = rcvd_evt.ts;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = rcvd_evt.tim;
if ( saf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign saf.btrue = self.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = self.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign saf.bfalse = false;

  // integer
assign saf.etob_id = self.i;
if ( saf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
end if;
 
  // real
assign saf.r = self.r;
LOG::LogInfo(message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
assign saf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
  // string
assign saf.s = self.s;
if ( saf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.attribute ( etob2 string )") ;
end if;

  // date
assign saf.d = self.d;
if ( saf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign saf.t = self.t;
if ( saf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.tim;
if ( saf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = self.r1bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign saf.btrue = self.r1btrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1bfalse;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
  // integer
assign saf.etob_id = self.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign saf.r = self.r1r;
LOG::LogInfo(message:"assign other.attribute(saf) self.referential_attribute ( 2.1718 )") ;
 
assign saf.r = self.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) self.referential_attribute ( 2.0 )") ;
 
  // string
assign saf.s = self.r1s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = self.r1d;
if ( saf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign saf.t = self.r1t;
if ( saf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.r1tim;
if ( saf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.referential attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = saf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign saf.bfalse = saf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
assign saf.bfalse = false; 
 
  // integer
assign saf.etob_id = saf.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign saf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
assign saf.r = saf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = saf.s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = saf.d;
if ( saf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign saf.t = saf.t;
if ( saf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = saf.tim;
if ( saf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute saf.attribute ( LOG1(timer event)") to event_instance; 

  // boolean
for each smf in smfs
assign saf.btrue = smf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = smf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign saf.bfalse = false;
 
  // integer
assign saf.etob_id = smf.etob_id;
if ( saf.etob_id == smf.etob_id )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign saf.r = smf.r;
LOG::LogInfo(message:"assign other.attribute(saf) other.attribute(smf) ( smf.r )") ;
 
assign saf.r = smf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
 
  // string
assign saf.s = smf.s;
if ( saf.s == smf.s )
  LOG::LogSuccess(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = smf.d;
if ( saf.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign saf.t = smf.t;
if ( saf.t == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = smf.tim;
if ( saf.tim == smf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;


for each smf in smfs
  // boolean
assign smf.btrue = false;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
assign smf.btrue = true;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = true;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = false;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
  // integer
assign smf.etob_id = 29;
if ( smf.etob_id == 29 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 29 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 29 )") ;
end if;
 
  // real
assign smf.r = 12;
if ( smf.r == 12.0 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 12.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 12.0 )") ;
end if;
 
assign smf.r = 17.5;
if ( smf.r == 17.5 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 17.5 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 17.5 )") ;
end if;
 
  // string
assign smf.s = "test 444";
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 444 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 444 )") ;
end if;


  // boolean
assign smf.btrue = temp11;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
assign smf.btrue = temp10;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp10;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp11;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
  // integer
assign smf.etob_id = temp12;
if ( smf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( 31 )") ;
end if;
 
  // real
assign smf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 31.0 )") ;
 
assign smf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 9.874 )") ;
 
  // string
assign smf.s = temp14;
if ( smf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 333 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 333 )") ;
end if;

  // date
assign smf.d = t25;
if ( rcvd_evt.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = t26;
if ( rcvd_evt.ts == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = temp_timer;
if ( smf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign smf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute(smf) local_existing ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = rcvd_evt.tfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
end if;
 
assign smf.btrue = rcvd_evt.ttrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign smf.etob_id = rcvd_evt.i;
if ( smf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign smf.r = rcvd_evt.i;
LOG::LogInfo(message:"assign other.attribute(smf) rcvd_evt ( 11.0 )") ;
 
assign smf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(smf) rcvd_evt ( 12.34 )") ;
 
  // string
assign smf.s = rcvd_evt.s;
if ( smf.s == "fit" )
  LOG::LogSuccess(message:"assign smf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign smf.attribute rcvd_evt ( fit )") ;
end if;

  // date
assign smf.d = rcvd_evt.d;
if ( smf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = rcvd_evt.ts;
if ( smf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = rcvd_evt.tim;
if ( smf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = self.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( false )") ;
end if;
 
assign smf.btrue = self.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.i;
if ( smf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
end if;
 
  // real
assign smf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
assign smf.r = self.r;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
  // string
assign smf.s = self.s;
if ( smf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.attribute ( etob2 string )") ;
end if;
 
  // date
assign smf.d = self.d;
if ( smf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign smf.t = self.t;
if ( smf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.tim;
if ( smf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign smf.btrue = self.r1bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
end if;
 
assign smf.btrue = self.r1btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign smf.r = self.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) self.referential_attribute ( 2.0 )") ;
 
assign smf.r = self.r1r;
LOG::LogInfo( message:"assign other.attribute(smf) self.referential_attribute ( 2.1718 )") ;
 
  // string
assign smf.s = self.r1s;
if ( smf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
end if;
 
  // date
assign smf.d = self.r1d;
if ( smf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign smf.t = self.r1t;
if ( smf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.r1tim;
if ( smf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.referentialattribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = saf.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign smf.btrue = saf.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign smf.etob_id = saf.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign smf.r = saf.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
assign smf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = "test 444";
assign smf.s = saf.s;
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign smf.attribute saf.attribute ( test 444 )") ;
else
  LOG::LogFailure(message:"assign smf.attribute saf.attribute ( test 444 )") ;
end if;
 
  // date
assign smf.d = saf.d;
if ( smf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign smf.t = saf.t;
if ( smf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = saf.tim;
if ( smf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute saf.attribute ( LOG1(timer event) )") to event_instance; 

end for;

LOG::LogInfo(message:"Completed assign test") ;
 
//generate event to commence next test
generate ET16:''Start and test''(tfalse:false, ttrue: true) to self;

',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("cdd13c86-54db-7f68-6857-5ca99f29f6ba",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("306ea98e-f779-8b83-fa0b-354f8d59b19f",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"cdd13c86-54db-7f68-6857-5ca99f29f6ba");
INSERT INTO SM_AH
	VALUES ("306ea98e-f779-8b83-fa0b-354f8d59b19f",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("306ea98e-f779-8b83-fa0b-354f8d59b19f",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("cdd13c86-54db-7f68-6857-5ca99f29f6ba",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"34f33f82-96ae-a337-98df-f59d249b65ed",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("784504ea-ab07-1eac-c5e9-37e4a4b84356",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"34f33f82-96ae-a337-98df-f59d249b65ed",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("4d7f87c5-fe2c-8a79-914f-0ddd2d14e78d",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"784504ea-ab07-1eac-c5e9-37e4a4b84356");
INSERT INTO SM_AH
	VALUES ("4d7f87c5-fe2c-8a79-914f-0ddd2d14e78d",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("4d7f87c5-fe2c-8a79-914f-0ddd2d14e78d",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("784504ea-ab07-1eac-c5e9-37e4a4b84356",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"81374f42-af06-0e04-abb9-f6643a9eaa65",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("7d77c1bc-3502-17f9-db93-6a04522cbc13",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"81374f42-af06-0e04-abb9-f6643a9eaa65",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("32ebad43-9063-5b3c-74bd-09f021df16ec",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"7d77c1bc-3502-17f9-db93-6a04522cbc13");
INSERT INTO SM_AH
	VALUES ("32ebad43-9063-5b3c-74bd-09f021df16ec",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("32ebad43-9063-5b3c-74bd-09f021df16ec",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("7d77c1bc-3502-17f9-db93-6a04522cbc13",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("0d33209d-819b-d9d4-c071-879715aa4ad5",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("07945c66-cc11-1905-5073-7e661bad8059",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"0d33209d-819b-d9d4-c071-879715aa4ad5");
INSERT INTO SM_AH
	VALUES ("07945c66-cc11-1905-5073-7e661bad8059",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("07945c66-cc11-1905-5073-7e661bad8059",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("0d33209d-819b-d9d4-c071-879715aa4ad5",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("ddc29b70-eecb-11e9-eb31-a98dd7dfef2d",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("b60bbf64-e7b9-6139-65f1-7fc07d28b612",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"ddc29b70-eecb-11e9-eb31-a98dd7dfef2d");
INSERT INTO SM_AH
	VALUES ("b60bbf64-e7b9-6139-65f1-7fc07d28b612",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("b60bbf64-e7b9-6139-65f1-7fc07d28b612",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("ddc29b70-eecb-11e9-eb31-a98dd7dfef2d",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"fd114067-3732-0fe7-72c4-ddf356e031ab",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("9a4d225a-f77a-10c1-490a-4b9ecd091fb6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"fd114067-3732-0fe7-72c4-ddf356e031ab",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("0ff4db43-6c06-0f49-b70b-fdf4d65478ae",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"9a4d225a-f77a-10c1-490a-4b9ecd091fb6");
INSERT INTO SM_AH
	VALUES ("0ff4db43-6c06-0f49-b70b-fdf4d65478ae",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("0ff4db43-6c06-0f49-b70b-fdf4d65478ae",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("9a4d225a-f77a-10c1-490a-4b9ecd091fb6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"a74823ef-932d-7059-75e8-96dc94e55397",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("c5317a29-9458-8cab-1c80-699f0dbfdf45",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"a74823ef-932d-7059-75e8-96dc94e55397",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("2efbcc00-4e83-5ea0-42bb-add9fbfb90b2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"c5317a29-9458-8cab-1c80-699f0dbfdf45");
INSERT INTO SM_AH
	VALUES ("2efbcc00-4e83-5ea0-42bb-add9fbfb90b2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("2efbcc00-4e83-5ea0-42bb-add9fbfb90b2",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("c5317a29-9458-8cab-1c80-699f0dbfdf45",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("36482735-10cc-d075-ff2f-b751466c36af",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"f64ff628-c913-616a-bbe7-83682902a298",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("02fcf8c1-10dd-646c-0d1f-f27947e6bb55",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"36482735-10cc-d075-ff2f-b751466c36af");
INSERT INTO SM_AH
	VALUES ("02fcf8c1-10dd-646c-0d1f-f27947e6bb55",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("02fcf8c1-10dd-646c-0d1f-f27947e6bb55",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("36482735-10cc-d075-ff2f-b751466c36af",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("3f8bab77-1fa3-d508-f29c-697e341adbf4",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"f9094041-b2be-ad10-2bf9-06a9c8c50553",
	"0df1d8e0-18eb-b594-a55a-18a772de36d1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("3285e44f-a0e1-5e7b-95f2-a2fbb906dae3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"3f8bab77-1fa3-d508-f29c-697e341adbf4");
INSERT INTO SM_AH
	VALUES ("3285e44f-a0e1-5e7b-95f2-a2fbb906dae3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("3285e44f-a0e1-5e7b-95f2-a2fbb906dae3",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("3f8bab77-1fa3-d508-f29c-697e341adbf4",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("28b69ab8-b4d4-4abe-14a9-f8cf8ef63c62",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"53509702-0f88-6160-ffe2-15f189bfedc8",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("cc23c402-9e9c-a20e-e25f-b4d0ea11fed9",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"28b69ab8-b4d4-4abe-14a9-f8cf8ef63c62");
INSERT INTO SM_AH
	VALUES ("cc23c402-9e9c-a20e-e25f-b4d0ea11fed9",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("cc23c402-9e9c-a20e-e25f-b4d0ea11fed9",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("28b69ab8-b4d4-4abe-14a9-f8cf8ef63c62",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"53509702-0f88-6160-ffe2-15f189bfedc8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("ec3514c2-f448-ee13-2459-0dadc15a2181",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"ff0bc232-d366-715b-39de-1aa826890436",
	"66eb9f86-cefe-7135-c8bd-81f361c9ccf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("e85bf7ad-52ce-b1a3-8be6-f893980361ae",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"ec3514c2-f448-ee13-2459-0dadc15a2181");
INSERT INTO SM_AH
	VALUES ("e85bf7ad-52ce-b1a3-8be6-f893980361ae",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("e85bf7ad-52ce-b1a3-8be6-f893980361ae",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("ec3514c2-f448-ee13-2459-0dadc15a2181",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"bd44bfc2-648c-15bd-8997-0046d5fc365a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("94d78be7-cb7a-463c-1343-08ad5a9ccd17",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"53509702-0f88-6160-ffe2-15f189bfedc8",
	"1161663f-c88f-78cb-428f-efd305a13431",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("cbeaf1c4-131a-2e10-066d-140fc4cb5529",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"94d78be7-cb7a-463c-1343-08ad5a9ccd17");
INSERT INTO SM_AH
	VALUES ("cbeaf1c4-131a-2e10-066d-140fc4cb5529",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("cbeaf1c4-131a-2e10-066d-140fc4cb5529",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("94d78be7-cb7a-463c-1343-08ad5a9ccd17",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"ff0bc232-d366-715b-39de-1aa826890436",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("2d86cd4f-5cf9-0dc4-b967-ede8eb50e386",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"58ab4b22-715a-13d1-2f64-9c8616b7221d",
	"74791167-673f-f323-a97a-71c27bfa1a11",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("3b1da00c-319c-5ea3-3133-9bb1dcda3f37",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"2d86cd4f-5cf9-0dc4-b967-ede8eb50e386");
INSERT INTO SM_AH
	VALUES ("3b1da00c-319c-5ea3-3133-9bb1dcda3f37",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("3b1da00c-319c-5ea3-3133-9bb1dcda3f37",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("2d86cd4f-5cf9-0dc4-b967-ede8eb50e386",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("d0ae6971-b6ab-bfc9-1a94-c2cd44b42f00",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("8744e596-bb84-edd2-9faf-e2900b2a9e4f",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"d0ae6971-b6ab-bfc9-1a94-c2cd44b42f00");
INSERT INTO SM_AH
	VALUES ("8744e596-bb84-edd2-9faf-e2900b2a9e4f",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("8744e596-bb84-edd2-9faf-e2900b2a9e4f",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("d0ae6971-b6ab-bfc9-1a94-c2cd44b42f00",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("17c8b070-f378-1878-120c-a5031c34628d",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	"adb6a67f-2b57-9178-a347-ceaaee1e0bc8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("5f291585-96b6-23e0-1333-4ae702d0aed6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"17c8b070-f378-1878-120c-a5031c34628d");
INSERT INTO SM_AH
	VALUES ("5f291585-96b6-23e0-1333-4ae702d0aed6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("5f291585-96b6-23e0-1333-4ae702d0aed6",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("17c8b070-f378-1878-120c-a5031c34628d",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"182c7fe9-315e-a6c1-868f-13a18b137dee",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("194c1f4a-429c-39ef-1821-0ee02a1df3ec",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"182c7fe9-315e-a6c1-868f-13a18b137dee",
	"c4381e5b-a346-94d8-764e-631f8fb3f6f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("7caaa60c-0306-376c-f15e-beacd8ddced5",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"194c1f4a-429c-39ef-1821-0ee02a1df3ec");
INSERT INTO SM_AH
	VALUES ("7caaa60c-0306-376c-f15e-beacd8ddced5",
	"2ca0f623-dfdd-4df1-8677-9b666a519357");
INSERT INTO SM_ACT
	VALUES ("7caaa60c-0306-376c-f15e-beacd8ddced5",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("194c1f4a-429c-39ef-1821-0ee02a1df3ec",
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	"cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	8,
	"2ca0f623-dfdd-4df1-8677-9b666a519357",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("af1f7981-cf02-fe8f-7bd1-c64a178f1932",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"53509702-0f88-6160-ffe2-15f189bfedc8",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2');
INSERT INTO GD_SHP
	VALUES ("af1f7981-cf02-fe8f-7bd1-c64a178f1932");
INSERT INTO GD_NCS
	VALUES ("af1f7981-cf02-fe8f-7bd1-c64a178f1932");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"af1f7981-cf02-fe8f-7bd1-c64a178f1932");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1360.000000,
	"af1f7981-cf02-fe8f-7bd1-c64a178f1932",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("af1f7981-cf02-fe8f-7bd1-c64a178f1932",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("30d29761-1142-2be1-edda-0349f9ceff97",
	752.000000,
	1408.000000,
	"af1f7981-cf02-fe8f-7bd1-c64a178f1932");
INSERT INTO DIM_CON
	VALUES ("35d0ac0e-d7cf-0ac7-c09c-4fb6176f3291",
	784.000000,
	1360.000000,
	"af1f7981-cf02-fe8f-7bd1-c64a178f1932");
INSERT INTO DIM_CON
	VALUES ("a5c9cbb0-21a9-9d15-0906-06afd860e4f2",
	928.000000,
	1456.000000,
	"af1f7981-cf02-fe8f-7bd1-c64a178f1932");
INSERT INTO GD_GE
	VALUES ("908df1df-8062-98ec-bf01-25212074796c",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations');
INSERT INTO GD_SHP
	VALUES ("908df1df-8062-98ec-bf01-25212074796c");
INSERT INTO GD_NCS
	VALUES ("908df1df-8062-98ec-bf01-25212074796c");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"908df1df-8062-98ec-bf01-25212074796c");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1520.000000,
	"908df1df-8062-98ec-bf01-25212074796c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("908df1df-8062-98ec-bf01-25212074796c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("12e41752-2cad-b2b0-0642-566353748235",
	2128.000000,
	1616.000000,
	"908df1df-8062-98ec-bf01-25212074796c");
INSERT INTO DIM_CON
	VALUES ("a1241249-0e57-2f1f-5ea9-d433f7a77615",
	1712.000000,
	1568.000000,
	"908df1df-8062-98ec-bf01-25212074796c");
INSERT INTO GD_GE
	VALUES ("80d4a485-dba3-fec5-e82e-408ebe50c1f9",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"34f33f82-96ae-a337-98df-f59d249b65ed",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F15 values');
INSERT INTO GD_SHP
	VALUES ("80d4a485-dba3-fec5-e82e-408ebe50c1f9");
INSERT INTO GD_NCS
	VALUES ("80d4a485-dba3-fec5-e82e-408ebe50c1f9");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"80d4a485-dba3-fec5-e82e-408ebe50c1f9");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1696.000000,
	"80d4a485-dba3-fec5-e82e-408ebe50c1f9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("80d4a485-dba3-fec5-e82e-408ebe50c1f9",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("a9b6f57f-3464-26f5-c376-c0a2b1a19e20",
	2128.000000,
	1760.000000,
	"80d4a485-dba3-fec5-e82e-408ebe50c1f9");
INSERT INTO DIM_CON
	VALUES ("d20dbdd7-ba21-a492-c3fc-56ec092f4ace",
	2128.000000,
	1792.000000,
	"80d4a485-dba3-fec5-e82e-408ebe50c1f9");
INSERT INTO GD_GE
	VALUES ("a09f7605-6af0-3093-b7cd-87970d928a41",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"81374f42-af06-0e04-abb9-f6643a9eaa65",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers');
INSERT INTO GD_SHP
	VALUES ("a09f7605-6af0-3093-b7cd-87970d928a41");
INSERT INTO GD_NCS
	VALUES ("a09f7605-6af0-3093-b7cd-87970d928a41");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"a09f7605-6af0-3093-b7cd-87970d928a41");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1872.000000,
	"a09f7605-6af0-3093-b7cd-87970d928a41",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a09f7605-6af0-3093-b7cd-87970d928a41",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("d238cdd1-eca6-be05-9de2-2854b22c4a3a",
	2128.000000,
	1920.000000,
	"a09f7605-6af0-3093-b7cd-87970d928a41");
INSERT INTO DIM_CON
	VALUES ("a3e9059a-55d4-093e-b21a-0d4d305c029f",
	2128.000000,
	1952.000000,
	"a09f7605-6af0-3093-b7cd-87970d928a41");
INSERT INTO GD_GE
	VALUES ("24509b29-7b31-4409-3501-5d6a1d5d6931",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"369250b7-b070-e2c7-a88f-fd29caeee7b7",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Shutting Down');
INSERT INTO GD_SHP
	VALUES ("24509b29-7b31-4409-3501-5d6a1d5d6931");
INSERT INTO GD_NCS
	VALUES ("24509b29-7b31-4409-3501-5d6a1d5d6931");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"24509b29-7b31-4409-3501-5d6a1d5d6931");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1536.000000,
	"24509b29-7b31-4409-3501-5d6a1d5d6931",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("24509b29-7b31-4409-3501-5d6a1d5d6931",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("1eeb2adb-9265-150e-d33f-53e16b0702a0",
	2592.000000,
	1632.000000,
	"24509b29-7b31-4409-3501-5d6a1d5d6931");
INSERT INTO GD_GE
	VALUES ("88b78cab-f042-3bbc-4027-9c46e98b9f77",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators');
INSERT INTO GD_SHP
	VALUES ("88b78cab-f042-3bbc-4027-9c46e98b9f77");
INSERT INTO GD_NCS
	VALUES ("88b78cab-f042-3bbc-4027-9c46e98b9f77");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"88b78cab-f042-3bbc-4027-9c46e98b9f77");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	2016.000000,
	"88b78cab-f042-3bbc-4027-9c46e98b9f77",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("88b78cab-f042-3bbc-4027-9c46e98b9f77",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("fc446f1a-d7d5-017e-ea1b-ce018690fc6d",
	2128.000000,
	2048.000000,
	"88b78cab-f042-3bbc-4027-9c46e98b9f77");
INSERT INTO DIM_CON
	VALUES ("2c94628e-232d-4257-c182-62be5f6a27ad",
	2128.000000,
	2080.000000,
	"88b78cab-f042-3bbc-4027-9c46e98b9f77");
INSERT INTO GD_GE
	VALUES ("6124e1af-cda6-dc4d-d9df-754e422e6111",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"b99fcff7-7910-98b4-13b4-48497fa24a4a",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("6124e1af-cda6-dc4d-d9df-754e422e6111");
INSERT INTO GD_NCS
	VALUES ("6124e1af-cda6-dc4d-d9df-754e422e6111");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"6124e1af-cda6-dc4d-d9df-754e422e6111");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	2016.000000,
	"6124e1af-cda6-dc4d-d9df-754e422e6111",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6124e1af-cda6-dc4d-d9df-754e422e6111",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("6cc4953a-3b82-fc8b-f076-073350bb8d2c",
	2400.000000,
	2080.000000,
	"6124e1af-cda6-dc4d-d9df-754e422e6111");
INSERT INTO DIM_CON
	VALUES ("111609ab-b9bf-19e9-0152-b610f1d586ce",
	2608.000000,
	2016.000000,
	"6124e1af-cda6-dc4d-d9df-754e422e6111");
INSERT INTO GD_GE
	VALUES ("3423feab-8131-39d0-df38-c530c65e2fec",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"fd114067-3732-0fe7-72c4-ddf356e031ab",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("3423feab-8131-39d0-df38-c530c65e2fec");
INSERT INTO GD_NCS
	VALUES ("3423feab-8131-39d0-df38-c530c65e2fec");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"3423feab-8131-39d0-df38-c530c65e2fec");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1872.000000,
	"3423feab-8131-39d0-df38-c530c65e2fec",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3423feab-8131-39d0-df38-c530c65e2fec",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("73c2d832-6d6b-0169-5570-de6aee16e4ca",
	2608.000000,
	1968.000000,
	"3423feab-8131-39d0-df38-c530c65e2fec");
INSERT INTO DIM_CON
	VALUES ("380162d1-3273-1aa2-2d56-a6c59ef8a2a0",
	2608.000000,
	1872.000000,
	"3423feab-8131-39d0-df38-c530c65e2fec");
INSERT INTO GD_GE
	VALUES ("4d8c061c-c614-58b8-a669-be784d901a43",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"a74823ef-932d-7059-75e8-96dc94e55397",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("4d8c061c-c614-58b8-a669-be784d901a43");
INSERT INTO GD_NCS
	VALUES ("4d8c061c-c614-58b8-a669-be784d901a43");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"4d8c061c-c614-58b8-a669-be784d901a43");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1712.000000,
	"4d8c061c-c614-58b8-a669-be784d901a43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4d8c061c-c614-58b8-a669-be784d901a43",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("1530593c-6864-728a-ac7e-76e6fe29dcc2",
	2608.000000,
	1808.000000,
	"4d8c061c-c614-58b8-a669-be784d901a43");
INSERT INTO DIM_CON
	VALUES ("358cfba3-c134-08f9-41d3-6a546cc04787",
	2592.000000,
	1712.000000,
	"4d8c061c-c614-58b8-a669-be784d901a43");
INSERT INTO GD_GE
	VALUES ("c675d293-2f63-f69a-ad16-ee5ada7d47d2",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"bd44bfc2-648c-15bd-8997-0046d5fc365a",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing empty operator');
INSERT INTO GD_SHP
	VALUES ("c675d293-2f63-f69a-ad16-ee5ada7d47d2");
INSERT INTO GD_NCS
	VALUES ("c675d293-2f63-f69a-ad16-ee5ada7d47d2");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"c675d293-2f63-f69a-ad16-ee5ada7d47d2");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1680.000000,
	"c675d293-2f63-f69a-ad16-ee5ada7d47d2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c675d293-2f63-f69a-ad16-ee5ada7d47d2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("b83d4a7c-f781-4533-1ab3-33644091ef19",
	928.000000,
	1776.000000,
	"c675d293-2f63-f69a-ad16-ee5ada7d47d2");
INSERT INTO DIM_CON
	VALUES ("18f96ca4-3f2f-7afe-c109-a53cdd722dc6",
	928.000000,
	1680.000000,
	"c675d293-2f63-f69a-ad16-ee5ada7d47d2");
INSERT INTO GD_GE
	VALUES ("41d5b9f0-c84a-e72b-e365-eeaab9f43a3a",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"f9094041-b2be-ad10-2bf9-06a9c8c50553",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator');
INSERT INTO GD_SHP
	VALUES ("41d5b9f0-c84a-e72b-e365-eeaab9f43a3a");
INSERT INTO GD_NCS
	VALUES ("41d5b9f0-c84a-e72b-e365-eeaab9f43a3a");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"41d5b9f0-c84a-e72b-e365-eeaab9f43a3a");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1840.000000,
	"41d5b9f0-c84a-e72b-e365-eeaab9f43a3a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("41d5b9f0-c84a-e72b-e365-eeaab9f43a3a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("22d07923-0970-6099-2d7f-1c2bf7670412",
	928.000000,
	1840.000000,
	"41d5b9f0-c84a-e72b-e365-eeaab9f43a3a");
INSERT INTO DIM_CON
	VALUES ("966599fe-9050-b688-26da-63f2e1f164c5",
	928.000000,
	1936.000000,
	"41d5b9f0-c84a-e72b-e365-eeaab9f43a3a");
INSERT INTO GD_GE
	VALUES ("6356fa48-7c99-33c4-98c5-c26fb4b38bf7",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"58ab4b22-715a-13d1-2f64-9c8616b7221d",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator');
INSERT INTO GD_SHP
	VALUES ("6356fa48-7c99-33c4-98c5-c26fb4b38bf7");
INSERT INTO GD_NCS
	VALUES ("6356fa48-7c99-33c4-98c5-c26fb4b38bf7");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"6356fa48-7c99-33c4-98c5-c26fb4b38bf7");
INSERT INTO DIM_GE
	VALUES (752.000000,
	2016.000000,
	"6356fa48-7c99-33c4-98c5-c26fb4b38bf7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6356fa48-7c99-33c4-98c5-c26fb4b38bf7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("f9c38d5c-3de3-9769-1612-d7bea411149b",
	928.000000,
	2016.000000,
	"6356fa48-7c99-33c4-98c5-c26fb4b38bf7");
INSERT INTO DIM_CON
	VALUES ("6a365f81-b999-4801-76ac-e3457de72e2e",
	1072.000000,
	2080.000000,
	"6356fa48-7c99-33c4-98c5-c26fb4b38bf7");
INSERT INTO GD_GE
	VALUES ("67cacb99-c502-e796-bc85-2f1581efefad",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"ff0bc232-d366-715b-39de-1aa826890436",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not operator');
INSERT INTO GD_SHP
	VALUES ("67cacb99-c502-e796-bc85-2f1581efefad");
INSERT INTO GD_NCS
	VALUES ("67cacb99-c502-e796-bc85-2f1581efefad");
INSERT INTO DIM_ND
	VALUES (320.000000,
	80.000000,
	"67cacb99-c502-e796-bc85-2f1581efefad");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1536.000000,
	"67cacb99-c502-e796-bc85-2f1581efefad",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("67cacb99-c502-e796-bc85-2f1581efefad",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("cb3bb9cc-b17f-1171-26f9-4088e7ecd467",
	928.000000,
	1616.000000,
	"67cacb99-c502-e796-bc85-2f1581efefad");
INSERT INTO DIM_CON
	VALUES ("33b1620a-1390-ef4b-b8e5-148dc1529021",
	928.000000,
	1536.000000,
	"67cacb99-c502-e796-bc85-2f1581efefad");
INSERT INTO GD_GE
	VALUES ("7d132231-9b59-f449-68e4-d17c80c3416a",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"4a0f189a-2e1a-092b-1e1b-4dee9304f699",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator');
INSERT INTO GD_SHP
	VALUES ("7d132231-9b59-f449-68e4-d17c80c3416a");
INSERT INTO GD_NCS
	VALUES ("7d132231-9b59-f449-68e4-d17c80c3416a");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"7d132231-9b59-f449-68e4-d17c80c3416a");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1360.000000,
	"7d132231-9b59-f449-68e4-d17c80c3416a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7d132231-9b59-f449-68e4-d17c80c3416a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("165a773a-398d-1d10-41f2-7a3d77d7a0f8",
	1280.000000,
	1376.000000,
	"7d132231-9b59-f449-68e4-d17c80c3416a");
INSERT INTO DIM_CON
	VALUES ("1099b3b0-c761-c012-2f6a-002d207879f9",
	1424.000000,
	1456.000000,
	"7d132231-9b59-f449-68e4-d17c80c3416a");
INSERT INTO GD_GE
	VALUES ("ffb08d89-e83e-35ef-f3a1-bcd5d8cb5c53",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"6071daa0-47ee-e7fc-40b7-c1cb8de98519",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing assign');
INSERT INTO GD_SHP
	VALUES ("ffb08d89-e83e-35ef-f3a1-bcd5d8cb5c53");
INSERT INTO GD_NCS
	VALUES ("ffb08d89-e83e-35ef-f3a1-bcd5d8cb5c53");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"ffb08d89-e83e-35ef-f3a1-bcd5d8cb5c53");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1520.000000,
	"ffb08d89-e83e-35ef-f3a1-bcd5d8cb5c53",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ffb08d89-e83e-35ef-f3a1-bcd5d8cb5c53",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("aa9e718b-5f18-ece5-52e8-51cda6c61762",
	1424.000000,
	1520.000000,
	"ffb08d89-e83e-35ef-f3a1-bcd5d8cb5c53");
INSERT INTO DIM_CON
	VALUES ("8d01e3b5-b9a9-3077-53b5-230e8a7f34e4",
	1456.000000,
	1616.000000,
	"ffb08d89-e83e-35ef-f3a1-bcd5d8cb5c53");
INSERT INTO GD_GE
	VALUES ("6c6aa1e7-a0ec-b964-2a12-36be750951c5",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"182c7fe9-315e-a6c1-868f-13a18b137dee",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Additional assign tests');
INSERT INTO GD_SHP
	VALUES ("6c6aa1e7-a0ec-b964-2a12-36be750951c5");
INSERT INTO GD_NCS
	VALUES ("6c6aa1e7-a0ec-b964-2a12-36be750951c5");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"6c6aa1e7-a0ec-b964-2a12-36be750951c5");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1680.000000,
	"6c6aa1e7-a0ec-b964-2a12-36be750951c5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6c6aa1e7-a0ec-b964-2a12-36be750951c5",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("4597cd79-b1d5-77aa-5a36-a850d545e306",
	1456.000000,
	1680.000000,
	"6c6aa1e7-a0ec-b964-2a12-36be750951c5");
INSERT INTO DIM_CON
	VALUES ("9d3aedae-ee1c-9588-f117-cde9aaff7c78",
	1600.000000,
	1728.000000,
	"6c6aa1e7-a0ec-b964-2a12-36be750951c5");
INSERT INTO GD_GE
	VALUES ("36b16cf0-a5fd-7bd4-f0e9-61ba7b9c2380",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"cdd13c86-54db-7f68-6857-5ca99f29f6ba",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations::ET3: Run F15 Values');
INSERT INTO GD_CON
	VALUES ("36b16cf0-a5fd-7bd4-f0e9-61ba7b9c2380",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("23d9e639-c155-2107-f029-daba0b51d0ac",
	"36b16cf0-a5fd-7bd4-f0e9-61ba7b9c2380",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"23d9e639-c155-2107-f029-daba0b51d0ac");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"23d9e639-c155-2107-f029-daba0b51d0ac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("23d9e639-c155-2107-f029-daba0b51d0ac",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("82541694-3422-4c76-38db-5c101276f847",
	"36b16cf0-a5fd-7bd4-f0e9-61ba7b9c2380",
	3,
	16.000000,
	2.000000);
INSERT INTO DIM_ND
	VALUES (204.000000,
	44.000000,
	"82541694-3422-4c76-38db-5c101276f847");
INSERT INTO DIM_GE
	VALUES (2176.000000,
	1675.000000,
	"82541694-3422-4c76-38db-5c101276f847",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("82541694-3422-4c76-38db-5c101276f847",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8993b447-e9d2-7c56-8427-053216a99d8e",
	"36b16cf0-a5fd-7bd4-f0e9-61ba7b9c2380",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8993b447-e9d2-7c56-8427-053216a99d8e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8993b447-e9d2-7c56-8427-053216a99d8e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8993b447-e9d2-7c56-8427-053216a99d8e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("0e7b6f41-ae7e-dd0b-1f64-5f4a987a0f55",
	"36b16cf0-a5fd-7bd4-f0e9-61ba7b9c2380",
	"00000000-0000-0000-0000-000000000000",
	"d4aecce4-aa86-85a9-cbc1-007cfc156622",
	"ec6c9ca0-6ad6-80b6-5c4b-de935f90ba93");
INSERT INTO GD_LS
	VALUES ("02bef75e-5de4-36ba-d351-bb203c517097",
	"36b16cf0-a5fd-7bd4-f0e9-61ba7b9c2380",
	"0e7b6f41-ae7e-dd0b-1f64-5f4a987a0f55",
	"ec6c9ca0-6ad6-80b6-5c4b-de935f90ba93",
	"bd43e8fd-010b-6b0b-cc77-867414091d13");
INSERT INTO GD_LS
	VALUES ("3584009c-c8fd-7449-8a8b-e4013a7ffee8",
	"36b16cf0-a5fd-7bd4-f0e9-61ba7b9c2380",
	"02bef75e-5de4-36ba-d351-bb203c517097",
	"bd43e8fd-010b-6b0b-cc77-867414091d13",
	"7e00cde7-241a-b413-8323-320444ea94ce");
INSERT INTO DIM_WAY
	VALUES ("d4aecce4-aa86-85a9-cbc1-007cfc156622",
	2128.000000,
	1616.000000,
	"36b16cf0-a5fd-7bd4-f0e9-61ba7b9c2380",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("ec6c9ca0-6ad6-80b6-5c4b-de935f90ba93",
	2176.000000,
	1616.000000,
	"36b16cf0-a5fd-7bd4-f0e9-61ba7b9c2380",
	"00000000-0000-0000-0000-000000000000",
	"d4aecce4-aa86-85a9-cbc1-007cfc156622");
INSERT INTO DIM_WAY
	VALUES ("bd43e8fd-010b-6b0b-cc77-867414091d13",
	2176.000000,
	1760.000000,
	"36b16cf0-a5fd-7bd4-f0e9-61ba7b9c2380",
	"00000000-0000-0000-0000-000000000000",
	"ec6c9ca0-6ad6-80b6-5c4b-de935f90ba93");
INSERT INTO DIM_WAY
	VALUES ("7e00cde7-241a-b413-8323-320444ea94ce",
	2128.000000,
	1760.000000,
	"36b16cf0-a5fd-7bd4-f0e9-61ba7b9c2380",
	"00000000-0000-0000-0000-000000000000",
	"bd43e8fd-010b-6b0b-cc77-867414091d13");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"36b16cf0-a5fd-7bd4-f0e9-61ba7b9c2380",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("36b16cf0-a5fd-7bd4-f0e9-61ba7b9c2380",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("12e41752-2cad-b2b0-0642-566353748235",
	"a9b6f57f-3464-26f5-c376-c0a2b1a19e20",
	"36b16cf0-a5fd-7bd4-f0e9-61ba7b9c2380");
INSERT INTO GD_GE
	VALUES ("ddfd314f-20bf-ace1-e2b1-c17c21dc09a5",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"784504ea-ab07-1eac-c5e9-37e4a4b84356",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F15 values::ET4: Run F16 Transformers');
INSERT INTO GD_CON
	VALUES ("ddfd314f-20bf-ace1-e2b1-c17c21dc09a5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("dc0183bb-0fcf-d139-9201-16cf57ebc80f",
	"ddfd314f-20bf-ace1-e2b1-c17c21dc09a5",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"dc0183bb-0fcf-d139-9201-16cf57ebc80f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"dc0183bb-0fcf-d139-9201-16cf57ebc80f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dc0183bb-0fcf-d139-9201-16cf57ebc80f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c9986ead-85c5-dd48-dbeb-ad03008e6f70",
	"ddfd314f-20bf-ace1-e2b1-c17c21dc09a5",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (227.000000,
	53.000000,
	"c9986ead-85c5-dd48-dbeb-ad03008e6f70");
INSERT INTO DIM_GE
	VALUES (2160.000000,
	1840.000000,
	"c9986ead-85c5-dd48-dbeb-ad03008e6f70",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c9986ead-85c5-dd48-dbeb-ad03008e6f70",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d49760aa-a3a7-a517-fe1e-ed322f15d7ce",
	"ddfd314f-20bf-ace1-e2b1-c17c21dc09a5",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d49760aa-a3a7-a517-fe1e-ed322f15d7ce");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d49760aa-a3a7-a517-fe1e-ed322f15d7ce",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d49760aa-a3a7-a517-fe1e-ed322f15d7ce",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("231ce1f9-211d-6f72-5420-a51e1094115d",
	"ddfd314f-20bf-ace1-e2b1-c17c21dc09a5",
	"00000000-0000-0000-0000-000000000000",
	"30175010-e0ac-9bc2-13a4-4ac42d40d97d",
	"d1101963-7017-1123-30c0-d518bd605e16");
INSERT INTO GD_LS
	VALUES ("61bc2367-362f-e2e0-c4e2-6e60fd748115",
	"ddfd314f-20bf-ace1-e2b1-c17c21dc09a5",
	"231ce1f9-211d-6f72-5420-a51e1094115d",
	"d1101963-7017-1123-30c0-d518bd605e16",
	"1d0a4705-1361-410c-c79f-c76bac0750f8");
INSERT INTO GD_LS
	VALUES ("ab49b3a2-4054-cc45-2516-4f61b638eda7",
	"ddfd314f-20bf-ace1-e2b1-c17c21dc09a5",
	"61bc2367-362f-e2e0-c4e2-6e60fd748115",
	"1d0a4705-1361-410c-c79f-c76bac0750f8",
	"ee93d1b9-659c-5a2a-8c29-a86f7472a38c");
INSERT INTO DIM_WAY
	VALUES ("30175010-e0ac-9bc2-13a4-4ac42d40d97d",
	2128.000000,
	1792.000000,
	"ddfd314f-20bf-ace1-e2b1-c17c21dc09a5",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("d1101963-7017-1123-30c0-d518bd605e16",
	2176.000000,
	1792.000000,
	"ddfd314f-20bf-ace1-e2b1-c17c21dc09a5",
	"00000000-0000-0000-0000-000000000000",
	"30175010-e0ac-9bc2-13a4-4ac42d40d97d");
INSERT INTO DIM_WAY
	VALUES ("1d0a4705-1361-410c-c79f-c76bac0750f8",
	2176.000000,
	1920.000000,
	"ddfd314f-20bf-ace1-e2b1-c17c21dc09a5",
	"00000000-0000-0000-0000-000000000000",
	"d1101963-7017-1123-30c0-d518bd605e16");
INSERT INTO DIM_WAY
	VALUES ("ee93d1b9-659c-5a2a-8c29-a86f7472a38c",
	2128.000000,
	1920.000000,
	"ddfd314f-20bf-ace1-e2b1-c17c21dc09a5",
	"00000000-0000-0000-0000-000000000000",
	"1d0a4705-1361-410c-c79f-c76bac0750f8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ddfd314f-20bf-ace1-e2b1-c17c21dc09a5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ddfd314f-20bf-ace1-e2b1-c17c21dc09a5",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("d20dbdd7-ba21-a492-c3fc-56ec092f4ace",
	"d238cdd1-eca6-be05-9de2-2854b22c4a3a",
	"ddfd314f-20bf-ace1-e2b1-c17c21dc09a5");
INSERT INTO GD_GE
	VALUES ("335b7b7b-f11f-9d61-e937-2cb87d86db20",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"7d77c1bc-3502-17f9-db93-6a04522cbc13",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers::ET5: Run F17 Timestamp and F18 Date Operators');
INSERT INTO GD_CON
	VALUES ("335b7b7b-f11f-9d61-e937-2cb87d86db20",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cc5c534d-e047-a583-6edb-1510f043a006",
	"335b7b7b-f11f-9d61-e937-2cb87d86db20",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"cc5c534d-e047-a583-6edb-1510f043a006");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cc5c534d-e047-a583-6edb-1510f043a006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cc5c534d-e047-a583-6edb-1510f043a006",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b3b6861a-fc8f-e934-7a9b-cd2c986e6026",
	"335b7b7b-f11f-9d61-e937-2cb87d86db20",
	3,
	22.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (212.000000,
	60.000000,
	"b3b6861a-fc8f-e934-7a9b-cd2c986e6026");
INSERT INTO DIM_GE
	VALUES (2182.000000,
	1984.000000,
	"b3b6861a-fc8f-e934-7a9b-cd2c986e6026",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b3b6861a-fc8f-e934-7a9b-cd2c986e6026",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f3214757-2fc4-9fe6-6af6-f333e82cf09d",
	"335b7b7b-f11f-9d61-e937-2cb87d86db20",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f3214757-2fc4-9fe6-6af6-f333e82cf09d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f3214757-2fc4-9fe6-6af6-f333e82cf09d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f3214757-2fc4-9fe6-6af6-f333e82cf09d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("3edde823-9973-8bd5-2822-6444b53f3a3a",
	"335b7b7b-f11f-9d61-e937-2cb87d86db20",
	"00000000-0000-0000-0000-000000000000",
	"6c177c65-ad3c-0377-353d-670a5c3578ec",
	"4f4598d3-a0f3-aada-af11-fdbe22af9bd2");
INSERT INTO GD_LS
	VALUES ("e8ba5fd4-e84d-2356-65d7-27bd41d27224",
	"335b7b7b-f11f-9d61-e937-2cb87d86db20",
	"3edde823-9973-8bd5-2822-6444b53f3a3a",
	"4f4598d3-a0f3-aada-af11-fdbe22af9bd2",
	"8571e7d8-7d17-4a0f-f17d-cd8fce1ca193");
INSERT INTO GD_LS
	VALUES ("bb28bd1e-f863-99d0-ff4c-afc623cc22a1",
	"335b7b7b-f11f-9d61-e937-2cb87d86db20",
	"e8ba5fd4-e84d-2356-65d7-27bd41d27224",
	"8571e7d8-7d17-4a0f-f17d-cd8fce1ca193",
	"f2670d0e-3d90-d00b-e913-fa61374a9c78");
INSERT INTO DIM_WAY
	VALUES ("6c177c65-ad3c-0377-353d-670a5c3578ec",
	2128.000000,
	1952.000000,
	"335b7b7b-f11f-9d61-e937-2cb87d86db20",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("4f4598d3-a0f3-aada-af11-fdbe22af9bd2",
	2176.000000,
	1952.000000,
	"335b7b7b-f11f-9d61-e937-2cb87d86db20",
	"00000000-0000-0000-0000-000000000000",
	"6c177c65-ad3c-0377-353d-670a5c3578ec");
INSERT INTO DIM_WAY
	VALUES ("8571e7d8-7d17-4a0f-f17d-cd8fce1ca193",
	2176.000000,
	2048.000000,
	"335b7b7b-f11f-9d61-e937-2cb87d86db20",
	"00000000-0000-0000-0000-000000000000",
	"4f4598d3-a0f3-aada-af11-fdbe22af9bd2");
INSERT INTO DIM_WAY
	VALUES ("f2670d0e-3d90-d00b-e913-fa61374a9c78",
	2128.000000,
	2048.000000,
	"335b7b7b-f11f-9d61-e937-2cb87d86db20",
	"00000000-0000-0000-0000-000000000000",
	"8571e7d8-7d17-4a0f-f17d-cd8fce1ca193");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"335b7b7b-f11f-9d61-e937-2cb87d86db20",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("335b7b7b-f11f-9d61-e937-2cb87d86db20",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a3e9059a-55d4-093e-b21a-0d4d305c029f",
	"fc446f1a-d7d5-017e-ea1b-ce018690fc6d",
	"335b7b7b-f11f-9d61-e937-2cb87d86db20");
INSERT INTO GD_GE
	VALUES ("90594103-8e89-bc48-f043-c8cfa2538dab",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"0d33209d-819b-d9d4-c071-879715aa4ad5",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators::ET6: Run F1 and F2 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("90594103-8e89-bc48-f043-c8cfa2538dab",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ec2d3e3a-d25d-c828-4d3e-3064fc8f5ff2",
	"90594103-8e89-bc48-f043-c8cfa2538dab",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ec2d3e3a-d25d-c828-4d3e-3064fc8f5ff2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ec2d3e3a-d25d-c828-4d3e-3064fc8f5ff2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ec2d3e3a-d25d-c828-4d3e-3064fc8f5ff2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("715b929a-3a58-3d4a-83e4-d72f9d7b6234",
	"90594103-8e89-bc48-f043-c8cfa2538dab",
	3,
	-62.000000,
	22.000000);
INSERT INTO DIM_ND
	VALUES (186.000000,
	64.000000,
	"715b929a-3a58-3d4a-83e4-d72f9d7b6234");
INSERT INTO DIM_GE
	VALUES (2177.000000,
	2077.000000,
	"715b929a-3a58-3d4a-83e4-d72f9d7b6234",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("715b929a-3a58-3d4a-83e4-d72f9d7b6234",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3d99a3ba-98c0-6821-67e6-fd071f47e090",
	"90594103-8e89-bc48-f043-c8cfa2538dab",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3d99a3ba-98c0-6821-67e6-fd071f47e090");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3d99a3ba-98c0-6821-67e6-fd071f47e090",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3d99a3ba-98c0-6821-67e6-fd071f47e090",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("53134df9-cfde-6a72-891c-c27eb08c56b6",
	"90594103-8e89-bc48-f043-c8cfa2538dab",
	"00000000-0000-0000-0000-000000000000",
	"30d2e624-ed1a-3c96-eaf1-409dc6beac07",
	"bc0dfc52-9f2c-cd6c-c7ff-5a620dfe3b97");
INSERT INTO DIM_WAY
	VALUES ("30d2e624-ed1a-3c96-eaf1-409dc6beac07",
	2128.000000,
	2080.000000,
	"90594103-8e89-bc48-f043-c8cfa2538dab",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("bc0dfc52-9f2c-cd6c-c7ff-5a620dfe3b97",
	2400.000000,
	2080.000000,
	"90594103-8e89-bc48-f043-c8cfa2538dab",
	"00000000-0000-0000-0000-000000000000",
	"30d2e624-ed1a-3c96-eaf1-409dc6beac07");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"90594103-8e89-bc48-f043-c8cfa2538dab",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("90594103-8e89-bc48-f043-c8cfa2538dab",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("2c94628e-232d-4257-c182-62be5f6a27ad",
	"6cc4953a-3b82-fc8b-f076-073350bb8d2c",
	"90594103-8e89-bc48-f043-c8cfa2538dab");
INSERT INTO GD_GE
	VALUES ("1ab54c11-0e01-9804-a2f6-1bc7deec8b68",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"ddc29b70-eecb-11e9-eb31-a98dd7dfef2d",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types::ET7: Run F3 through F14 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("1ab54c11-0e01-9804-a2f6-1bc7deec8b68",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0af84b64-a374-7dd9-ef37-1ad2659ab30c",
	"1ab54c11-0e01-9804-a2f6-1bc7deec8b68",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0af84b64-a374-7dd9-ef37-1ad2659ab30c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0af84b64-a374-7dd9-ef37-1ad2659ab30c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0af84b64-a374-7dd9-ef37-1ad2659ab30c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ecd9bac3-3745-9418-7e32-702d51e6a93d",
	"1ab54c11-0e01-9804-a2f6-1bc7deec8b68",
	3,
	40.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (247.000000,
	49.000000,
	"ecd9bac3-3745-9418-7e32-702d51e6a93d");
INSERT INTO DIM_GE
	VALUES (2632.000000,
	1975.000000,
	"ecd9bac3-3745-9418-7e32-702d51e6a93d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ecd9bac3-3745-9418-7e32-702d51e6a93d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("58ef966e-adcd-bcf9-1146-4d55c9c37069",
	"1ab54c11-0e01-9804-a2f6-1bc7deec8b68",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"58ef966e-adcd-bcf9-1146-4d55c9c37069");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"58ef966e-adcd-bcf9-1146-4d55c9c37069",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("58ef966e-adcd-bcf9-1146-4d55c9c37069",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("570b18ac-917e-4e68-a6f0-d39f2e21214d",
	"1ab54c11-0e01-9804-a2f6-1bc7deec8b68",
	"00000000-0000-0000-0000-000000000000",
	"baec5d03-2078-f877-d959-ee71863c87ba",
	"bcc5d8ad-6f6f-a269-73b9-ede04b83e21c");
INSERT INTO DIM_WAY
	VALUES ("baec5d03-2078-f877-d959-ee71863c87ba",
	2608.000000,
	2016.000000,
	"1ab54c11-0e01-9804-a2f6-1bc7deec8b68",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("bcc5d8ad-6f6f-a269-73b9-ede04b83e21c",
	2608.000000,
	1968.000000,
	"1ab54c11-0e01-9804-a2f6-1bc7deec8b68",
	"00000000-0000-0000-0000-000000000000",
	"baec5d03-2078-f877-d959-ee71863c87ba");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1ab54c11-0e01-9804-a2f6-1bc7deec8b68",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1ab54c11-0e01-9804-a2f6-1bc7deec8b68",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("111609ab-b9bf-19e9-0152-b610f1d586ce",
	"73c2d832-6d6b-0169-5570-de6aee16e4ca",
	"1ab54c11-0e01-9804-a2f6-1bc7deec8b68");
INSERT INTO GD_GE
	VALUES ("93be2322-241b-7437-166d-6288edc23883",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"9a4d225a-f77a-10c1-490a-4b9ecd091fb6",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types::ET8: Run F15 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("93be2322-241b-7437-166d-6288edc23883",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0bf37df5-c621-71a6-9888-c9091e9bd279",
	"93be2322-241b-7437-166d-6288edc23883",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0bf37df5-c621-71a6-9888-c9091e9bd279");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0bf37df5-c621-71a6-9888-c9091e9bd279",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0bf37df5-c621-71a6-9888-c9091e9bd279",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("dedde313-2c5c-4358-2f53-45306955cff8",
	"93be2322-241b-7437-166d-6288edc23883",
	3,
	34.000000,
	-5.000000);
INSERT INTO DIM_ND
	VALUES (228.000000,
	45.000000,
	"dedde313-2c5c-4358-2f53-45306955cff8");
INSERT INTO DIM_GE
	VALUES (2626.000000,
	1820.000000,
	"dedde313-2c5c-4358-2f53-45306955cff8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dedde313-2c5c-4358-2f53-45306955cff8",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("88479adc-4bf2-713d-085c-e51f5e8049be",
	"93be2322-241b-7437-166d-6288edc23883",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"88479adc-4bf2-713d-085c-e51f5e8049be");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"88479adc-4bf2-713d-085c-e51f5e8049be",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("88479adc-4bf2-713d-085c-e51f5e8049be",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("81b955d8-881f-3cfc-bf8b-5c935d4e0489",
	"93be2322-241b-7437-166d-6288edc23883",
	"00000000-0000-0000-0000-000000000000",
	"c9175415-5ac2-fc60-ebf3-2102e4cfa18f",
	"ca0201a8-06b4-a09d-8bd8-7a930d2d395c");
INSERT INTO DIM_WAY
	VALUES ("c9175415-5ac2-fc60-ebf3-2102e4cfa18f",
	2608.000000,
	1872.000000,
	"93be2322-241b-7437-166d-6288edc23883",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("ca0201a8-06b4-a09d-8bd8-7a930d2d395c",
	2608.000000,
	1808.000000,
	"93be2322-241b-7437-166d-6288edc23883",
	"00000000-0000-0000-0000-000000000000",
	"c9175415-5ac2-fc60-ebf3-2102e4cfa18f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"93be2322-241b-7437-166d-6288edc23883",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("93be2322-241b-7437-166d-6288edc23883",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("380162d1-3273-1aa2-2d56-a6c59ef8a2a0",
	"1530593c-6864-728a-ac7e-76e6fe29dcc2",
	"93be2322-241b-7437-166d-6288edc23883");
INSERT INTO GD_GE
	VALUES ("074c2791-222f-be0f-f82e-54165fe63aac",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"c5317a29-9458-8cab-1c80-699f0dbfdf45",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types::ET9: Shut Down');
INSERT INTO GD_CON
	VALUES ("074c2791-222f-be0f-f82e-54165fe63aac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("343559fd-d566-3671-092d-31db810de061",
	"074c2791-222f-be0f-f82e-54165fe63aac",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"343559fd-d566-3671-092d-31db810de061");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"343559fd-d566-3671-092d-31db810de061",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("343559fd-d566-3671-092d-31db810de061",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("86ab4f93-e236-6746-4e0c-3e83e5630072",
	"074c2791-222f-be0f-f82e-54165fe63aac",
	3,
	-5.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (274.000000,
	52.000000,
	"86ab4f93-e236-6746-4e0c-3e83e5630072");
INSERT INTO DIM_GE
	VALUES (2571.000000,
	1649.000000,
	"86ab4f93-e236-6746-4e0c-3e83e5630072",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("86ab4f93-e236-6746-4e0c-3e83e5630072",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("54768934-df48-07aa-f2ca-d1f3d7856ed5",
	"074c2791-222f-be0f-f82e-54165fe63aac",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"54768934-df48-07aa-f2ca-d1f3d7856ed5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"54768934-df48-07aa-f2ca-d1f3d7856ed5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("54768934-df48-07aa-f2ca-d1f3d7856ed5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("53b895dc-8b63-5222-b971-086bcf5a0625",
	"074c2791-222f-be0f-f82e-54165fe63aac",
	"00000000-0000-0000-0000-000000000000",
	"8cd50d0f-e0b1-a153-09bd-d5f864084085",
	"36e4cccb-f94c-f5c1-518d-66b64bd6e115");
INSERT INTO DIM_WAY
	VALUES ("8cd50d0f-e0b1-a153-09bd-d5f864084085",
	2592.000000,
	1712.000000,
	"074c2791-222f-be0f-f82e-54165fe63aac",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("36e4cccb-f94c-f5c1-518d-66b64bd6e115",
	2592.000000,
	1632.000000,
	"074c2791-222f-be0f-f82e-54165fe63aac",
	"00000000-0000-0000-0000-000000000000",
	"8cd50d0f-e0b1-a153-09bd-d5f864084085");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"074c2791-222f-be0f-f82e-54165fe63aac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("074c2791-222f-be0f-f82e-54165fe63aac",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("358cfba3-c134-08f9-41d3-6a546cc04787",
	"1eeb2adb-9265-150e-d33f-53e16b0702a0",
	"074c2791-222f-be0f-f82e-54165fe63aac");
INSERT INTO GD_GE
	VALUES ("ee197f6d-0098-3f3c-321b-626a88b93c98",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"36482735-10cc-d075-ff2f-b751466c36af",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing empty operator::ET10: Start not_empty test');
INSERT INTO GD_CON
	VALUES ("ee197f6d-0098-3f3c-321b-626a88b93c98",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7a153dc6-717a-6f0f-4d70-6f95998874e9",
	"ee197f6d-0098-3f3c-321b-626a88b93c98",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7a153dc6-717a-6f0f-4d70-6f95998874e9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7a153dc6-717a-6f0f-4d70-6f95998874e9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7a153dc6-717a-6f0f-4d70-6f95998874e9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bcd00e4d-42b5-ac34-3722-ba7bcd56f94e",
	"ee197f6d-0098-3f3c-321b-626a88b93c98",
	3,
	-170.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (199.000000,
	37.000000,
	"bcd00e4d-42b5-ac34-3722-ba7bcd56f94e");
INSERT INTO DIM_GE
	VALUES (742.000000,
	1794.000000,
	"bcd00e4d-42b5-ac34-3722-ba7bcd56f94e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bcd00e4d-42b5-ac34-3722-ba7bcd56f94e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f3806431-794f-cdf0-6823-4290efb45669",
	"ee197f6d-0098-3f3c-321b-626a88b93c98",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f3806431-794f-cdf0-6823-4290efb45669");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f3806431-794f-cdf0-6823-4290efb45669",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f3806431-794f-cdf0-6823-4290efb45669",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("05a5f7e0-40a7-48f0-416f-3a416d0bb527",
	"ee197f6d-0098-3f3c-321b-626a88b93c98",
	"00000000-0000-0000-0000-000000000000",
	"78ddf6c0-6040-2d72-cd51-adcf931eee7c",
	"60a9f045-37de-1fff-a604-520ec60de490");
INSERT INTO DIM_WAY
	VALUES ("78ddf6c0-6040-2d72-cd51-adcf931eee7c",
	928.000000,
	1776.000000,
	"ee197f6d-0098-3f3c-321b-626a88b93c98",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("60a9f045-37de-1fff-a604-520ec60de490",
	928.000000,
	1840.000000,
	"ee197f6d-0098-3f3c-321b-626a88b93c98",
	"00000000-0000-0000-0000-000000000000",
	"78ddf6c0-6040-2d72-cd51-adcf931eee7c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ee197f6d-0098-3f3c-321b-626a88b93c98",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ee197f6d-0098-3f3c-321b-626a88b93c98",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b83d4a7c-f781-4533-1ab3-33644091ef19",
	"22d07923-0970-6099-2d7f-1c2bf7670412",
	"ee197f6d-0098-3f3c-321b-626a88b93c98");
INSERT INTO GD_GE
	VALUES ("3df0af38-aac1-7c85-6efc-3ab1145c0b22",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"3f8bab77-1fa3-d508-f29c-697e341adbf4",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator::ET11: Start cardinality test');
INSERT INTO GD_CON
	VALUES ("3df0af38-aac1-7c85-6efc-3ab1145c0b22",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8fbebb5a-d626-59a9-dae7-8c474e1d7e8c",
	"3df0af38-aac1-7c85-6efc-3ab1145c0b22",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8fbebb5a-d626-59a9-dae7-8c474e1d7e8c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8fbebb5a-d626-59a9-dae7-8c474e1d7e8c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8fbebb5a-d626-59a9-dae7-8c474e1d7e8c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b8d9da36-5a1c-109d-e04e-9370c821d549",
	"3df0af38-aac1-7c85-6efc-3ab1145c0b22",
	3,
	-163.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (169.000000,
	36.000000,
	"b8d9da36-5a1c-109d-e04e-9370c821d549");
INSERT INTO DIM_GE
	VALUES (749.000000,
	1961.000000,
	"b8d9da36-5a1c-109d-e04e-9370c821d549",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b8d9da36-5a1c-109d-e04e-9370c821d549",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5d8a937b-8fb3-846c-2a6b-3b03719bc5e7",
	"3df0af38-aac1-7c85-6efc-3ab1145c0b22",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5d8a937b-8fb3-846c-2a6b-3b03719bc5e7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5d8a937b-8fb3-846c-2a6b-3b03719bc5e7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5d8a937b-8fb3-846c-2a6b-3b03719bc5e7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("088176e8-031e-c49e-bcad-65dc525996d0",
	"3df0af38-aac1-7c85-6efc-3ab1145c0b22",
	"00000000-0000-0000-0000-000000000000",
	"7a45d5fb-ac1c-52c6-ee80-b2c376189caa",
	"31a4f499-c7a1-76fe-2d09-06685e03362f");
INSERT INTO DIM_WAY
	VALUES ("7a45d5fb-ac1c-52c6-ee80-b2c376189caa",
	928.000000,
	1936.000000,
	"3df0af38-aac1-7c85-6efc-3ab1145c0b22",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("31a4f499-c7a1-76fe-2d09-06685e03362f",
	928.000000,
	2016.000000,
	"3df0af38-aac1-7c85-6efc-3ab1145c0b22",
	"00000000-0000-0000-0000-000000000000",
	"7a45d5fb-ac1c-52c6-ee80-b2c376189caa");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3df0af38-aac1-7c85-6efc-3ab1145c0b22",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3df0af38-aac1-7c85-6efc-3ab1145c0b22",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("966599fe-9050-b688-26da-63f2e1f164c5",
	"f9c38d5c-3de3-9769-1612-d7bea411149b",
	"3df0af38-aac1-7c85-6efc-3ab1145c0b22");
INSERT INTO GD_GE
	VALUES ("1f051388-3d42-1f4a-a309-c0d9441fec0c",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"28b69ab8-b4d4-4abe-14a9-f8cf8ef63c62",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET1: Start Expression Test');
INSERT INTO GD_CON
	VALUES ("1f051388-3d42-1f4a-a309-c0d9441fec0c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("060c3a09-9409-a8ba-06c2-913a35f324dd",
	"1f051388-3d42-1f4a-a309-c0d9441fec0c",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"060c3a09-9409-a8ba-06c2-913a35f324dd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"060c3a09-9409-a8ba-06c2-913a35f324dd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("060c3a09-9409-a8ba-06c2-913a35f324dd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d76d3ab1-0ffe-60c5-25b0-d50f6d87c35e",
	"1f051388-3d42-1f4a-a309-c0d9441fec0c",
	3,
	-38.000000,
	-24.000000);
INSERT INTO DIM_ND
	VALUES (161.000000,
	35.000000,
	"d76d3ab1-0ffe-60c5-25b0-d50f6d87c35e");
INSERT INTO DIM_GE
	VALUES (681.000000,
	1279.000000,
	"d76d3ab1-0ffe-60c5-25b0-d50f6d87c35e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d76d3ab1-0ffe-60c5-25b0-d50f6d87c35e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9e9a0378-d9f0-e0e0-8db6-f2a2ceba7cc5",
	"1f051388-3d42-1f4a-a309-c0d9441fec0c",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9e9a0378-d9f0-e0e0-8db6-f2a2ceba7cc5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9e9a0378-d9f0-e0e0-8db6-f2a2ceba7cc5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9e9a0378-d9f0-e0e0-8db6-f2a2ceba7cc5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("9ec182af-bd95-089d-8d8e-766f0434f176",
	"1f051388-3d42-1f4a-a309-c0d9441fec0c",
	"00000000-0000-0000-0000-000000000000",
	"9c636509-9470-037b-a67c-6cfc48efd3b5",
	"778a95c1-05ac-d3f8-b07c-bc772e363833");
INSERT INTO GD_LS
	VALUES ("57616400-68c6-a15f-8d52-9de822bdf550",
	"1f051388-3d42-1f4a-a309-c0d9441fec0c",
	"9ec182af-bd95-089d-8d8e-766f0434f176",
	"778a95c1-05ac-d3f8-b07c-bc772e363833",
	"08a48362-90b6-1335-0f8f-91b82308f7fa");
INSERT INTO GD_LS
	VALUES ("f5fd3055-30ab-c118-30c4-2b9a22d6f70e",
	"1f051388-3d42-1f4a-a309-c0d9441fec0c",
	"57616400-68c6-a15f-8d52-9de822bdf550",
	"08a48362-90b6-1335-0f8f-91b82308f7fa",
	"b1cc26b5-619e-8d62-e561-fbe98d788f45");
INSERT INTO GD_LS
	VALUES ("a8eb04f5-8c92-fe9b-e263-a69a1e8b2e9f",
	"1f051388-3d42-1f4a-a309-c0d9441fec0c",
	"f5fd3055-30ab-c118-30c4-2b9a22d6f70e",
	"b1cc26b5-619e-8d62-e561-fbe98d788f45",
	"cbb8ba86-5c99-ab1c-3b8b-01cbfe1323b0");
INSERT INTO DIM_WAY
	VALUES ("9c636509-9470-037b-a67c-6cfc48efd3b5",
	752.000000,
	1408.000000,
	"1f051388-3d42-1f4a-a309-c0d9441fec0c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("778a95c1-05ac-d3f8-b07c-bc772e363833",
	624.000000,
	1408.000000,
	"1f051388-3d42-1f4a-a309-c0d9441fec0c",
	"00000000-0000-0000-0000-000000000000",
	"9c636509-9470-037b-a67c-6cfc48efd3b5");
INSERT INTO DIM_WAY
	VALUES ("08a48362-90b6-1335-0f8f-91b82308f7fa",
	624.000000,
	1328.000000,
	"1f051388-3d42-1f4a-a309-c0d9441fec0c",
	"00000000-0000-0000-0000-000000000000",
	"778a95c1-05ac-d3f8-b07c-bc772e363833");
INSERT INTO DIM_WAY
	VALUES ("b1cc26b5-619e-8d62-e561-fbe98d788f45",
	784.000000,
	1328.000000,
	"1f051388-3d42-1f4a-a309-c0d9441fec0c",
	"00000000-0000-0000-0000-000000000000",
	"08a48362-90b6-1335-0f8f-91b82308f7fa");
INSERT INTO DIM_WAY
	VALUES ("cbb8ba86-5c99-ab1c-3b8b-01cbfe1323b0",
	784.000000,
	1360.000000,
	"1f051388-3d42-1f4a-a309-c0d9441fec0c",
	"00000000-0000-0000-0000-000000000000",
	"b1cc26b5-619e-8d62-e561-fbe98d788f45");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1f051388-3d42-1f4a-a309-c0d9441fec0c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1f051388-3d42-1f4a-a309-c0d9441fec0c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("30d29761-1142-2be1-edda-0349f9ceff97",
	"35d0ac0e-d7cf-0ac7-c09c-4fb6176f3291",
	"1f051388-3d42-1f4a-a309-c0d9441fec0c");
INSERT INTO GD_GE
	VALUES ("a4427d82-df02-5d26-a319-2da84b5085d4",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"ec3514c2-f448-ee13-2459-0dadc15a2181",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not operator::ET12: Start empty test');
INSERT INTO GD_CON
	VALUES ("a4427d82-df02-5d26-a319-2da84b5085d4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0d72407f-eb1a-62b5-a86c-514e90e092fa",
	"a4427d82-df02-5d26-a319-2da84b5085d4",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0d72407f-eb1a-62b5-a86c-514e90e092fa");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0d72407f-eb1a-62b5-a86c-514e90e092fa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0d72407f-eb1a-62b5-a86c-514e90e092fa",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c87dcd36-a7c3-5b6c-509e-46dd6a75a5b1",
	"a4427d82-df02-5d26-a319-2da84b5085d4",
	3,
	-159.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (189.000000,
	36.000000,
	"c87dcd36-a7c3-5b6c-509e-46dd6a75a5b1");
INSERT INTO DIM_GE
	VALUES (753.000000,
	1632.000000,
	"c87dcd36-a7c3-5b6c-509e-46dd6a75a5b1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c87dcd36-a7c3-5b6c-509e-46dd6a75a5b1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b6941bc5-66d3-42c5-ddfe-bd43a741c851",
	"a4427d82-df02-5d26-a319-2da84b5085d4",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b6941bc5-66d3-42c5-ddfe-bd43a741c851");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b6941bc5-66d3-42c5-ddfe-bd43a741c851",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b6941bc5-66d3-42c5-ddfe-bd43a741c851",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("a1ceab76-c2d4-1995-6def-745802b8799e",
	"a4427d82-df02-5d26-a319-2da84b5085d4",
	"00000000-0000-0000-0000-000000000000",
	"a00284c1-69a2-63a3-c11f-791c52aa45c3",
	"156c8b0e-b5b6-227f-78d4-29ebbe981b06");
INSERT INTO DIM_WAY
	VALUES ("a00284c1-69a2-63a3-c11f-791c52aa45c3",
	928.000000,
	1616.000000,
	"a4427d82-df02-5d26-a319-2da84b5085d4",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("156c8b0e-b5b6-227f-78d4-29ebbe981b06",
	928.000000,
	1680.000000,
	"a4427d82-df02-5d26-a319-2da84b5085d4",
	"00000000-0000-0000-0000-000000000000",
	"a00284c1-69a2-63a3-c11f-791c52aa45c3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a4427d82-df02-5d26-a319-2da84b5085d4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a4427d82-df02-5d26-a319-2da84b5085d4",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("cb3bb9cc-b17f-1171-26f9-4088e7ecd467",
	"18f96ca4-3f2f-7afe-c109-a53cdd722dc6",
	"a4427d82-df02-5d26-a319-2da84b5085d4");
INSERT INTO GD_GE
	VALUES ("60255240-6760-116b-d312-9809c62d7d98",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"94d78be7-cb7a-463c-1343-08ad5a9ccd17",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET13: Start not test');
INSERT INTO GD_CON
	VALUES ("60255240-6760-116b-d312-9809c62d7d98",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d00cc391-b50b-acfb-7604-571114619f4a",
	"60255240-6760-116b-d312-9809c62d7d98",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d00cc391-b50b-acfb-7604-571114619f4a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d00cc391-b50b-acfb-7604-571114619f4a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d00cc391-b50b-acfb-7604-571114619f4a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("34ce7dae-58db-7de2-7e28-5f59a02f93bb",
	"60255240-6760-116b-d312-9809c62d7d98",
	3,
	-220.000000,
	-6.000000);
INSERT INTO DIM_ND
	VALUES (226.000000,
	40.000000,
	"34ce7dae-58db-7de2-7e28-5f59a02f93bb");
INSERT INTO DIM_GE
	VALUES (692.000000,
	1475.000000,
	"34ce7dae-58db-7de2-7e28-5f59a02f93bb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("34ce7dae-58db-7de2-7e28-5f59a02f93bb",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b7f4bd50-9cd3-6d13-8cee-949d3d9df92f",
	"60255240-6760-116b-d312-9809c62d7d98",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b7f4bd50-9cd3-6d13-8cee-949d3d9df92f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b7f4bd50-9cd3-6d13-8cee-949d3d9df92f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b7f4bd50-9cd3-6d13-8cee-949d3d9df92f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("a4dcaafd-1118-e689-f504-b2d33db7a075",
	"60255240-6760-116b-d312-9809c62d7d98",
	"00000000-0000-0000-0000-000000000000",
	"2a020f3f-370d-e2e3-34fb-9d04d064698b",
	"93316975-4f4f-f27e-6aa4-673dc2794d42");
INSERT INTO DIM_WAY
	VALUES ("2a020f3f-370d-e2e3-34fb-9d04d064698b",
	928.000000,
	1456.000000,
	"60255240-6760-116b-d312-9809c62d7d98",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("93316975-4f4f-f27e-6aa4-673dc2794d42",
	928.000000,
	1536.000000,
	"60255240-6760-116b-d312-9809c62d7d98",
	"00000000-0000-0000-0000-000000000000",
	"2a020f3f-370d-e2e3-34fb-9d04d064698b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"60255240-6760-116b-d312-9809c62d7d98",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("60255240-6760-116b-d312-9809c62d7d98",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a5c9cbb0-21a9-9d15-0906-06afd860e4f2",
	"33b1620a-1390-ef4b-b8e5-148dc1529021",
	"60255240-6760-116b-d312-9809c62d7d98");
INSERT INTO GD_GE
	VALUES ("bba2dd17-fd75-1535-ad18-a12a9184c89a",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"2d86cd4f-5cf9-0dc4-b967-ede8eb50e386",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator::ET14: Start subtract test');
INSERT INTO GD_CON
	VALUES ("bba2dd17-fd75-1535-ad18-a12a9184c89a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("995b29e2-9be4-fc7e-722b-a83cb6619c4c",
	"bba2dd17-fd75-1535-ad18-a12a9184c89a",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"995b29e2-9be4-fc7e-722b-a83cb6619c4c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"995b29e2-9be4-fc7e-722b-a83cb6619c4c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("995b29e2-9be4-fc7e-722b-a83cb6619c4c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c4811aac-3f25-d877-6e30-b8baa34f08c4",
	"bba2dd17-fd75-1535-ad18-a12a9184c89a",
	3,
	-54.000000,
	-372.000000);
INSERT INTO DIM_ND
	VALUES (233.000000,
	39.000000,
	"c4811aac-3f25-d877-6e30-b8baa34f08c4");
INSERT INTO DIM_GE
	VALUES (1098.000000,
	1333.000000,
	"c4811aac-3f25-d877-6e30-b8baa34f08c4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c4811aac-3f25-d877-6e30-b8baa34f08c4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b6b88a98-2f35-08c4-154d-35624adb6e82",
	"bba2dd17-fd75-1535-ad18-a12a9184c89a",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b6b88a98-2f35-08c4-154d-35624adb6e82");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b6b88a98-2f35-08c4-154d-35624adb6e82",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b6b88a98-2f35-08c4-154d-35624adb6e82",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("419be9d8-ee0b-8cba-1c69-71d9c26aeb27",
	"bba2dd17-fd75-1535-ad18-a12a9184c89a",
	"00000000-0000-0000-0000-000000000000",
	"74bd20c8-0f11-72aa-b085-799a99f04a54",
	"3180aa65-289d-5747-de38-765f3f3428d9");
INSERT INTO GD_LS
	VALUES ("9312a41d-93d9-d9a2-3656-a59f9aec8bdb",
	"bba2dd17-fd75-1535-ad18-a12a9184c89a",
	"419be9d8-ee0b-8cba-1c69-71d9c26aeb27",
	"3180aa65-289d-5747-de38-765f3f3428d9",
	"b01fe64b-2bbb-e90b-0832-cb199ed8d695");
INSERT INTO GD_LS
	VALUES ("96ae0e86-0a97-9129-f962-03f2cd9f0f22",
	"bba2dd17-fd75-1535-ad18-a12a9184c89a",
	"9312a41d-93d9-d9a2-3656-a59f9aec8bdb",
	"b01fe64b-2bbb-e90b-0832-cb199ed8d695",
	"6ff7ab04-50ce-f058-c8b5-ba01f06b7f95");
INSERT INTO DIM_WAY
	VALUES ("74bd20c8-0f11-72aa-b085-799a99f04a54",
	1072.000000,
	2080.000000,
	"bba2dd17-fd75-1535-ad18-a12a9184c89a",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("3180aa65-289d-5747-de38-765f3f3428d9",
	1168.000000,
	2080.000000,
	"bba2dd17-fd75-1535-ad18-a12a9184c89a",
	"00000000-0000-0000-0000-000000000000",
	"74bd20c8-0f11-72aa-b085-799a99f04a54");
INSERT INTO DIM_WAY
	VALUES ("b01fe64b-2bbb-e90b-0832-cb199ed8d695",
	1168.000000,
	1376.000000,
	"bba2dd17-fd75-1535-ad18-a12a9184c89a",
	"00000000-0000-0000-0000-000000000000",
	"3180aa65-289d-5747-de38-765f3f3428d9");
INSERT INTO DIM_WAY
	VALUES ("6ff7ab04-50ce-f058-c8b5-ba01f06b7f95",
	1280.000000,
	1376.000000,
	"bba2dd17-fd75-1535-ad18-a12a9184c89a",
	"00000000-0000-0000-0000-000000000000",
	"b01fe64b-2bbb-e90b-0832-cb199ed8d695");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bba2dd17-fd75-1535-ad18-a12a9184c89a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bba2dd17-fd75-1535-ad18-a12a9184c89a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("6a365f81-b999-4801-76ac-e3457de72e2e",
	"165a773a-398d-1d10-41f2-7a3d77d7a0f8",
	"bba2dd17-fd75-1535-ad18-a12a9184c89a");
INSERT INTO GD_GE
	VALUES ("049eb3df-1594-5b87-d5a6-61c92a073655",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"d0ae6971-b6ab-bfc9-1a94-c2cd44b42f00",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("049eb3df-1594-5b87-d5a6-61c92a073655",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("85d0d7fc-c71d-b7e9-38e4-d8949dd7c68c",
	"049eb3df-1594-5b87-d5a6-61c92a073655",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"85d0d7fc-c71d-b7e9-38e4-d8949dd7c68c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"85d0d7fc-c71d-b7e9-38e4-d8949dd7c68c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("85d0d7fc-c71d-b7e9-38e4-d8949dd7c68c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("04c5621d-54ee-9503-3ceb-f44310198aa6",
	"049eb3df-1594-5b87-d5a6-61c92a073655",
	3,
	-210.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (220.000000,
	34.000000,
	"04c5621d-54ee-9503-3ceb-f44310198aa6");
INSERT INTO DIM_GE
	VALUES (1198.000000,
	1469.000000,
	"04c5621d-54ee-9503-3ceb-f44310198aa6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("04c5621d-54ee-9503-3ceb-f44310198aa6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ad6dcfe5-1753-37e1-e991-d4357c85fbdd",
	"049eb3df-1594-5b87-d5a6-61c92a073655",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ad6dcfe5-1753-37e1-e991-d4357c85fbdd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ad6dcfe5-1753-37e1-e991-d4357c85fbdd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ad6dcfe5-1753-37e1-e991-d4357c85fbdd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("8e2c1366-b62c-2f9d-c3db-8bf4df924b58",
	"049eb3df-1594-5b87-d5a6-61c92a073655",
	"00000000-0000-0000-0000-000000000000",
	"2c2b56e6-5243-8abb-dbb3-df885c84d6b1",
	"72f85b0f-6f71-3f0d-5f4b-75b6eb0dab54");
INSERT INTO DIM_WAY
	VALUES ("2c2b56e6-5243-8abb-dbb3-df885c84d6b1",
	1424.000000,
	1456.000000,
	"049eb3df-1594-5b87-d5a6-61c92a073655",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("72f85b0f-6f71-3f0d-5f4b-75b6eb0dab54",
	1424.000000,
	1520.000000,
	"049eb3df-1594-5b87-d5a6-61c92a073655",
	"00000000-0000-0000-0000-000000000000",
	"2c2b56e6-5243-8abb-dbb3-df885c84d6b1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"049eb3df-1594-5b87-d5a6-61c92a073655",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("049eb3df-1594-5b87-d5a6-61c92a073655",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("1099b3b0-c761-c012-2f6a-002d207879f9",
	"aa9e718b-5f18-ece5-52e8-51cda6c61762",
	"049eb3df-1594-5b87-d5a6-61c92a073655");
INSERT INTO GD_GE
	VALUES ("54482fb8-7f94-e468-8ec0-a73d3ee60506",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"17c8b070-f378-1878-120c-a5031c34628d",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing assign::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("54482fb8-7f94-e468-8ec0-a73d3ee60506",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3dad61f5-63d8-cd3c-b596-0a111985fe9e",
	"54482fb8-7f94-e468-8ec0-a73d3ee60506",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3dad61f5-63d8-cd3c-b596-0a111985fe9e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3dad61f5-63d8-cd3c-b596-0a111985fe9e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3dad61f5-63d8-cd3c-b596-0a111985fe9e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("37c9bd6c-c1f1-9914-c606-41a15b0236c6",
	"54482fb8-7f94-e468-8ec0-a73d3ee60506",
	3,
	-246.000000,
	-3.000000);
INSERT INTO DIM_ND
	VALUES (263.000000,
	34.000000,
	"37c9bd6c-c1f1-9914-c606-41a15b0236c6");
INSERT INTO DIM_GE
	VALUES (1194.000000,
	1630.000000,
	"37c9bd6c-c1f1-9914-c606-41a15b0236c6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("37c9bd6c-c1f1-9914-c606-41a15b0236c6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("07b24ad8-c9b1-37c6-3c1f-ac78c6d9a768",
	"54482fb8-7f94-e468-8ec0-a73d3ee60506",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"07b24ad8-c9b1-37c6-3c1f-ac78c6d9a768");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"07b24ad8-c9b1-37c6-3c1f-ac78c6d9a768",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("07b24ad8-c9b1-37c6-3c1f-ac78c6d9a768",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("1f6b06f0-50c4-f757-2954-4652e2542930",
	"54482fb8-7f94-e468-8ec0-a73d3ee60506",
	"00000000-0000-0000-0000-000000000000",
	"38539fa4-194f-20a7-adb3-d9819e1bb273",
	"24bb66b1-4762-4559-9d45-ea622497fa8d");
INSERT INTO DIM_WAY
	VALUES ("38539fa4-194f-20a7-adb3-d9819e1bb273",
	1456.000000,
	1616.000000,
	"54482fb8-7f94-e468-8ec0-a73d3ee60506",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("24bb66b1-4762-4559-9d45-ea622497fa8d",
	1456.000000,
	1680.000000,
	"54482fb8-7f94-e468-8ec0-a73d3ee60506",
	"00000000-0000-0000-0000-000000000000",
	"38539fa4-194f-20a7-adb3-d9819e1bb273");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"54482fb8-7f94-e468-8ec0-a73d3ee60506",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("54482fb8-7f94-e468-8ec0-a73d3ee60506",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("8d01e3b5-b9a9-3077-53b5-230e8a7f34e4",
	"4597cd79-b1d5-77aa-5a36-a850d545e306",
	"54482fb8-7f94-e468-8ec0-a73d3ee60506");
INSERT INTO GD_GE
	VALUES ("8d01bbc4-492c-2c95-4dd4-8ed5cbf4698f",
	"a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"194c1f4a-429c-39ef-1821-0ee02a1df3ec",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Additional assign tests::ET16: Start and test');
INSERT INTO GD_CON
	VALUES ("8d01bbc4-492c-2c95-4dd4-8ed5cbf4698f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b7a1f2e2-ae91-ecf2-3bbd-21ea75cdf83a",
	"8d01bbc4-492c-2c95-4dd4-8ed5cbf4698f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b7a1f2e2-ae91-ecf2-3bbd-21ea75cdf83a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b7a1f2e2-ae91-ecf2-3bbd-21ea75cdf83a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b7a1f2e2-ae91-ecf2-3bbd-21ea75cdf83a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d0e2b871-ee6b-9d94-9ad1-6cd4882f770d",
	"8d01bbc4-492c-2c95-4dd4-8ed5cbf4698f",
	3,
	22.000000,
	16.000000);
INSERT INTO DIM_ND
	VALUES (187.000000,
	35.000000,
	"d0e2b871-ee6b-9d94-9ad1-6cd4882f770d");
INSERT INTO DIM_GE
	VALUES (1654.000000,
	1641.000000,
	"d0e2b871-ee6b-9d94-9ad1-6cd4882f770d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d0e2b871-ee6b-9d94-9ad1-6cd4882f770d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d8d88513-8cff-30da-f888-1e2e83f32f3d",
	"8d01bbc4-492c-2c95-4dd4-8ed5cbf4698f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d8d88513-8cff-30da-f888-1e2e83f32f3d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d8d88513-8cff-30da-f888-1e2e83f32f3d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d8d88513-8cff-30da-f888-1e2e83f32f3d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("587ea2b6-c311-3603-ebf6-fe439cddd243",
	"8d01bbc4-492c-2c95-4dd4-8ed5cbf4698f",
	"00000000-0000-0000-0000-000000000000",
	"fb063dd1-084c-3711-84fd-bab99a77af89",
	"b143027e-69b6-4a6d-0d29-dd22a28eac7b");
INSERT INTO GD_LS
	VALUES ("3e7ce557-daec-990a-02f1-596a863b9caf",
	"8d01bbc4-492c-2c95-4dd4-8ed5cbf4698f",
	"587ea2b6-c311-3603-ebf6-fe439cddd243",
	"b143027e-69b6-4a6d-0d29-dd22a28eac7b",
	"db1fe469-84ee-63a5-8a4f-cfa7fbdb90ac");
INSERT INTO GD_LS
	VALUES ("2a21f058-5840-d7bf-61a1-20afb07a5b16",
	"8d01bbc4-492c-2c95-4dd4-8ed5cbf4698f",
	"3e7ce557-daec-990a-02f1-596a863b9caf",
	"db1fe469-84ee-63a5-8a4f-cfa7fbdb90ac",
	"e9ba85bd-54f6-6dd8-c562-9427fea93f1a");
INSERT INTO DIM_WAY
	VALUES ("fb063dd1-084c-3711-84fd-bab99a77af89",
	1600.000000,
	1728.000000,
	"8d01bbc4-492c-2c95-4dd4-8ed5cbf4698f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("b143027e-69b6-4a6d-0d29-dd22a28eac7b",
	1648.000000,
	1728.000000,
	"8d01bbc4-492c-2c95-4dd4-8ed5cbf4698f",
	"00000000-0000-0000-0000-000000000000",
	"fb063dd1-084c-3711-84fd-bab99a77af89");
INSERT INTO DIM_WAY
	VALUES ("db1fe469-84ee-63a5-8a4f-cfa7fbdb90ac",
	1648.000000,
	1568.000000,
	"8d01bbc4-492c-2c95-4dd4-8ed5cbf4698f",
	"00000000-0000-0000-0000-000000000000",
	"b143027e-69b6-4a6d-0d29-dd22a28eac7b");
INSERT INTO DIM_WAY
	VALUES ("e9ba85bd-54f6-6dd8-c562-9427fea93f1a",
	1712.000000,
	1568.000000,
	"8d01bbc4-492c-2c95-4dd4-8ed5cbf4698f",
	"00000000-0000-0000-0000-000000000000",
	"db1fe469-84ee-63a5-8a4f-cfa7fbdb90ac");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8d01bbc4-492c-2c95-4dd4-8ed5cbf4698f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8d01bbc4-492c-2c95-4dd4-8ed5cbf4698f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("9d3aedae-ee1c-9588-f117-cde9aaff7c78",
	"a1241249-0e57-2f1f-5ea9-d433f7a77615",
	"8d01bbc4-492c-2c95-4dd4-8ed5cbf4698f");
INSERT INTO DIM_DIA
	VALUES ("a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("1e6c89ff-f941-7c51-013e-1dc86807a023",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("1e6c89ff-f941-7c51-013e-1dc86807a023",
	'Many Instances',
	7,
	'MI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("a08079c7-9336-e78d-bcca-d7ff9b5a6843",
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_BATTR
	VALUES ("a08079c7-9336-e78d-bcca-d7ff9b5a6843",
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_ATTR
	VALUES ("a08079c7-9336-e78d-bcca-d7ff9b5a6843",
	"1e6c89ff-f941-7c51-013e-1dc86807a023",
	"00000000-0000-0000-0000-000000000000",
	'mi_id',
	'',
	'',
	'mi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("1e6c89ff-f941-7c51-013e-1dc86807a023",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"b79a8723-0d3d-ea2b-a0b5-347e8ec5518e",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb",
	"b2e2ec8b-dea4-27ff-bf04-36a5ef39a581",
	"63654ca8-9ae9-4e9a-2c03-dd5d38b6031b",
	"8ca4e67c-d9ba-ea2d-6855-dd300826b5d1",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R4');
INSERT INTO O_RATTR
	VALUES ("63654ca8-9ae9-4e9a-2c03-dd5d38b6031b",
	"1e6c89ff-f941-7c51-013e-1dc86807a023",
	"e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("63654ca8-9ae9-4e9a-2c03-dd5d38b6031b",
	"1e6c89ff-f941-7c51-013e-1dc86807a023",
	"a08079c7-9336-e78d-bcca-d7ff9b5a6843",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_OIDA
	VALUES ("a08079c7-9336-e78d-bcca-d7ff9b5a6843",
	"1e6c89ff-f941-7c51-013e-1dc86807a023",
	0,
	'mi_id');
INSERT INTO O_ID
	VALUES (1,
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_ID
	VALUES (2,
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO PE_PE
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	'No Instances',
	5,
	'NOI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("faf23b8f-9c13-99bf-9575-2107590b07d8",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932");
INSERT INTO O_BATTR
	VALUES ("faf23b8f-9c13-99bf-9575-2107590b07d8",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932");
INSERT INTO O_ATTR
	VALUES ("faf23b8f-9c13-99bf-9575-2107590b07d8",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"00000000-0000-0000-0000-000000000000",
	'noi_id',
	'',
	'',
	'noi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"bc4d8a5f-8892-bff5-cf51-68bad811491a",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"eca27f35-e254-ed4e-4bee-786de50afcc8",
	"012785f1-36c8-ba79-1c2f-35e33f32ee40",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R2');
INSERT INTO O_RATTR
	VALUES ("eca27f35-e254-ed4e-4bee-786de50afcc8",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("eca27f35-e254-ed4e-4bee-786de50afcc8",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"faf23b8f-9c13-99bf-9575-2107590b07d8",
	'r2et_id',
	'',
	'r2',
	'et_id',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"2a28f481-70d3-e76a-440c-6738e62430b6",
	"b15c758a-e852-d3b7-368c-45b43b3e1826",
	"8718f67e-1427-6471-bb23-360a7ff64490",
	"7b700681-50fe-78a0-b036-22d81dcdc8b7",
	"dc6947ac-d33d-7048-bd97-232710b93e96",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R5');
INSERT INTO O_RATTR
	VALUES ("7b700681-50fe-78a0-b036-22d81dcdc8b7",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("7b700681-50fe-78a0-b036-22d81dcdc8b7",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"eca27f35-e254-ed4e-4bee-786de50afcc8",
	'r5et_id',
	'',
	'r5',
	'et_id',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932");
INSERT INTO O_OIDA
	VALUES ("faf23b8f-9c13-99bf-9575-2107590b07d8",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	0,
	'noi_id');
INSERT INTO O_ID
	VALUES (1,
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932");
INSERT INTO O_ID
	VALUES (2,
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932");
INSERT INTO PE_PE
	VALUES ("7b55c826-c95e-086c-b33e-106fbdbdf22f",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("7b55c826-c95e-086c-b33e-106fbdbdf22f",
	'One Instance',
	6,
	'OI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("c51e90fe-a926-59fd-a3a1-afe2db20db5d",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f");
INSERT INTO O_BATTR
	VALUES ("c51e90fe-a926-59fd-a3a1-afe2db20db5d",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f");
INSERT INTO O_ATTR
	VALUES ("c51e90fe-a926-59fd-a3a1-afe2db20db5d",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"00000000-0000-0000-0000-000000000000",
	'oi_id',
	'',
	'',
	'oi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"91b9bb3d-87c1-e36f-7cac-ec4969f32864",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	"5fbdc4f5-bdd9-7d58-db3f-ac87fde560cd",
	"38adcac6-84e1-dc89-98ff-0edee32865f3",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R3');
INSERT INTO O_RATTR
	VALUES ("5fbdc4f5-bdd9-7d58-db3f-ac87fde560cd",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("5fbdc4f5-bdd9-7d58-db3f-ac87fde560cd",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"c51e90fe-a926-59fd-a3a1-afe2db20db5d",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"7b55c826-c95e-086c-b33e-106fbdbdf22f");
INSERT INTO O_OIDA
	VALUES ("c51e90fe-a926-59fd-a3a1-afe2db20db5d",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	0,
	'oi_id');
INSERT INTO O_ID
	VALUES (1,
	"7b55c826-c95e-086c-b33e-106fbdbdf22f");
INSERT INTO O_ID
	VALUES (2,
	"7b55c826-c95e-086c-b33e-106fbdbdf22f");
INSERT INTO PE_PE
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	'Other Boolean Expression Test',
	16,
	'OBET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("33987c18-574f-fa99-ec74-5e3ca6de81e5",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd");
INSERT INTO O_BATTR
	VALUES ("33987c18-574f-fa99-ec74-5e3ca6de81e5",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd");
INSERT INTO O_ATTR
	VALUES ("33987c18-574f-fa99-ec74-5e3ca6de81e5",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"00000000-0000-0000-0000-000000000000",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("f0cf3dfb-53b5-3803-d3d0-c3d73daa7494",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd");
INSERT INTO O_BATTR
	VALUES ("f0cf3dfb-53b5-3803-d3d0-c3d73daa7494",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd");
INSERT INTO O_ATTR
	VALUES ("f0cf3dfb-53b5-3803-d3d0-c3d73daa7494",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"33987c18-574f-fa99-ec74-5e3ca6de81e5",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_REF
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"f64b8be7-7c94-1146-33c9-6b525c0b9014",
	"b7f9c61a-a006-11e4-e21c-27ddfde92e61",
	"81aab7e5-5338-0367-8f49-1063a46438e6",
	"b6edf5c7-5180-7ade-fcfb-64b3c188d4e2",
	"4d8a4fa2-254e-d4ff-24da-3833d25c46cf",
	"1674e145-2ea0-7680-7186-958c54b8419f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Boolean Expression Test',
	'id',
	'R10');
INSERT INTO O_RATTR
	VALUES ("4d8a4fa2-254e-d4ff-24da-3833d25c46cf",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"f64b8be7-7c94-1146-33c9-6b525c0b9014",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'id');
INSERT INTO O_ATTR
	VALUES ("4d8a4fa2-254e-d4ff-24da-3833d25c46cf",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"f0cf3dfb-53b5-3803-d3d0-c3d73daa7494",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	0,
	"8b7f1db6-5fd5-db6c-8fff-1dfa55890896",
	"6de8269d-227c-c695-f4ee-f9d275b3bafc",
	"aba51cb0-6058-f3e0-0c5d-16d5a8f414fd",
	"257d30b6-989c-e1fe-c1ae-30dbb5c0483f",
	"1a4287d0-2675-d7ee-cb2a-acad0deaa001",
	"888d7a07-9f82-6fad-3fdb-5af2c45afe74",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Third Boolean Expression Test',
	'btrue',
	'R11');
INSERT INTO O_RATTR
	VALUES ("1a4287d0-2675-d7ee-cb2a-acad0deaa001",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"8b7f1db6-5fd5-db6c-8fff-1dfa55890896",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("1a4287d0-2675-d7ee-cb2a-acad0deaa001",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"4d8a4fa2-254e-d4ff-24da-3833d25c46cf",
	'r11btrue',
	'',
	'r11',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	0,
	"adf109f5-da95-b42e-5974-bd1094f7c783",
	"6de8269d-227c-c695-f4ee-f9d275b3bafc",
	"aba51cb0-6058-f3e0-0c5d-16d5a8f414fd",
	"257d30b6-989c-e1fe-c1ae-30dbb5c0483f",
	"06e50164-9ac7-7973-e0ff-2286bf0d94bb",
	"6ced82e3-f53d-39ee-666d-63b10c07ed28",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Third Boolean Expression Test',
	'bfalse',
	'R11');
INSERT INTO O_RATTR
	VALUES ("06e50164-9ac7-7973-e0ff-2286bf0d94bb",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"adf109f5-da95-b42e-5974-bd1094f7c783",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("06e50164-9ac7-7973-e0ff-2286bf0d94bb",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"1a4287d0-2675-d7ee-cb2a-acad0deaa001",
	'r11bfalse',
	'',
	'r11',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd");
INSERT INTO O_OIDA
	VALUES ("33987c18-574f-fa99-ec74-5e3ca6de81e5",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("f0cf3dfb-53b5-3803-d3d0-c3d73daa7494",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	0,
	'btrue');
INSERT INTO O_ID
	VALUES (1,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd");
INSERT INTO O_ID
	VALUES (2,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd");
INSERT INTO PE_PE
	VALUES ("cb2ccf26-fc90-2543-da09-5c968e1db3de",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("cb2ccf26-fc90-2543-da09-5c968e1db3de",
	'Third Boolean Expression Test',
	17,
	'TBET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("8b7f1db6-5fd5-db6c-8fff-1dfa55890896",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de");
INSERT INTO O_BATTR
	VALUES ("8b7f1db6-5fd5-db6c-8fff-1dfa55890896",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de");
INSERT INTO O_ATTR
	VALUES ("8b7f1db6-5fd5-db6c-8fff-1dfa55890896",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"00000000-0000-0000-0000-000000000000",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("adf109f5-da95-b42e-5974-bd1094f7c783",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de");
INSERT INTO O_BATTR
	VALUES ("adf109f5-da95-b42e-5974-bd1094f7c783",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de");
INSERT INTO O_ATTR
	VALUES ("adf109f5-da95-b42e-5974-bd1094f7c783",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"8b7f1db6-5fd5-db6c-8fff-1dfa55890896",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"cb2ccf26-fc90-2543-da09-5c968e1db3de");
INSERT INTO O_OIDA
	VALUES ("adf109f5-da95-b42e-5974-bd1094f7c783",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("8b7f1db6-5fd5-db6c-8fff-1dfa55890896",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	0,
	'btrue');
INSERT INTO O_ID
	VALUES (1,
	"cb2ccf26-fc90-2543-da09-5c968e1db3de");
INSERT INTO O_ID
	VALUES (2,
	"cb2ccf26-fc90-2543-da09-5c968e1db3de");
INSERT INTO PE_PE
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	'User Boolean Test',
	18,
	'UBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("5d8c7dd1-b2d2-1dcc-d3de-9c21f8e92073",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc");
INSERT INTO O_BATTR
	VALUES ("5d8c7dd1-b2d2-1dcc-d3de-9c21f8e92073",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc");
INSERT INTO O_ATTR
	VALUES ("5d8c7dd1-b2d2-1dcc-d3de-9c21f8e92073",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("2a693069-7051-dff3-7973-05ee9bbd7f40",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc");
INSERT INTO O_BATTR
	VALUES ("2a693069-7051-dff3-7973-05ee9bbd7f40",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc");
INSERT INTO O_ATTR
	VALUES ("2a693069-7051-dff3-7973-05ee9bbd7f40",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"5d8c7dd1-b2d2-1dcc-d3de-9c21f8e92073",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"cb708e96-e508-4b74-651d-60a4e6c3d977",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3accd777-14c7-bffd-8e87-df763c0c7e47",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc");
INSERT INTO O_BATTR
	VALUES ("3accd777-14c7-bffd-8e87-df763c0c7e47",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc");
INSERT INTO O_ATTR
	VALUES ("3accd777-14c7-bffd-8e87-df763c0c7e47",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"2a693069-7051-dff3-7973-05ee9bbd7f40",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"cb708e96-e508-4b74-651d-60a4e6c3d977",
	'',
	'');
INSERT INTO O_REF
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	0,
	"f2152e91-55a6-afb0-cfbe-b01b29a9adf2",
	"125a0c87-0542-7326-b999-f318842c61d7",
	"5de510f2-4f08-c286-e184-598c6b8c41be",
	"e7e30b68-1f68-8f6e-8998-924b8ef4eb7b",
	"bdba4bd5-6ae8-95f1-4261-ffa43d232abb",
	"a92fbbc9-a5a0-f7d1-ee40-6a679b3b1164",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Other Boolean Test',
	'bfalse',
	'R12');
INSERT INTO O_RATTR
	VALUES ("bdba4bd5-6ae8-95f1-4261-ffa43d232abb",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"f2152e91-55a6-afb0-cfbe-b01b29a9adf2",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("bdba4bd5-6ae8-95f1-4261-ffa43d232abb",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"3accd777-14c7-bffd-8e87-df763c0c7e47",
	'r9bfalse',
	'',
	'r9',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	0,
	"3c5d7fc7-241a-baad-f337-7a70b711fec5",
	"125a0c87-0542-7326-b999-f318842c61d7",
	"5de510f2-4f08-c286-e184-598c6b8c41be",
	"e7e30b68-1f68-8f6e-8998-924b8ef4eb7b",
	"e7eec3a8-a1bd-ac09-3a67-06e280f24573",
	"2d83d263-22d1-cd33-b351-097b49f6d09b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Other Boolean Test',
	'btrue',
	'R12');
INSERT INTO O_RATTR
	VALUES ("e7eec3a8-a1bd-ac09-3a67-06e280f24573",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"3c5d7fc7-241a-baad-f337-7a70b711fec5",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("e7eec3a8-a1bd-ac09-3a67-06e280f24573",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"bdba4bd5-6ae8-95f1-4261-ffa43d232abb",
	'r9btrue',
	'',
	'r9',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("97bb7d3a-4223-6eb3-2bd6-7b6563445a89",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc");
INSERT INTO O_BATTR
	VALUES ("97bb7d3a-4223-6eb3-2bd6-7b6563445a89",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc");
INSERT INTO O_ATTR
	VALUES ("97bb7d3a-4223-6eb3-2bd6-7b6563445a89",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"e7eec3a8-a1bd-ac09-3a67-06e280f24573",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc");
INSERT INTO O_OIDA
	VALUES ("5d8c7dd1-b2d2-1dcc-d3de-9c21f8e92073",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc");
INSERT INTO O_ID
	VALUES (2,
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc");
INSERT INTO SM_ISM
	VALUES ("69383e03-93a6-153a-cc87-c7410987886c",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc");
INSERT INTO SM_SM
	VALUES ("69383e03-93a6-153a-cc87-c7410987886c",
	'',
	6);
INSERT INTO SM_MOORE
	VALUES ("69383e03-93a6-153a-cc87-c7410987886c");
INSERT INTO SM_EVTDI
	VALUES ("6b7edc1a-5246-70bc-eab2-feb2d6dbe82e",
	"69383e03-93a6-153a-cc87-c7410987886c",
	'tfalse',
	'',
	"cb708e96-e508-4b74-651d-60a4e6c3d977",
	'',
	"b6dbed9f-6606-41f0-c0da-bef047b9dafb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("d93f6474-bdc5-a4de-5723-02d984e7d4d4",
	"69383e03-93a6-153a-cc87-c7410987886c",
	'ttrue',
	'',
	"cb708e96-e508-4b74-651d-60a4e6c3d977",
	'',
	"b6dbed9f-6606-41f0-c0da-bef047b9dafb",
	"6b7edc1a-5246-70bc-eab2-feb2d6dbe82e");
INSERT INTO SM_EVTDI
	VALUES ("fc603ba6-262c-aa84-0e50-4bf34ed0f7a0",
	"69383e03-93a6-153a-cc87-c7410987886c",
	'tfalse',
	'',
	"cb708e96-e508-4b74-651d-60a4e6c3d977",
	'',
	"29e51d21-90f9-904b-5cb3-ec2ede985fc1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("1dc056b0-5262-fc4f-4445-5ff3c78da9d3",
	"69383e03-93a6-153a-cc87-c7410987886c",
	'tfalse',
	'',
	"cb708e96-e508-4b74-651d-60a4e6c3d977",
	'',
	"d905cf31-a3de-9d99-d944-9c5474933b5b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("f4e92dff-a52a-ef6b-8674-4f34987b2a01",
	"69383e03-93a6-153a-cc87-c7410987886c",
	'tfalse',
	'',
	"cb708e96-e508-4b74-651d-60a4e6c3d977",
	'',
	"966313d7-b38d-79dc-41a0-f83cd907e183",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("b0ec2ab4-8f8b-7b2a-eef8-1d6f4aa3f11d",
	"69383e03-93a6-153a-cc87-c7410987886c",
	'ttrue',
	'',
	"cb708e96-e508-4b74-651d-60a4e6c3d977",
	'',
	"29e51d21-90f9-904b-5cb3-ec2ede985fc1",
	"fc603ba6-262c-aa84-0e50-4bf34ed0f7a0");
INSERT INTO SM_EVTDI
	VALUES ("0cf595fc-48e7-97dc-9e34-425f76db1539",
	"69383e03-93a6-153a-cc87-c7410987886c",
	'ttrue',
	'',
	"cb708e96-e508-4b74-651d-60a4e6c3d977",
	'',
	"d905cf31-a3de-9d99-d944-9c5474933b5b",
	"1dc056b0-5262-fc4f-4445-5ff3c78da9d3");
INSERT INTO SM_EVTDI
	VALUES ("a673c1c5-bafc-ea81-523b-b0a0345d6875",
	"69383e03-93a6-153a-cc87-c7410987886c",
	'ttrue',
	'',
	"cb708e96-e508-4b74-651d-60a4e6c3d977",
	'',
	"966313d7-b38d-79dc-41a0-f83cd907e183",
	"f4e92dff-a52a-ef6b-8674-4f34987b2a01");
INSERT INTO SM_LEVT
	VALUES ("29e51d21-90f9-904b-5cb3-ec2ede985fc1",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("29e51d21-90f9-904b-5cb3-ec2ede985fc1",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("29e51d21-90f9-904b-5cb3-ec2ede985fc1",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start and test',
	0,
	'',
	'UBT1',
	'');
INSERT INTO SM_LEVT
	VALUES ("d905cf31-a3de-9d99-d944-9c5474933b5b",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("d905cf31-a3de-9d99-d944-9c5474933b5b",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("d905cf31-a3de-9d99-d944-9c5474933b5b",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Continue and test',
	0,
	'',
	'UBT2',
	'');
INSERT INTO SM_LEVT
	VALUES ("966313d7-b38d-79dc-41a0-f83cd907e183",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("966313d7-b38d-79dc-41a0-f83cd907e183",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("966313d7-b38d-79dc-41a0-f83cd907e183",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Start or test',
	0,
	'',
	'UBT3',
	'');
INSERT INTO SM_LEVT
	VALUES ("b6dbed9f-6606-41f0-c0da-bef047b9dafb",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("b6dbed9f-6606-41f0-c0da-bef047b9dafb",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("b6dbed9f-6606-41f0-c0da-bef047b9dafb",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Continue or test',
	0,
	'',
	'UBT4',
	'');
INSERT INTO SM_STATE
	VALUES ("94ca00f6-9807-d198-ee7a-27a86d02f81c",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'And test 1a',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("94ca00f6-9807-d198-ee7a-27a86d02f81c",
	"29e51d21-90f9-904b-5cb3-ec2ede985fc1",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("94ca00f6-9807-d198-ee7a-27a86d02f81c",
	"d905cf31-a3de-9d99-d944-9c5474933b5b",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("94ca00f6-9807-d198-ee7a-27a86d02f81c",
	"966313d7-b38d-79dc-41a0-f83cd907e183",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("94ca00f6-9807-d198-ee7a-27a86d02f81c",
	"966313d7-b38d-79dc-41a0-f83cd907e183",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("94ca00f6-9807-d198-ee7a-27a86d02f81c",
	"b6dbed9f-6606-41f0-c0da-bef047b9dafb",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("94ca00f6-9807-d198-ee7a-27a86d02f81c",
	"b6dbed9f-6606-41f0-c0da-bef047b9dafb",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("40bf77ec-2453-fecc-7c3f-eedf13b298ea",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"94ca00f6-9807-d198-ee7a-27a86d02f81c");
INSERT INTO SM_AH
	VALUES ("40bf77ec-2453-fecc-7c3f-eedf13b298ea",
	"69383e03-93a6-153a-cc87-c7410987886c");
INSERT INTO SM_ACT
	VALUES ("40bf77ec-2453-fecc-7c3f-eedf13b298ea",
	"69383e03-93a6-153a-cc87-c7410987886c",
	1,
	'LOG::LogInfo(message:"Starting and (user-defined type) test") ;

//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    rcvd_evt
assign t5 = temp1 and rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 and rcvd_evt.ttrue ;
if ( t6 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t7 = temp2 and rcvd_evt.tfalse ;
if ( t7 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t8 = temp2 and rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 and self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 and self.btrue ;
if ( t14 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t15 = temp2 and self.bfalse ;
if ( t15 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t16 = temp2 and self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" and local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 and self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 and self.r9btrue ;
if ( t18 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t19 = temp2 and self.r9bfalse ;
if ( t19 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = temp2 and self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of UOBT;
assign t21 = temp1 and saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 and saf.btrue ;
if ( t22 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t23 = temp2 and saf.bfalse ;
if ( t23 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t24 = temp2 and saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of UOBT;
for each smf in smfs
assign t25 = temp1 and smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 and smf.btrue ;
if ( t26 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t27 = temp2 and smf.bfalse ;
if ( t27 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t28 = temp2 and smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->UOBT[R12];
assign t29 = temp1 and sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 and sor.btrue ;
if ( t30 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t31 = temp2 and sor.bfalse ;
if ( t31 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t32 = temp2 and sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->UOBT[R13];
assign t33 = temp1 and sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 and sar.btrue ;
if ( t34 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t35 = temp2 and sar.bfalse ;
if ( t35 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t36 = temp2 and sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->UOBT[R13];
for each smr in smrs
assign t37 = temp1 and smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 and smr.btrue ;
if ( t38 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t39 = temp2 and smr.bfalse ;
if ( t39 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t40 = temp2 and smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 and saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 and saf.r11btrue ;
if ( t42 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t43 = temp2 and saf.r11bfalse ;
if ( t43 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t44 = temp2 and saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 and smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 and smf.r11btrue ;
if ( t46 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t47 = temp2 and smf.r11bfalse ;
if ( t47 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t48 = temp2 and smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 and sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 and sor.r11btrue ;
if ( t50 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t51 = temp2 and sor.r11bfalse ;
if ( t51 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t52 = temp2 and sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 and sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 and sar.r11btrue ;
if ( t54 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t55 = temp2 and sar.r11bfalse ;
if ( t55 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t56 = temp2 and sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 and smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 and smr.r11btrue ;
if ( t58 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t59 = temp2 and smr.r11bfalse ;
if ( t59 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t60 = temp2 and smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse and temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue and temp1 ;
if ( t62 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t63 = rcvd_evt.tfalse and temp2 ;
if ( t63 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t64 = rcvd_evt.ttrue and temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse and rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue and rcvd_evt.tfalse ;
if ( t66 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t67 = rcvd_evt.tfalse and rcvd_evt.ttrue ;
if ( t67 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t68 = rcvd_evt.ttrue and rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse and false ;
if ( t69 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue and false ;
if ( t70 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t71 = rcvd_evt.tfalse and true ;
if ( t71 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t72 = rcvd_evt.ttrue and true ;
if ( t72 == true )
  LOG::LogSuccess(message:" and rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse and self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue and self.bfalse ;
if ( t74 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t75 = rcvd_evt.tfalse and self.btrue ;
if ( t75 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t76 = rcvd_evt.ttrue and self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse and self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue and self.r9bfalse ;
if ( t78 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t79 = rcvd_evt.tfalse and self.r9btrue ;
if ( t79 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t80 = rcvd_evt.ttrue and self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse and saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse and saf.btrue ;
if ( t82 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t83 = rcvd_evt.ttrue and saf.bfalse ;
if ( t83 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t84 = rcvd_evt.ttrue and saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse and smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse and smf.btrue ;
if ( t86 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t87 = rcvd_evt.ttrue and smf.bfalse ;
if ( t87 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t88 = rcvd_evt.ttrue and smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse and sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse and sor.btrue ;
if ( t90 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t91 = rcvd_evt.ttrue and sor.bfalse ;
if ( t91 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t92 = rcvd_evt.ttrue and sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse and sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse and sar.btrue ;
if ( t94 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t95 = rcvd_evt.ttrue and sar.bfalse ;
if ( t95 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t96 = rcvd_evt.ttrue and sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse and smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse and smr.btrue ;
if ( t98 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t99 = rcvd_evt.ttrue and smr.bfalse ;
if ( t99 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t100 = rcvd_evt.ttrue and smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse and saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse and saf.r11btrue ;
if ( t102 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t103 = rcvd_evt.ttrue and saf.r11bfalse ;
if ( t103 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t104 = rcvd_evt.ttrue and saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse and smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse and smf.r11btrue ;
if ( t106 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t107 = rcvd_evt.ttrue and smf.r11bfalse ;
if ( t107 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t108 = rcvd_evt.ttrue and smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse and sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse and sor.r11btrue ;
if ( t110 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t111 = rcvd_evt.ttrue and sor.r11bfalse ;
if ( t111 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t112 = rcvd_evt.ttrue and sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse and sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse and sar.r11btrue ;
if ( t114 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t115 = rcvd_evt.ttrue and sar.r11bfalse ;
if ( t115 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t116 = rcvd_evt.ttrue and sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse and smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse and smr.r11btrue ;
if ( t118 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t119 = rcvd_evt.ttrue and smr.r11bfalse ;
if ( t119 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t120 = rcvd_evt.ttrue and smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("e856e1e2-6dcf-4c7c-adea-e9132b1bb600",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'And test 1b',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("e856e1e2-6dcf-4c7c-adea-e9132b1bb600",
	"29e51d21-90f9-904b-5cb3-ec2ede985fc1",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e856e1e2-6dcf-4c7c-adea-e9132b1bb600",
	"29e51d21-90f9-904b-5cb3-ec2ede985fc1",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("e856e1e2-6dcf-4c7c-adea-e9132b1bb600",
	"d905cf31-a3de-9d99-d944-9c5474933b5b",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e856e1e2-6dcf-4c7c-adea-e9132b1bb600",
	"966313d7-b38d-79dc-41a0-f83cd907e183",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e856e1e2-6dcf-4c7c-adea-e9132b1bb600",
	"966313d7-b38d-79dc-41a0-f83cd907e183",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e856e1e2-6dcf-4c7c-adea-e9132b1bb600",
	"b6dbed9f-6606-41f0-c0da-bef047b9dafb",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e856e1e2-6dcf-4c7c-adea-e9132b1bb600",
	"b6dbed9f-6606-41f0-c0da-bef047b9dafb",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("728c77e1-d2b9-f37e-5349-2c6dedb14618",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"e856e1e2-6dcf-4c7c-adea-e9132b1bb600");
INSERT INTO SM_AH
	VALUES ("728c77e1-d2b9-f37e-5349-2c6dedb14618",
	"69383e03-93a6-153a-cc87-c7410987886c");
INSERT INTO SM_ACT
	VALUES ("728c77e1-d2b9-f37e-5349-2c6dedb14618",
	"69383e03-93a6-153a-cc87-c7410987886c",
	1,
	'assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true and temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse and temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue and temp1 ;
if ( t182 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t183 = self.bfalse and temp2 ;
if ( t183 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t184 = self.btrue and temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" and self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse and rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue and rcvd_evt.tfalse ;
if ( t186 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t187 = self.bfalse and rcvd_evt.ttrue ;
if ( t187 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t188 = self.btrue and rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse and false ;
if ( t189 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue and false ;
if ( t190 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t191 = self.bfalse and true ;
if ( t191 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t192 = self.btrue and true ;
if ( t192 == true )
  LOG::LogSuccess(message:" and self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse and self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue and self.bfalse ;
if ( t194 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t195 = self.bfalse and self.btrue ;
if ( t195 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t196 = self.btrue and self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse and self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue and self.r9bfalse ;
if ( t198 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t199 = self.bfalse and self.r9btrue ;
if ( t199 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t200 = self.btrue and self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse and saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse and saf.btrue ;
if ( t202 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t203 = self.btrue and saf.bfalse ;
if ( t203 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t204 = self.btrue and saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse and smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse and smf.btrue ;
if ( t206 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t207 = self.btrue and smf.bfalse ;
if ( t207 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t208 = self.btrue and smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse and sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse and sor.btrue ;
if ( t210 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t211 = self.btrue and sor.bfalse ;
if ( t211 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t212 = self.btrue and sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse and sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse and sar.btrue ;
if ( t214 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t215 = self.btrue and sar.bfalse ;
if ( t215 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t216 = self.btrue and sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse and smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse and smr.btrue ;
if ( t218 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t219 = self.btrue and smr.bfalse ;
if ( t219 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t220 = self.btrue and smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse and saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse and saf.r11btrue ;
if ( t222 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t223 = self.btrue and saf.r11bfalse ;
if ( t223 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t224 = self.btrue and saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse and smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse and smf.r11btrue ;
if ( t226 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t227 = self.btrue and smf.r11bfalse ;
if ( t227 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t228 = self.btrue and smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse and sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse and sor.r11btrue ;
if ( t230 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t231 = self.btrue and sor.r11bfalse ;
if ( t231 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t232 = self.btrue and sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse and sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse and sar.r11btrue ;
if ( t234 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t235 = self.btrue and sar.r11bfalse ;
if ( t235 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t236 = self.btrue and sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse and smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse and smr.r11btrue ;
if ( t238 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t239 = self.btrue and smr.r11bfalse ;
if ( t239 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t240 = self.btrue and smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse and temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue and temp1 ;
if ( t242 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t243 = self.r9bfalse and temp2 ;
if ( t243 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t244 = self.r9btrue and temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse and rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue and rcvd_evt.tfalse ;
if ( t246 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t247 = self.r9bfalse and rcvd_evt.ttrue ;
if ( t247 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t248 = self.r9btrue and rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse and false ;
if ( t249 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue and false ;
if ( t250 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t251 = self.r9bfalse and true ;
if ( t251 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t252 = self.r9btrue and true ;
if ( t252 == true )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse and self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue and self.bfalse ;
if ( t254 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t255 = self.r9bfalse and self.btrue ;
if ( t255 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t256 = self.r9btrue and self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse and self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue and self.r9bfalse ;
if ( t258 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t259 = self.r9bfalse and self.r9btrue ;
if ( t259 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t260 = self.r9btrue and self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse and saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse and saf.btrue ;
if ( t262 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t263 = self.r9btrue and saf.bfalse ;
if ( t263 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t264 = self.r9btrue and saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse and smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse and smf.btrue ;
if ( t266 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t267 = self.r9btrue and smf.bfalse ;
if ( t267 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t268 = self.r9btrue and smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse and sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse and sor.btrue ;
if ( t270 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t271 = self.r9btrue and sor.bfalse ;
if ( t271 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t272 = self.r9btrue and sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse and sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse and sar.btrue ;
if ( t274 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t275 = self.r9btrue and sar.bfalse ;
if ( t275 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t276 = self.r9btrue and sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse and smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse and smr.btrue ;
if ( t278 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t279 = self.r9btrue and smr.bfalse ;
if ( t279 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t280 = self.r9btrue and smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse and saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse and saf.r11btrue ;
if ( t282 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t283 = self.r9btrue and saf.r11bfalse ;
if ( t283 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t284 = self.r9btrue and saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse and smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse and smf.r11btrue ;
if ( t286 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t287 = self.r9btrue and smf.r11bfalse ;
if ( t287 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t288 = self.r9btrue and smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse and sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse and sor.r11btrue ;
if ( t290 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t291 = self.r9btrue and sor.r11bfalse ;
if ( t291 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t292 = self.r9btrue and sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse and sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse and sar.r11btrue ;
if ( t294 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t295 = self.r9btrue and sar.r11bfalse ;
if ( t295 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t296 = self.r9btrue and sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse and smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse and smr.r11btrue ;
if ( t298 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t299 = self.r9btrue and smr.r11bfalse ;
if ( t299 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t300 = self.r9btrue and smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("89fd7d88-c05e-7e6b-7885-436ceeef864b",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'And test 2',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("89fd7d88-c05e-7e6b-7885-436ceeef864b",
	"29e51d21-90f9-904b-5cb3-ec2ede985fc1",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89fd7d88-c05e-7e6b-7885-436ceeef864b",
	"29e51d21-90f9-904b-5cb3-ec2ede985fc1",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("89fd7d88-c05e-7e6b-7885-436ceeef864b",
	"d905cf31-a3de-9d99-d944-9c5474933b5b",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89fd7d88-c05e-7e6b-7885-436ceeef864b",
	"d905cf31-a3de-9d99-d944-9c5474933b5b",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("89fd7d88-c05e-7e6b-7885-436ceeef864b",
	"966313d7-b38d-79dc-41a0-f83cd907e183",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("89fd7d88-c05e-7e6b-7885-436ceeef864b",
	"b6dbed9f-6606-41f0-c0da-bef047b9dafb",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89fd7d88-c05e-7e6b-7885-436ceeef864b",
	"b6dbed9f-6606-41f0-c0da-bef047b9dafb",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("e6deeead-f72d-f728-36c3-0f8be7bcd580",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"89fd7d88-c05e-7e6b-7885-436ceeef864b");
INSERT INTO SM_AH
	VALUES ("e6deeead-f72d-f728-36c3-0f8be7bcd580",
	"69383e03-93a6-153a-cc87-c7410987886c");
INSERT INTO SM_ACT
	VALUES ("e6deeead-f72d-f728-36c3-0f8be7bcd580",
	"69383e03-93a6-153a-cc87-c7410987886c",
	1,
	'//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse and temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue and temp1 ;
if ( t302 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t303 = saf.bfalse and temp2 ;
if ( t303 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t304 = saf.btrue and temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse and rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue and rcvd_evt.tfalse ;
if ( t306 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t307 = saf.bfalse and rcvd_evt.ttrue ;
if ( t307 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t308 = saf.btrue and rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse and false ;
if ( t309 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue and false ;
if ( t310 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t311 = saf.bfalse and true ;
if ( t311 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t312 = saf.btrue and true ;
if ( t312 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse and self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue and self.bfalse ;
if ( t314 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t315 = saf.bfalse and self.btrue ;
if ( t315 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t316 = saf.btrue and self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse and self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue and self.r9bfalse ;
if ( t318 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t319 = saf.bfalse and self.r9btrue ;
if ( t319 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t320 = saf.btrue and self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse and saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse and saf.btrue ;
if ( t322 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t323 = saf.btrue and saf.bfalse ;
if ( t323 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t324 = saf.btrue and saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse and smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse and smf.btrue ;
if ( t326 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t327 = saf.btrue and smf.bfalse ;
if ( t327 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t328 = saf.btrue and smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse and sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse and sor.btrue ;
if ( t330 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t331 = saf.btrue and sor.bfalse ;
if ( t331 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t332 = saf.btrue and sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse and sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse and sar.btrue ;
if ( t334 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t335 = saf.btrue and sar.bfalse ;
if ( t335 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t336 = saf.btrue and sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse and smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse and smr.btrue ;
if ( t338 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t339 = saf.btrue and smr.bfalse ;
if ( t339 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t340 = saf.btrue and smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse and saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse and saf.r11btrue ;
if ( t342 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t343 = saf.btrue and saf.r11bfalse ;
if ( t343 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t344 = saf.btrue and saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse and smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse and smf.r11btrue ;
if ( t346 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t347 = saf.btrue and smf.r11bfalse ;
if ( t347 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t348 = saf.btrue and smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse and sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse and sor.r11btrue ;
if ( t350 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t351 = saf.btrue and sor.r11bfalse ;
if ( t351 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t352 = saf.btrue and sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse and sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse and sar.r11btrue ;
if ( t354 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t355 = saf.btrue and sar.r11bfalse ;
if ( t355 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t356 = saf.btrue and sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse and smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse and smr.r11btrue ;
if ( t358 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t359 = saf.btrue and smr.r11bfalse ;
if ( t359 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t360 = saf.btrue and smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse and temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue and temp1 ;
if ( t602 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t603 = saf.r11bfalse and temp2 ;
if ( t603 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t604 = saf.r11btrue and temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse and rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue and rcvd_evt.tfalse ;
if ( t606 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t607 = saf.r11bfalse and rcvd_evt.ttrue ;
if ( t607 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t608 = saf.r11btrue and rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse and false ;
if ( t609 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue and false ;
if ( t610 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t611 = saf.r11bfalse and true ;
if ( t611 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t612 = saf.r11btrue and true ;
if ( t612 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse and self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue and self.bfalse ;
if ( t614 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t615 = saf.r11bfalse and self.btrue ;
if ( t615 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t616 = saf.r11btrue and self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse and self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue and self.r9bfalse ;
if ( t618 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t619 = saf.r11bfalse and self.r9btrue ;
if ( t619 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t620 = saf.r11btrue and self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse and saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse and saf.btrue ;
if ( t622 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t623 = saf.r11btrue and saf.bfalse ;
if ( t623 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t624 = saf.r11btrue and saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse and smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse and smf.btrue ;
if ( t626 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t627 = saf.r11btrue and smf.bfalse ;
if ( t627 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t628 = saf.r11btrue and smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse and sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse and sor.btrue ;
if ( t630 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t631 = saf.r11btrue and sor.bfalse ;
if ( t631 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t632 = saf.r11btrue and sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse and sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse and sar.btrue ;
if ( t634 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t635 = saf.r11btrue and sar.bfalse ;
if ( t635 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t636 = saf.r11btrue and sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse and smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse and smr.btrue ;
if ( t638 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t639 = saf.r11btrue and smr.bfalse ;
if ( t639 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t640 = saf.r11btrue and smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse and saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse and saf.r11btrue ;
if ( t642 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t643 = saf.r11btrue and saf.r11bfalse ;
if ( t643 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t644 = saf.r11btrue and saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse and smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse and smf.r11btrue ;
if ( t646 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t647 = saf.r11btrue and smf.r11bfalse ;
if ( t647 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t648 = saf.r11btrue and smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse and sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse and sor.r11btrue ;
if ( t650 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t651 = saf.r11btrue and sor.r11bfalse ;
if ( t651 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t652 = saf.r11btrue and sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse and sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse and sar.r11btrue ;
if ( t654 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t655 = saf.r11btrue and sar.r11bfalse ;
if ( t655 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t656 = saf.r11btrue and sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse and smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse and smr.r11btrue ;
if ( t658 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t659 = saf.r11btrue and smr.r11bfalse ;
if ( t659 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t660 = saf.r11btrue and smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed and (user-defined type) test") ;

//generate event to commence next test
generate UBT3:''Start or test''(tfalse:false, ttrue:true) to self;
 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("1caa4de5-e71d-1dd9-f471-d76e454bbb36",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1a',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("1caa4de5-e71d-1dd9-f471-d76e454bbb36",
	"29e51d21-90f9-904b-5cb3-ec2ede985fc1",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1caa4de5-e71d-1dd9-f471-d76e454bbb36",
	"29e51d21-90f9-904b-5cb3-ec2ede985fc1",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1caa4de5-e71d-1dd9-f471-d76e454bbb36",
	"d905cf31-a3de-9d99-d944-9c5474933b5b",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1caa4de5-e71d-1dd9-f471-d76e454bbb36",
	"d905cf31-a3de-9d99-d944-9c5474933b5b",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1caa4de5-e71d-1dd9-f471-d76e454bbb36",
	"966313d7-b38d-79dc-41a0-f83cd907e183",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1caa4de5-e71d-1dd9-f471-d76e454bbb36",
	"966313d7-b38d-79dc-41a0-f83cd907e183",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("1caa4de5-e71d-1dd9-f471-d76e454bbb36",
	"b6dbed9f-6606-41f0-c0da-bef047b9dafb",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("fadaf692-ec07-70d4-3ef0-79ccd3ec1dba",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"1caa4de5-e71d-1dd9-f471-d76e454bbb36");
INSERT INTO SM_AH
	VALUES ("fadaf692-ec07-70d4-3ef0-79ccd3ec1dba",
	"69383e03-93a6-153a-cc87-c7410987886c");
INSERT INTO SM_ACT
	VALUES ("fadaf692-ec07-70d4-3ef0-79ccd3ec1dba",
	"69383e03-93a6-153a-cc87-c7410987886c",
	1,
	'LOG::LogInfo(message:"Starting or (user-defined type) test") ;

//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    rcvd_evt
assign t5 = temp1 or rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 or rcvd_evt.ttrue ;
if ( t6 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t7 = temp2 or rcvd_evt.tfalse ;
if ( t7 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t8 = temp2 or rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 or false ;
if ( t9 == false )
  LOG::LogSuccess(message:" or local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 or true ;
if ( t10 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t11 = temp2 or false ;
if ( t11 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t12 = temp2 or true ;
if ( t12 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 or self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" or local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 or self.btrue ;
if ( t14 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t15 = temp2 or self.bfalse ;
if ( t15 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t16 = temp2 or self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 or self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 or self.r9btrue ;
if ( t18 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t19 = temp2 or self.r9bfalse ;
if ( t19 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t20 = temp2 or self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of UOBT;
assign t21 = temp1 or saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 or saf.btrue ;
if ( t22 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t23 = temp2 or saf.bfalse ;
if ( t23 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t24 = temp2 or saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of UOBT;
for each smf in smfs
assign t25 = temp1 or smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 or smf.btrue ;
if ( t26 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t27 = temp2 or smf.bfalse ;
if ( t27 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t28 = temp2 or smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->UOBT[R12];
assign t29 = temp1 or sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 or sor.btrue ;
if ( t30 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t31 = temp2 or sor.bfalse ;
if ( t31 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t32 = temp2 or sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->UOBT[R13];
assign t33 = temp1 or sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 or sar.btrue ;
if ( t34 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t35 = temp2 or sar.bfalse ;
if ( t35 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t36 = temp2 or sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->UOBT[R13];
for each smr in smrs
assign t37 = temp1 or smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 or smr.btrue ;
if ( t38 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t39 = temp2 or smr.bfalse ;
if ( t39 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t40 = temp2 or smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 or saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 or saf.r11btrue ;
if ( t42 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t43 = temp2 or saf.r11bfalse ;
if ( t43 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t44 = temp2 or saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 or smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 or smf.r11btrue ;
if ( t46 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t47 = temp2 or smf.r11bfalse ;
if ( t47 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t48 = temp2 or smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 or sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 or sor.r11btrue ;
if ( t50 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t51 = temp2 or sor.r11bfalse ;
if ( t51 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t52 = temp2 or sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 or sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 or sar.r11btrue ;
if ( t54 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t55 = temp2 or sar.r11bfalse ;
if ( t55 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t56 = temp2 or sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 or smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 or smr.r11btrue ;
if ( t58 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t59 = temp2 or smr.r11bfalse ;
if ( t59 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t60 = temp2 or smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse or temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue or temp1 ;
if ( t62 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t63 = rcvd_evt.tfalse or temp2 ;
if ( t63 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t64 = rcvd_evt.ttrue or temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse or rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue or rcvd_evt.tfalse ;
if ( t66 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t67 = rcvd_evt.tfalse or rcvd_evt.ttrue ;
if ( t67 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t68 = rcvd_evt.ttrue or rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse or false ;
if ( t69 == false )
  LOG::LogSuccess(message:" or rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue or false ;
if ( t70 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t71 = rcvd_evt.tfalse or true ;
if ( t71 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t72 = rcvd_evt.ttrue or true ;
if ( t72 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse or self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue or self.bfalse ;
if ( t74 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t75 = rcvd_evt.tfalse or self.btrue ;
if ( t75 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t76 = rcvd_evt.ttrue or self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse or self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue or self.r9bfalse ;
if ( t78 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t79 = rcvd_evt.tfalse or self.r9btrue ;
if ( t79 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t80 = rcvd_evt.ttrue or self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse or saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse or saf.btrue ;
if ( t82 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t83 = rcvd_evt.ttrue or saf.bfalse ;
if ( t83 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t84 = rcvd_evt.ttrue or saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse or smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse or smf.btrue ;
if ( t86 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t87 = rcvd_evt.ttrue or smf.bfalse ;
if ( t87 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t88 = rcvd_evt.ttrue or smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse or sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse or sor.btrue ;
if ( t90 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t91 = rcvd_evt.ttrue or sor.bfalse ;
if ( t91 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t92 = rcvd_evt.ttrue or sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse or sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse or sar.btrue ;
if ( t94 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t95 = rcvd_evt.ttrue or sar.bfalse ;
if ( t95 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t96 = rcvd_evt.ttrue or sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse or smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse or smr.btrue ;
if ( t98 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t99 = rcvd_evt.ttrue or smr.bfalse ;
if ( t99 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t100 = rcvd_evt.ttrue or smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse or saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse or saf.r11btrue ;
if ( t102 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t103 = rcvd_evt.ttrue or saf.r11bfalse ;
if ( t103 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t104 = rcvd_evt.ttrue or saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse or smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse or smf.r11btrue ;
if ( t106 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t107 = rcvd_evt.ttrue or smf.r11bfalse ;
if ( t107 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t108 = rcvd_evt.ttrue or smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse or sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse or sor.r11btrue ;
if ( t110 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t111 = rcvd_evt.ttrue or sor.r11bfalse ;
if ( t111 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t112 = rcvd_evt.ttrue or sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse or sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse or sar.r11btrue ;
if ( t114 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t115 = rcvd_evt.ttrue or sar.r11bfalse ;
if ( t115 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t116 = rcvd_evt.ttrue or sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse or smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse or smr.r11btrue ;
if ( t118 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t119 = rcvd_evt.ttrue or smr.r11bfalse ;
if ( t119 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t120 = rcvd_evt.ttrue or smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT4:''Continue or test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("25142a90-495f-5c90-a454-fd721ca85016",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1b',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("25142a90-495f-5c90-a454-fd721ca85016",
	"29e51d21-90f9-904b-5cb3-ec2ede985fc1",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("25142a90-495f-5c90-a454-fd721ca85016",
	"29e51d21-90f9-904b-5cb3-ec2ede985fc1",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("25142a90-495f-5c90-a454-fd721ca85016",
	"d905cf31-a3de-9d99-d944-9c5474933b5b",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("25142a90-495f-5c90-a454-fd721ca85016",
	"d905cf31-a3de-9d99-d944-9c5474933b5b",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("25142a90-495f-5c90-a454-fd721ca85016",
	"966313d7-b38d-79dc-41a0-f83cd907e183",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("25142a90-495f-5c90-a454-fd721ca85016",
	"966313d7-b38d-79dc-41a0-f83cd907e183",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("25142a90-495f-5c90-a454-fd721ca85016",
	"b6dbed9f-6606-41f0-c0da-bef047b9dafb",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("ec811888-83bb-020d-a36f-b4f21f492af3",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"25142a90-495f-5c90-a454-fd721ca85016");
INSERT INTO SM_AH
	VALUES ("ec811888-83bb-020d-a36f-b4f21f492af3",
	"69383e03-93a6-153a-cc87-c7410987886c");
INSERT INTO SM_ACT
	VALUES ("ec811888-83bb-020d-a36f-b4f21f492af3",
	"69383e03-93a6-153a-cc87-c7410987886c",
	1,
	'
assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true or temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse or temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" or self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue or temp1 ;
if ( t182 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t183 = self.bfalse or temp2 ;
if ( t183 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t184 = self.btrue or temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse or rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue or rcvd_evt.tfalse ;
if ( t186 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t187 = self.bfalse or rcvd_evt.ttrue ;
if ( t187 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t188 = self.btrue or rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse or false ;
if ( t189 == false )
  LOG::LogSuccess(message:" or self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue or false ;
if ( t190 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t191 = self.bfalse or true ;
if ( t191 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t192 = self.btrue or true ;
if ( t192 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse or self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue or self.bfalse ;
if ( t194 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t195 = self.bfalse or self.btrue ;
if ( t195 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t196 = self.btrue or self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse or self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue or self.r9bfalse ;
if ( t198 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t199 = self.bfalse or self.r9btrue ;
if ( t199 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t200 = self.btrue or self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse or saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse or saf.btrue ;
if ( t202 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t203 = self.btrue or saf.bfalse ;
if ( t203 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t204 = self.btrue or saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse or smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse or smf.btrue ;
if ( t206 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t207 = self.btrue or smf.bfalse ;
if ( t207 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t208 = self.btrue or smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse or sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse or sor.btrue ;
if ( t210 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t211 = self.btrue or sor.bfalse ;
if ( t211 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t212 = self.btrue or sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse or sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse or sar.btrue ;
if ( t214 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t215 = self.btrue or sar.bfalse ;
if ( t215 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t216 = self.btrue or sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse or smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse or smr.btrue ;
if ( t218 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t219 = self.btrue or smr.bfalse ;
if ( t219 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t220 = self.btrue or smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse or saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse or saf.r11btrue ;
if ( t222 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t223 = self.btrue or saf.r11bfalse ;
if ( t223 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t224 = self.btrue or saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse or smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse or smf.r11btrue ;
if ( t226 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t227 = self.btrue or smf.r11bfalse ;
if ( t227 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t228 = self.btrue or smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse or sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse or sor.r11btrue ;
if ( t230 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t231 = self.btrue or sor.r11bfalse ;
if ( t231 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t232 = self.btrue or sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse or sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse or sar.r11btrue ;
if ( t234 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t235 = self.btrue or sar.r11bfalse ;
if ( t235 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t236 = self.btrue or sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse or smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse or smr.r11btrue ;
if ( t238 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t239 = self.btrue or smr.r11bfalse ;
if ( t239 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t240 = self.btrue or smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse or temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue or temp1 ;
if ( t242 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t243 = self.r9bfalse or temp2 ;
if ( t243 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t244 = self.r9btrue or temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse or rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue or rcvd_evt.tfalse ;
if ( t246 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t247 = self.r9bfalse or rcvd_evt.ttrue ;
if ( t247 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t248 = self.r9btrue or rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse or false ;
if ( t249 == false )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue or false ;
if ( t250 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t251 = self.r9bfalse or true ;
if ( t251 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t252 = self.r9btrue or true ;
if ( t252 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse or self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue or self.bfalse ;
if ( t254 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t255 = self.r9bfalse or self.btrue ;
if ( t255 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t256 = self.r9btrue or self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse or self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue or self.r9bfalse ;
if ( t258 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t259 = self.r9bfalse or self.r9btrue ;
if ( t259 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t260 = self.r9btrue or self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse or saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse or saf.btrue ;
if ( t262 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t263 = self.r9btrue or saf.bfalse ;
if ( t263 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t264 = self.r9btrue or saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse or smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse or smf.btrue ;
if ( t266 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t267 = self.r9btrue or smf.bfalse ;
if ( t267 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t268 = self.r9btrue or smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse or sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse or sor.btrue ;
if ( t270 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t271 = self.r9btrue or sor.bfalse ;
if ( t271 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t272 = self.r9btrue or sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse or sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse or sar.btrue ;
if ( t274 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t275 = self.r9btrue or sar.bfalse ;
if ( t275 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t276 = self.r9btrue or sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse or smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse or smr.btrue ;
if ( t278 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t279 = self.r9btrue or smr.bfalse ;
if ( t279 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t280 = self.r9btrue or smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse or saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse or saf.r11btrue ;
if ( t282 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t283 = self.r9btrue or saf.r11bfalse ;
if ( t283 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t284 = self.r9btrue or saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse or smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse or smf.r11btrue ;
if ( t286 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t287 = self.r9btrue or smf.r11bfalse ;
if ( t287 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t288 = self.r9btrue or smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse or sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse or sor.r11btrue ;
if ( t290 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t291 = self.r9btrue or sor.r11bfalse ;
if ( t291 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t292 = self.r9btrue or sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse or sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse or sar.r11btrue ;
if ( t294 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t295 = self.r9btrue or sar.r11bfalse ;
if ( t295 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t296 = self.r9btrue or sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse or smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse or smr.r11btrue ;
if ( t298 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t299 = self.r9btrue or smr.r11bfalse ;
if ( t299 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t300 = self.r9btrue or smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT4:''Continue or test''( ttrue: true, tfalse: false ) to self;


',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("51407e56-45d2-a707-becc-f4cfd371c4af",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'Or test 2',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("51407e56-45d2-a707-becc-f4cfd371c4af",
	"29e51d21-90f9-904b-5cb3-ec2ede985fc1",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("51407e56-45d2-a707-becc-f4cfd371c4af",
	"29e51d21-90f9-904b-5cb3-ec2ede985fc1",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("51407e56-45d2-a707-becc-f4cfd371c4af",
	"d905cf31-a3de-9d99-d944-9c5474933b5b",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("51407e56-45d2-a707-becc-f4cfd371c4af",
	"d905cf31-a3de-9d99-d944-9c5474933b5b",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("51407e56-45d2-a707-becc-f4cfd371c4af",
	"966313d7-b38d-79dc-41a0-f83cd907e183",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("51407e56-45d2-a707-becc-f4cfd371c4af",
	"966313d7-b38d-79dc-41a0-f83cd907e183",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("51407e56-45d2-a707-becc-f4cfd371c4af",
	"b6dbed9f-6606-41f0-c0da-bef047b9dafb",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("51407e56-45d2-a707-becc-f4cfd371c4af",
	"b6dbed9f-6606-41f0-c0da-bef047b9dafb",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("27da4804-80a0-18e7-6d26-7748fa6c02b3",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"51407e56-45d2-a707-becc-f4cfd371c4af");
INSERT INTO SM_AH
	VALUES ("27da4804-80a0-18e7-6d26-7748fa6c02b3",
	"69383e03-93a6-153a-cc87-c7410987886c");
INSERT INTO SM_ACT
	VALUES ("27da4804-80a0-18e7-6d26-7748fa6c02b3",
	"69383e03-93a6-153a-cc87-c7410987886c",
	1,
	'//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse or temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue or temp1 ;
if ( t302 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t303 = saf.bfalse or temp2 ;
if ( t303 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t304 = saf.btrue or temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse or rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue or rcvd_evt.tfalse ;
if ( t306 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t307 = saf.bfalse or rcvd_evt.ttrue ;
if ( t307 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t308 = saf.btrue or rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse or false ;
if ( t309 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue or false ;
if ( t310 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t311 = saf.bfalse or true ;
if ( t311 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t312 = saf.btrue or true ;
if ( t312 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse or self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue or self.bfalse ;
if ( t314 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t315 = saf.bfalse or self.btrue ;
if ( t315 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t316 = saf.btrue or self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse or self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue or self.r9bfalse ;
if ( t318 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t319 = saf.bfalse or self.r9btrue ;
if ( t319 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t320 = saf.btrue or self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse or saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse or saf.btrue ;
if ( t322 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t323 = saf.btrue or saf.bfalse ;
if ( t323 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t324 = saf.btrue or saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse or smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse or smf.btrue ;
if ( t326 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t327 = saf.btrue or smf.bfalse ;
if ( t327 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t328 = saf.btrue or smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse or sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse or sor.btrue ;
if ( t330 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t331 = saf.btrue or sor.bfalse ;
if ( t331 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t332 = saf.btrue or sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse or sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse or sar.btrue ;
if ( t334 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t335 = saf.btrue or sar.bfalse ;
if ( t335 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t336 = saf.btrue or sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse or smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse or smr.btrue ;
if ( t338 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t339 = saf.btrue or smr.bfalse ;
if ( t339 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t340 = saf.btrue or smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse or saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse or saf.r11btrue ;
if ( t342 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t343 = saf.btrue or saf.r11bfalse ;
if ( t343 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t344 = saf.btrue or saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse or smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse or smf.r11btrue ;
if ( t346 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t347 = saf.btrue or smf.r11bfalse ;
if ( t347 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t348 = saf.btrue or smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse or sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse or sor.r11btrue ;
if ( t350 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t351 = saf.btrue or sor.r11bfalse ;
if ( t351 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t352 = saf.btrue or sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse or sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse or sar.r11btrue ;
if ( t354 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t355 = saf.btrue or sar.r11bfalse ;
if ( t355 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t356 = saf.btrue or sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse or smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse or smr.r11btrue ;
if ( t358 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t359 = saf.btrue or smr.r11bfalse ;
if ( t359 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t360 = saf.btrue or smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse or temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue or temp1 ;
if ( t602 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t603 = saf.r11bfalse or temp2 ;
if ( t603 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t604 = saf.r11btrue or temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse or rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue or rcvd_evt.tfalse ;
if ( t606 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t607 = saf.r11bfalse or rcvd_evt.ttrue ;
if ( t607 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t608 = saf.r11btrue or rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse or false ;
if ( t609 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue or false ;
if ( t610 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t611 = saf.r11bfalse or true ;
if ( t611 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t612 = saf.r11btrue or true ;
if ( t612 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse or self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue or self.bfalse ;
if ( t614 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t615 = saf.r11bfalse or self.btrue ;
if ( t615 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t616 = saf.r11btrue or self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse or self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue or self.r9bfalse ;
if ( t618 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t619 = saf.r11bfalse or self.r9btrue ;
if ( t619 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t620 = saf.r11btrue or self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse or saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse or saf.btrue ;
if ( t622 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t623 = saf.r11btrue or saf.bfalse ;
if ( t623 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t624 = saf.r11btrue or saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse or smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse or smf.btrue ;
if ( t626 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t627 = saf.r11btrue or smf.bfalse ;
if ( t627 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t628 = saf.r11btrue or smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse or sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse or sor.btrue ;
if ( t630 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t631 = saf.r11btrue or sor.bfalse ;
if ( t631 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t632 = saf.r11btrue or sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse or sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse or sar.btrue ;
if ( t634 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t635 = saf.r11btrue or sar.bfalse ;
if ( t635 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t636 = saf.r11btrue or sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse or smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse or smr.btrue ;
if ( t638 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t639 = saf.r11btrue or smr.bfalse ;
if ( t639 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t640 = saf.r11btrue or smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse or saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse or saf.r11btrue ;
if ( t642 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t643 = saf.r11btrue or saf.r11bfalse ;
if ( t643 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t644 = saf.r11btrue or saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse or smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse or smf.r11btrue ;
if ( t646 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t647 = saf.r11btrue or smf.r11bfalse ;
if ( t647 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t648 = saf.r11btrue or smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse or sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse or sor.r11btrue ;
if ( t650 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t651 = saf.r11btrue or sor.r11bfalse ;
if ( t651 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t652 = saf.r11btrue or sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse or sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse or sar.r11btrue ;
if ( t654 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t655 = saf.r11btrue or sar.r11bfalse ;
if ( t655 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t656 = saf.r11btrue or sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse or smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse or smr.r11btrue ;
if ( t658 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t659 = saf.r11btrue or smr.r11bfalse ;
if ( t659 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t660 = saf.r11btrue or smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed or (user-defined type) test") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
 
 

',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("961493c7-ac97-75a1-8738-35ce6d8c8e91",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"94ca00f6-9807-d198-ee7a-27a86d02f81c",
	"29e51d21-90f9-904b-5cb3-ec2ede985fc1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("9bb817be-f583-293b-4a9a-38643db18a0f",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"961493c7-ac97-75a1-8738-35ce6d8c8e91");
INSERT INTO SM_AH
	VALUES ("9bb817be-f583-293b-4a9a-38643db18a0f",
	"69383e03-93a6-153a-cc87-c7410987886c");
INSERT INTO SM_ACT
	VALUES ("9bb817be-f583-293b-4a9a-38643db18a0f",
	"69383e03-93a6-153a-cc87-c7410987886c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("961493c7-ac97-75a1-8738-35ce6d8c8e91",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"94ca00f6-9807-d198-ee7a-27a86d02f81c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("6d12f674-d4ca-ab3e-0a7a-a34131024470",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"89fd7d88-c05e-7e6b-7885-436ceeef864b",
	"966313d7-b38d-79dc-41a0-f83cd907e183",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("0cfe037b-d1a1-47d7-7fe0-d0ec4d46fefc",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"6d12f674-d4ca-ab3e-0a7a-a34131024470");
INSERT INTO SM_AH
	VALUES ("0cfe037b-d1a1-47d7-7fe0-d0ec4d46fefc",
	"69383e03-93a6-153a-cc87-c7410987886c");
INSERT INTO SM_ACT
	VALUES ("0cfe037b-d1a1-47d7-7fe0-d0ec4d46fefc",
	"69383e03-93a6-153a-cc87-c7410987886c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("6d12f674-d4ca-ab3e-0a7a-a34131024470",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"1caa4de5-e71d-1dd9-f471-d76e454bbb36",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("343b25d2-9730-b3c6-f285-fd4c7b69e37c",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"94ca00f6-9807-d198-ee7a-27a86d02f81c",
	"d905cf31-a3de-9d99-d944-9c5474933b5b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("4adc0cc6-b082-27d1-ac9a-a957577285ab",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"343b25d2-9730-b3c6-f285-fd4c7b69e37c");
INSERT INTO SM_AH
	VALUES ("4adc0cc6-b082-27d1-ac9a-a957577285ab",
	"69383e03-93a6-153a-cc87-c7410987886c");
INSERT INTO SM_ACT
	VALUES ("4adc0cc6-b082-27d1-ac9a-a957577285ab",
	"69383e03-93a6-153a-cc87-c7410987886c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("343b25d2-9730-b3c6-f285-fd4c7b69e37c",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"e856e1e2-6dcf-4c7c-adea-e9132b1bb600",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("df711df7-b52b-f9f4-1daf-1faa5eb3698c",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"e856e1e2-6dcf-4c7c-adea-e9132b1bb600",
	"d905cf31-a3de-9d99-d944-9c5474933b5b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("7fd75d33-c6f9-0cfe-e51a-756ec339d17f",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"df711df7-b52b-f9f4-1daf-1faa5eb3698c");
INSERT INTO SM_AH
	VALUES ("7fd75d33-c6f9-0cfe-e51a-756ec339d17f",
	"69383e03-93a6-153a-cc87-c7410987886c");
INSERT INTO SM_ACT
	VALUES ("7fd75d33-c6f9-0cfe-e51a-756ec339d17f",
	"69383e03-93a6-153a-cc87-c7410987886c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("df711df7-b52b-f9f4-1daf-1faa5eb3698c",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"89fd7d88-c05e-7e6b-7885-436ceeef864b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("60b1be3f-099c-2d6e-1a66-521cf72e6bb6",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"1caa4de5-e71d-1dd9-f471-d76e454bbb36",
	"b6dbed9f-6606-41f0-c0da-bef047b9dafb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("1d08d4d7-f597-b6e2-e7be-0c477f9561b6",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"60b1be3f-099c-2d6e-1a66-521cf72e6bb6");
INSERT INTO SM_AH
	VALUES ("1d08d4d7-f597-b6e2-e7be-0c477f9561b6",
	"69383e03-93a6-153a-cc87-c7410987886c");
INSERT INTO SM_ACT
	VALUES ("1d08d4d7-f597-b6e2-e7be-0c477f9561b6",
	"69383e03-93a6-153a-cc87-c7410987886c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("60b1be3f-099c-2d6e-1a66-521cf72e6bb6",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"25142a90-495f-5c90-a454-fd721ca85016",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("124933f0-be4f-4b48-43da-d36851efe3c1",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"25142a90-495f-5c90-a454-fd721ca85016",
	"b6dbed9f-6606-41f0-c0da-bef047b9dafb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("9a32b08b-6f04-e668-12db-a270112878f0",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"124933f0-be4f-4b48-43da-d36851efe3c1");
INSERT INTO SM_AH
	VALUES ("9a32b08b-6f04-e668-12db-a270112878f0",
	"69383e03-93a6-153a-cc87-c7410987886c");
INSERT INTO SM_ACT
	VALUES ("9a32b08b-6f04-e668-12db-a270112878f0",
	"69383e03-93a6-153a-cc87-c7410987886c",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("124933f0-be4f-4b48-43da-d36851efe3c1",
	"69383e03-93a6-153a-cc87-c7410987886c",
	"51407e56-45d2-a707-becc-f4cfd371c4af",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("a150dccc-b513-70da-2050-f1e488ba469f",
	8,
	"69383e03-93a6-153a-cc87-c7410987886c",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("e7bcfdbe-b57b-6a25-a5bb-00fdeb988d02",
	"a150dccc-b513-70da-2050-f1e488ba469f",
	"94ca00f6-9807-d198-ee7a-27a86d02f81c",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a');
INSERT INTO GD_SHP
	VALUES ("e7bcfdbe-b57b-6a25-a5bb-00fdeb988d02");
INSERT INTO GD_NCS
	VALUES ("e7bcfdbe-b57b-6a25-a5bb-00fdeb988d02");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"e7bcfdbe-b57b-6a25-a5bb-00fdeb988d02");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1264.000000,
	"e7bcfdbe-b57b-6a25-a5bb-00fdeb988d02",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e7bcfdbe-b57b-6a25-a5bb-00fdeb988d02",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c74ded7d-d459-887f-ff9d-e9977c69f9a1",
	1872.000000,
	1296.000000,
	"e7bcfdbe-b57b-6a25-a5bb-00fdeb988d02");
INSERT INTO DIM_CON
	VALUES ("64acd397-cdcf-e957-5913-1773c761da2a",
	1824.000000,
	1264.000000,
	"e7bcfdbe-b57b-6a25-a5bb-00fdeb988d02");
INSERT INTO DIM_CON
	VALUES ("2e25079e-a8be-a464-ea1c-e850c9b59792",
	1792.000000,
	1344.000000,
	"e7bcfdbe-b57b-6a25-a5bb-00fdeb988d02");
INSERT INTO GD_GE
	VALUES ("1f33434e-3d77-a1d3-ecd2-17b9acfaf590",
	"a150dccc-b513-70da-2050-f1e488ba469f",
	"e856e1e2-6dcf-4c7c-adea-e9132b1bb600",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1b');
INSERT INTO GD_SHP
	VALUES ("1f33434e-3d77-a1d3-ecd2-17b9acfaf590");
INSERT INTO GD_NCS
	VALUES ("1f33434e-3d77-a1d3-ecd2-17b9acfaf590");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"1f33434e-3d77-a1d3-ecd2-17b9acfaf590");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1456.000000,
	"1f33434e-3d77-a1d3-ecd2-17b9acfaf590",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1f33434e-3d77-a1d3-ecd2-17b9acfaf590",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("44521025-a4a4-0318-65bc-b68faeb0cac3",
	1792.000000,
	1456.000000,
	"1f33434e-3d77-a1d3-ecd2-17b9acfaf590");
INSERT INTO DIM_CON
	VALUES ("501a7a94-e955-3ca4-1e47-2e9f45ec45cc",
	1792.000000,
	1536.000000,
	"1f33434e-3d77-a1d3-ecd2-17b9acfaf590");
INSERT INTO GD_GE
	VALUES ("9e51936d-8909-6e08-5dc6-669d8cb78920",
	"a150dccc-b513-70da-2050-f1e488ba469f",
	"89fd7d88-c05e-7e6b-7885-436ceeef864b",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 2');
INSERT INTO GD_SHP
	VALUES ("9e51936d-8909-6e08-5dc6-669d8cb78920");
INSERT INTO GD_NCS
	VALUES ("9e51936d-8909-6e08-5dc6-669d8cb78920");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"9e51936d-8909-6e08-5dc6-669d8cb78920");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1648.000000,
	"9e51936d-8909-6e08-5dc6-669d8cb78920",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9e51936d-8909-6e08-5dc6-669d8cb78920",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("27d92000-6a7b-421b-dfa9-b17ab885b682",
	1792.000000,
	1648.000000,
	"9e51936d-8909-6e08-5dc6-669d8cb78920");
INSERT INTO DIM_CON
	VALUES ("e29e2d65-e46e-55b1-fbe2-d45b99630e94",
	1872.000000,
	1696.000000,
	"9e51936d-8909-6e08-5dc6-669d8cb78920");
INSERT INTO GD_GE
	VALUES ("cbbd411b-468f-975b-baa7-64b9ab002e3b",
	"a150dccc-b513-70da-2050-f1e488ba469f",
	"1caa4de5-e71d-1dd9-f471-d76e454bbb36",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1a');
INSERT INTO GD_SHP
	VALUES ("cbbd411b-468f-975b-baa7-64b9ab002e3b");
INSERT INTO GD_NCS
	VALUES ("cbbd411b-468f-975b-baa7-64b9ab002e3b");
INSERT INTO DIM_ND
	VALUES (128.000000,
	64.000000,
	"cbbd411b-468f-975b-baa7-64b9ab002e3b");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1296.000000,
	"cbbd411b-468f-975b-baa7-64b9ab002e3b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cbbd411b-468f-975b-baa7-64b9ab002e3b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("e27b87b3-2e4c-5533-ee3f-ba967ba9fc1a",
	2096.000000,
	1360.000000,
	"cbbd411b-468f-975b-baa7-64b9ab002e3b");
INSERT INTO DIM_CON
	VALUES ("a41eb47a-c835-5299-908d-8c9a7179b87e",
	2096.000000,
	1296.000000,
	"cbbd411b-468f-975b-baa7-64b9ab002e3b");
INSERT INTO GD_GE
	VALUES ("96485d39-f192-f866-825b-db68e49204dc",
	"a150dccc-b513-70da-2050-f1e488ba469f",
	"25142a90-495f-5c90-a454-fd721ca85016",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1b');
INSERT INTO GD_SHP
	VALUES ("96485d39-f192-f866-825b-db68e49204dc");
INSERT INTO GD_NCS
	VALUES ("96485d39-f192-f866-825b-db68e49204dc");
INSERT INTO DIM_ND
	VALUES (128.000000,
	80.000000,
	"96485d39-f192-f866-825b-db68e49204dc");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1456.000000,
	"96485d39-f192-f866-825b-db68e49204dc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("96485d39-f192-f866-825b-db68e49204dc",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("1211fafb-fde0-424b-ba9f-96069b19e345",
	2096.000000,
	1456.000000,
	"96485d39-f192-f866-825b-db68e49204dc");
INSERT INTO DIM_CON
	VALUES ("4bdfd67c-2973-becb-bb30-0f240838783a",
	2096.000000,
	1536.000000,
	"96485d39-f192-f866-825b-db68e49204dc");
INSERT INTO GD_GE
	VALUES ("f8e73cdf-07a0-5c64-fbfc-63d6d6171df4",
	"a150dccc-b513-70da-2050-f1e488ba469f",
	"51407e56-45d2-a707-becc-f4cfd371c4af",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 2');
INSERT INTO GD_SHP
	VALUES ("f8e73cdf-07a0-5c64-fbfc-63d6d6171df4");
INSERT INTO GD_NCS
	VALUES ("f8e73cdf-07a0-5c64-fbfc-63d6d6171df4");
INSERT INTO DIM_ND
	VALUES (128.000000,
	80.000000,
	"f8e73cdf-07a0-5c64-fbfc-63d6d6171df4");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1648.000000,
	"f8e73cdf-07a0-5c64-fbfc-63d6d6171df4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f8e73cdf-07a0-5c64-fbfc-63d6d6171df4",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("4f903d29-2be8-1c4b-8c0a-2332c1f7dcfd",
	2096.000000,
	1648.000000,
	"f8e73cdf-07a0-5c64-fbfc-63d6d6171df4");
INSERT INTO GD_GE
	VALUES ("a48fe04c-3a03-2c2c-3e60-dc65f114983a",
	"a150dccc-b513-70da-2050-f1e488ba469f",
	"961493c7-ac97-75a1-8738-35ce6d8c8e91",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a::UBT1: Start and test');
INSERT INTO GD_CON
	VALUES ("a48fe04c-3a03-2c2c-3e60-dc65f114983a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("842b5af6-a4fe-542a-47dd-6d3c48c94788",
	"a48fe04c-3a03-2c2c-3e60-dc65f114983a",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"842b5af6-a4fe-542a-47dd-6d3c48c94788");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"842b5af6-a4fe-542a-47dd-6d3c48c94788",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("842b5af6-a4fe-542a-47dd-6d3c48c94788",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("191e0405-eab4-ae95-3b75-eb42cd8a6503",
	"a48fe04c-3a03-2c2c-3e60-dc65f114983a",
	3,
	-66.000000,
	-5.000000);
INSERT INTO DIM_ND
	VALUES (252.000000,
	41.000000,
	"191e0405-eab4-ae95-3b75-eb42cd8a6503");
INSERT INTO DIM_GE
	VALUES (1821.000000,
	1186.000000,
	"191e0405-eab4-ae95-3b75-eb42cd8a6503",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("191e0405-eab4-ae95-3b75-eb42cd8a6503",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("60d1ceef-b1b8-9cb4-bc71-d57af011afde",
	"a48fe04c-3a03-2c2c-3e60-dc65f114983a",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"60d1ceef-b1b8-9cb4-bc71-d57af011afde");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"60d1ceef-b1b8-9cb4-bc71-d57af011afde",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("60d1ceef-b1b8-9cb4-bc71-d57af011afde",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("3b0ccd59-4deb-a035-03cc-a53b920ff2ae",
	"a48fe04c-3a03-2c2c-3e60-dc65f114983a",
	"00000000-0000-0000-0000-000000000000",
	"4b73bc4f-3d9b-71d6-23e8-52b911a74092",
	"df989aa6-43c9-4931-d0dd-82ab4bf87d79");
INSERT INTO GD_LS
	VALUES ("77d00f47-70f3-4f81-4384-0c941113d897",
	"a48fe04c-3a03-2c2c-3e60-dc65f114983a",
	"3b0ccd59-4deb-a035-03cc-a53b920ff2ae",
	"df989aa6-43c9-4931-d0dd-82ab4bf87d79",
	"4e17b9c5-8c61-d306-f8d4-835a9c96f757");
INSERT INTO GD_LS
	VALUES ("97b32ee7-dd32-e4ef-3047-364635adf69d",
	"a48fe04c-3a03-2c2c-3e60-dc65f114983a",
	"77d00f47-70f3-4f81-4384-0c941113d897",
	"4e17b9c5-8c61-d306-f8d4-835a9c96f757",
	"c2a294f3-a8c4-8de9-f0ee-b117632132db");
INSERT INTO GD_LS
	VALUES ("a9e7cf8f-0a78-6dd3-aa75-60a08824d3bb",
	"a48fe04c-3a03-2c2c-3e60-dc65f114983a",
	"97b32ee7-dd32-e4ef-3047-364635adf69d",
	"c2a294f3-a8c4-8de9-f0ee-b117632132db",
	"9c3eaf72-754c-9ef1-1126-33efa18fec01");
INSERT INTO DIM_WAY
	VALUES ("4b73bc4f-3d9b-71d6-23e8-52b911a74092",
	1872.000000,
	1296.000000,
	"a48fe04c-3a03-2c2c-3e60-dc65f114983a",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("df989aa6-43c9-4931-d0dd-82ab4bf87d79",
	1920.000000,
	1296.000000,
	"a48fe04c-3a03-2c2c-3e60-dc65f114983a",
	"00000000-0000-0000-0000-000000000000",
	"4b73bc4f-3d9b-71d6-23e8-52b911a74092");
INSERT INTO DIM_WAY
	VALUES ("4e17b9c5-8c61-d306-f8d4-835a9c96f757",
	1920.000000,
	1216.000000,
	"a48fe04c-3a03-2c2c-3e60-dc65f114983a",
	"00000000-0000-0000-0000-000000000000",
	"df989aa6-43c9-4931-d0dd-82ab4bf87d79");
INSERT INTO DIM_WAY
	VALUES ("c2a294f3-a8c4-8de9-f0ee-b117632132db",
	1824.000000,
	1216.000000,
	"a48fe04c-3a03-2c2c-3e60-dc65f114983a",
	"00000000-0000-0000-0000-000000000000",
	"4e17b9c5-8c61-d306-f8d4-835a9c96f757");
INSERT INTO DIM_WAY
	VALUES ("9c3eaf72-754c-9ef1-1126-33efa18fec01",
	1824.000000,
	1264.000000,
	"a48fe04c-3a03-2c2c-3e60-dc65f114983a",
	"00000000-0000-0000-0000-000000000000",
	"c2a294f3-a8c4-8de9-f0ee-b117632132db");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a48fe04c-3a03-2c2c-3e60-dc65f114983a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a48fe04c-3a03-2c2c-3e60-dc65f114983a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("c74ded7d-d459-887f-ff9d-e9977c69f9a1",
	"64acd397-cdcf-e957-5913-1773c761da2a",
	"a48fe04c-3a03-2c2c-3e60-dc65f114983a");
INSERT INTO GD_GE
	VALUES ("20a99c0b-c766-5131-a4f5-305d7b6d7961",
	"a150dccc-b513-70da-2050-f1e488ba469f",
	"343b25d2-9730-b3c6-f285-fd4c7b69e37c",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a::UBT2: Continue and test');
INSERT INTO GD_CON
	VALUES ("20a99c0b-c766-5131-a4f5-305d7b6d7961",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("576d802c-76b3-16dc-e67a-1bfc04c1e981",
	"20a99c0b-c766-5131-a4f5-305d7b6d7961",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"576d802c-76b3-16dc-e67a-1bfc04c1e981");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"576d802c-76b3-16dc-e67a-1bfc04c1e981",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("576d802c-76b3-16dc-e67a-1bfc04c1e981",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("244b6418-fd20-e9b9-6e9d-b24648ddb5bf",
	"20a99c0b-c766-5131-a4f5-305d7b6d7961",
	3,
	-231.000000,
	4.000000);
INSERT INTO DIM_ND
	VALUES (248.000000,
	37.000000,
	"244b6418-fd20-e9b9-6e9d-b24648ddb5bf");
INSERT INTO DIM_GE
	VALUES (1545.000000,
	1389.000000,
	"244b6418-fd20-e9b9-6e9d-b24648ddb5bf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("244b6418-fd20-e9b9-6e9d-b24648ddb5bf",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("21716943-8219-4683-7c36-1046074c0521",
	"20a99c0b-c766-5131-a4f5-305d7b6d7961",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"21716943-8219-4683-7c36-1046074c0521");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"21716943-8219-4683-7c36-1046074c0521",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("21716943-8219-4683-7c36-1046074c0521",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("b2a27e53-d747-48a9-9b1b-ad078cf5e03c",
	"20a99c0b-c766-5131-a4f5-305d7b6d7961",
	"00000000-0000-0000-0000-000000000000",
	"3ed86316-1116-e57c-12cc-e3b28aaed8c6",
	"4e78719b-1d49-b905-3fa9-da00380e3d0d");
INSERT INTO DIM_WAY
	VALUES ("3ed86316-1116-e57c-12cc-e3b28aaed8c6",
	1792.000000,
	1344.000000,
	"20a99c0b-c766-5131-a4f5-305d7b6d7961",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("4e78719b-1d49-b905-3fa9-da00380e3d0d",
	1792.000000,
	1456.000000,
	"20a99c0b-c766-5131-a4f5-305d7b6d7961",
	"00000000-0000-0000-0000-000000000000",
	"3ed86316-1116-e57c-12cc-e3b28aaed8c6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"20a99c0b-c766-5131-a4f5-305d7b6d7961",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("20a99c0b-c766-5131-a4f5-305d7b6d7961",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("2e25079e-a8be-a464-ea1c-e850c9b59792",
	"44521025-a4a4-0318-65bc-b68faeb0cac3",
	"20a99c0b-c766-5131-a4f5-305d7b6d7961");
INSERT INTO GD_GE
	VALUES ("859230bc-bebd-74c5-d855-084b20a1a997",
	"a150dccc-b513-70da-2050-f1e488ba469f",
	"df711df7-b52b-f9f4-1daf-1faa5eb3698c",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1b::UBT2: Continue and test');
INSERT INTO GD_CON
	VALUES ("859230bc-bebd-74c5-d855-084b20a1a997",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f2d06b3f-f522-295f-39e2-4627537f4150",
	"859230bc-bebd-74c5-d855-084b20a1a997",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f2d06b3f-f522-295f-39e2-4627537f4150");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f2d06b3f-f522-295f-39e2-4627537f4150",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f2d06b3f-f522-295f-39e2-4627537f4150",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("324e6fcc-07db-ed30-2ef9-4a4de77777d6",
	"859230bc-bebd-74c5-d855-084b20a1a997",
	3,
	-212.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (226.000000,
	44.000000,
	"324e6fcc-07db-ed30-2ef9-4a4de77777d6");
INSERT INTO DIM_GE
	VALUES (1564.000000,
	1575.000000,
	"324e6fcc-07db-ed30-2ef9-4a4de77777d6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("324e6fcc-07db-ed30-2ef9-4a4de77777d6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4e78f7e7-2e0b-8242-ba95-23512a430b53",
	"859230bc-bebd-74c5-d855-084b20a1a997",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4e78f7e7-2e0b-8242-ba95-23512a430b53");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4e78f7e7-2e0b-8242-ba95-23512a430b53",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4e78f7e7-2e0b-8242-ba95-23512a430b53",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("52bdfb9e-c16c-f9f7-06a0-55cd5336cb55",
	"859230bc-bebd-74c5-d855-084b20a1a997",
	"00000000-0000-0000-0000-000000000000",
	"1bcfbfcb-c235-e452-0c72-a48f4a90c06c",
	"88144b45-6bb0-f77d-71c6-65d6b8bf6ad5");
INSERT INTO DIM_WAY
	VALUES ("1bcfbfcb-c235-e452-0c72-a48f4a90c06c",
	1792.000000,
	1536.000000,
	"859230bc-bebd-74c5-d855-084b20a1a997",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("88144b45-6bb0-f77d-71c6-65d6b8bf6ad5",
	1792.000000,
	1648.000000,
	"859230bc-bebd-74c5-d855-084b20a1a997",
	"00000000-0000-0000-0000-000000000000",
	"1bcfbfcb-c235-e452-0c72-a48f4a90c06c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"859230bc-bebd-74c5-d855-084b20a1a997",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("859230bc-bebd-74c5-d855-084b20a1a997",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("501a7a94-e955-3ca4-1e47-2e9f45ec45cc",
	"27d92000-6a7b-421b-dfa9-b17ab885b682",
	"859230bc-bebd-74c5-d855-084b20a1a997");
INSERT INTO GD_GE
	VALUES ("dd9f8a5a-0549-7b0b-79f7-2872c7425372",
	"a150dccc-b513-70da-2050-f1e488ba469f",
	"60b1be3f-099c-2d6e-1a66-521cf72e6bb6",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1a::UBT4: Continue or test');
INSERT INTO GD_CON
	VALUES ("dd9f8a5a-0549-7b0b-79f7-2872c7425372",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("30f07124-ccf3-9a10-411a-1d39402bc85f",
	"dd9f8a5a-0549-7b0b-79f7-2872c7425372",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"30f07124-ccf3-9a10-411a-1d39402bc85f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"30f07124-ccf3-9a10-411a-1d39402bc85f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("30f07124-ccf3-9a10-411a-1d39402bc85f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8b93835a-dfc4-61ab-7f85-22ecdf5599cb",
	"dd9f8a5a-0549-7b0b-79f7-2872c7425372",
	3,
	-13.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (274.000000,
	38.000000,
	"8b93835a-dfc4-61ab-7f85-22ecdf5599cb");
INSERT INTO DIM_GE
	VALUES (2067.000000,
	1394.000000,
	"8b93835a-dfc4-61ab-7f85-22ecdf5599cb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8b93835a-dfc4-61ab-7f85-22ecdf5599cb",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b316a44a-3698-ca1e-c843-f5c685b7f464",
	"dd9f8a5a-0549-7b0b-79f7-2872c7425372",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b316a44a-3698-ca1e-c843-f5c685b7f464");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b316a44a-3698-ca1e-c843-f5c685b7f464",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b316a44a-3698-ca1e-c843-f5c685b7f464",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("ea8b4dad-eb9c-7cd4-1158-e1cc2b597748",
	"dd9f8a5a-0549-7b0b-79f7-2872c7425372",
	"00000000-0000-0000-0000-000000000000",
	"ea963ac5-1e07-560e-18fc-cde090fce756",
	"fd8830d2-051d-cd4f-2d56-63d3a176ebe9");
INSERT INTO DIM_WAY
	VALUES ("ea963ac5-1e07-560e-18fc-cde090fce756",
	2096.000000,
	1360.000000,
	"dd9f8a5a-0549-7b0b-79f7-2872c7425372",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("fd8830d2-051d-cd4f-2d56-63d3a176ebe9",
	2096.000000,
	1456.000000,
	"dd9f8a5a-0549-7b0b-79f7-2872c7425372",
	"00000000-0000-0000-0000-000000000000",
	"ea963ac5-1e07-560e-18fc-cde090fce756");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"dd9f8a5a-0549-7b0b-79f7-2872c7425372",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dd9f8a5a-0549-7b0b-79f7-2872c7425372",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e27b87b3-2e4c-5533-ee3f-ba967ba9fc1a",
	"1211fafb-fde0-424b-ba9f-96069b19e345",
	"dd9f8a5a-0549-7b0b-79f7-2872c7425372");
INSERT INTO GD_GE
	VALUES ("39b4c2a9-f41b-ef77-1a80-4657f986ea51",
	"a150dccc-b513-70da-2050-f1e488ba469f",
	"124933f0-be4f-4b48-43da-d36851efe3c1",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1b::UBT4: Continue or test');
INSERT INTO GD_CON
	VALUES ("39b4c2a9-f41b-ef77-1a80-4657f986ea51",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("34723313-4174-38fb-5ecc-9a99ffc7df83",
	"39b4c2a9-f41b-ef77-1a80-4657f986ea51",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"34723313-4174-38fb-5ecc-9a99ffc7df83");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"34723313-4174-38fb-5ecc-9a99ffc7df83",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("34723313-4174-38fb-5ecc-9a99ffc7df83",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4781d980-fad2-2a41-e929-132b9ca3ddd9",
	"39b4c2a9-f41b-ef77-1a80-4657f986ea51",
	3,
	-15.000000,
	7.000000);
INSERT INTO DIM_ND
	VALUES (272.000000,
	41.000000,
	"4781d980-fad2-2a41-e929-132b9ca3ddd9");
INSERT INTO DIM_GE
	VALUES (2065.000000,
	1584.000000,
	"4781d980-fad2-2a41-e929-132b9ca3ddd9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4781d980-fad2-2a41-e929-132b9ca3ddd9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c0e9754f-085f-e0d5-8c1a-26a52dcd33cb",
	"39b4c2a9-f41b-ef77-1a80-4657f986ea51",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c0e9754f-085f-e0d5-8c1a-26a52dcd33cb");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c0e9754f-085f-e0d5-8c1a-26a52dcd33cb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c0e9754f-085f-e0d5-8c1a-26a52dcd33cb",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("4ab7a1c8-2c14-d694-9c70-f3323b33083d",
	"39b4c2a9-f41b-ef77-1a80-4657f986ea51",
	"00000000-0000-0000-0000-000000000000",
	"66a5f005-02d3-6ef1-c8a5-b0737c7b1dd1",
	"a7cf6a19-a535-e05b-d7bb-dc40c52b330f");
INSERT INTO DIM_WAY
	VALUES ("66a5f005-02d3-6ef1-c8a5-b0737c7b1dd1",
	2096.000000,
	1536.000000,
	"39b4c2a9-f41b-ef77-1a80-4657f986ea51",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a7cf6a19-a535-e05b-d7bb-dc40c52b330f",
	2096.000000,
	1648.000000,
	"39b4c2a9-f41b-ef77-1a80-4657f986ea51",
	"00000000-0000-0000-0000-000000000000",
	"66a5f005-02d3-6ef1-c8a5-b0737c7b1dd1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"39b4c2a9-f41b-ef77-1a80-4657f986ea51",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("39b4c2a9-f41b-ef77-1a80-4657f986ea51",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("4bdfd67c-2973-becb-bb30-0f240838783a",
	"4f903d29-2be8-1c4b-8c0a-2332c1f7dcfd",
	"39b4c2a9-f41b-ef77-1a80-4657f986ea51");
INSERT INTO GD_GE
	VALUES ("68fc2ded-b9c1-4481-832f-d3109a7d8edb",
	"a150dccc-b513-70da-2050-f1e488ba469f",
	"6d12f674-d4ca-ab3e-0a7a-a34131024470",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 2::UBT3: Start or test');
INSERT INTO GD_CON
	VALUES ("68fc2ded-b9c1-4481-832f-d3109a7d8edb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5c5cad72-c033-4bab-03d2-df2e3e0f42e3",
	"68fc2ded-b9c1-4481-832f-d3109a7d8edb",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5c5cad72-c033-4bab-03d2-df2e3e0f42e3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5c5cad72-c033-4bab-03d2-df2e3e0f42e3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5c5cad72-c033-4bab-03d2-df2e3e0f42e3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7ba4ad75-83e7-497c-7e6f-46f4d7e1e27d",
	"68fc2ded-b9c1-4481-832f-d3109a7d8edb",
	3,
	105.000000,
	-196.000000);
INSERT INTO DIM_ND
	VALUES (235.000000,
	45.000000,
	"7ba4ad75-83e7-497c-7e6f-46f4d7e1e27d");
INSERT INTO DIM_GE
	VALUES (2057.000000,
	1221.000000,
	"7ba4ad75-83e7-497c-7e6f-46f4d7e1e27d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7ba4ad75-83e7-497c-7e6f-46f4d7e1e27d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f7c72ce6-6e08-9637-e5d7-8fdfe3c54b7e",
	"68fc2ded-b9c1-4481-832f-d3109a7d8edb",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f7c72ce6-6e08-9637-e5d7-8fdfe3c54b7e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f7c72ce6-6e08-9637-e5d7-8fdfe3c54b7e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f7c72ce6-6e08-9637-e5d7-8fdfe3c54b7e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("535e0103-a7f4-4eaf-37a3-b1a11823e9d8",
	"68fc2ded-b9c1-4481-832f-d3109a7d8edb",
	"00000000-0000-0000-0000-000000000000",
	"67c608bd-dcba-4a61-215d-d458420fce4a",
	"163765b2-da8d-77d2-eff9-7ad87337fd07");
INSERT INTO GD_LS
	VALUES ("ddb7d645-7317-2024-3834-13e785da2e09",
	"68fc2ded-b9c1-4481-832f-d3109a7d8edb",
	"535e0103-a7f4-4eaf-37a3-b1a11823e9d8",
	"163765b2-da8d-77d2-eff9-7ad87337fd07",
	"a3e0b65f-364e-24ad-f368-e2f6282eda54");
INSERT INTO GD_LS
	VALUES ("c8b00486-caab-ef6c-a623-f03f3b39335a",
	"68fc2ded-b9c1-4481-832f-d3109a7d8edb",
	"ddb7d645-7317-2024-3834-13e785da2e09",
	"a3e0b65f-364e-24ad-f368-e2f6282eda54",
	"84f8b225-1971-1d5d-cb67-680de2f633f7");
INSERT INTO GD_LS
	VALUES ("7f773ac3-f161-e485-1806-04eae55c63fa",
	"68fc2ded-b9c1-4481-832f-d3109a7d8edb",
	"c8b00486-caab-ef6c-a623-f03f3b39335a",
	"84f8b225-1971-1d5d-cb67-680de2f633f7",
	"bc6e1b6a-2a47-45aa-14c1-f1ec4faa9092");
INSERT INTO DIM_WAY
	VALUES ("67c608bd-dcba-4a61-215d-d458420fce4a",
	1872.000000,
	1696.000000,
	"68fc2ded-b9c1-4481-832f-d3109a7d8edb",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("163765b2-da8d-77d2-eff9-7ad87337fd07",
	1968.000000,
	1696.000000,
	"68fc2ded-b9c1-4481-832f-d3109a7d8edb",
	"00000000-0000-0000-0000-000000000000",
	"67c608bd-dcba-4a61-215d-d458420fce4a");
INSERT INTO DIM_WAY
	VALUES ("a3e0b65f-364e-24ad-f368-e2f6282eda54",
	1968.000000,
	1248.000000,
	"68fc2ded-b9c1-4481-832f-d3109a7d8edb",
	"00000000-0000-0000-0000-000000000000",
	"163765b2-da8d-77d2-eff9-7ad87337fd07");
INSERT INTO DIM_WAY
	VALUES ("84f8b225-1971-1d5d-cb67-680de2f633f7",
	2096.000000,
	1248.000000,
	"68fc2ded-b9c1-4481-832f-d3109a7d8edb",
	"00000000-0000-0000-0000-000000000000",
	"a3e0b65f-364e-24ad-f368-e2f6282eda54");
INSERT INTO DIM_WAY
	VALUES ("bc6e1b6a-2a47-45aa-14c1-f1ec4faa9092",
	2096.000000,
	1296.000000,
	"68fc2ded-b9c1-4481-832f-d3109a7d8edb",
	"00000000-0000-0000-0000-000000000000",
	"84f8b225-1971-1d5d-cb67-680de2f633f7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"68fc2ded-b9c1-4481-832f-d3109a7d8edb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("68fc2ded-b9c1-4481-832f-d3109a7d8edb",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e29e2d65-e46e-55b1-fbe2-d45b99630e94",
	"a41eb47a-c835-5299-908d-8c9a7179b87e",
	"68fc2ded-b9c1-4481-832f-d3109a7d8edb");
INSERT INTO DIM_DIA
	VALUES ("a150dccc-b513-70da-2050-f1e488ba469f",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	'User Other Boolean Test',
	19,
	'UOBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("f2152e91-55a6-afb0-cfbe-b01b29a9adf2",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea");
INSERT INTO O_BATTR
	VALUES ("f2152e91-55a6-afb0-cfbe-b01b29a9adf2",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea");
INSERT INTO O_ATTR
	VALUES ("f2152e91-55a6-afb0-cfbe-b01b29a9adf2",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"00000000-0000-0000-0000-000000000000",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"cb708e96-e508-4b74-651d-60a4e6c3d977",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3c5d7fc7-241a-baad-f337-7a70b711fec5",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea");
INSERT INTO O_BATTR
	VALUES ("3c5d7fc7-241a-baad-f337-7a70b711fec5",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea");
INSERT INTO O_ATTR
	VALUES ("3c5d7fc7-241a-baad-f337-7a70b711fec5",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"f2152e91-55a6-afb0-cfbe-b01b29a9adf2",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"cb708e96-e508-4b74-651d-60a4e6c3d977",
	'',
	'');
INSERT INTO O_REF
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	0,
	"5d8c7dd1-b2d2-1dcc-d3de-9c21f8e92073",
	"6bdd685b-cf83-cfaf-0a6d-f4b80c10e29d",
	"f2bbdee6-416e-96c1-3050-8dbfa2bf35ca",
	"8fb89da8-8b80-2d3c-c38f-3dc7b03dad05",
	"d0e8cbc1-5d48-2fdb-e3a8-c7836e080ded",
	"cf36702f-b276-7fda-3f2d-abcf77209ad3",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Boolean Test',
	'id',
	'R13');
INSERT INTO O_RATTR
	VALUES ("d0e8cbc1-5d48-2fdb-e3a8-c7836e080ded",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"5d8c7dd1-b2d2-1dcc-d3de-9c21f8e92073",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	1,
	'id');
INSERT INTO O_ATTR
	VALUES ("d0e8cbc1-5d48-2fdb-e3a8-c7836e080ded",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"3c5d7fc7-241a-baad-f337-7a70b711fec5",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	0,
	"2ec8d45f-1a3a-8574-234a-c9e08aa4de03",
	"74e91883-d0d6-cd68-fd74-260cf0292fe0",
	"d2731eed-d45b-8488-c477-68028ee27487",
	"a08be01c-035c-c6e7-80f5-65992b192eff",
	"805199d4-8a60-4a59-f4a0-f1394b847a59",
	"0257293a-c610-33d0-961c-38c3e1d07895",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Third Boolean Test',
	'btrue',
	'R14');
INSERT INTO O_RATTR
	VALUES ("805199d4-8a60-4a59-f4a0-f1394b847a59",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"2ec8d45f-1a3a-8574-234a-c9e08aa4de03",
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("805199d4-8a60-4a59-f4a0-f1394b847a59",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"d0e8cbc1-5d48-2fdb-e3a8-c7836e080ded",
	'r11btrue',
	'',
	'r11',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	0,
	"e3e3fc9a-7b6f-a227-644a-d65c7724182f",
	"74e91883-d0d6-cd68-fd74-260cf0292fe0",
	"d2731eed-d45b-8488-c477-68028ee27487",
	"a08be01c-035c-c6e7-80f5-65992b192eff",
	"9e86b8cd-fb11-8408-0f85-13a92ca739d5",
	"de4c4040-b4d8-8dd0-e1f6-cc648576c11b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Third Boolean Test',
	'bfalse',
	'R14');
INSERT INTO O_RATTR
	VALUES ("9e86b8cd-fb11-8408-0f85-13a92ca739d5",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"e3e3fc9a-7b6f-a227-644a-d65c7724182f",
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("9e86b8cd-fb11-8408-0f85-13a92ca739d5",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"805199d4-8a60-4a59-f4a0-f1394b847a59",
	'r11bfalse',
	'',
	'r11',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea");
INSERT INTO O_OIDA
	VALUES ("3c5d7fc7-241a-baad-f337-7a70b711fec5",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("f2152e91-55a6-afb0-cfbe-b01b29a9adf2",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	0,
	'bfalse');
INSERT INTO O_ID
	VALUES (1,
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea");
INSERT INTO O_ID
	VALUES (2,
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea");
INSERT INTO PE_PE
	VALUES ("49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	'User Third Boolean Test',
	20,
	'UTBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("2ec8d45f-1a3a-8574-234a-c9e08aa4de03",
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd");
INSERT INTO O_BATTR
	VALUES ("2ec8d45f-1a3a-8574-234a-c9e08aa4de03",
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd");
INSERT INTO O_ATTR
	VALUES ("2ec8d45f-1a3a-8574-234a-c9e08aa4de03",
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	"00000000-0000-0000-0000-000000000000",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"cb708e96-e508-4b74-651d-60a4e6c3d977",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("e3e3fc9a-7b6f-a227-644a-d65c7724182f",
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd");
INSERT INTO O_BATTR
	VALUES ("e3e3fc9a-7b6f-a227-644a-d65c7724182f",
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd");
INSERT INTO O_ATTR
	VALUES ("e3e3fc9a-7b6f-a227-644a-d65c7724182f",
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	"2ec8d45f-1a3a-8574-234a-c9e08aa4de03",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"cb708e96-e508-4b74-651d-60a4e6c3d977",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd");
INSERT INTO O_OIDA
	VALUES ("2ec8d45f-1a3a-8574-234a-c9e08aa4de03",
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("e3e3fc9a-7b6f-a227-644a-d65c7724182f",
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	0,
	'bfalse');
INSERT INTO O_ID
	VALUES (1,
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd");
INSERT INTO O_ID
	VALUES (2,
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd");
INSERT INTO PE_PE
	VALUES ("16bcd859-2dc0-5548-9dec-0cda91abf583",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("16bcd859-2dc0-5548-9dec-0cda91abf583",
	'ex init',
	1,
	'USERINIT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("3bc926a0-d681-f6d3-047c-dae036677600",
	"16bcd859-2dc0-5548-9dec-0cda91abf583");
INSERT INTO O_BATTR
	VALUES ("3bc926a0-d681-f6d3-047c-dae036677600",
	"16bcd859-2dc0-5548-9dec-0cda91abf583");
INSERT INTO O_ATTR
	VALUES ("3bc926a0-d681-f6d3-047c-dae036677600",
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("81ab87df-026d-d5a5-a938-2ecd2c81e3c5",
	"16bcd859-2dc0-5548-9dec-0cda91abf583");
INSERT INTO O_BATTR
	VALUES ("81ab87df-026d-d5a5-a938-2ecd2c81e3c5",
	"16bcd859-2dc0-5548-9dec-0cda91abf583");
INSERT INTO O_ATTR
	VALUES ("81ab87df-026d-d5a5-a938-2ecd2c81e3c5",
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	"3bc926a0-d681-f6d3-047c-dae036677600",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583");
INSERT INTO O_OIDA
	VALUES ("3bc926a0-d681-f6d3-047c-dae036677600",
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"16bcd859-2dc0-5548-9dec-0cda91abf583");
INSERT INTO O_ID
	VALUES (2,
	"16bcd859-2dc0-5548-9dec-0cda91abf583");
INSERT INTO SM_ISM
	VALUES ("b634aa72-a765-f4fd-8bb4-44c5bed59608",
	"16bcd859-2dc0-5548-9dec-0cda91abf583");
INSERT INTO SM_SM
	VALUES ("b634aa72-a765-f4fd-8bb4-44c5bed59608",
	'',
	3);
INSERT INTO SM_MOORE
	VALUES ("b634aa72-a765-f4fd-8bb4-44c5bed59608");
INSERT INTO SM_LEVT
	VALUES ("f3653ad9-0947-ee30-b585-450dd1fce13e",
	"b634aa72-a765-f4fd-8bb4-44c5bed59608",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("f3653ad9-0947-ee30-b585-450dd1fce13e",
	"b634aa72-a765-f4fd-8bb4-44c5bed59608",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("f3653ad9-0947-ee30-b585-450dd1fce13e",
	"b634aa72-a765-f4fd-8bb4-44c5bed59608",
	"00000000-0000-0000-0000-000000000000",
	1,
	'init',
	0,
	'',
	'USERINIT1',
	'');
INSERT INTO SM_STATE
	VALUES ("56d6cca2-2142-92d9-9425-8b675c0b75d0",
	"b634aa72-a765-f4fd-8bb4-44c5bed59608",
	"00000000-0000-0000-0000-000000000000",
	'ex init',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("56d6cca2-2142-92d9-9425-8b675c0b75d0",
	"f3653ad9-0947-ee30-b585-450dd1fce13e",
	"b634aa72-a765-f4fd-8bb4-44c5bed59608",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("e6b7e145-e248-c00f-ce0b-830e0c882e4e",
	"b634aa72-a765-f4fd-8bb4-44c5bed59608",
	"56d6cca2-2142-92d9-9425-8b675c0b75d0");
INSERT INTO SM_AH
	VALUES ("e6b7e145-e248-c00f-ce0b-830e0c882e4e",
	"b634aa72-a765-f4fd-8bb4-44c5bed59608");
INSERT INTO SM_ACT
	VALUES ("e6b7e145-e248-c00f-ce0b-830e0c882e4e",
	"b634aa72-a765-f4fd-8bb4-44c5bed59608",
	1,
	'LOG::LogInfo(message:"a1test_exconfig: a1test_exconfig init") ;

// create preexisting instances
create object instance ev of EV;
assign ev.shutdown_count = 3;
create object instance et of ET;
assign et.btrue = TRUE;
assign et.et_id = 1;
create object instance one_inst of OI;
relate et to one_inst across R3;
create object instance mi1 of MI;
relate et to mi1 across R4;
create object instance mi2 of MI;
relate et to mi2 across R4;

create object instance etob1 of ETOB;
assign etob1.etob_id = 2;
assign etob1.r = 2.1718;
assign etob1.btrue = TRUE;
assign etob1.bfalse = FALSE;
assign etob1.s = "etob1 string";
bridge etob1.d = TIM::create_date(second:17,minute:7,hour:13,day:9,month:8,year:1991);
select any event_instance from instances of EV;
create event instance ev_temp of EV1:''Event Instance''(message:"etob1 event instance") to event_instance;
assign etob1.ev = ev_temp;
bridge etob1.tim = TIM::timer_start ( microseconds:2000000, event_inst:ev_temp);
relate et to etob1 across R1;
relate et to etob1 across R8;
create object instance etob2 of ETOB;
assign etob2.etob_id = 3;
assign etob2.r = 1.616;
assign etob2.btrue = TRUE;
assign etob2.bfalse = FALSE;
assign etob2.s = "etob2 string";
relate et to etob2 across R8;

create object instance etoc of ETOC;
assign etoc.etoc_id = 4;
assign etoc.r = 11.311;
assign etoc.btrue = TRUE;
assign etoc.bfalse = FALSE;
assign etoc.s = "etoc string";
bridge etoc.d = TIM::create_date(second:10,minute:0,hour:0,day:13,month:12,year:1997);
create event instance ev_temp2 of EV1:''Event Instance''(message:"etoc event instance") to event_instance;
assign etoc.ev = ev_temp2;
bridge etoc.tim = TIM::timer_start ( microseconds:2000000, event_inst:ev_temp2);

relate etob1 to etoc across R6;
create object instance etoc2 of ETOC;
assign etoc2.etoc_id = 5;
assign etoc2.r = 17.311;
assign etoc2.btrue = TRUE;
assign etoc2.bfalse = FALSE;
assign etoc2.s = "etoc2 string";
relate etob2 to etoc2 across R6;

create object instance bet of BET;
assign bet.btrue = TRUE;
assign bet.bfalse = FALSE;
create object instance obet1 of OBET;
assign obet1.btrue = TRUE;
assign obet1.bfalse = FALSE;
relate bet to obet1 across R9;
relate bet to obet1 across R10;
create object instance obet2 of OBET;
assign obet2.btrue = TRUE;
assign obet2.bfalse = FALSE;
relate bet to obet2 across R10;
create object instance tbet1 of TBET;
assign tbet1.btrue = TRUE;
assign tbet1.bfalse = FALSE;
relate tbet1 to obet1 across R11;
create object instance tbet2 of TBET;
assign tbet2.btrue = TRUE;
assign tbet2.bfalse = FALSE;
relate tbet2 to obet2 across R11;

create object instance ubt of UBT;
assign ubt.btrue = TRUE;
assign ubt.bfalse = FALSE;

create object instance uobt1 of UOBT;
assign uobt1.btrue = TRUE;
assign uobt1.bfalse = FALSE;
relate ubt to uobt1 across R12;
relate ubt to uobt1 across R13;

create object instance uobt2 of UOBT;
assign uobt2.btrue = TRUE;
assign uobt2.bfalse = FALSE;
relate ubt to uobt2 across R13;

create object instance utbt1 of UTBT;
assign utbt1.btrue = TRUE;
assign utbt1.bfalse = FALSE;
relate utbt1 to uobt1 across R14;

create object instance utbt2 of UTBT;
assign utbt2.btrue = TRUE;
assign utbt2.bfalse = FALSE;
relate utbt2 to uobt2 across R14;


// no instances of NOI should be created

// start the expression test
generate ET1:''Start Expression Test''() to et;

generate BET1:''Start and test''( ttrue: true, tfalse: false) to bet;
generate UBT1:''Start and test''( ttrue: true, tfalse: false) to ubt;
',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("275f7c6d-0354-6f6b-1075-653ee8795bd9",
	"b634aa72-a765-f4fd-8bb4-44c5bed59608",
	"56d6cca2-2142-92d9-9425-8b675c0b75d0",
	"f3653ad9-0947-ee30-b585-450dd1fce13e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("db99d14c-4365-97d7-317a-f4fe79a06b73",
	"b634aa72-a765-f4fd-8bb4-44c5bed59608",
	"275f7c6d-0354-6f6b-1075-653ee8795bd9");
INSERT INTO SM_AH
	VALUES ("db99d14c-4365-97d7-317a-f4fe79a06b73",
	"b634aa72-a765-f4fd-8bb4-44c5bed59608");
INSERT INTO SM_ACT
	VALUES ("db99d14c-4365-97d7-317a-f4fe79a06b73",
	"b634aa72-a765-f4fd-8bb4-44c5bed59608",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("275f7c6d-0354-6f6b-1075-653ee8795bd9",
	"b634aa72-a765-f4fd-8bb4-44c5bed59608",
	"56d6cca2-2142-92d9-9425-8b675c0b75d0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("08bc8b7b-07c3-2909-7102-fd30f88bf7f3",
	8,
	"b634aa72-a765-f4fd-8bb4-44c5bed59608",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("21b79683-c6b2-29ff-1ce4-1a3018dbb1e0",
	"08bc8b7b-07c3-2909-7102-fd30f88bf7f3",
	"56d6cca2-2142-92d9-9425-8b675c0b75d0",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine::ex init');
INSERT INTO GD_SHP
	VALUES ("21b79683-c6b2-29ff-1ce4-1a3018dbb1e0");
INSERT INTO GD_NCS
	VALUES ("21b79683-c6b2-29ff-1ce4-1a3018dbb1e0");
INSERT INTO DIM_ND
	VALUES (496.000000,
	480.000000,
	"21b79683-c6b2-29ff-1ce4-1a3018dbb1e0");
INSERT INTO DIM_GE
	VALUES (1744.000000,
	1248.000000,
	"21b79683-c6b2-29ff-1ce4-1a3018dbb1e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("21b79683-c6b2-29ff-1ce4-1a3018dbb1e0",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("eeedaf7b-894d-2467-854c-b90e2381924a",
	2240.000000,
	1296.000000,
	"21b79683-c6b2-29ff-1ce4-1a3018dbb1e0");
INSERT INTO DIM_CON
	VALUES ("c6aa82d1-5711-f287-8637-9216c2f94d20",
	2176.000000,
	1248.000000,
	"21b79683-c6b2-29ff-1ce4-1a3018dbb1e0");
INSERT INTO GD_GE
	VALUES ("01a216a8-24e0-2eb2-2289-79d98b95a9e0",
	"08bc8b7b-07c3-2909-7102-fd30f88bf7f3",
	"275f7c6d-0354-6f6b-1075-653ee8795bd9",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine::ex init::USERINIT1: init');
INSERT INTO GD_CON
	VALUES ("01a216a8-24e0-2eb2-2289-79d98b95a9e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7c5ef449-ce99-480c-a6ce-d2a05a22e890",
	"01a216a8-24e0-2eb2-2289-79d98b95a9e0",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7c5ef449-ce99-480c-a6ce-d2a05a22e890");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7c5ef449-ce99-480c-a6ce-d2a05a22e890",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7c5ef449-ce99-480c-a6ce-d2a05a22e890",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7e8101cd-398c-80ed-28a1-ec0a368a4795",
	"01a216a8-24e0-2eb2-2289-79d98b95a9e0",
	3,
	-109.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (145.000000,
	33.000000,
	"7e8101cd-398c-80ed-28a1-ec0a368a4795");
INSERT INTO DIM_GE
	VALUES (2178.000000,
	1171.000000,
	"7e8101cd-398c-80ed-28a1-ec0a368a4795",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7e8101cd-398c-80ed-28a1-ec0a368a4795",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bc96534e-576f-83de-5c4a-36d2d5582423",
	"01a216a8-24e0-2eb2-2289-79d98b95a9e0",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"bc96534e-576f-83de-5c4a-36d2d5582423");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bc96534e-576f-83de-5c4a-36d2d5582423",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bc96534e-576f-83de-5c4a-36d2d5582423",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("7cbe6ec7-c105-f475-ee48-b0e09796c4aa",
	"01a216a8-24e0-2eb2-2289-79d98b95a9e0",
	"00000000-0000-0000-0000-000000000000",
	"49f27a68-7da1-6726-23c6-f9747f747e69",
	"2f875628-7c66-8830-8cd0-69f8c9bdbd8e");
INSERT INTO GD_LS
	VALUES ("3514c761-3a13-4627-ba20-4423fc9d8c7c",
	"01a216a8-24e0-2eb2-2289-79d98b95a9e0",
	"7cbe6ec7-c105-f475-ee48-b0e09796c4aa",
	"2f875628-7c66-8830-8cd0-69f8c9bdbd8e",
	"e33806d0-d19d-12fd-44db-f86ec85deed8");
INSERT INTO GD_LS
	VALUES ("a290e09e-3a41-24db-21b0-6ef1f2a846ce",
	"01a216a8-24e0-2eb2-2289-79d98b95a9e0",
	"3514c761-3a13-4627-ba20-4423fc9d8c7c",
	"e33806d0-d19d-12fd-44db-f86ec85deed8",
	"c5bfcdd6-688c-1424-d415-32d6ad291953");
INSERT INTO GD_LS
	VALUES ("2ff83c63-a19b-b83b-36b2-fbd8a6f5576a",
	"01a216a8-24e0-2eb2-2289-79d98b95a9e0",
	"a290e09e-3a41-24db-21b0-6ef1f2a846ce",
	"c5bfcdd6-688c-1424-d415-32d6ad291953",
	"2541e67f-dfe2-3f7e-28c7-946b2e725a26");
INSERT INTO DIM_WAY
	VALUES ("49f27a68-7da1-6726-23c6-f9747f747e69",
	2240.000000,
	1296.000000,
	"01a216a8-24e0-2eb2-2289-79d98b95a9e0",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("2f875628-7c66-8830-8cd0-69f8c9bdbd8e",
	2320.000000,
	1296.000000,
	"01a216a8-24e0-2eb2-2289-79d98b95a9e0",
	"00000000-0000-0000-0000-000000000000",
	"49f27a68-7da1-6726-23c6-f9747f747e69");
INSERT INTO DIM_WAY
	VALUES ("e33806d0-d19d-12fd-44db-f86ec85deed8",
	2320.000000,
	1200.000000,
	"01a216a8-24e0-2eb2-2289-79d98b95a9e0",
	"00000000-0000-0000-0000-000000000000",
	"2f875628-7c66-8830-8cd0-69f8c9bdbd8e");
INSERT INTO DIM_WAY
	VALUES ("c5bfcdd6-688c-1424-d415-32d6ad291953",
	2176.000000,
	1200.000000,
	"01a216a8-24e0-2eb2-2289-79d98b95a9e0",
	"00000000-0000-0000-0000-000000000000",
	"e33806d0-d19d-12fd-44db-f86ec85deed8");
INSERT INTO DIM_WAY
	VALUES ("2541e67f-dfe2-3f7e-28c7-946b2e725a26",
	2176.000000,
	1248.000000,
	"01a216a8-24e0-2eb2-2289-79d98b95a9e0",
	"00000000-0000-0000-0000-000000000000",
	"c5bfcdd6-688c-1424-d415-32d6ad291953");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"01a216a8-24e0-2eb2-2289-79d98b95a9e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("01a216a8-24e0-2eb2-2289-79d98b95a9e0",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("eeedaf7b-894d-2467-854c-b90e2381924a",
	"c6aa82d1-5711-f287-8637-9216c2f94d20",
	"01a216a8-24e0-2eb2-2289-79d98b95a9e0");
INSERT INTO DIM_DIA
	VALUES ("08bc8b7b-07c3-2909-7102-fd30f88bf7f3",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("a0d52a76-634b-efb9-81bb-7788fddeaa8d");
INSERT INTO R_PART
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("15799752-721b-413b-9fed-b6332ef07f8f",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9");
INSERT INTO O_RTIDA
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9");
INSERT INTO O_RTIDA
	VALUES ("45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9");
INSERT INTO O_RTIDA
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9");
INSERT INTO O_RTIDA
	VALUES ("71ec8e80-08af-8589-0172-cbee963c83a1",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9");
INSERT INTO O_RTIDA
	VALUES ("3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9");
INSERT INTO O_RTIDA
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9");
INSERT INTO O_RTIDA
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9");
INSERT INTO O_RTIDA
	VALUES ("4953388e-55f5-ecd5-7d4e-dd164baf3ed8",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9");
INSERT INTO O_RTIDA
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9");
INSERT INTO R_RTO
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	0);
INSERT INTO R_OIR
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6");
INSERT INTO R_OIR
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("bc4d8a5f-8892-bff5-cf51-68bad811491a",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("bc4d8a5f-8892-bff5-cf51-68bad811491a",
	2,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("bc4d8a5f-8892-bff5-cf51-68bad811491a");
INSERT INTO R_PART
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"bc4d8a5f-8892-bff5-cf51-68bad811491a",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"bc4d8a5f-8892-bff5-cf51-68bad811491a",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f");
INSERT INTO R_RTO
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"bc4d8a5f-8892-bff5-cf51-68bad811491a",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	0);
INSERT INTO R_OIR
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"bc4d8a5f-8892-bff5-cf51-68bad811491a",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"bc4d8a5f-8892-bff5-cf51-68bad811491a",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	1,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"bc4d8a5f-8892-bff5-cf51-68bad811491a",
	"084c910b-ea58-912a-7353-1cda5c0ece3e");
INSERT INTO R_OIR
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"bc4d8a5f-8892-bff5-cf51-68bad811491a",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("91b9bb3d-87c1-e36f-7cac-ec4969f32864",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("91b9bb3d-87c1-e36f-7cac-ec4969f32864",
	3,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("91b9bb3d-87c1-e36f-7cac-ec4969f32864");
INSERT INTO R_PART
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"91b9bb3d-87c1-e36f-7cac-ec4969f32864",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"91b9bb3d-87c1-e36f-7cac-ec4969f32864",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d");
INSERT INTO R_RTO
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"91b9bb3d-87c1-e36f-7cac-ec4969f32864",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	0);
INSERT INTO R_OIR
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"91b9bb3d-87c1-e36f-7cac-ec4969f32864",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"91b9bb3d-87c1-e36f-7cac-ec4969f32864",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"91b9bb3d-87c1-e36f-7cac-ec4969f32864",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO R_OIR
	VALUES ("7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"91b9bb3d-87c1-e36f-7cac-ec4969f32864",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("b79a8723-0d3d-ea2b-a0b5-347e8ec5518e",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("b79a8723-0d3d-ea2b-a0b5-347e8ec5518e",
	4,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("b79a8723-0d3d-ea2b-a0b5-347e8ec5518e");
INSERT INTO R_PART
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"b79a8723-0d3d-ea2b-a0b5-347e8ec5518e",
	"b2e2ec8b-dea4-27ff-bf04-36a5ef39a581",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"b79a8723-0d3d-ea2b-a0b5-347e8ec5518e",
	"b2e2ec8b-dea4-27ff-bf04-36a5ef39a581");
INSERT INTO R_RTO
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"b79a8723-0d3d-ea2b-a0b5-347e8ec5518e",
	"b2e2ec8b-dea4-27ff-bf04-36a5ef39a581",
	0);
INSERT INTO R_OIR
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"b79a8723-0d3d-ea2b-a0b5-347e8ec5518e",
	"b2e2ec8b-dea4-27ff-bf04-36a5ef39a581",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("1e6c89ff-f941-7c51-013e-1dc86807a023",
	"b79a8723-0d3d-ea2b-a0b5-347e8ec5518e",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("1e6c89ff-f941-7c51-013e-1dc86807a023",
	"b79a8723-0d3d-ea2b-a0b5-347e8ec5518e",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb");
INSERT INTO R_OIR
	VALUES ("1e6c89ff-f941-7c51-013e-1dc86807a023",
	"b79a8723-0d3d-ea2b-a0b5-347e8ec5518e",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("2a28f481-70d3-e76a-440c-6738e62430b6",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("2a28f481-70d3-e76a-440c-6738e62430b6",
	5,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("2a28f481-70d3-e76a-440c-6738e62430b6");
INSERT INTO R_PART
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"2a28f481-70d3-e76a-440c-6738e62430b6",
	"8718f67e-1427-6471-bb23-360a7ff64490",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"2a28f481-70d3-e76a-440c-6738e62430b6",
	"8718f67e-1427-6471-bb23-360a7ff64490");
INSERT INTO R_RTO
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"2a28f481-70d3-e76a-440c-6738e62430b6",
	"8718f67e-1427-6471-bb23-360a7ff64490",
	0);
INSERT INTO R_OIR
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"2a28f481-70d3-e76a-440c-6738e62430b6",
	"8718f67e-1427-6471-bb23-360a7ff64490",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"2a28f481-70d3-e76a-440c-6738e62430b6",
	"b15c758a-e852-d3b7-368c-45b43b3e1826",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"2a28f481-70d3-e76a-440c-6738e62430b6",
	"b15c758a-e852-d3b7-368c-45b43b3e1826");
INSERT INTO R_OIR
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"2a28f481-70d3-e76a-440c-6738e62430b6",
	"b15c758a-e852-d3b7-368c-45b43b3e1826",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("134475d9-0b9b-e0d8-879c-74e4c932912b",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("134475d9-0b9b-e0d8-879c-74e4c932912b",
	6,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("134475d9-0b9b-e0d8-879c-74e4c932912b");
INSERT INTO R_FORM
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"707287a5-c35b-e22f-7537-2c582e2fcad4");
INSERT INTO R_OIR
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"22d47560-b904-1ecb-2823-fa6adbb028c5");
INSERT INTO O_RTIDA
	VALUES ("517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"22d47560-b904-1ecb-2823-fa6adbb028c5");
INSERT INTO O_RTIDA
	VALUES ("546af508-6644-720b-b9b9-0c2296469456",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"22d47560-b904-1ecb-2823-fa6adbb028c5");
INSERT INTO O_RTIDA
	VALUES ("ac41f78c-bf20-3716-942e-d02f0d05f339",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"22d47560-b904-1ecb-2823-fa6adbb028c5");
INSERT INTO O_RTIDA
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"22d47560-b904-1ecb-2823-fa6adbb028c5");
INSERT INTO O_RTIDA
	VALUES ("5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"22d47560-b904-1ecb-2823-fa6adbb028c5");
INSERT INTO O_RTIDA
	VALUES ("3fada4f9-1878-6dd7-1906-5914adad93cc",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"22d47560-b904-1ecb-2823-fa6adbb028c5");
INSERT INTO O_RTIDA
	VALUES ("db15a1f3-97b7-8e2e-310f-24660457e73d",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"22d47560-b904-1ecb-2823-fa6adbb028c5");
INSERT INTO O_RTIDA
	VALUES ("5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"22d47560-b904-1ecb-2823-fa6adbb028c5");
INSERT INTO O_RTIDA
	VALUES ("22c96144-8305-abca-b854-591cdee5564f",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"22d47560-b904-1ecb-2823-fa6adbb028c5");
INSERT INTO R_RTO
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	0);
INSERT INTO R_OIR
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"134475d9-0b9b-e0d8-879c-74e4c932912b",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("04fd3f21-66da-682e-ca18-9142f16d3b3b",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("04fd3f21-66da-682e-ca18-9142f16d3b3b",
	8,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("04fd3f21-66da-682e-ca18-9142f16d3b3b");
INSERT INTO R_PART
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"04fd3f21-66da-682e-ca18-9142f16d3b3b",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"04fd3f21-66da-682e-ca18-9142f16d3b3b",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9");
INSERT INTO R_RTO
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"04fd3f21-66da-682e-ca18-9142f16d3b3b",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	0);
INSERT INTO R_OIR
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"04fd3f21-66da-682e-ca18-9142f16d3b3b",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"04fd3f21-66da-682e-ca18-9142f16d3b3b",
	"02262cc5-d9d5-4e97-5fae-f6e0aac3c193",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"04fd3f21-66da-682e-ca18-9142f16d3b3b",
	"02262cc5-d9d5-4e97-5fae-f6e0aac3c193");
INSERT INTO R_OIR
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"04fd3f21-66da-682e-ca18-9142f16d3b3b",
	"02262cc5-d9d5-4e97-5fae-f6e0aac3c193",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("66b0822f-3b1c-2ccc-e633-131ae1933aec",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("66b0822f-3b1c-2ccc-e633-131ae1933aec",
	9,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("66b0822f-3b1c-2ccc-e633-131ae1933aec");
INSERT INTO R_FORM
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"66b0822f-3b1c-2ccc-e633-131ae1933aec",
	"f6c268ca-e109-3988-725a-ea63b35be15c",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"66b0822f-3b1c-2ccc-e633-131ae1933aec",
	"f6c268ca-e109-3988-725a-ea63b35be15c");
INSERT INTO R_OIR
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"66b0822f-3b1c-2ccc-e633-131ae1933aec",
	"f6c268ca-e109-3988-725a-ea63b35be15c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"66b0822f-3b1c-2ccc-e633-131ae1933aec",
	"07c01707-9e75-8097-ee75-357c05543f5c",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("33987c18-574f-fa99-ec74-5e3ca6de81e5",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	0,
	"66b0822f-3b1c-2ccc-e633-131ae1933aec",
	"07c01707-9e75-8097-ee75-357c05543f5c");
INSERT INTO O_RTIDA
	VALUES ("f0cf3dfb-53b5-3803-d3d0-c3d73daa7494",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	0,
	"66b0822f-3b1c-2ccc-e633-131ae1933aec",
	"07c01707-9e75-8097-ee75-357c05543f5c");
INSERT INTO R_RTO
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"66b0822f-3b1c-2ccc-e633-131ae1933aec",
	"07c01707-9e75-8097-ee75-357c05543f5c",
	0);
INSERT INTO R_OIR
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"66b0822f-3b1c-2ccc-e633-131ae1933aec",
	"07c01707-9e75-8097-ee75-357c05543f5c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("b7f9c61a-a006-11e4-e21c-27ddfde92e61",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("b7f9c61a-a006-11e4-e21c-27ddfde92e61",
	10,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("b7f9c61a-a006-11e4-e21c-27ddfde92e61");
INSERT INTO R_PART
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"b7f9c61a-a006-11e4-e21c-27ddfde92e61",
	"b6edf5c7-5180-7ade-fcfb-64b3c188d4e2",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("f64b8be7-7c94-1146-33c9-6b525c0b9014",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"b7f9c61a-a006-11e4-e21c-27ddfde92e61",
	"b6edf5c7-5180-7ade-fcfb-64b3c188d4e2");
INSERT INTO R_RTO
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"b7f9c61a-a006-11e4-e21c-27ddfde92e61",
	"b6edf5c7-5180-7ade-fcfb-64b3c188d4e2",
	0);
INSERT INTO R_OIR
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"b7f9c61a-a006-11e4-e21c-27ddfde92e61",
	"b6edf5c7-5180-7ade-fcfb-64b3c188d4e2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"b7f9c61a-a006-11e4-e21c-27ddfde92e61",
	"81aab7e5-5338-0367-8f49-1063a46438e6",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"b7f9c61a-a006-11e4-e21c-27ddfde92e61",
	"81aab7e5-5338-0367-8f49-1063a46438e6");
INSERT INTO R_OIR
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"b7f9c61a-a006-11e4-e21c-27ddfde92e61",
	"81aab7e5-5338-0367-8f49-1063a46438e6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("6de8269d-227c-c695-f4ee-f9d275b3bafc",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("6de8269d-227c-c695-f4ee-f9d275b3bafc",
	11,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("6de8269d-227c-c695-f4ee-f9d275b3bafc");
INSERT INTO R_FORM
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"6de8269d-227c-c695-f4ee-f9d275b3bafc",
	"aba51cb0-6058-f3e0-0c5d-16d5a8f414fd",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"6de8269d-227c-c695-f4ee-f9d275b3bafc",
	"aba51cb0-6058-f3e0-0c5d-16d5a8f414fd");
INSERT INTO R_OIR
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"6de8269d-227c-c695-f4ee-f9d275b3bafc",
	"aba51cb0-6058-f3e0-0c5d-16d5a8f414fd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"6de8269d-227c-c695-f4ee-f9d275b3bafc",
	"257d30b6-989c-e1fe-c1ae-30dbb5c0483f",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("adf109f5-da95-b42e-5974-bd1094f7c783",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	0,
	"6de8269d-227c-c695-f4ee-f9d275b3bafc",
	"257d30b6-989c-e1fe-c1ae-30dbb5c0483f");
INSERT INTO O_RTIDA
	VALUES ("8b7f1db6-5fd5-db6c-8fff-1dfa55890896",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	0,
	"6de8269d-227c-c695-f4ee-f9d275b3bafc",
	"257d30b6-989c-e1fe-c1ae-30dbb5c0483f");
INSERT INTO R_RTO
	VALUES ("cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"6de8269d-227c-c695-f4ee-f9d275b3bafc",
	"257d30b6-989c-e1fe-c1ae-30dbb5c0483f",
	0);
INSERT INTO R_OIR
	VALUES ("cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"6de8269d-227c-c695-f4ee-f9d275b3bafc",
	"257d30b6-989c-e1fe-c1ae-30dbb5c0483f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("125a0c87-0542-7326-b999-f318842c61d7",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("125a0c87-0542-7326-b999-f318842c61d7",
	12,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("125a0c87-0542-7326-b999-f318842c61d7");
INSERT INTO R_FORM
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"125a0c87-0542-7326-b999-f318842c61d7",
	"5de510f2-4f08-c286-e184-598c6b8c41be",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"125a0c87-0542-7326-b999-f318842c61d7",
	"5de510f2-4f08-c286-e184-598c6b8c41be");
INSERT INTO R_OIR
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"125a0c87-0542-7326-b999-f318842c61d7",
	"5de510f2-4f08-c286-e184-598c6b8c41be",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"125a0c87-0542-7326-b999-f318842c61d7",
	"e7e30b68-1f68-8f6e-8998-924b8ef4eb7b",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("3c5d7fc7-241a-baad-f337-7a70b711fec5",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	0,
	"125a0c87-0542-7326-b999-f318842c61d7",
	"e7e30b68-1f68-8f6e-8998-924b8ef4eb7b");
INSERT INTO O_RTIDA
	VALUES ("f2152e91-55a6-afb0-cfbe-b01b29a9adf2",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	0,
	"125a0c87-0542-7326-b999-f318842c61d7",
	"e7e30b68-1f68-8f6e-8998-924b8ef4eb7b");
INSERT INTO R_RTO
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"125a0c87-0542-7326-b999-f318842c61d7",
	"e7e30b68-1f68-8f6e-8998-924b8ef4eb7b",
	0);
INSERT INTO R_OIR
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"125a0c87-0542-7326-b999-f318842c61d7",
	"e7e30b68-1f68-8f6e-8998-924b8ef4eb7b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("6bdd685b-cf83-cfaf-0a6d-f4b80c10e29d",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("6bdd685b-cf83-cfaf-0a6d-f4b80c10e29d",
	13,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("6bdd685b-cf83-cfaf-0a6d-f4b80c10e29d");
INSERT INTO R_PART
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"6bdd685b-cf83-cfaf-0a6d-f4b80c10e29d",
	"8fb89da8-8b80-2d3c-c38f-3dc7b03dad05",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("5d8c7dd1-b2d2-1dcc-d3de-9c21f8e92073",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	0,
	"6bdd685b-cf83-cfaf-0a6d-f4b80c10e29d",
	"8fb89da8-8b80-2d3c-c38f-3dc7b03dad05");
INSERT INTO R_RTO
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"6bdd685b-cf83-cfaf-0a6d-f4b80c10e29d",
	"8fb89da8-8b80-2d3c-c38f-3dc7b03dad05",
	0);
INSERT INTO R_OIR
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"6bdd685b-cf83-cfaf-0a6d-f4b80c10e29d",
	"8fb89da8-8b80-2d3c-c38f-3dc7b03dad05",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"6bdd685b-cf83-cfaf-0a6d-f4b80c10e29d",
	"f2bbdee6-416e-96c1-3050-8dbfa2bf35ca",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"6bdd685b-cf83-cfaf-0a6d-f4b80c10e29d",
	"f2bbdee6-416e-96c1-3050-8dbfa2bf35ca");
INSERT INTO R_OIR
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"6bdd685b-cf83-cfaf-0a6d-f4b80c10e29d",
	"f2bbdee6-416e-96c1-3050-8dbfa2bf35ca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("74e91883-d0d6-cd68-fd74-260cf0292fe0",
	1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("74e91883-d0d6-cd68-fd74-260cf0292fe0",
	14,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("74e91883-d0d6-cd68-fd74-260cf0292fe0");
INSERT INTO R_FORM
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"74e91883-d0d6-cd68-fd74-260cf0292fe0",
	"d2731eed-d45b-8488-c477-68028ee27487",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"74e91883-d0d6-cd68-fd74-260cf0292fe0",
	"d2731eed-d45b-8488-c477-68028ee27487");
INSERT INTO R_OIR
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"74e91883-d0d6-cd68-fd74-260cf0292fe0",
	"d2731eed-d45b-8488-c477-68028ee27487",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	"74e91883-d0d6-cd68-fd74-260cf0292fe0",
	"a08be01c-035c-c6e7-80f5-65992b192eff",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("2ec8d45f-1a3a-8574-234a-c9e08aa4de03",
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	0,
	"74e91883-d0d6-cd68-fd74-260cf0292fe0",
	"a08be01c-035c-c6e7-80f5-65992b192eff");
INSERT INTO O_RTIDA
	VALUES ("e3e3fc9a-7b6f-a227-644a-d65c7724182f",
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	0,
	"74e91883-d0d6-cd68-fd74-260cf0292fe0",
	"a08be01c-035c-c6e7-80f5-65992b192eff");
INSERT INTO R_RTO
	VALUES ("49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	"74e91883-d0d6-cd68-fd74-260cf0292fe0",
	"a08be01c-035c-c6e7-80f5-65992b192eff",
	0);
INSERT INTO R_OIR
	VALUES ("49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	"74e91883-d0d6-cd68-fd74-260cf0292fe0",
	"a08be01c-035c-c6e7-80f5-65992b192eff",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("ca932cb9-dd71-5e66-804d-2fc3c8e4d9ff",
	1,
	"a1102055-ed45-4184-c449-a339dcb295b0",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("ca932cb9-dd71-5e66-804d-2fc3c8e4d9ff",
	"00000000-0000-0000-0000-000000000000",
	"edb4e2c6-e0a9-15b2-ab17-b566adbf3747",
	'External Entities',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("4ea1ed9d-3ade-2feb-baca-2ed4b86df5b8",
	112,
	"ca932cb9-dd71-5e66-804d-2fc3c8e4d9ff",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::External Entities');
INSERT INTO DIM_DIA
	VALUES ("4ea1ed9d-3ade-2feb-baca-2ed4b86df5b8",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("63f9f41e-d838-de05-2cd4-39e8e8731894",
	1,
	"a1102055-ed45-4184-c449-a339dcb295b0",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("63f9f41e-d838-de05-2cd4-39e8e8731894",
	"00000000-0000-0000-0000-000000000000",
	"edb4e2c6-e0a9-15b2-ab17-b566adbf3747",
	'Datatypes',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("23a40782-938b-7291-a8d7-d76f1774b34b",
	112,
	"63f9f41e-d838-de05-2cd4-39e8e8731894",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes');
INSERT INTO GD_GE
	VALUES ("cc83311d-6d19-1d2f-621c-ecd566ff5b63",
	"23a40782-938b-7291-a8d7-d76f1774b34b",
	"cb708e96-e508-4b74-651d-60a4e6c3d977",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_b');
INSERT INTO GD_SHP
	VALUES ("cc83311d-6d19-1d2f-621c-ecd566ff5b63");
INSERT INTO GD_NCS
	VALUES ("cc83311d-6d19-1d2f-621c-ecd566ff5b63");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"cc83311d-6d19-1d2f-621c-ecd566ff5b63");
INSERT INTO DIM_GE
	VALUES (2280.000000,
	1690.000000,
	"cc83311d-6d19-1d2f-621c-ecd566ff5b63",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cc83311d-6d19-1d2f-621c-ecd566ff5b63",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("46e3cbf6-5faa-8365-e354-10b662ac2b0d",
	"23a40782-938b-7291-a8d7-d76f1774b34b",
	"00a1b3b7-7b31-b91b-a015-0bdfb1adc348",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_i');
INSERT INTO GD_SHP
	VALUES ("46e3cbf6-5faa-8365-e354-10b662ac2b0d");
INSERT INTO GD_NCS
	VALUES ("46e3cbf6-5faa-8365-e354-10b662ac2b0d");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"46e3cbf6-5faa-8365-e354-10b662ac2b0d");
INSERT INTO DIM_GE
	VALUES (2500.000000,
	1690.000000,
	"46e3cbf6-5faa-8365-e354-10b662ac2b0d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("46e3cbf6-5faa-8365-e354-10b662ac2b0d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("7f8fff3b-7c40-146b-5025-f97d3f3814a3",
	"23a40782-938b-7291-a8d7-d76f1774b34b",
	"037ef492-b94c-32a9-42e1-b007dbceb9cf",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_r');
INSERT INTO GD_SHP
	VALUES ("7f8fff3b-7c40-146b-5025-f97d3f3814a3");
INSERT INTO GD_NCS
	VALUES ("7f8fff3b-7c40-146b-5025-f97d3f3814a3");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"7f8fff3b-7c40-146b-5025-f97d3f3814a3");
INSERT INTO DIM_GE
	VALUES (1620.000000,
	1855.000000,
	"7f8fff3b-7c40-146b-5025-f97d3f3814a3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7f8fff3b-7c40-146b-5025-f97d3f3814a3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("4bdb7694-1ca8-3900-8021-485561b0ea90",
	"23a40782-938b-7291-a8d7-d76f1774b34b",
	"ac25881d-a818-3549-8225-c50b0c11a3e2",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_s');
INSERT INTO GD_SHP
	VALUES ("4bdb7694-1ca8-3900-8021-485561b0ea90");
INSERT INTO GD_NCS
	VALUES ("4bdb7694-1ca8-3900-8021-485561b0ea90");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"4bdb7694-1ca8-3900-8021-485561b0ea90");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1855.000000,
	"4bdb7694-1ca8-3900-8021-485561b0ea90",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4bdb7694-1ca8-3900-8021-485561b0ea90",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("d9d62e88-7608-e466-54f5-dea7b40a052f",
	"23a40782-938b-7291-a8d7-d76f1774b34b",
	"6d6edcea-5845-a918-db2c-105d9878c9a5",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_u');
INSERT INTO GD_SHP
	VALUES ("d9d62e88-7608-e466-54f5-dea7b40a052f");
INSERT INTO GD_NCS
	VALUES ("d9d62e88-7608-e466-54f5-dea7b40a052f");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"d9d62e88-7608-e466-54f5-dea7b40a052f");
INSERT INTO DIM_GE
	VALUES (2060.000000,
	1855.000000,
	"d9d62e88-7608-e466-54f5-dea7b40a052f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d9d62e88-7608-e466-54f5-dea7b40a052f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("23a40782-938b-7291-a8d7-d76f1774b34b",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("cb708e96-e508-4b74-651d-60a4e6c3d977",
	1,
	"63f9f41e-d838-de05-2cd4-39e8e8731894",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("cb708e96-e508-4b74-651d-60a4e6c3d977",
	"00000000-0000-0000-0000-000000000000",
	'my_b',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("cb708e96-e508-4b74-651d-60a4e6c3d977",
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("00a1b3b7-7b31-b91b-a015-0bdfb1adc348",
	1,
	"63f9f41e-d838-de05-2cd4-39e8e8731894",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("00a1b3b7-7b31-b91b-a015-0bdfb1adc348",
	"00000000-0000-0000-0000-000000000000",
	'my_i',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("00a1b3b7-7b31-b91b-a015-0bdfb1adc348",
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("037ef492-b94c-32a9-42e1-b007dbceb9cf",
	1,
	"63f9f41e-d838-de05-2cd4-39e8e8731894",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("037ef492-b94c-32a9-42e1-b007dbceb9cf",
	"00000000-0000-0000-0000-000000000000",
	'my_r',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("037ef492-b94c-32a9-42e1-b007dbceb9cf",
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("ac25881d-a818-3549-8225-c50b0c11a3e2",
	1,
	"63f9f41e-d838-de05-2cd4-39e8e8731894",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("ac25881d-a818-3549-8225-c50b0c11a3e2",
	"00000000-0000-0000-0000-000000000000",
	'my_s',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("ac25881d-a818-3549-8225-c50b0c11a3e2",
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("6d6edcea-5845-a918-db2c-105d9878c9a5",
	1,
	"63f9f41e-d838-de05-2cd4-39e8e8731894",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("6d6edcea-5845-a918-db2c-105d9878c9a5",
	"00000000-0000-0000-0000-000000000000",
	'my_u',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("6d6edcea-5845-a918-db2c-105d9878c9a5",
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("a1102055-ed45-4184-c449-a339dcb295b0",
	0,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO GD_GE
	VALUES ("736b927d-8efa-1829-cdbf-3e372604ae11",
	"1a92e7b0-9a7a-7cf2-2ded-a5b55355c65b",
	"a1102055-ed45-4184-c449-a339dcb295b0",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1');
INSERT INTO GD_SHP
	VALUES ("736b927d-8efa-1829-cdbf-3e372604ae11");
INSERT INTO GD_NCS
	VALUES ("736b927d-8efa-1829-cdbf-3e372604ae11");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"736b927d-8efa-1829-cdbf-3e372604ae11");
INSERT INTO DIM_GE
	VALUES (4010.000000,
	0.000000,
	"736b927d-8efa-1829-cdbf-3e372604ae11",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("736b927d-8efa-1829-cdbf-3e372604ae11",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYS_PROXY
	VALUES ("edb4e2c6-e0a9-15b2-ab17-b566adbf3747",
	'org.xtuml.bp.io.mdl.test',
	1,
	'../org.xtuml.bp.io.mdl.test.xtuml');
