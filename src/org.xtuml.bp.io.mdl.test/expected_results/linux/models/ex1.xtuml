-- root-types-contained: Package_c
-- BP 7.1 content: StreamData syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
<<<<<<< HEAD
	VALUES ("63fd1de7-6bd5-10d1-407e-94c129def0be",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'ex1',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("964edf66-e600-a260-8f1b-e9aa26f6debb",
	112,
	"63fd1de7-6bd5-10d1-407e-94c129def0be",
	108,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.io.mdl.test::ex1');
INSERT INTO GD_GE
	VALUES ("f753e61b-1145-835b-307c-e3168770fff9",
	"964edf66-e600-a260-8f1b-e9aa26f6debb",
	"d6685874-17cb-e254-651b-74df73d39af6",
	108,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex');
INSERT INTO GD_SHP
	VALUES ("f753e61b-1145-835b-307c-e3168770fff9");
INSERT INTO GD_NCS
	VALUES ("f753e61b-1145-835b-307c-e3168770fff9");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"f753e61b-1145-835b-307c-e3168770fff9");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1344.000000,
	"f753e61b-1145-835b-307c-e3168770fff9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f753e61b-1145-835b-307c-e3168770fff9",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("f4be1fad-5bc9-7d1a-8f61-1d9ae2898a88",
	"964edf66-e600-a260-8f1b-e9aa26f6debb",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	108,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::Datatypes');
INSERT INTO GD_SHP
	VALUES ("f4be1fad-5bc9-7d1a-8f61-1d9ae2898a88");
INSERT INTO GD_NCS
	VALUES ("f4be1fad-5bc9-7d1a-8f61-1d9ae2898a88");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"f4be1fad-5bc9-7d1a-8f61-1d9ae2898a88");
INSERT INTO DIM_GE
	VALUES (2240.000000,
	1568.000000,
	"f4be1fad-5bc9-7d1a-8f61-1d9ae2898a88",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f4be1fad-5bc9-7d1a-8f61-1d9ae2898a88",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("930093a4-d581-949a-90c1-a5dd2b65163f",
	"964edf66-e600-a260-8f1b-e9aa26f6debb",
	"c55e6fa6-defc-761d-630d-67b989a05dee",
	108,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::External Entities');
INSERT INTO GD_SHP
	VALUES ("930093a4-d581-949a-90c1-a5dd2b65163f");
INSERT INTO GD_NCS
	VALUES ("930093a4-d581-949a-90c1-a5dd2b65163f");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"930093a4-d581-949a-90c1-a5dd2b65163f");
INSERT INTO DIM_GE
	VALUES (2064.000000,
	1568.000000,
	"930093a4-d581-949a-90c1-a5dd2b65163f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("930093a4-d581-949a-90c1-a5dd2b65163f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("964edf66-e600-a260-8f1b-e9aa26f6debb",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("d6685874-17cb-e254-651b-74df73d39af6",
	1,
	"63fd1de7-6bd5-10d1-407e-94c129def0be",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'ex',
	'',
	1);
INSERT INTO GD_MD
	VALUES ("830d48b4-c6f3-e870-517a-5c88d0e30b55",
	112,
	"d6685874-17cb-e254-651b-74df73d39af6",
	108,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex');
INSERT INTO GD_GE
	VALUES ("1caceeb8-28a0-e971-2f51-e3412c3b201e",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"15897bf0-a009-f6d4-8f3c-4d78354e6954",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::ex init');
INSERT INTO GD_SHP
	VALUES ("1caceeb8-28a0-e971-2f51-e3412c3b201e");
INSERT INTO GD_NCS
	VALUES ("1caceeb8-28a0-e971-2f51-e3412c3b201e");
INSERT INTO DIM_ND
	VALUES (224.000000,
	144.000000,
	"1caceeb8-28a0-e971-2f51-e3412c3b201e");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1216.000000,
	"1caceeb8-28a0-e971-2f51-e3412c3b201e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1caceeb8-28a0-e971-2f51-e3412c3b201e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("ad9d32cb-a339-02a8-7d53-34621269789f",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test');
INSERT INTO GD_SHP
	VALUES ("ad9d32cb-a339-02a8-7d53-34621269789f");
INSERT INTO GD_NCS
	VALUES ("ad9d32cb-a339-02a8-7d53-34621269789f");
INSERT INTO DIM_ND
	VALUES (240.000000,
	464.000000,
	"ad9d32cb-a339-02a8-7d53-34621269789f");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1392.000000,
	"ad9d32cb-a339-02a8-7d53-34621269789f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ad9d32cb-a339-02a8-7d53-34621269789f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("8c44ddb8-b5b4-e56e-7374-a28d92a45df7",
	1760.000000,
	1856.000000,
	"ad9d32cb-a339-02a8-7d53-34621269789f");
INSERT INTO DIM_CON
	VALUES ("7db56347-f5fd-13c3-11a8-49b7c55ae98d",
	1888.000000,
	1440.000000,
	"ad9d32cb-a339-02a8-7d53-34621269789f");
INSERT INTO DIM_CON
	VALUES ("69a72333-26cb-75e2-ce6b-a5092f699ec7",
	1888.000000,
	1584.000000,
	"ad9d32cb-a339-02a8-7d53-34621269789f");
INSERT INTO DIM_CON
	VALUES ("e4a15994-36f5-92f7-d4e0-ece7c4d7f2d0",
	1888.000000,
	1728.000000,
	"ad9d32cb-a339-02a8-7d53-34621269789f");
INSERT INTO DIM_CON
	VALUES ("131559ea-2809-2da4-8ebd-c39257f63556",
	1888.000000,
	1472.000000,
	"ad9d32cb-a339-02a8-7d53-34621269789f");
INSERT INTO DIM_CON
	VALUES ("5a4408e9-2393-7186-59cb-9d94ab7b9ad9",
	1856.000000,
	1856.000000,
	"ad9d32cb-a339-02a8-7d53-34621269789f");
INSERT INTO GD_GE
	VALUES ("61039cd3-5d9e-381f-4508-434a55c90e2e",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"4499f6c3-80dc-704a-30c4-634afc20fa11",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::No Instances');
INSERT INTO GD_SHP
	VALUES ("61039cd3-5d9e-381f-4508-434a55c90e2e");
INSERT INTO GD_NCS
	VALUES ("61039cd3-5d9e-381f-4508-434a55c90e2e");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"61039cd3-5d9e-381f-4508-434a55c90e2e");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1392.000000,
	"61039cd3-5d9e-381f-4508-434a55c90e2e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("61039cd3-5d9e-381f-4508-434a55c90e2e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("45d33152-5c4c-5550-3b9a-0cbb14ac9c47",
	2112.000000,
	1440.000000,
	"61039cd3-5d9e-381f-4508-434a55c90e2e");
INSERT INTO DIM_CON
	VALUES ("79c40a4a-3153-254e-db4a-b27d31b8a9fa",
	2112.000000,
	1472.000000,
	"61039cd3-5d9e-381f-4508-434a55c90e2e");
INSERT INTO GD_GE
	VALUES ("ae1cf5df-eabf-6daa-89b4-e769675c1e85",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"5e5da798-8add-9fc9-ec77-a674a64f4e16",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::One Instance');
INSERT INTO GD_SHP
	VALUES ("ae1cf5df-eabf-6daa-89b4-e769675c1e85");
INSERT INTO GD_NCS
	VALUES ("ae1cf5df-eabf-6daa-89b4-e769675c1e85");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"ae1cf5df-eabf-6daa-89b4-e769675c1e85");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1520.000000,
	"ae1cf5df-eabf-6daa-89b4-e769675c1e85",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ae1cf5df-eabf-6daa-89b4-e769675c1e85",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("3d65a92d-4fa6-a988-38ff-fe555a08940d",
	2112.000000,
	1584.000000,
	"ae1cf5df-eabf-6daa-89b4-e769675c1e85");
INSERT INTO GD_GE
	VALUES ("da4f6723-3235-6cdd-b328-d3e29de82b9e",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"7c122a7e-3103-34cd-02f7-40c493971529",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Many Instances');
INSERT INTO GD_SHP
	VALUES ("da4f6723-3235-6cdd-b328-d3e29de82b9e");
INSERT INTO GD_NCS
	VALUES ("da4f6723-3235-6cdd-b328-d3e29de82b9e");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"da4f6723-3235-6cdd-b328-d3e29de82b9e");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1664.000000,
	"da4f6723-3235-6cdd-b328-d3e29de82b9e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("da4f6723-3235-6cdd-b328-d3e29de82b9e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c58078d1-9527-7bfd-895b-0c5fe93d6c70",
	2112.000000,
	1728.000000,
	"da4f6723-3235-6cdd-b328-d3e29de82b9e");
INSERT INTO GD_GE
	VALUES ("5aaa1894-60ec-221e-df44-98c73a52847d",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Any Object');
INSERT INTO GD_SHP
	VALUES ("5aaa1894-60ec-221e-df44-98c73a52847d");
INSERT INTO GD_NCS
	VALUES ("5aaa1894-60ec-221e-df44-98c73a52847d");
INSERT INTO DIM_ND
	VALUES (192.000000,
	160.000000,
	"5aaa1894-60ec-221e-df44-98c73a52847d");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1216.000000,
	"5aaa1894-60ec-221e-df44-98c73a52847d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5aaa1894-60ec-221e-df44-98c73a52847d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("30c46819-a8a8-7e58-21f6-d0156eaae0bd",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test Object B');
INSERT INTO GD_SHP
	VALUES ("30c46819-a8a8-7e58-21f6-d0156eaae0bd");
INSERT INTO GD_NCS
	VALUES ("30c46819-a8a8-7e58-21f6-d0156eaae0bd");
INSERT INTO DIM_ND
	VALUES (272.000000,
	368.000000,
	"30c46819-a8a8-7e58-21f6-d0156eaae0bd");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1952.000000,
	"30c46819-a8a8-7e58-21f6-d0156eaae0bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("30c46819-a8a8-7e58-21f6-d0156eaae0bd",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("f17d646f-0608-fd91-cef1-a67c1e39866e",
	1760.000000,
	1952.000000,
	"30c46819-a8a8-7e58-21f6-d0156eaae0bd");
INSERT INTO DIM_CON
	VALUES ("47b00430-9927-6216-f3e3-45c503c79440",
	1712.000000,
	2320.000000,
	"30c46819-a8a8-7e58-21f6-d0156eaae0bd");
INSERT INTO DIM_CON
	VALUES ("b0386f06-89c5-9f3d-cb26-a27f9db104ab",
	1856.000000,
	1952.000000,
	"30c46819-a8a8-7e58-21f6-d0156eaae0bd");
INSERT INTO GD_GE
	VALUES ("d5c7c3ca-b4e5-9209-1691-79133f5bfa17",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test Object C');
INSERT INTO GD_SHP
	VALUES ("d5c7c3ca-b4e5-9209-1691-79133f5bfa17");
INSERT INTO GD_NCS
	VALUES ("d5c7c3ca-b4e5-9209-1691-79133f5bfa17");
INSERT INTO DIM_ND
	VALUES (256.000000,
	192.000000,
	"d5c7c3ca-b4e5-9209-1691-79133f5bfa17");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	2432.000000,
	"d5c7c3ca-b4e5-9209-1691-79133f5bfa17",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d5c7c3ca-b4e5-9209-1691-79133f5bfa17",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("5b11b55c-4e94-af0e-670c-3304e2741623",
	1712.000000,
	2432.000000,
	"d5c7c3ca-b4e5-9209-1691-79133f5bfa17");
INSERT INTO GD_GE
	VALUES ("0b89b4ef-689a-4188-6a10-1e8584942cc6",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"45229792-5569-b0f9-9dbf-fe9afe229577",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("0b89b4ef-689a-4188-6a10-1e8584942cc6");
INSERT INTO GD_NCS
	VALUES ("0b89b4ef-689a-4188-6a10-1e8584942cc6");
INSERT INTO DIM_ND
	VALUES (272.000000,
	160.000000,
	"0b89b4ef-689a-4188-6a10-1e8584942cc6");
INSERT INTO DIM_GE
	VALUES (1344.000000,
	1536.000000,
	"0b89b4ef-689a-4188-6a10-1e8584942cc6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0b89b4ef-689a-4188-6a10-1e8584942cc6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("09a77ac1-9c34-ea10-4b7f-d978bce2ebf3",
	1392.000000,
	1696.000000,
	"0b89b4ef-689a-4188-6a10-1e8584942cc6");
INSERT INTO DIM_CON
	VALUES ("16f647ed-6c76-8fb1-067a-2ffa5f21a25f",
	1552.000000,
	1696.000000,
	"0b89b4ef-689a-4188-6a10-1e8584942cc6");
INSERT INTO GD_GE
	VALUES ("8099bb84-180c-9809-b5a9-36adcea4e6c3",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"860e6be9-79b5-6cac-948f-79de5ae20b77",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Other Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("8099bb84-180c-9809-b5a9-36adcea4e6c3");
INSERT INTO GD_NCS
	VALUES ("8099bb84-180c-9809-b5a9-36adcea4e6c3");
INSERT INTO DIM_ND
	VALUES (256.000000,
	192.000000,
	"8099bb84-180c-9809-b5a9-36adcea4e6c3");
INSERT INTO DIM_GE
	VALUES (1344.000000,
	1856.000000,
	"8099bb84-180c-9809-b5a9-36adcea4e6c3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8099bb84-180c-9809-b5a9-36adcea4e6c3",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("03e531f9-eb66-bdd4-ff40-6e72a756aeda",
	1392.000000,
	1856.000000,
	"8099bb84-180c-9809-b5a9-36adcea4e6c3");
INSERT INTO DIM_CON
	VALUES ("5623a030-60ac-349f-f36f-aa3633f1e883",
	1552.000000,
	1856.000000,
	"8099bb84-180c-9809-b5a9-36adcea4e6c3");
INSERT INTO DIM_CON
	VALUES ("055f9a32-7430-049e-9df0-3d6f01841fbe",
	1456.000000,
	2048.000000,
	"8099bb84-180c-9809-b5a9-36adcea4e6c3");
INSERT INTO GD_GE
	VALUES ("c9af4fee-caad-1b51-5925-5c99c2ce88a8",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"c763a61f-25b6-1e54-fd8e-6ff3753a82f1",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Third Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("c9af4fee-caad-1b51-5925-5c99c2ce88a8");
INSERT INTO GD_NCS
	VALUES ("c9af4fee-caad-1b51-5925-5c99c2ce88a8");
INSERT INTO DIM_ND
	VALUES (240.000000,
	160.000000,
	"c9af4fee-caad-1b51-5925-5c99c2ce88a8");
INSERT INTO DIM_GE
	VALUES (1360.000000,
	2160.000000,
	"c9af4fee-caad-1b51-5925-5c99c2ce88a8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c9af4fee-caad-1b51-5925-5c99c2ce88a8",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("eefe4486-c1f0-5b51-89f4-a46a05e1582c",
	1456.000000,
	2160.000000,
	"c9af4fee-caad-1b51-5925-5c99c2ce88a8");
INSERT INTO GD_GE
	VALUES ("c0f4f76b-f8b9-c56a-9d73-56ad69b58594",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test');
INSERT INTO GD_SHP
	VALUES ("c0f4f76b-f8b9-c56a-9d73-56ad69b58594");
INSERT INTO GD_NCS
	VALUES ("c0f4f76b-f8b9-c56a-9d73-56ad69b58594");
INSERT INTO DIM_ND
	VALUES (304.000000,
	160.000000,
	"c0f4f76b-f8b9-c56a-9d73-56ad69b58594");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1536.000000,
	"c0f4f76b-f8b9-c56a-9d73-56ad69b58594",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c0f4f76b-f8b9-c56a-9d73-56ad69b58594",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("6a9c20e9-ad53-8c3f-7199-b94f984bf0f6",
	1024.000000,
	1696.000000,
	"c0f4f76b-f8b9-c56a-9d73-56ad69b58594");
INSERT INTO DIM_CON
	VALUES ("41870c00-b492-6b4c-97b0-81a416f0636e",
	1200.000000,
	1696.000000,
	"c0f4f76b-f8b9-c56a-9d73-56ad69b58594");
INSERT INTO GD_GE
	VALUES ("e68a5925-0252-7614-59fd-2f21bf1c59f1",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Other Boolean Test');
INSERT INTO GD_SHP
	VALUES ("e68a5925-0252-7614-59fd-2f21bf1c59f1");
INSERT INTO GD_NCS
	VALUES ("e68a5925-0252-7614-59fd-2f21bf1c59f1");
INSERT INTO DIM_ND
	VALUES (320.000000,
	208.000000,
	"e68a5925-0252-7614-59fd-2f21bf1c59f1");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1856.000000,
	"e68a5925-0252-7614-59fd-2f21bf1c59f1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e68a5925-0252-7614-59fd-2f21bf1c59f1",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("f58f58e4-adf3-7bc5-00d7-c6d0dcdbf592",
	1024.000000,
	1856.000000,
	"e68a5925-0252-7614-59fd-2f21bf1c59f1");
INSERT INTO DIM_CON
	VALUES ("0866985b-c920-22d1-c162-0cf96ebbcdd3",
	1200.000000,
	1856.000000,
	"e68a5925-0252-7614-59fd-2f21bf1c59f1");
INSERT INTO DIM_CON
	VALUES ("984e7209-2327-9ff3-0b96-af4921538ee1",
	1104.000000,
	2064.000000,
	"e68a5925-0252-7614-59fd-2f21bf1c59f1");
INSERT INTO GD_GE
	VALUES ("6cd5420d-81b2-b625-681a-3efc2082685f",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"b206dfa5-6fc4-3dad-f9b8-10333f80829d",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Third Boolean Test');
INSERT INTO GD_SHP
	VALUES ("6cd5420d-81b2-b625-681a-3efc2082685f");
INSERT INTO GD_NCS
	VALUES ("6cd5420d-81b2-b625-681a-3efc2082685f");
INSERT INTO DIM_ND
	VALUES (288.000000,
	176.000000,
	"6cd5420d-81b2-b625-681a-3efc2082685f");
INSERT INTO DIM_GE
	VALUES (976.000000,
	2160.000000,
	"6cd5420d-81b2-b625-681a-3efc2082685f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6cd5420d-81b2-b625-681a-3efc2082685f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c379ac21-c1ec-1b0b-902d-8da42306ca05",
	1104.000000,
	2160.000000,
	"6cd5420d-81b2-b625-681a-3efc2082685f");
INSERT INTO GD_GE
	VALUES ("a9a618a8-b528-69f1-8237-b020246650e8",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"1aaede22-0fcc-95bd-209b-fd34bb0689e3",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Event Instance');
INSERT INTO GD_SHP
	VALUES ("a9a618a8-b528-69f1-8237-b020246650e8");
INSERT INTO GD_NCS
	VALUES ("a9a618a8-b528-69f1-8237-b020246650e8");
INSERT INTO DIM_ND
	VALUES (256.000000,
	160.000000,
	"a9a618a8-b528-69f1-8237-b020246650e8");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1312.000000,
	"a9a618a8-b528-69f1-8237-b020246650e8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a9a618a8-b528-69f1-8237-b020246650e8",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("7427386f-c56e-75ff-8472-3fdc427337e1",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R1');
INSERT INTO GD_CON
	VALUES ("7427386f-c56e-75ff-8472-3fdc427337e1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("68be0603-376e-8757-bec3-8b89415a096a",
	"7427386f-c56e-75ff-8472-3fdc427337e1",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"68be0603-376e-8757-bec3-8b89415a096a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"68be0603-376e-8757-bec3-8b89415a096a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("68be0603-376e-8757-bec3-8b89415a096a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("64f3f6a3-ca3c-e691-6acd-64dcc302a94b",
	"7427386f-c56e-75ff-8472-3fdc427337e1",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"64f3f6a3-ca3c-e691-6acd-64dcc302a94b");
INSERT INTO DIM_GE
	VALUES (1744.000000,
	1888.000000,
	"64f3f6a3-ca3c-e691-6acd-64dcc302a94b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("64f3f6a3-ca3c-e691-6acd-64dcc302a94b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a0ef0827-bde9-c762-b41b-365ece92e17e",
	"7427386f-c56e-75ff-8472-3fdc427337e1",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a0ef0827-bde9-c762-b41b-365ece92e17e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a0ef0827-bde9-c762-b41b-365ece92e17e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a0ef0827-bde9-c762-b41b-365ece92e17e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("cb6bed28-f91a-f936-20df-60936b0a804f",
	"7427386f-c56e-75ff-8472-3fdc427337e1",
	"00000000-0000-0000-0000-000000000000",
	"577c3a06-5719-7b3e-b99a-90261e5ace74",
	"dd0dc104-09c6-0f49-f368-ad08125e7d3b");
INSERT INTO DIM_WAY
	VALUES ("577c3a06-5719-7b3e-b99a-90261e5ace74",
	1760.000000,
	1952.000000,
	"7427386f-c56e-75ff-8472-3fdc427337e1",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("dd0dc104-09c6-0f49-f368-ad08125e7d3b",
	1760.000000,
	1856.000000,
	"7427386f-c56e-75ff-8472-3fdc427337e1",
	"00000000-0000-0000-0000-000000000000",
	"577c3a06-5719-7b3e-b99a-90261e5ace74");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7427386f-c56e-75ff-8472-3fdc427337e1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7427386f-c56e-75ff-8472-3fdc427337e1",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("f17d646f-0608-fd91-cef1-a67c1e39866e",
	"8c44ddb8-b5b4-e56e-7374-a28d92a45df7",
	"7427386f-c56e-75ff-8472-3fdc427337e1");
INSERT INTO GD_GE
	VALUES ("6aa902ce-57fe-f6ef-a7a7-07645e6dcdae",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R2');
INSERT INTO GD_CON
	VALUES ("6aa902ce-57fe-f6ef-a7a7-07645e6dcdae",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a7d5afd6-8c0e-a780-8b4c-65140d09d546",
	"6aa902ce-57fe-f6ef-a7a7-07645e6dcdae",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a7d5afd6-8c0e-a780-8b4c-65140d09d546");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a7d5afd6-8c0e-a780-8b4c-65140d09d546",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a7d5afd6-8c0e-a780-8b4c-65140d09d546",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3f43c441-63c0-30ab-ca98-2c2ef07e2506",
	"6aa902ce-57fe-f6ef-a7a7-07645e6dcdae",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"3f43c441-63c0-30ab-ca98-2c2ef07e2506");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1408.000000,
	"3f43c441-63c0-30ab-ca98-2c2ef07e2506",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3f43c441-63c0-30ab-ca98-2c2ef07e2506",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("838d4fcb-66fa-9e72-77f0-dbfc2831a95a",
	"6aa902ce-57fe-f6ef-a7a7-07645e6dcdae",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"838d4fcb-66fa-9e72-77f0-dbfc2831a95a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"838d4fcb-66fa-9e72-77f0-dbfc2831a95a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("838d4fcb-66fa-9e72-77f0-dbfc2831a95a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("effabd42-6cd9-5a8e-9159-9bb7a89d6c3a",
	"6aa902ce-57fe-f6ef-a7a7-07645e6dcdae",
	"00000000-0000-0000-0000-000000000000",
	"dca2d4ab-0f0d-71e3-a3ad-3937773d114f",
	"fa947348-5602-2fa2-59ff-e39d5beb6f2f");
INSERT INTO DIM_WAY
	VALUES ("dca2d4ab-0f0d-71e3-a3ad-3937773d114f",
	1888.000000,
	1440.000000,
	"6aa902ce-57fe-f6ef-a7a7-07645e6dcdae",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("fa947348-5602-2fa2-59ff-e39d5beb6f2f",
	2112.000000,
	1440.000000,
	"6aa902ce-57fe-f6ef-a7a7-07645e6dcdae",
	"00000000-0000-0000-0000-000000000000",
	"dca2d4ab-0f0d-71e3-a3ad-3937773d114f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6aa902ce-57fe-f6ef-a7a7-07645e6dcdae",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6aa902ce-57fe-f6ef-a7a7-07645e6dcdae",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("7db56347-f5fd-13c3-11a8-49b7c55ae98d",
	"45d33152-5c4c-5550-3b9a-0cbb14ac9c47",
	"6aa902ce-57fe-f6ef-a7a7-07645e6dcdae");
INSERT INTO GD_GE
	VALUES ("e09f7fe7-3eec-73f4-cfcc-15e33a55354d",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R3');
INSERT INTO GD_CON
	VALUES ("e09f7fe7-3eec-73f4-cfcc-15e33a55354d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3a7a0cfa-de2a-ce83-7c1e-ad2399fad0c2",
	"e09f7fe7-3eec-73f4-cfcc-15e33a55354d",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3a7a0cfa-de2a-ce83-7c1e-ad2399fad0c2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3a7a0cfa-de2a-ce83-7c1e-ad2399fad0c2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3a7a0cfa-de2a-ce83-7c1e-ad2399fad0c2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8df88720-af5b-8407-cd91-869218fe841d",
	"e09f7fe7-3eec-73f4-cfcc-15e33a55354d",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"8df88720-af5b-8407-cd91-869218fe841d");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1552.000000,
	"8df88720-af5b-8407-cd91-869218fe841d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8df88720-af5b-8407-cd91-869218fe841d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("50abcd0d-cc40-9e50-ef5b-c08764ea8bb0",
	"e09f7fe7-3eec-73f4-cfcc-15e33a55354d",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"50abcd0d-cc40-9e50-ef5b-c08764ea8bb0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"50abcd0d-cc40-9e50-ef5b-c08764ea8bb0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("50abcd0d-cc40-9e50-ef5b-c08764ea8bb0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("5c19fedb-09f6-61dc-d026-ef82a29b59fe",
	"e09f7fe7-3eec-73f4-cfcc-15e33a55354d",
	"00000000-0000-0000-0000-000000000000",
	"d753230c-5eb9-d246-692e-2e0be2ad36a1",
	"fae5b192-8870-8a49-1598-61e78eb4f839");
INSERT INTO DIM_WAY
	VALUES ("d753230c-5eb9-d246-692e-2e0be2ad36a1",
	1888.000000,
	1584.000000,
	"e09f7fe7-3eec-73f4-cfcc-15e33a55354d",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("fae5b192-8870-8a49-1598-61e78eb4f839",
	2112.000000,
	1584.000000,
	"e09f7fe7-3eec-73f4-cfcc-15e33a55354d",
	"00000000-0000-0000-0000-000000000000",
	"d753230c-5eb9-d246-692e-2e0be2ad36a1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e09f7fe7-3eec-73f4-cfcc-15e33a55354d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e09f7fe7-3eec-73f4-cfcc-15e33a55354d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("69a72333-26cb-75e2-ce6b-a5092f699ec7",
	"3d65a92d-4fa6-a988-38ff-fe555a08940d",
	"e09f7fe7-3eec-73f4-cfcc-15e33a55354d");
INSERT INTO GD_GE
	VALUES ("35cba8c9-8db3-de31-4289-4216d176f36a",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R4');
INSERT INTO GD_CON
	VALUES ("35cba8c9-8db3-de31-4289-4216d176f36a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("028b8fbd-131f-8e84-40a3-e01c4ec488cd",
	"35cba8c9-8db3-de31-4289-4216d176f36a",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"028b8fbd-131f-8e84-40a3-e01c4ec488cd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"028b8fbd-131f-8e84-40a3-e01c4ec488cd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("028b8fbd-131f-8e84-40a3-e01c4ec488cd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("10d61a16-38ea-1a75-bce1-b77117bddda9",
	"35cba8c9-8db3-de31-4289-4216d176f36a",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"10d61a16-38ea-1a75-bce1-b77117bddda9");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1696.000000,
	"10d61a16-38ea-1a75-bce1-b77117bddda9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("10d61a16-38ea-1a75-bce1-b77117bddda9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("15500fe3-0c02-54bf-cc6b-d306a7ff8aa2",
	"35cba8c9-8db3-de31-4289-4216d176f36a",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"15500fe3-0c02-54bf-cc6b-d306a7ff8aa2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"15500fe3-0c02-54bf-cc6b-d306a7ff8aa2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("15500fe3-0c02-54bf-cc6b-d306a7ff8aa2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("58b88f16-83d6-bfda-3c45-882733dbaf7c",
	"35cba8c9-8db3-de31-4289-4216d176f36a",
	"00000000-0000-0000-0000-000000000000",
	"cf552224-d265-3b03-95b8-8c700abc764d",
	"1a7a3a2d-23fe-adc8-f793-a28cbcb96241");
INSERT INTO DIM_WAY
	VALUES ("cf552224-d265-3b03-95b8-8c700abc764d",
	1888.000000,
	1728.000000,
	"35cba8c9-8db3-de31-4289-4216d176f36a",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("1a7a3a2d-23fe-adc8-f793-a28cbcb96241",
	2112.000000,
	1728.000000,
	"35cba8c9-8db3-de31-4289-4216d176f36a",
	"00000000-0000-0000-0000-000000000000",
	"cf552224-d265-3b03-95b8-8c700abc764d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"35cba8c9-8db3-de31-4289-4216d176f36a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("35cba8c9-8db3-de31-4289-4216d176f36a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e4a15994-36f5-92f7-d4e0-ece7c4d7f2d0",
	"c58078d1-9527-7bfd-895b-0c5fe93d6c70",
	"35cba8c9-8db3-de31-4289-4216d176f36a");
INSERT INTO GD_GE
	VALUES ("1fd4289b-9e76-4bfb-d015-f21d729654ad",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R5');
INSERT INTO GD_CON
	VALUES ("1fd4289b-9e76-4bfb-d015-f21d729654ad",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d7f1f155-3327-db3b-536f-a8e2a556dd17",
	"1fd4289b-9e76-4bfb-d015-f21d729654ad",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d7f1f155-3327-db3b-536f-a8e2a556dd17");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d7f1f155-3327-db3b-536f-a8e2a556dd17",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d7f1f155-3327-db3b-536f-a8e2a556dd17",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f3c57b1f-574f-aaa0-fb27-f39f15c98dfe",
	"1fd4289b-9e76-4bfb-d015-f21d729654ad",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"f3c57b1f-574f-aaa0-fb27-f39f15c98dfe");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1440.000000,
	"f3c57b1f-574f-aaa0-fb27-f39f15c98dfe",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f3c57b1f-574f-aaa0-fb27-f39f15c98dfe",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2373ea64-f373-2862-0e8e-c3c4a8b47cf9",
	"1fd4289b-9e76-4bfb-d015-f21d729654ad",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"2373ea64-f373-2862-0e8e-c3c4a8b47cf9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2373ea64-f373-2862-0e8e-c3c4a8b47cf9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2373ea64-f373-2862-0e8e-c3c4a8b47cf9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("9db203b2-d142-86c5-6501-62c38da94e3f",
	"1fd4289b-9e76-4bfb-d015-f21d729654ad",
	"00000000-0000-0000-0000-000000000000",
	"b3c74d4a-87d4-a858-ab95-41c2641f4109",
	"6cf6b7f8-6426-d5ae-a750-a630655843e8");
INSERT INTO DIM_WAY
	VALUES ("b3c74d4a-87d4-a858-ab95-41c2641f4109",
	1888.000000,
	1472.000000,
	"1fd4289b-9e76-4bfb-d015-f21d729654ad",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("6cf6b7f8-6426-d5ae-a750-a630655843e8",
	2112.000000,
	1472.000000,
	"1fd4289b-9e76-4bfb-d015-f21d729654ad",
	"00000000-0000-0000-0000-000000000000",
	"b3c74d4a-87d4-a858-ab95-41c2641f4109");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1fd4289b-9e76-4bfb-d015-f21d729654ad",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1fd4289b-9e76-4bfb-d015-f21d729654ad",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("131559ea-2809-2da4-8ebd-c39257f63556",
	"79c40a4a-3153-254e-db4a-b27d31b8a9fa",
	"1fd4289b-9e76-4bfb-d015-f21d729654ad");
INSERT INTO GD_GE
	VALUES ("e980bfbe-9f60-1b1e-e0b8-a6ade213797f",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R6');
INSERT INTO GD_CON
	VALUES ("e980bfbe-9f60-1b1e-e0b8-a6ade213797f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("741858d2-a71c-9d7e-b14c-0176a5822956",
	"e980bfbe-9f60-1b1e-e0b8-a6ade213797f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"741858d2-a71c-9d7e-b14c-0176a5822956");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"741858d2-a71c-9d7e-b14c-0176a5822956",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("741858d2-a71c-9d7e-b14c-0176a5822956",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("35ccde98-7bae-a5e6-05ea-6d0e2d588b49",
	"e980bfbe-9f60-1b1e-e0b8-a6ade213797f",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"35ccde98-7bae-a5e6-05ea-6d0e2d588b49");
INSERT INTO DIM_GE
	VALUES (1696.000000,
	2344.000000,
	"35ccde98-7bae-a5e6-05ea-6d0e2d588b49",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("35ccde98-7bae-a5e6-05ea-6d0e2d588b49",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ece0f0b8-59c6-65cf-8adf-b3be144baffc",
	"e980bfbe-9f60-1b1e-e0b8-a6ade213797f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ece0f0b8-59c6-65cf-8adf-b3be144baffc");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ece0f0b8-59c6-65cf-8adf-b3be144baffc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ece0f0b8-59c6-65cf-8adf-b3be144baffc",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("c8c1dbaa-aa5c-d469-2254-9ad30f304e23",
	"e980bfbe-9f60-1b1e-e0b8-a6ade213797f",
	"00000000-0000-0000-0000-000000000000",
	"e4f1ef72-7086-b694-0b78-e37986b7644b",
	"c3a24c64-e3bc-3edc-2f19-21d113fa51b1");
INSERT INTO DIM_WAY
	VALUES ("e4f1ef72-7086-b694-0b78-e37986b7644b",
	1712.000000,
	2320.000000,
	"e980bfbe-9f60-1b1e-e0b8-a6ade213797f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c3a24c64-e3bc-3edc-2f19-21d113fa51b1",
	1712.000000,
	2432.000000,
	"e980bfbe-9f60-1b1e-e0b8-a6ade213797f",
	"00000000-0000-0000-0000-000000000000",
	"e4f1ef72-7086-b694-0b78-e37986b7644b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e980bfbe-9f60-1b1e-e0b8-a6ade213797f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e980bfbe-9f60-1b1e-e0b8-a6ade213797f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("47b00430-9927-6216-f3e3-45c503c79440",
	"5b11b55c-4e94-af0e-670c-3304e2741623",
	"e980bfbe-9f60-1b1e-e0b8-a6ade213797f");
INSERT INTO GD_GE
	VALUES ("7b087034-19ba-fe32-be20-309548dd3f07",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R8');
INSERT INTO GD_CON
	VALUES ("7b087034-19ba-fe32-be20-309548dd3f07",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1cbd522a-cde8-9ec4-9864-9246e7ad60fb",
	"7b087034-19ba-fe32-be20-309548dd3f07",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1cbd522a-cde8-9ec4-9864-9246e7ad60fb");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1cbd522a-cde8-9ec4-9864-9246e7ad60fb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1cbd522a-cde8-9ec4-9864-9246e7ad60fb",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c64e82d9-fb97-75ef-7592-e332e3348bf3",
	"7b087034-19ba-fe32-be20-309548dd3f07",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"c64e82d9-fb97-75ef-7592-e332e3348bf3");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1888.000000,
	"c64e82d9-fb97-75ef-7592-e332e3348bf3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c64e82d9-fb97-75ef-7592-e332e3348bf3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3b62b72d-d6a5-6105-74cf-867d2ff6bdd9",
	"7b087034-19ba-fe32-be20-309548dd3f07",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3b62b72d-d6a5-6105-74cf-867d2ff6bdd9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3b62b72d-d6a5-6105-74cf-867d2ff6bdd9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3b62b72d-d6a5-6105-74cf-867d2ff6bdd9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("fa10c9e4-0284-beef-e7f9-049e66b6f717",
	"7b087034-19ba-fe32-be20-309548dd3f07",
	"00000000-0000-0000-0000-000000000000",
	"0dc21a04-387d-774d-92a3-f3c8f8a1d735",
	"c01bf11d-643c-286d-b1f5-6125294aafc3");
INSERT INTO DIM_WAY
	VALUES ("0dc21a04-387d-774d-92a3-f3c8f8a1d735",
	1856.000000,
	1856.000000,
	"7b087034-19ba-fe32-be20-309548dd3f07",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c01bf11d-643c-286d-b1f5-6125294aafc3",
	1856.000000,
	1952.000000,
	"7b087034-19ba-fe32-be20-309548dd3f07",
	"00000000-0000-0000-0000-000000000000",
	"0dc21a04-387d-774d-92a3-f3c8f8a1d735");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7b087034-19ba-fe32-be20-309548dd3f07",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7b087034-19ba-fe32-be20-309548dd3f07",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("5a4408e9-2393-7186-59cb-9d94ab7b9ad9",
	"b0386f06-89c5-9f3d-cb26-a27f9db104ab",
	"7b087034-19ba-fe32-be20-309548dd3f07");
INSERT INTO GD_GE
	VALUES ("86483998-d7fe-3c42-fd2c-4b3ec847981e",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R9');
INSERT INTO GD_CON
	VALUES ("86483998-d7fe-3c42-fd2c-4b3ec847981e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0aa466d9-b4ee-7621-19e0-6d049ed40a09",
	"86483998-d7fe-3c42-fd2c-4b3ec847981e",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0aa466d9-b4ee-7621-19e0-6d049ed40a09");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0aa466d9-b4ee-7621-19e0-6d049ed40a09",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0aa466d9-b4ee-7621-19e0-6d049ed40a09",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2f94f606-e7ea-54e7-3ef2-a57f31390501",
	"86483998-d7fe-3c42-fd2c-4b3ec847981e",
	3,
	14.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"2f94f606-e7ea-54e7-3ef2-a57f31390501");
INSERT INTO DIM_GE
	VALUES (1390.000000,
	1749.000000,
	"2f94f606-e7ea-54e7-3ef2-a57f31390501",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2f94f606-e7ea-54e7-3ef2-a57f31390501",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f28909ca-6963-a538-bf7a-0a7cc2eaadd5",
	"86483998-d7fe-3c42-fd2c-4b3ec847981e",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f28909ca-6963-a538-bf7a-0a7cc2eaadd5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f28909ca-6963-a538-bf7a-0a7cc2eaadd5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f28909ca-6963-a538-bf7a-0a7cc2eaadd5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("810825fd-3381-d902-f007-b0e8d4f7f041",
	"86483998-d7fe-3c42-fd2c-4b3ec847981e",
	"00000000-0000-0000-0000-000000000000",
	"14015c12-189d-3fca-add9-3ecdc2a7b578",
	"58991b18-eeb4-b6c1-2208-ee2fce04723c");
INSERT INTO DIM_WAY
	VALUES ("14015c12-189d-3fca-add9-3ecdc2a7b578",
	1392.000000,
	1696.000000,
	"86483998-d7fe-3c42-fd2c-4b3ec847981e",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("58991b18-eeb4-b6c1-2208-ee2fce04723c",
	1392.000000,
	1856.000000,
	"86483998-d7fe-3c42-fd2c-4b3ec847981e",
	"00000000-0000-0000-0000-000000000000",
	"14015c12-189d-3fca-add9-3ecdc2a7b578");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"86483998-d7fe-3c42-fd2c-4b3ec847981e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("86483998-d7fe-3c42-fd2c-4b3ec847981e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("09a77ac1-9c34-ea10-4b7f-d978bce2ebf3",
	"03e531f9-eb66-bdd4-ff40-6e72a756aeda",
	"86483998-d7fe-3c42-fd2c-4b3ec847981e");
INSERT INTO GD_GE
	VALUES ("ddcab694-ee14-24a4-42d4-54ccc1a1449f",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R10');
INSERT INTO GD_CON
	VALUES ("ddcab694-ee14-24a4-42d4-54ccc1a1449f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("09570013-fed3-f03e-4571-72cd068bb736",
	"ddcab694-ee14-24a4-42d4-54ccc1a1449f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"09570013-fed3-f03e-4571-72cd068bb736");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"09570013-fed3-f03e-4571-72cd068bb736",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("09570013-fed3-f03e-4571-72cd068bb736",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d81c4dbd-f3a2-d0f8-b5f5-a3de53214ace",
	"ddcab694-ee14-24a4-42d4-54ccc1a1449f",
	3,
	16.000000,
	3.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"d81c4dbd-f3a2-d0f8-b5f5-a3de53214ace");
INSERT INTO DIM_GE
	VALUES (1552.000000,
	1756.000000,
	"d81c4dbd-f3a2-d0f8-b5f5-a3de53214ace",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d81c4dbd-f3a2-d0f8-b5f5-a3de53214ace",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("103dde1e-bd6f-8f34-12eb-3c0aa19b2a4f",
	"ddcab694-ee14-24a4-42d4-54ccc1a1449f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"103dde1e-bd6f-8f34-12eb-3c0aa19b2a4f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"103dde1e-bd6f-8f34-12eb-3c0aa19b2a4f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("103dde1e-bd6f-8f34-12eb-3c0aa19b2a4f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("9e1d459d-ec9c-b7da-0287-4184d6b8856d",
	"ddcab694-ee14-24a4-42d4-54ccc1a1449f",
	"00000000-0000-0000-0000-000000000000",
	"0c27532f-fcba-c14b-df93-f105ec0c2f47",
	"ad5e6426-182e-fe35-d81a-835b7e03d8bb");
INSERT INTO DIM_WAY
	VALUES ("0c27532f-fcba-c14b-df93-f105ec0c2f47",
	1552.000000,
	1696.000000,
	"ddcab694-ee14-24a4-42d4-54ccc1a1449f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("ad5e6426-182e-fe35-d81a-835b7e03d8bb",
	1552.000000,
	1856.000000,
	"ddcab694-ee14-24a4-42d4-54ccc1a1449f",
	"00000000-0000-0000-0000-000000000000",
	"0c27532f-fcba-c14b-df93-f105ec0c2f47");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ddcab694-ee14-24a4-42d4-54ccc1a1449f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ddcab694-ee14-24a4-42d4-54ccc1a1449f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("16f647ed-6c76-8fb1-067a-2ffa5f21a25f",
	"5623a030-60ac-349f-f36f-aa3633f1e883",
	"ddcab694-ee14-24a4-42d4-54ccc1a1449f");
INSERT INTO GD_GE
	VALUES ("37c54f46-33da-2b84-100c-e946af30ec9c",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R11');
INSERT INTO GD_CON
	VALUES ("37c54f46-33da-2b84-100c-e946af30ec9c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("45ee3d96-cf0d-3acc-9e0d-922a207310e1",
	"37c54f46-33da-2b84-100c-e946af30ec9c",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"45ee3d96-cf0d-3acc-9e0d-922a207310e1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"45ee3d96-cf0d-3acc-9e0d-922a207310e1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("45ee3d96-cf0d-3acc-9e0d-922a207310e1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f18baeeb-fa8e-b8ba-5dad-3af810d2e6ca",
	"37c54f46-33da-2b84-100c-e946af30ec9c",
	3,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f18baeeb-fa8e-b8ba-5dad-3af810d2e6ca");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f18baeeb-fa8e-b8ba-5dad-3af810d2e6ca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f18baeeb-fa8e-b8ba-5dad-3af810d2e6ca",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fd77998b-51b2-4a66-44e7-1afb43d86ba1",
	"37c54f46-33da-2b84-100c-e946af30ec9c",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"fd77998b-51b2-4a66-44e7-1afb43d86ba1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fd77998b-51b2-4a66-44e7-1afb43d86ba1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fd77998b-51b2-4a66-44e7-1afb43d86ba1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("aa6cad59-a009-7457-bc11-74b44a583a22",
	"37c54f46-33da-2b84-100c-e946af30ec9c",
	"00000000-0000-0000-0000-000000000000",
	"634cefc1-bdcf-77be-6c61-0e0d0fd1cab8",
	"05ca9431-7ec8-d4d3-ca10-926d690a08a6");
INSERT INTO DIM_WAY
	VALUES ("634cefc1-bdcf-77be-6c61-0e0d0fd1cab8",
	1456.000000,
	2048.000000,
	"37c54f46-33da-2b84-100c-e946af30ec9c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("05ca9431-7ec8-d4d3-ca10-926d690a08a6",
	1456.000000,
	2160.000000,
	"37c54f46-33da-2b84-100c-e946af30ec9c",
	"00000000-0000-0000-0000-000000000000",
	"634cefc1-bdcf-77be-6c61-0e0d0fd1cab8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"37c54f46-33da-2b84-100c-e946af30ec9c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("37c54f46-33da-2b84-100c-e946af30ec9c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("055f9a32-7430-049e-9df0-3d6f01841fbe",
	"eefe4486-c1f0-5b51-89f4-a46a05e1582c",
	"37c54f46-33da-2b84-100c-e946af30ec9c");
INSERT INTO GD_GE
	VALUES ("f90abed7-3521-3b08-f5d5-5326675f9f05",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"145977af-a605-53dc-67d0-523f68958d00",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R12');
INSERT INTO GD_CON
	VALUES ("f90abed7-3521-3b08-f5d5-5326675f9f05",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("06ff768b-2969-8241-313d-46fe9f2629f6",
	"f90abed7-3521-3b08-f5d5-5326675f9f05",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"06ff768b-2969-8241-313d-46fe9f2629f6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"06ff768b-2969-8241-313d-46fe9f2629f6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("06ff768b-2969-8241-313d-46fe9f2629f6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fa3760b3-f8af-528b-eb2e-70402b15cc60",
	"f90abed7-3521-3b08-f5d5-5326675f9f05",
	3,
	18.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"fa3760b3-f8af-528b-eb2e-70402b15cc60");
INSERT INTO DIM_GE
	VALUES (1026.000000,
	1761.000000,
	"fa3760b3-f8af-528b-eb2e-70402b15cc60",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fa3760b3-f8af-528b-eb2e-70402b15cc60",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1c46720a-a2cf-18c9-c09a-dddd5d72f121",
	"f90abed7-3521-3b08-f5d5-5326675f9f05",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1c46720a-a2cf-18c9-c09a-dddd5d72f121");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1c46720a-a2cf-18c9-c09a-dddd5d72f121",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1c46720a-a2cf-18c9-c09a-dddd5d72f121",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("56f7feb8-6a91-9525-becd-7c73a7ba2b41",
	"f90abed7-3521-3b08-f5d5-5326675f9f05",
	"00000000-0000-0000-0000-000000000000",
	"eddeaa00-f90b-3f8c-d2c2-146c7809c08b",
	"2281b9ad-95a4-43a2-2dc2-32e88a3e4170");
INSERT INTO DIM_WAY
	VALUES ("eddeaa00-f90b-3f8c-d2c2-146c7809c08b",
	1024.000000,
	1696.000000,
	"f90abed7-3521-3b08-f5d5-5326675f9f05",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("2281b9ad-95a4-43a2-2dc2-32e88a3e4170",
	1024.000000,
	1856.000000,
	"f90abed7-3521-3b08-f5d5-5326675f9f05",
	"00000000-0000-0000-0000-000000000000",
	"eddeaa00-f90b-3f8c-d2c2-146c7809c08b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f90abed7-3521-3b08-f5d5-5326675f9f05",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f90abed7-3521-3b08-f5d5-5326675f9f05",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("6a9c20e9-ad53-8c3f-7199-b94f984bf0f6",
	"f58f58e4-adf3-7bc5-00d7-c6d0dcdbf592",
	"f90abed7-3521-3b08-f5d5-5326675f9f05");
INSERT INTO GD_GE
	VALUES ("83c0e6c2-3809-5310-8814-8fffefdf811e",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R13');
INSERT INTO GD_CON
	VALUES ("83c0e6c2-3809-5310-8814-8fffefdf811e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3f7f9619-ba79-36ed-d94a-d4a35f949066",
	"83c0e6c2-3809-5310-8814-8fffefdf811e",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3f7f9619-ba79-36ed-d94a-d4a35f949066");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3f7f9619-ba79-36ed-d94a-d4a35f949066",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3f7f9619-ba79-36ed-d94a-d4a35f949066",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6b9eb3f5-892f-e75c-5e95-876a140bf761",
	"83c0e6c2-3809-5310-8814-8fffefdf811e",
	3,
	10.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"6b9eb3f5-892f-e75c-5e95-876a140bf761");
INSERT INTO DIM_GE
	VALUES (1194.000000,
	1760.000000,
	"6b9eb3f5-892f-e75c-5e95-876a140bf761",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6b9eb3f5-892f-e75c-5e95-876a140bf761",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f25a9945-f4f1-fc8e-1365-7a03abba71bb",
	"83c0e6c2-3809-5310-8814-8fffefdf811e",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f25a9945-f4f1-fc8e-1365-7a03abba71bb");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f25a9945-f4f1-fc8e-1365-7a03abba71bb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f25a9945-f4f1-fc8e-1365-7a03abba71bb",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("94e9e270-8e03-b452-b5b6-cb580643884f",
	"83c0e6c2-3809-5310-8814-8fffefdf811e",
	"00000000-0000-0000-0000-000000000000",
	"bd226f15-40c2-f5ad-6fbd-590d1cbe2856",
	"c4fc0b52-d8a1-2bc1-f975-ab1a265556ba");
INSERT INTO DIM_WAY
	VALUES ("bd226f15-40c2-f5ad-6fbd-590d1cbe2856",
	1200.000000,
	1696.000000,
	"83c0e6c2-3809-5310-8814-8fffefdf811e",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c4fc0b52-d8a1-2bc1-f975-ab1a265556ba",
	1200.000000,
	1856.000000,
	"83c0e6c2-3809-5310-8814-8fffefdf811e",
	"00000000-0000-0000-0000-000000000000",
	"bd226f15-40c2-f5ad-6fbd-590d1cbe2856");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"83c0e6c2-3809-5310-8814-8fffefdf811e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("83c0e6c2-3809-5310-8814-8fffefdf811e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("41870c00-b492-6b4c-97b0-81a416f0636e",
	"0866985b-c920-22d1-c162-0cf96ebbcdd3",
	"83c0e6c2-3809-5310-8814-8fffefdf811e");
INSERT INTO GD_GE
	VALUES ("ab945bea-4137-67a6-e8b9-08fabe7f9e30",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R14');
INSERT INTO GD_CON
	VALUES ("ab945bea-4137-67a6-e8b9-08fabe7f9e30",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("29ceee5c-d034-f1e8-6a3f-c236ddd2e899",
	"ab945bea-4137-67a6-e8b9-08fabe7f9e30",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"29ceee5c-d034-f1e8-6a3f-c236ddd2e899");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"29ceee5c-d034-f1e8-6a3f-c236ddd2e899",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("29ceee5c-d034-f1e8-6a3f-c236ddd2e899",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b1560c38-2b62-5f6b-c416-f7b7130d54a4",
	"ab945bea-4137-67a6-e8b9-08fabe7f9e30",
	3,
	21.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"b1560c38-2b62-5f6b-c416-f7b7130d54a4");
INSERT INTO DIM_GE
	VALUES (1109.000000,
	2098.000000,
	"b1560c38-2b62-5f6b-c416-f7b7130d54a4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b1560c38-2b62-5f6b-c416-f7b7130d54a4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("216bc837-0e58-22b6-f56d-bbad9c49fd8f",
	"ab945bea-4137-67a6-e8b9-08fabe7f9e30",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"216bc837-0e58-22b6-f56d-bbad9c49fd8f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"216bc837-0e58-22b6-f56d-bbad9c49fd8f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("216bc837-0e58-22b6-f56d-bbad9c49fd8f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("a4d287db-84e8-b878-1082-83f04fb5cc88",
	"ab945bea-4137-67a6-e8b9-08fabe7f9e30",
	"00000000-0000-0000-0000-000000000000",
	"6a4eee03-024b-68a2-a205-289a69451f2d",
	"5c37ef0a-6055-9bea-7f9a-98b77a471948");
INSERT INTO DIM_WAY
	VALUES ("6a4eee03-024b-68a2-a205-289a69451f2d",
	1104.000000,
	2064.000000,
	"ab945bea-4137-67a6-e8b9-08fabe7f9e30",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("5c37ef0a-6055-9bea-7f9a-98b77a471948",
	1104.000000,
	2160.000000,
	"ab945bea-4137-67a6-e8b9-08fabe7f9e30",
	"00000000-0000-0000-0000-000000000000",
	"6a4eee03-024b-68a2-a205-289a69451f2d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ab945bea-4137-67a6-e8b9-08fabe7f9e30",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ab945bea-4137-67a6-e8b9-08fabe7f9e30",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("984e7209-2327-9ff3-0b96-af4921538ee1",
	"c379ac21-c1ec-1b0b-902d-8da42306ca05",
	"ab945bea-4137-67a6-e8b9-08fabe7f9e30");
INSERT INTO DIM_DIA
	VALUES ("830d48b4-c6f3-e870-517a-5c88d0e30b55",
	'',
	0.433884,
	707.000000,
	1216.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("87a200ab-e40d-7193-84c2-e9c8f3158ca1",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("87a200ab-e40d-7193-84c2-e9c8f3158ca1",
	'Any Object',
	8,
	'AO',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("29f74a5b-fcf1-53c9-feb8-9ea34c5e3b80",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1",
	'i_parm_ret_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'LOG::LogFailure(message:"Operation AO::i_parm_ret_i should not have been translated.");
return param.i;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("6a8eae6e-d574-7609-6008-2b15b1e1112b",
	"29f74a5b-fcf1-53c9-feb8-9ea34c5e3b80",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_NBATTR
	VALUES ("ccce8115-d43e-7de7-3359-7eca850c7ead",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1");
INSERT INTO O_BATTR
	VALUES ("ccce8115-d43e-7de7-3359-7eca850c7ead",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1");
INSERT INTO O_ATTR
	VALUES ("ccce8115-d43e-7de7-3359-7eca850c7ead",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1",
	"00000000-0000-0000-0000-000000000000",
	'ao_id',
	'',
	'',
	'ao_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("da58c8b4-e115-bda5-ef6c-931b9c201031",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1");
INSERT INTO O_BATTR
	VALUES ("da58c8b4-e115-bda5-ef6c-931b9c201031",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1");
INSERT INTO O_ATTR
	VALUES ("da58c8b4-e115-bda5-ef6c-931b9c201031",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1",
	"ccce8115-d43e-7de7-3359-7eca850c7ead",
	'b',
	'',
	'',
	'b',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("46f99e6a-e777-d553-2d38-ff40d6cdbd61",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1");
INSERT INTO O_BATTR
	VALUES ("46f99e6a-e777-d553-2d38-ff40d6cdbd61",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1");
INSERT INTO O_ATTR
	VALUES ("46f99e6a-e777-d553-2d38-ff40d6cdbd61",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1",
	"da58c8b4-e115-bda5-ef6c-931b9c201031",
	'i',
	'',
	'',
	'i',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("c5a14468-e51d-5a62-7dd7-54ad7cfe954e",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1");
INSERT INTO O_BATTR
	VALUES ("c5a14468-e51d-5a62-7dd7-54ad7cfe954e",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1");
INSERT INTO O_ATTR
	VALUES ("c5a14468-e51d-5a62-7dd7-54ad7cfe954e",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1",
	"46f99e6a-e777-d553-2d38-ff40d6cdbd61",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("c6ca4bce-887f-805a-2422-cb8534463eb6",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1");
INSERT INTO O_BATTR
	VALUES ("c6ca4bce-887f-805a-2422-cb8534463eb6",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1");
INSERT INTO O_ATTR
	VALUES ("c6ca4bce-887f-805a-2422-cb8534463eb6",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1",
	"c5a14468-e51d-5a62-7dd7-54ad7cfe954e",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("7734bddb-7442-e149-9954-439287ef0f4a",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1");
INSERT INTO O_BATTR
	VALUES ("7734bddb-7442-e149-9954-439287ef0f4a",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1");
INSERT INTO O_ATTR
	VALUES ("7734bddb-7442-e149-9954-439287ef0f4a",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1",
	"c6ca4bce-887f-805a-2422-cb8534463eb6",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1");
INSERT INTO O_OIDA
	VALUES ("ccce8115-d43e-7de7-3359-7eca850c7ead",
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1",
	0,
	'ao_id');
INSERT INTO O_ID
	VALUES (1,
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1");
INSERT INTO O_ID
	VALUES (2,
	"87a200ab-e40d-7193-84c2-e9c8f3158ca1");
INSERT INTO PE_PE
	VALUES ("45229792-5569-b0f9-9dbf-fe9afe229577",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("45229792-5569-b0f9-9dbf-fe9afe229577",
	'Boolean Expression Test',
	15,
	'BET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("21f99b5b-bf90-a6e1-f01a-4f18121d29c0",
	"45229792-5569-b0f9-9dbf-fe9afe229577");
INSERT INTO O_BATTR
	VALUES ("21f99b5b-bf90-a6e1-f01a-4f18121d29c0",
	"45229792-5569-b0f9-9dbf-fe9afe229577");
INSERT INTO O_ATTR
	VALUES ("21f99b5b-bf90-a6e1-f01a-4f18121d29c0",
	"45229792-5569-b0f9-9dbf-fe9afe229577",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("44eee04b-c7b3-406b-e49a-559cc8c0ceaf",
	"45229792-5569-b0f9-9dbf-fe9afe229577");
INSERT INTO O_BATTR
	VALUES ("44eee04b-c7b3-406b-e49a-559cc8c0ceaf",
	"45229792-5569-b0f9-9dbf-fe9afe229577");
INSERT INTO O_ATTR
	VALUES ("44eee04b-c7b3-406b-e49a-559cc8c0ceaf",
	"45229792-5569-b0f9-9dbf-fe9afe229577",
	"21f99b5b-bf90-a6e1-f01a-4f18121d29c0",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1820e4f9-f2d9-2605-abf8-375ac991263a",
	"45229792-5569-b0f9-9dbf-fe9afe229577");
INSERT INTO O_BATTR
	VALUES ("1820e4f9-f2d9-2605-abf8-375ac991263a",
	"45229792-5569-b0f9-9dbf-fe9afe229577");
INSERT INTO O_ATTR
	VALUES ("1820e4f9-f2d9-2605-abf8-375ac991263a",
	"45229792-5569-b0f9-9dbf-fe9afe229577",
	"44eee04b-c7b3-406b-e49a-559cc8c0ceaf",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_REF
	VALUES ("45229792-5569-b0f9-9dbf-fe9afe229577",
	"860e6be9-79b5-6cac-948f-79de5ae20b77",
	0,
	"4894243b-2a30-4adf-abf8-ad29eb612d93",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	"2a2d9e47-a989-1434-6645-8cb939e6dd9b",
	"33c980d2-8225-907f-dfd4-e154279837ce",
	"4b7b86a4-d4ba-a9dc-fedc-7adeeda61bc8",
	"883e370e-d1ac-910b-db79-98ce3052b9d6",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Other Boolean Expression Test',
	'bfalse',
	'R9');
INSERT INTO O_RATTR
	VALUES ("4b7b86a4-d4ba-a9dc-fedc-7adeeda61bc8",
	"45229792-5569-b0f9-9dbf-fe9afe229577",
	"4894243b-2a30-4adf-abf8-ad29eb612d93",
	"860e6be9-79b5-6cac-948f-79de5ae20b77",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("4b7b86a4-d4ba-a9dc-fedc-7adeeda61bc8",
	"45229792-5569-b0f9-9dbf-fe9afe229577",
	"1820e4f9-f2d9-2605-abf8-375ac991263a",
	'r9bfalse',
	'',
	'r9',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("45229792-5569-b0f9-9dbf-fe9afe229577",
	"860e6be9-79b5-6cac-948f-79de5ae20b77",
	0,
	"cf465ea6-30e2-2b28-87b9-c08791e751ab",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	"2a2d9e47-a989-1434-6645-8cb939e6dd9b",
	"33c980d2-8225-907f-dfd4-e154279837ce",
	"7a801430-6744-7624-24f4-233ed91363ae",
	"4d61bb05-1726-9fc8-6386-eb8cd95a0001",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Other Boolean Expression Test',
	'btrue',
	'R9');
INSERT INTO O_RATTR
	VALUES ("7a801430-6744-7624-24f4-233ed91363ae",
	"45229792-5569-b0f9-9dbf-fe9afe229577",
	"cf465ea6-30e2-2b28-87b9-c08791e751ab",
	"860e6be9-79b5-6cac-948f-79de5ae20b77",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("7a801430-6744-7624-24f4-233ed91363ae",
	"45229792-5569-b0f9-9dbf-fe9afe229577",
	"4b7b86a4-d4ba-a9dc-fedc-7adeeda61bc8",
	'r9btrue',
	'',
	'r9',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3193a9f8-daf6-3fe5-6b31-78391226cf26",
	"45229792-5569-b0f9-9dbf-fe9afe229577");
INSERT INTO O_BATTR
	VALUES ("3193a9f8-daf6-3fe5-6b31-78391226cf26",
	"45229792-5569-b0f9-9dbf-fe9afe229577");
INSERT INTO O_ATTR
	VALUES ("3193a9f8-daf6-3fe5-6b31-78391226cf26",
	"45229792-5569-b0f9-9dbf-fe9afe229577",
	"7a801430-6744-7624-24f4-233ed91363ae",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"45229792-5569-b0f9-9dbf-fe9afe229577");
INSERT INTO O_OIDA
	VALUES ("21f99b5b-bf90-a6e1-f01a-4f18121d29c0",
	"45229792-5569-b0f9-9dbf-fe9afe229577",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"45229792-5569-b0f9-9dbf-fe9afe229577");
INSERT INTO O_ID
	VALUES (2,
	"45229792-5569-b0f9-9dbf-fe9afe229577");
INSERT INTO SM_ISM
	VALUES ("c2c29f82-90df-a134-88df-24aed373ea39",
	"45229792-5569-b0f9-9dbf-fe9afe229577");
INSERT INTO SM_SM
	VALUES ("c2c29f82-90df-a134-88df-24aed373ea39",
	'',
	5);
INSERT INTO SM_MOORE
	VALUES ("c2c29f82-90df-a134-88df-24aed373ea39");
INSERT INTO SM_EVTDI
	VALUES ("b5174271-06c0-6284-6671-04ddb49587c5",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("4e9b5eaa-6afe-c3d4-61a8-574ce50bde21",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"b5174271-06c0-6284-6671-04ddb49587c5");
INSERT INTO SM_EVTDI
	VALUES ("0532ea50-5753-a4f7-59c0-12401c13a28a",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("f76bd060-fa91-8f51-3cf5-9870fc560a9c",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("ec8715b1-f40d-a9f3-22e3-da4b4989fe82",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"3600367e-0add-f558-0191-3db7429b77fc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("8792f8a0-1e96-dfe1-cd23-3d99cb1c2b23",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"0532ea50-5753-a4f7-59c0-12401c13a28a");
INSERT INTO SM_EVTDI
	VALUES ("d43a1ef6-30fa-39f5-e67c-e2d5ec210301",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"f76bd060-fa91-8f51-3cf5-9870fc560a9c");
INSERT INTO SM_EVTDI
	VALUES ("bb20ccde-00a0-83bf-1ef7-f6045cda5120",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"3600367e-0add-f558-0191-3db7429b77fc",
	"ec8715b1-f40d-a9f3-22e3-da4b4989fe82");
INSERT INTO SM_LEVT
	VALUES ("98844fd4-7709-19a8-4164-61b84988e3ac",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("98844fd4-7709-19a8-4164-61b84988e3ac",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("98844fd4-7709-19a8-4164-61b84988e3ac",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start and test',
	0,
	'',
	'BET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Start or test',
	0,
	'',
	'BET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("3600367e-0add-f558-0191-3db7429b77fc",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("3600367e-0add-f558-0191-3db7429b77fc",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("3600367e-0add-f558-0191-3db7429b77fc",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Continue and test',
	0,
	'',
	'BET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("285ab600-087c-6767-ab4a-a92f5f89988a",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("285ab600-087c-6767-ab4a-a92f5f89988a",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("285ab600-087c-6767-ab4a-a92f5f89988a",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Continue or test',
	0,
	'',
	'BET4',
	'');
INSERT INTO SM_STATE
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'And test 1a',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("5fa4f8ce-14df-c7f5-7cc8-ffa87da9959b",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"f1f4d914-105b-53ad-b3c3-202de165f703");
INSERT INTO SM_AH
	VALUES ("5fa4f8ce-14df-c7f5-7cc8-ffa87da9959b",
	"c2c29f82-90df-a134-88df-24aed373ea39");
INSERT INTO SM_ACT
	VALUES ("5fa4f8ce-14df-c7f5-7cc8-ffa87da9959b",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	1,
	'LOG::LogInfo(message:"Starting and test") ;

//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    local existing
assign t1 = temp1 and temp1 ;
if ( t1 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t2 = temp1 and temp2 ;
if ( t2 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t3 = temp2 and temp1 ;
if ( t3 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t4 = temp2 and temp2 ;
if ( t4 == true )
  LOG::LogSuccess(message:" and local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( true )") ;
end if;
 
  // local existing    rcvd_evt
assign t5 = temp1 and rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 and rcvd_evt.ttrue ;
if ( t6 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t7 = temp2 and rcvd_evt.tfalse ;
if ( t7 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t8 = temp2 and rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 and false ;
if ( t9 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 and true ;
if ( t10 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t11 = temp2 and false ;
if ( t11 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t12 = temp2 and true ;
if ( t12 == true )
  LOG::LogSuccess(message:" and local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 and self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 and self.btrue ;
if ( t14 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t15 = temp2 and self.bfalse ;
if ( t15 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t16 = temp2 and self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" and local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 and self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 and self.r9btrue ;
if ( t18 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t19 = temp2 and self.r9bfalse ;
if ( t19 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = temp2 and self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of OBET;
assign t21 = temp1 and saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 and saf.btrue ;
if ( t22 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t23 = temp2 and saf.bfalse ;
if ( t23 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t24 = temp2 and saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of OBET;
for each smf in smfs
assign t25 = temp1 and smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 and smf.btrue ;
if ( t26 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t27 = temp2 and smf.bfalse ;
if ( t27 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t28 = temp2 and smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->OBET[R9];
assign t29 = temp1 and sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 and sor.btrue ;
if ( t30 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t31 = temp2 and sor.bfalse ;
if ( t31 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t32 = temp2 and sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->OBET[R10];
assign t33 = temp1 and sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 and sar.btrue ;
if ( t34 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t35 = temp2 and sar.bfalse ;
if ( t35 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t36 = temp2 and sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->OBET[R10];
for each smr in smrs
assign t37 = temp1 and smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 and smr.btrue ;
if ( t38 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t39 = temp2 and smr.bfalse ;
if ( t39 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t40 = temp2 and smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 and saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 and saf.r11btrue ;
if ( t42 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t43 = temp2 and saf.r11bfalse ;
if ( t43 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t44 = temp2 and saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 and smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 and smf.r11btrue ;
if ( t46 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t47 = temp2 and smf.r11bfalse ;
if ( t47 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t48 = temp2 and smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 and sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 and sor.r11btrue ;
if ( t50 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t51 = temp2 and sor.r11bfalse ;
if ( t51 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t52 = temp2 and sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 and sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 and sar.r11btrue ;
if ( t54 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t55 = temp2 and sar.r11bfalse ;
if ( t55 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t56 = temp2 and sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 and smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 and smr.r11btrue ;
if ( t58 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t59 = temp2 and smr.r11bfalse ;
if ( t59 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t60 = temp2 and smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse and temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue and temp1 ;
if ( t62 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t63 = rcvd_evt.tfalse and temp2 ;
if ( t63 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t64 = rcvd_evt.ttrue and temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse and rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue and rcvd_evt.tfalse ;
if ( t66 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t67 = rcvd_evt.tfalse and rcvd_evt.ttrue ;
if ( t67 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t68 = rcvd_evt.ttrue and rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse and false ;
if ( t69 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue and false ;
if ( t70 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t71 = rcvd_evt.tfalse and true ;
if ( t71 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t72 = rcvd_evt.ttrue and true ;
if ( t72 == true )
  LOG::LogSuccess(message:" and rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse and self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue and self.bfalse ;
if ( t74 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t75 = rcvd_evt.tfalse and self.btrue ;
if ( t75 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t76 = rcvd_evt.ttrue and self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse and self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue and self.r9bfalse ;
if ( t78 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t79 = rcvd_evt.tfalse and self.r9btrue ;
if ( t79 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t80 = rcvd_evt.ttrue and self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse and saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse and saf.btrue ;
if ( t82 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t83 = rcvd_evt.ttrue and saf.bfalse ;
if ( t83 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t84 = rcvd_evt.ttrue and saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse and smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse and smf.btrue ;
if ( t86 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t87 = rcvd_evt.ttrue and smf.bfalse ;
if ( t87 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t88 = rcvd_evt.ttrue and smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse and sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse and sor.btrue ;
if ( t90 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t91 = rcvd_evt.ttrue and sor.bfalse ;
if ( t91 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t92 = rcvd_evt.ttrue and sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse and sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse and sar.btrue ;
if ( t94 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t95 = rcvd_evt.ttrue and sar.bfalse ;
if ( t95 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t96 = rcvd_evt.ttrue and sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse and smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse and smr.btrue ;
if ( t98 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t99 = rcvd_evt.ttrue and smr.bfalse ;
if ( t99 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t100 = rcvd_evt.ttrue and smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse and saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse and saf.r11btrue ;
if ( t102 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t103 = rcvd_evt.ttrue and saf.r11bfalse ;
if ( t103 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t104 = rcvd_evt.ttrue and saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse and smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse and smf.r11btrue ;
if ( t106 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t107 = rcvd_evt.ttrue and smf.r11bfalse ;
if ( t107 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t108 = rcvd_evt.ttrue and smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse and sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse and sor.r11btrue ;
if ( t110 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t111 = rcvd_evt.ttrue and sor.r11bfalse ;
if ( t111 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t112 = rcvd_evt.ttrue and sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse and sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse and sar.r11btrue ;
if ( t114 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t115 = rcvd_evt.ttrue and sar.r11bfalse ;
if ( t115 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t116 = rcvd_evt.ttrue and sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse and smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse and smr.r11btrue ;
if ( t118 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t119 = rcvd_evt.ttrue and smr.r11bfalse ;
if ( t119 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t120 = rcvd_evt.ttrue and smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_STATE
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'And test 2',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("36482735-10cc-d075-ff2f-b751466c36af",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"cad87477-03ab-6030-c3f3-0ca0252ba153");
INSERT INTO SM_AH
	VALUES ("36482735-10cc-d075-ff2f-b751466c36af",
	"c2c29f82-90df-a134-88df-24aed373ea39");
INSERT INTO SM_ACT
	VALUES ("36482735-10cc-d075-ff2f-b751466c36af",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	1,
	'//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse and temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue and temp1 ;
if ( t302 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t303 = saf.bfalse and temp2 ;
if ( t303 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t304 = saf.btrue and temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse and rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue and rcvd_evt.tfalse ;
if ( t306 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t307 = saf.bfalse and rcvd_evt.ttrue ;
if ( t307 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t308 = saf.btrue and rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse and false ;
if ( t309 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue and false ;
if ( t310 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t311 = saf.bfalse and true ;
if ( t311 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t312 = saf.btrue and true ;
if ( t312 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse and self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue and self.bfalse ;
if ( t314 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t315 = saf.bfalse and self.btrue ;
if ( t315 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t316 = saf.btrue and self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse and self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue and self.r9bfalse ;
if ( t318 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t319 = saf.bfalse and self.r9btrue ;
if ( t319 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t320 = saf.btrue and self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse and saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse and saf.btrue ;
if ( t322 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t323 = saf.btrue and saf.bfalse ;
if ( t323 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t324 = saf.btrue and saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse and smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse and smf.btrue ;
if ( t326 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t327 = saf.btrue and smf.bfalse ;
if ( t327 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t328 = saf.btrue and smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse and sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse and sor.btrue ;
if ( t330 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t331 = saf.btrue and sor.bfalse ;
if ( t331 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t332 = saf.btrue and sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse and sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse and sar.btrue ;
if ( t334 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t335 = saf.btrue and sar.bfalse ;
if ( t335 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t336 = saf.btrue and sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse and smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse and smr.btrue ;
if ( t338 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t339 = saf.btrue and smr.bfalse ;
if ( t339 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t340 = saf.btrue and smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse and saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse and saf.r11btrue ;
if ( t342 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t343 = saf.btrue and saf.r11bfalse ;
if ( t343 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t344 = saf.btrue and saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse and smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse and smf.r11btrue ;
if ( t346 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t347 = saf.btrue and smf.r11bfalse ;
if ( t347 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t348 = saf.btrue and smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse and sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse and sor.r11btrue ;
if ( t350 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t351 = saf.btrue and sor.r11bfalse ;
if ( t351 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t352 = saf.btrue and sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse and sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse and sar.r11btrue ;
if ( t354 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t355 = saf.btrue and sar.r11bfalse ;
if ( t355 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t356 = saf.btrue and sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse and smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse and smr.r11btrue ;
if ( t358 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t359 = saf.btrue and smr.r11bfalse ;
if ( t359 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t360 = saf.btrue and smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse and temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue and temp1 ;
if ( t602 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t603 = saf.r11bfalse and temp2 ;
if ( t603 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t604 = saf.r11btrue and temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse and rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue and rcvd_evt.tfalse ;
if ( t606 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t607 = saf.r11bfalse and rcvd_evt.ttrue ;
if ( t607 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t608 = saf.r11btrue and rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse and false ;
if ( t609 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue and false ;
if ( t610 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t611 = saf.r11bfalse and true ;
if ( t611 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t612 = saf.r11btrue and true ;
if ( t612 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse and self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue and self.bfalse ;
if ( t614 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t615 = saf.r11bfalse and self.btrue ;
if ( t615 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t616 = saf.r11btrue and self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse and self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue and self.r9bfalse ;
if ( t618 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t619 = saf.r11bfalse and self.r9btrue ;
if ( t619 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t620 = saf.r11btrue and self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse and saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse and saf.btrue ;
if ( t622 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t623 = saf.r11btrue and saf.bfalse ;
if ( t623 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t624 = saf.r11btrue and saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse and smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse and smf.btrue ;
if ( t626 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t627 = saf.r11btrue and smf.bfalse ;
if ( t627 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t628 = saf.r11btrue and smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse and sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse and sor.btrue ;
if ( t630 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t631 = saf.r11btrue and sor.bfalse ;
if ( t631 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t632 = saf.r11btrue and sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse and sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse and sar.btrue ;
if ( t634 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t635 = saf.r11btrue and sar.bfalse ;
if ( t635 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t636 = saf.r11btrue and sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse and smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse and smr.btrue ;
if ( t638 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t639 = saf.r11btrue and smr.bfalse ;
if ( t639 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t640 = saf.r11btrue and smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse and saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse and saf.r11btrue ;
if ( t642 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t643 = saf.r11btrue and saf.r11bfalse ;
if ( t643 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t644 = saf.r11btrue and saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse and smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse and smf.r11btrue ;
if ( t646 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t647 = saf.r11btrue and smf.r11bfalse ;
if ( t647 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t648 = saf.r11btrue and smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse and sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse and sor.r11btrue ;
if ( t650 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t651 = saf.r11btrue and sor.r11bfalse ;
if ( t651 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t652 = saf.r11btrue and sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse and sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse and sar.r11btrue ;
if ( t654 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t655 = saf.r11btrue and sar.r11bfalse ;
if ( t655 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t656 = saf.r11btrue and sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse and smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse and smr.r11btrue ;
if ( t658 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t659 = saf.r11btrue and smr.r11bfalse ;
if ( t659 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t660 = saf.r11btrue and smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed and test") ;

//generate event to commence next test
generate BET3:''Start or test''(tfalse:false, ttrue:true) to self;
 

',
	'');
INSERT INTO SM_STATE
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1a',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("ffc7cb3f-f73b-27c8-803f-c27ce1cfead8",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"01931093-f38f-79ac-ec3c-30bb8e4842ed");
INSERT INTO SM_AH
	VALUES ("ffc7cb3f-f73b-27c8-803f-c27ce1cfead8",
	"c2c29f82-90df-a134-88df-24aed373ea39");
INSERT INTO SM_ACT
	VALUES ("ffc7cb3f-f73b-27c8-803f-c27ce1cfead8",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	1,
	'LOG::LogInfo(message:"Starting or test") ;

//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    local existing
assign t1 = temp1 or temp1 ;
if ( t1 == false )
  LOG::LogSuccess(message:" or local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( false )") ;
end if;
 
assign t2 = temp1 or temp2 ;
if ( t2 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
assign t3 = temp2 or temp1 ;
if ( t3 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
assign t4 = temp2 or temp2 ;
if ( t4 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
  // local existing    rcvd_evt
assign t5 = temp1 or rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 or rcvd_evt.ttrue ;
if ( t6 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t7 = temp2 or rcvd_evt.tfalse ;
if ( t7 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t8 = temp2 or rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 or false ;
if ( t9 == false )
  LOG::LogSuccess(message:" or local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 or true ;
if ( t10 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t11 = temp2 or false ;
if ( t11 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t12 = temp2 or true ;
if ( t12 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 or self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" or local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 or self.btrue ;
if ( t14 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t15 = temp2 or self.bfalse ;
if ( t15 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t16 = temp2 or self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 or self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 or self.r9btrue ;
if ( t18 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t19 = temp2 or self.r9bfalse ;
if ( t19 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t20 = temp2 or self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of OBET;
assign t21 = temp1 or saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 or saf.btrue ;
if ( t22 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t23 = temp2 or saf.bfalse ;
if ( t23 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t24 = temp2 or saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of OBET;
for each smf in smfs
assign t25 = temp1 or smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 or smf.btrue ;
if ( t26 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t27 = temp2 or smf.bfalse ;
if ( t27 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t28 = temp2 or smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->OBET[R9];
assign t29 = temp1 or sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 or sor.btrue ;
if ( t30 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t31 = temp2 or sor.bfalse ;
if ( t31 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t32 = temp2 or sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->OBET[R10];
assign t33 = temp1 or sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 or sar.btrue ;
if ( t34 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t35 = temp2 or sar.bfalse ;
if ( t35 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t36 = temp2 or sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->OBET[R10];
for each smr in smrs
assign t37 = temp1 or smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 or smr.btrue ;
if ( t38 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t39 = temp2 or smr.bfalse ;
if ( t39 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t40 = temp2 or smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 or saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 or saf.r11btrue ;
if ( t42 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t43 = temp2 or saf.r11bfalse ;
if ( t43 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t44 = temp2 or saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 or smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 or smf.r11btrue ;
if ( t46 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t47 = temp2 or smf.r11bfalse ;
if ( t47 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t48 = temp2 or smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 or sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 or sor.r11btrue ;
if ( t50 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t51 = temp2 or sor.r11bfalse ;
if ( t51 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t52 = temp2 or sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 or sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 or sar.r11btrue ;
if ( t54 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t55 = temp2 or sar.r11bfalse ;
if ( t55 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t56 = temp2 or sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 or smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 or smr.r11btrue ;
if ( t58 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t59 = temp2 or smr.r11bfalse ;
if ( t59 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t60 = temp2 or smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse or temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue or temp1 ;
if ( t62 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t63 = rcvd_evt.tfalse or temp2 ;
if ( t63 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t64 = rcvd_evt.ttrue or temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse or rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue or rcvd_evt.tfalse ;
if ( t66 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t67 = rcvd_evt.tfalse or rcvd_evt.ttrue ;
if ( t67 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t68 = rcvd_evt.ttrue or rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse or false ;
if ( t69 == false )
  LOG::LogSuccess(message:" or rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue or false ;
if ( t70 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t71 = rcvd_evt.tfalse or true ;
if ( t71 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t72 = rcvd_evt.ttrue or true ;
if ( t72 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse or self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue or self.bfalse ;
if ( t74 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t75 = rcvd_evt.tfalse or self.btrue ;
if ( t75 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t76 = rcvd_evt.ttrue or self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse or self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue or self.r9bfalse ;
if ( t78 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t79 = rcvd_evt.tfalse or self.r9btrue ;
if ( t79 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t80 = rcvd_evt.ttrue or self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse or saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse or saf.btrue ;
if ( t82 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t83 = rcvd_evt.ttrue or saf.bfalse ;
if ( t83 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t84 = rcvd_evt.ttrue or saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse or smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse or smf.btrue ;
if ( t86 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t87 = rcvd_evt.ttrue or smf.bfalse ;
if ( t87 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t88 = rcvd_evt.ttrue or smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse or sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse or sor.btrue ;
if ( t90 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t91 = rcvd_evt.ttrue or sor.bfalse ;
if ( t91 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t92 = rcvd_evt.ttrue or sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse or sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse or sar.btrue ;
if ( t94 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t95 = rcvd_evt.ttrue or sar.bfalse ;
if ( t95 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t96 = rcvd_evt.ttrue or sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse or smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse or smr.btrue ;
if ( t98 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t99 = rcvd_evt.ttrue or smr.bfalse ;
if ( t99 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t100 = rcvd_evt.ttrue or smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse or saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse or saf.r11btrue ;
if ( t102 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t103 = rcvd_evt.ttrue or saf.r11bfalse ;
if ( t103 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t104 = rcvd_evt.ttrue or saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse or smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse or smf.r11btrue ;
if ( t106 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t107 = rcvd_evt.ttrue or smf.r11bfalse ;
if ( t107 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t108 = rcvd_evt.ttrue or smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse or sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse or sor.r11btrue ;
if ( t110 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t111 = rcvd_evt.ttrue or sor.r11bfalse ;
if ( t111 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t112 = rcvd_evt.ttrue or sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse or sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse or sar.r11btrue ;
if ( t114 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t115 = rcvd_evt.ttrue or sar.r11bfalse ;
if ( t115 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t116 = rcvd_evt.ttrue or sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse or smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse or smr.r11btrue ;
if ( t118 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t119 = rcvd_evt.ttrue or smr.r11bfalse ;
if ( t119 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t120 = rcvd_evt.ttrue or smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET4:''Continue or test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_STATE
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'Or test 2',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("3f8bab77-1fa3-d508-f29c-697e341adbf4",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"43175404-e206-cc41-a98d-aeb8192090da");
INSERT INTO SM_AH
	VALUES ("3f8bab77-1fa3-d508-f29c-697e341adbf4",
	"c2c29f82-90df-a134-88df-24aed373ea39");
INSERT INTO SM_ACT
	VALUES ("3f8bab77-1fa3-d508-f29c-697e341adbf4",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	1,
	'
//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse or temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue or temp1 ;
if ( t302 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t303 = saf.bfalse or temp2 ;
if ( t303 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t304 = saf.btrue or temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse or rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue or rcvd_evt.tfalse ;
if ( t306 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t307 = saf.bfalse or rcvd_evt.ttrue ;
if ( t307 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t308 = saf.btrue or rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse or false ;
if ( t309 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue or false ;
if ( t310 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t311 = saf.bfalse or true ;
if ( t311 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t312 = saf.btrue or true ;
if ( t312 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse or self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue or self.bfalse ;
if ( t314 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t315 = saf.bfalse or self.btrue ;
if ( t315 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t316 = saf.btrue or self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse or self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue or self.r9bfalse ;
if ( t318 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t319 = saf.bfalse or self.r9btrue ;
if ( t319 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t320 = saf.btrue or self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse or saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse or saf.btrue ;
if ( t322 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t323 = saf.btrue or saf.bfalse ;
if ( t323 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t324 = saf.btrue or saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse or smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse or smf.btrue ;
if ( t326 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t327 = saf.btrue or smf.bfalse ;
if ( t327 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t328 = saf.btrue or smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse or sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse or sor.btrue ;
if ( t330 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t331 = saf.btrue or sor.bfalse ;
if ( t331 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t332 = saf.btrue or sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse or sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse or sar.btrue ;
if ( t334 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t335 = saf.btrue or sar.bfalse ;
if ( t335 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t336 = saf.btrue or sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse or smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse or smr.btrue ;
if ( t338 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t339 = saf.btrue or smr.bfalse ;
if ( t339 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t340 = saf.btrue or smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse or saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse or saf.r11btrue ;
if ( t342 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t343 = saf.btrue or saf.r11bfalse ;
if ( t343 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t344 = saf.btrue or saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse or smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse or smf.r11btrue ;
if ( t346 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t347 = saf.btrue or smf.r11bfalse ;
if ( t347 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t348 = saf.btrue or smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse or sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse or sor.r11btrue ;
if ( t350 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t351 = saf.btrue or sor.r11bfalse ;
if ( t351 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t352 = saf.btrue or sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse or sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse or sar.r11btrue ;
if ( t354 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t355 = saf.btrue or sar.r11bfalse ;
if ( t355 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t356 = saf.btrue or sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse or smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse or smr.r11btrue ;
if ( t358 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t359 = saf.btrue or smr.r11bfalse ;
if ( t359 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t360 = saf.btrue or smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse or temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue or temp1 ;
if ( t602 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t603 = saf.r11bfalse or temp2 ;
if ( t603 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t604 = saf.r11btrue or temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse or rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue or rcvd_evt.tfalse ;
if ( t606 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t607 = saf.r11bfalse or rcvd_evt.ttrue ;
if ( t607 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t608 = saf.r11btrue or rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse or false ;
if ( t609 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue or false ;
if ( t610 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t611 = saf.r11bfalse or true ;
if ( t611 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t612 = saf.r11btrue or true ;
if ( t612 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse or self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue or self.bfalse ;
if ( t614 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t615 = saf.r11bfalse or self.btrue ;
if ( t615 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t616 = saf.r11btrue or self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse or self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue or self.r9bfalse ;
if ( t618 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t619 = saf.r11bfalse or self.r9btrue ;
if ( t619 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t620 = saf.r11btrue or self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse or saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse or saf.btrue ;
if ( t622 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t623 = saf.r11btrue or saf.bfalse ;
if ( t623 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t624 = saf.r11btrue or saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse or smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse or smf.btrue ;
if ( t626 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t627 = saf.r11btrue or smf.bfalse ;
if ( t627 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t628 = saf.r11btrue or smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse or sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse or sor.btrue ;
if ( t630 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t631 = saf.r11btrue or sor.bfalse ;
if ( t631 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t632 = saf.r11btrue or sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse or sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse or sar.btrue ;
if ( t634 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t635 = saf.r11btrue or sar.bfalse ;
if ( t635 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t636 = saf.r11btrue or sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse or smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse or smr.btrue ;
if ( t638 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t639 = saf.r11btrue or smr.bfalse ;
if ( t639 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t640 = saf.r11btrue or smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse or saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse or saf.r11btrue ;
if ( t642 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t643 = saf.r11btrue or saf.r11bfalse ;
if ( t643 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t644 = saf.r11btrue or saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse or smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse or smf.r11btrue ;
if ( t646 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t647 = saf.r11btrue or smf.r11bfalse ;
if ( t647 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t648 = saf.r11btrue or smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse or sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse or sor.r11btrue ;
if ( t650 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t651 = saf.r11btrue or sor.r11bfalse ;
if ( t651 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t652 = saf.r11btrue or sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse or sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse or sar.r11btrue ;
if ( t654 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t655 = saf.r11btrue or sar.r11bfalse ;
if ( t655 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t656 = saf.r11btrue or sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse or smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse or smr.r11btrue ;
if ( t658 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t659 = saf.r11btrue or smr.r11bfalse ;
if ( t659 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t660 = saf.r11btrue or smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed or test") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
 

',
	'');
INSERT INTO SM_STATE
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'And test 1b',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("48385561-7861-7b49-780f-6041fcbf3349",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"589bb0f5-52b1-a524-fb72-4fc4f81723a2");
INSERT INTO SM_AH
	VALUES ("48385561-7861-7b49-780f-6041fcbf3349",
	"c2c29f82-90df-a134-88df-24aed373ea39");
INSERT INTO SM_ACT
	VALUES ("48385561-7861-7b49-780f-6041fcbf3349",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	1,
	'assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true and temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse and temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue and temp1 ;
if ( t182 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t183 = self.bfalse and temp2 ;
if ( t183 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t184 = self.btrue and temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" and self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse and rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue and rcvd_evt.tfalse ;
if ( t186 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t187 = self.bfalse and rcvd_evt.ttrue ;
if ( t187 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t188 = self.btrue and rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse and false ;
if ( t189 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue and false ;
if ( t190 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t191 = self.bfalse and true ;
if ( t191 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t192 = self.btrue and true ;
if ( t192 == true )
  LOG::LogSuccess(message:" and self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse and self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue and self.bfalse ;
if ( t194 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t195 = self.bfalse and self.btrue ;
if ( t195 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t196 = self.btrue and self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse and self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue and self.r9bfalse ;
if ( t198 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t199 = self.bfalse and self.r9btrue ;
if ( t199 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t200 = self.btrue and self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse and saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse and saf.btrue ;
if ( t202 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t203 = self.btrue and saf.bfalse ;
if ( t203 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t204 = self.btrue and saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse and smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse and smf.btrue ;
if ( t206 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t207 = self.btrue and smf.bfalse ;
if ( t207 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t208 = self.btrue and smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse and sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse and sor.btrue ;
if ( t210 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t211 = self.btrue and sor.bfalse ;
if ( t211 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t212 = self.btrue and sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse and sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse and sar.btrue ;
if ( t214 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t215 = self.btrue and sar.bfalse ;
if ( t215 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t216 = self.btrue and sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse and smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse and smr.btrue ;
if ( t218 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t219 = self.btrue and smr.bfalse ;
if ( t219 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t220 = self.btrue and smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse and saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse and saf.r11btrue ;
if ( t222 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t223 = self.btrue and saf.r11bfalse ;
if ( t223 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t224 = self.btrue and saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse and smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse and smf.r11btrue ;
if ( t226 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t227 = self.btrue and smf.r11bfalse ;
if ( t227 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t228 = self.btrue and smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse and sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse and sor.r11btrue ;
if ( t230 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t231 = self.btrue and sor.r11bfalse ;
if ( t231 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t232 = self.btrue and sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse and sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse and sar.r11btrue ;
if ( t234 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t235 = self.btrue and sar.r11bfalse ;
if ( t235 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t236 = self.btrue and sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse and smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse and smr.r11btrue ;
if ( t238 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t239 = self.btrue and smr.r11bfalse ;
if ( t239 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t240 = self.btrue and smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse and temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue and temp1 ;
if ( t242 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t243 = self.r9bfalse and temp2 ;
if ( t243 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t244 = self.r9btrue and temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse and rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue and rcvd_evt.tfalse ;
if ( t246 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t247 = self.r9bfalse and rcvd_evt.ttrue ;
if ( t247 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t248 = self.r9btrue and rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse and false ;
if ( t249 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue and false ;
if ( t250 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t251 = self.r9bfalse and true ;
if ( t251 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t252 = self.r9btrue and true ;
if ( t252 == true )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse and self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue and self.bfalse ;
if ( t254 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t255 = self.r9bfalse and self.btrue ;
if ( t255 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t256 = self.r9btrue and self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse and self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue and self.r9bfalse ;
if ( t258 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t259 = self.r9bfalse and self.r9btrue ;
if ( t259 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t260 = self.r9btrue and self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse and saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse and saf.btrue ;
if ( t262 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t263 = self.r9btrue and saf.bfalse ;
if ( t263 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t264 = self.r9btrue and saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse and smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse and smf.btrue ;
if ( t266 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t267 = self.r9btrue and smf.bfalse ;
if ( t267 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t268 = self.r9btrue and smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse and sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse and sor.btrue ;
if ( t270 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t271 = self.r9btrue and sor.bfalse ;
if ( t271 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t272 = self.r9btrue and sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse and sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse and sar.btrue ;
if ( t274 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t275 = self.r9btrue and sar.bfalse ;
if ( t275 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t276 = self.r9btrue and sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse and smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse and smr.btrue ;
if ( t278 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t279 = self.r9btrue and smr.bfalse ;
if ( t279 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t280 = self.r9btrue and smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse and saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse and saf.r11btrue ;
if ( t282 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t283 = self.r9btrue and saf.r11bfalse ;
if ( t283 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t284 = self.r9btrue and saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse and smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse and smf.r11btrue ;
if ( t286 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t287 = self.r9btrue and smf.r11bfalse ;
if ( t287 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t288 = self.r9btrue and smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse and sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse and sor.r11btrue ;
if ( t290 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t291 = self.r9btrue and sor.r11bfalse ;
if ( t291 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t292 = self.r9btrue and sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse and sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse and sar.r11btrue ;
if ( t294 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t295 = self.r9btrue and sar.r11bfalse ;
if ( t295 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t296 = self.r9btrue and sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse and smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse and smr.r11btrue ;
if ( t298 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t299 = self.r9btrue and smr.r11bfalse ;
if ( t299 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t300 = self.r9btrue and smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_STATE
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1b',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("28b69ab8-b4d4-4abe-14a9-f8cf8ef63c62",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"37447b80-b406-0e4e-7887-c4e39e84f62f");
INSERT INTO SM_AH
	VALUES ("28b69ab8-b4d4-4abe-14a9-f8cf8ef63c62",
	"c2c29f82-90df-a134-88df-24aed373ea39");
INSERT INTO SM_ACT
	VALUES ("28b69ab8-b4d4-4abe-14a9-f8cf8ef63c62",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	1,
	'// 1.3
// set my logging instance

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true or temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse or temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" or self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue or temp1 ;
if ( t182 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t183 = self.bfalse or temp2 ;
if ( t183 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t184 = self.btrue or temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse or rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue or rcvd_evt.tfalse ;
if ( t186 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t187 = self.bfalse or rcvd_evt.ttrue ;
if ( t187 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t188 = self.btrue or rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse or false ;
if ( t189 == false )
  LOG::LogSuccess(message:" or self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue or false ;
if ( t190 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t191 = self.bfalse or true ;
if ( t191 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t192 = self.btrue or true ;
if ( t192 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse or self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue or self.bfalse ;
if ( t194 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t195 = self.bfalse or self.btrue ;
if ( t195 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t196 = self.btrue or self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse or self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue or self.r9bfalse ;
if ( t198 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t199 = self.bfalse or self.r9btrue ;
if ( t199 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t200 = self.btrue or self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse or saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse or saf.btrue ;
if ( t202 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t203 = self.btrue or saf.bfalse ;
if ( t203 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t204 = self.btrue or saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse or smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse or smf.btrue ;
if ( t206 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t207 = self.btrue or smf.bfalse ;
if ( t207 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t208 = self.btrue or smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse or sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse or sor.btrue ;
if ( t210 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t211 = self.btrue or sor.bfalse ;
if ( t211 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t212 = self.btrue or sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse or sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse or sar.btrue ;
if ( t214 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t215 = self.btrue or sar.bfalse ;
if ( t215 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t216 = self.btrue or sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse or smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse or smr.btrue ;
if ( t218 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t219 = self.btrue or smr.bfalse ;
if ( t219 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t220 = self.btrue or smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse or saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse or saf.r11btrue ;
if ( t222 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t223 = self.btrue or saf.r11bfalse ;
if ( t223 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t224 = self.btrue or saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse or smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse or smf.r11btrue ;
if ( t226 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t227 = self.btrue or smf.r11bfalse ;
if ( t227 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t228 = self.btrue or smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse or sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse or sor.r11btrue ;
if ( t230 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t231 = self.btrue or sor.r11bfalse ;
if ( t231 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t232 = self.btrue or sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse or sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse or sar.r11btrue ;
if ( t234 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t235 = self.btrue or sar.r11bfalse ;
if ( t235 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t236 = self.btrue or sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse or smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse or smr.r11btrue ;
if ( t238 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t239 = self.btrue or smr.r11bfalse ;
if ( t239 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t240 = self.btrue or smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse or temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue or temp1 ;
if ( t242 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t243 = self.r9bfalse or temp2 ;
if ( t243 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t244 = self.r9btrue or temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse or rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue or rcvd_evt.tfalse ;
if ( t246 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t247 = self.r9bfalse or rcvd_evt.ttrue ;
if ( t247 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t248 = self.r9btrue or rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse or false ;
if ( t249 == false )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue or false ;
if ( t250 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t251 = self.r9bfalse or true ;
if ( t251 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t252 = self.r9btrue or true ;
if ( t252 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse or self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue or self.bfalse ;
if ( t254 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t255 = self.r9bfalse or self.btrue ;
if ( t255 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t256 = self.r9btrue or self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse or self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue or self.r9bfalse ;
if ( t258 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t259 = self.r9bfalse or self.r9btrue ;
if ( t259 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t260 = self.r9btrue or self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse or saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse or saf.btrue ;
if ( t262 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t263 = self.r9btrue or saf.bfalse ;
if ( t263 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t264 = self.r9btrue or saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse or smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse or smf.btrue ;
if ( t266 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t267 = self.r9btrue or smf.bfalse ;
if ( t267 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t268 = self.r9btrue or smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse or sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse or sor.btrue ;
if ( t270 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t271 = self.r9btrue or sor.bfalse ;
if ( t271 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t272 = self.r9btrue or sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse or sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse or sar.btrue ;
if ( t274 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t275 = self.r9btrue or sar.bfalse ;
if ( t275 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t276 = self.r9btrue or sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse or smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse or smr.btrue ;
if ( t278 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t279 = self.r9btrue or smr.bfalse ;
if ( t279 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t280 = self.r9btrue or smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse or saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse or saf.r11btrue ;
if ( t282 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t283 = self.r9btrue or saf.r11bfalse ;
if ( t283 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t284 = self.r9btrue or saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse or smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse or smf.r11btrue ;
if ( t286 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t287 = self.r9btrue or smf.r11bfalse ;
if ( t287 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t288 = self.r9btrue or smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse or sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse or sor.r11btrue ;
if ( t290 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t291 = self.r9btrue or sor.r11bfalse ;
if ( t291 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t292 = self.r9btrue or sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse or sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse or sar.r11btrue ;
if ( t294 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t295 = self.r9btrue or sar.r11bfalse ;
if ( t295 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t296 = self.r9btrue or sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse or smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse or smr.r11btrue ;
if ( t298 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t299 = self.r9btrue or smr.r11bfalse ;
if ( t299 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t300 = self.r9btrue or smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET4:''Continue or test''( ttrue: true, tfalse: false ) to self;


',
	'');
INSERT INTO SM_NSTXN
	VALUES ("05d84334-6128-3c86-0ccd-46ce2a40f255",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"f1f4d914-105b-53ad-b3c3-202de165f703",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("ad9409fa-61ef-71a1-6b24-cda494ae473c",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"05d84334-6128-3c86-0ccd-46ce2a40f255");
INSERT INTO SM_AH
	VALUES ("ad9409fa-61ef-71a1-6b24-cda494ae473c",
	"c2c29f82-90df-a134-88df-24aed373ea39");
INSERT INTO SM_ACT
	VALUES ("ad9409fa-61ef-71a1-6b24-cda494ae473c",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("05d84334-6128-3c86-0ccd-46ce2a40f255",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"f1f4d914-105b-53ad-b3c3-202de165f703",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"cad87477-03ab-6030-c3f3-0ca0252ba153",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("ec3514c2-f448-ee13-2459-0dadc15a2181",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2");
INSERT INTO SM_AH
	VALUES ("ec3514c2-f448-ee13-2459-0dadc15a2181",
	"c2c29f82-90df-a134-88df-24aed373ea39");
INSERT INTO SM_ACT
	VALUES ("ec3514c2-f448-ee13-2459-0dadc15a2181",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("5bd354f8-de29-42e7-95be-8f5033bbd963",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("6509bb2c-3d14-436c-dead-40dd5e9f9a34",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"5bd354f8-de29-42e7-95be-8f5033bbd963");
INSERT INTO SM_AH
	VALUES ("6509bb2c-3d14-436c-dead-40dd5e9f9a34",
	"c2c29f82-90df-a134-88df-24aed373ea39");
INSERT INTO SM_ACT
	VALUES ("6509bb2c-3d14-436c-dead-40dd5e9f9a34",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("5bd354f8-de29-42e7-95be-8f5033bbd963",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"cad87477-03ab-6030-c3f3-0ca0252ba153",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"f1f4d914-105b-53ad-b3c3-202de165f703",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("94d78be7-cb7a-463c-1343-08ad5a9ccd17",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5");
INSERT INTO SM_AH
	VALUES ("94d78be7-cb7a-463c-1343-08ad5a9ccd17",
	"c2c29f82-90df-a134-88df-24aed373ea39");
INSERT INTO SM_ACT
	VALUES ("94d78be7-cb7a-463c-1343-08ad5a9ccd17",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"37447b80-b406-0e4e-7887-c4e39e84f62f",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("ae4e1125-c956-1fdb-5efe-d895fdf54d98",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0");
INSERT INTO SM_AH
	VALUES ("ae4e1125-c956-1fdb-5efe-d895fdf54d98",
	"c2c29f82-90df-a134-88df-24aed373ea39");
INSERT INTO SM_ACT
	VALUES ("ae4e1125-c956-1fdb-5efe-d895fdf54d98",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"43175404-e206-cc41-a98d-aeb8192090da",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("2d86cd4f-5cf9-0dc4-b967-ede8eb50e386",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3");
INSERT INTO SM_AH
	VALUES ("2d86cd4f-5cf9-0dc4-b967-ede8eb50e386",
	"c2c29f82-90df-a134-88df-24aed373ea39");
INSERT INTO SM_ACT
	VALUES ("2d86cd4f-5cf9-0dc4-b967-ede8eb50e386",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"c2c29f82-90df-a134-88df-24aed373ea39",
	"37447b80-b406-0e4e-7887-c4e39e84f62f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("4c03fc97-d0bd-08d4-9a8a-590e2fde3204",
	8,
	"c2c29f82-90df-a134-88df-24aed373ea39",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("54dc5e69-e275-cbd1-48e0-1b730a725cff",
	"4c03fc97-d0bd-08d4-9a8a-590e2fde3204",
	"f1f4d914-105b-53ad-b3c3-202de165f703",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a');
INSERT INTO GD_SHP
	VALUES ("54dc5e69-e275-cbd1-48e0-1b730a725cff");
INSERT INTO GD_NCS
	VALUES ("54dc5e69-e275-cbd1-48e0-1b730a725cff");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"54dc5e69-e275-cbd1-48e0-1b730a725cff");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1280.000000,
	"54dc5e69-e275-cbd1-48e0-1b730a725cff",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("54dc5e69-e275-cbd1-48e0-1b730a725cff",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("e628d0a0-050e-9601-b554-dd9b51603878",
	2064.000000,
	1312.000000,
	"54dc5e69-e275-cbd1-48e0-1b730a725cff");
INSERT INTO DIM_CON
	VALUES ("2d4985f1-e480-e60a-a4de-04950980975c",
	1968.000000,
	1280.000000,
	"54dc5e69-e275-cbd1-48e0-1b730a725cff");
INSERT INTO DIM_CON
	VALUES ("31998d5a-a1ef-fc6e-ac86-e2d2db87a7bd",
	1968.000000,
	1376.000000,
	"54dc5e69-e275-cbd1-48e0-1b730a725cff");
INSERT INTO GD_GE
	VALUES ("34847427-244a-1ef9-99c9-e63d1895c34a",
	"4c03fc97-d0bd-08d4-9a8a-590e2fde3204",
	"cad87477-03ab-6030-c3f3-0ca0252ba153",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 2');
INSERT INTO GD_SHP
	VALUES ("34847427-244a-1ef9-99c9-e63d1895c34a");
INSERT INTO GD_NCS
	VALUES ("34847427-244a-1ef9-99c9-e63d1895c34a");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"34847427-244a-1ef9-99c9-e63d1895c34a");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1680.000000,
	"34847427-244a-1ef9-99c9-e63d1895c34a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("34847427-244a-1ef9-99c9-e63d1895c34a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("7e504c45-8acf-6b26-336b-bc787cd36114",
	2064.000000,
	1712.000000,
	"34847427-244a-1ef9-99c9-e63d1895c34a");
INSERT INTO DIM_CON
	VALUES ("20309d50-3e19-a640-b26d-cf68b49d56b7",
	1968.000000,
	1680.000000,
	"34847427-244a-1ef9-99c9-e63d1895c34a");
INSERT INTO GD_GE
	VALUES ("2c175e37-eb64-deca-8ecc-1794f9cfed2a",
	"4c03fc97-d0bd-08d4-9a8a-590e2fde3204",
	"01931093-f38f-79ac-ec3c-30bb8e4842ed",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1a');
INSERT INTO GD_SHP
	VALUES ("2c175e37-eb64-deca-8ecc-1794f9cfed2a");
INSERT INTO GD_NCS
	VALUES ("2c175e37-eb64-deca-8ecc-1794f9cfed2a");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"2c175e37-eb64-deca-8ecc-1794f9cfed2a");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1280.000000,
	"2c175e37-eb64-deca-8ecc-1794f9cfed2a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2c175e37-eb64-deca-8ecc-1794f9cfed2a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("8a20c02e-4625-7e1c-302f-f63727d0ecb1",
	2320.000000,
	1280.000000,
	"2c175e37-eb64-deca-8ecc-1794f9cfed2a");
INSERT INTO DIM_CON
	VALUES ("b46c919b-292f-1e8f-af93-5aa2fa01bc1c",
	2320.000000,
	1376.000000,
	"2c175e37-eb64-deca-8ecc-1794f9cfed2a");
INSERT INTO GD_GE
	VALUES ("5323eebf-69c1-8d8d-85fa-b5948900179e",
	"4c03fc97-d0bd-08d4-9a8a-590e2fde3204",
	"43175404-e206-cc41-a98d-aeb8192090da",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 2');
INSERT INTO GD_SHP
	VALUES ("5323eebf-69c1-8d8d-85fa-b5948900179e");
INSERT INTO GD_NCS
	VALUES ("5323eebf-69c1-8d8d-85fa-b5948900179e");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"5323eebf-69c1-8d8d-85fa-b5948900179e");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1680.000000,
	"5323eebf-69c1-8d8d-85fa-b5948900179e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5323eebf-69c1-8d8d-85fa-b5948900179e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("62e9fa0c-d86d-ad11-59bc-488b6ce70297",
	2320.000000,
	1680.000000,
	"5323eebf-69c1-8d8d-85fa-b5948900179e");
INSERT INTO GD_GE
	VALUES ("285a1d04-e75a-ca08-5f9f-c07368390eb6",
	"4c03fc97-d0bd-08d4-9a8a-590e2fde3204",
	"589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1b');
INSERT INTO GD_SHP
	VALUES ("285a1d04-e75a-ca08-5f9f-c07368390eb6");
INSERT INTO GD_NCS
	VALUES ("285a1d04-e75a-ca08-5f9f-c07368390eb6");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"285a1d04-e75a-ca08-5f9f-c07368390eb6");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1472.000000,
	"285a1d04-e75a-ca08-5f9f-c07368390eb6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("285a1d04-e75a-ca08-5f9f-c07368390eb6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("33111758-d9fc-8841-0afb-3cf84870c6e3",
	1968.000000,
	1472.000000,
	"285a1d04-e75a-ca08-5f9f-c07368390eb6");
INSERT INTO DIM_CON
	VALUES ("2ea4e21e-19f0-bc54-c29d-160441c1ea9e",
	1968.000000,
	1568.000000,
	"285a1d04-e75a-ca08-5f9f-c07368390eb6");
INSERT INTO GD_GE
	VALUES ("cef3884a-4331-066f-4c00-14c68023f194",
	"4c03fc97-d0bd-08d4-9a8a-590e2fde3204",
	"37447b80-b406-0e4e-7887-c4e39e84f62f",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1b');
INSERT INTO GD_SHP
	VALUES ("cef3884a-4331-066f-4c00-14c68023f194");
INSERT INTO GD_NCS
	VALUES ("cef3884a-4331-066f-4c00-14c68023f194");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"cef3884a-4331-066f-4c00-14c68023f194");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1472.000000,
	"cef3884a-4331-066f-4c00-14c68023f194",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cef3884a-4331-066f-4c00-14c68023f194",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("13e8ba02-b29b-4c5a-4b54-69d5ee821389",
	2320.000000,
	1472.000000,
	"cef3884a-4331-066f-4c00-14c68023f194");
INSERT INTO DIM_CON
	VALUES ("03332365-046b-71de-2f3e-4b1451793c8f",
	2320.000000,
	1568.000000,
	"cef3884a-4331-066f-4c00-14c68023f194");
INSERT INTO GD_GE
	VALUES ("8ce5e44b-9564-82eb-f83d-3109ad184ef7",
	"4c03fc97-d0bd-08d4-9a8a-590e2fde3204",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a::BET1: Start and test');
INSERT INTO GD_CON
	VALUES ("8ce5e44b-9564-82eb-f83d-3109ad184ef7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1dd19a01-381a-7da8-18a9-e75215828796",
	"8ce5e44b-9564-82eb-f83d-3109ad184ef7",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1dd19a01-381a-7da8-18a9-e75215828796");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1dd19a01-381a-7da8-18a9-e75215828796",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1dd19a01-381a-7da8-18a9-e75215828796",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5143d7da-b21d-e7eb-7d38-e9905e0d8c84",
	"8ce5e44b-9564-82eb-f83d-3109ad184ef7",
	3,
	-77.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (235.000000,
	34.000000,
	"5143d7da-b21d-e7eb-7d38-e9905e0d8c84");
INSERT INTO DIM_GE
	VALUES (1994.000000,
	1189.000000,
	"5143d7da-b21d-e7eb-7d38-e9905e0d8c84",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5143d7da-b21d-e7eb-7d38-e9905e0d8c84",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("374ae55c-11f5-f3d1-fbda-2578a71f849c",
	"8ce5e44b-9564-82eb-f83d-3109ad184ef7",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"374ae55c-11f5-f3d1-fbda-2578a71f849c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"374ae55c-11f5-f3d1-fbda-2578a71f849c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("374ae55c-11f5-f3d1-fbda-2578a71f849c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("4c918427-acaa-3539-06c8-c6afe5803da6",
	"8ce5e44b-9564-82eb-f83d-3109ad184ef7",
	"00000000-0000-0000-0000-000000000000",
	"9041551f-e5c4-da81-6895-6dba5ce5a888",
	"61e48b8d-22d8-6193-ab52-44a56881ced7");
INSERT INTO GD_LS
	VALUES ("db474ecb-7b8f-377f-b10b-19ac92a62046",
	"8ce5e44b-9564-82eb-f83d-3109ad184ef7",
	"4c918427-acaa-3539-06c8-c6afe5803da6",
	"61e48b8d-22d8-6193-ab52-44a56881ced7",
	"e52e3b1e-2dc3-c799-7821-16d5b7b8b23a");
INSERT INTO GD_LS
	VALUES ("2f01db85-d42e-1c96-71d8-4812525b1488",
	"8ce5e44b-9564-82eb-f83d-3109ad184ef7",
	"db474ecb-7b8f-377f-b10b-19ac92a62046",
	"e52e3b1e-2dc3-c799-7821-16d5b7b8b23a",
	"15ffa0a3-fa89-b080-2bdd-c96be9b8b5dc");
INSERT INTO GD_LS
	VALUES ("26352cb6-29ac-0bd1-a8f5-35d9332eb369",
	"8ce5e44b-9564-82eb-f83d-3109ad184ef7",
	"2f01db85-d42e-1c96-71d8-4812525b1488",
	"15ffa0a3-fa89-b080-2bdd-c96be9b8b5dc",
	"fd5373d8-6da1-a3ef-23b0-8981821c3b88");
INSERT INTO DIM_WAY
	VALUES ("9041551f-e5c4-da81-6895-6dba5ce5a888",
	2064.000000,
	1312.000000,
	"8ce5e44b-9564-82eb-f83d-3109ad184ef7",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("61e48b8d-22d8-6193-ab52-44a56881ced7",
	2128.000000,
	1312.000000,
	"8ce5e44b-9564-82eb-f83d-3109ad184ef7",
	"00000000-0000-0000-0000-000000000000",
	"9041551f-e5c4-da81-6895-6dba5ce5a888");
INSERT INTO DIM_WAY
	VALUES ("e52e3b1e-2dc3-c799-7821-16d5b7b8b23a",
	2128.000000,
	1216.000000,
	"8ce5e44b-9564-82eb-f83d-3109ad184ef7",
	"00000000-0000-0000-0000-000000000000",
	"61e48b8d-22d8-6193-ab52-44a56881ced7");
INSERT INTO DIM_WAY
	VALUES ("15ffa0a3-fa89-b080-2bdd-c96be9b8b5dc",
	1968.000000,
	1216.000000,
	"8ce5e44b-9564-82eb-f83d-3109ad184ef7",
	"00000000-0000-0000-0000-000000000000",
	"e52e3b1e-2dc3-c799-7821-16d5b7b8b23a");
INSERT INTO DIM_WAY
	VALUES ("fd5373d8-6da1-a3ef-23b0-8981821c3b88",
	1968.000000,
	1280.000000,
	"8ce5e44b-9564-82eb-f83d-3109ad184ef7",
	"00000000-0000-0000-0000-000000000000",
	"15ffa0a3-fa89-b080-2bdd-c96be9b8b5dc");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8ce5e44b-9564-82eb-f83d-3109ad184ef7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8ce5e44b-9564-82eb-f83d-3109ad184ef7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e628d0a0-050e-9601-b554-dd9b51603878",
	"2d4985f1-e480-e60a-a4de-04950980975c",
	"8ce5e44b-9564-82eb-f83d-3109ad184ef7");
INSERT INTO GD_GE
	VALUES ("f7376f50-86a5-afe9-65ec-522d0e786dfc",
	"4c03fc97-d0bd-08d4-9a8a-590e2fde3204",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 2::BET3: Start or test');
INSERT INTO GD_CON
	VALUES ("f7376f50-86a5-afe9-65ec-522d0e786dfc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7e18108f-847f-8308-488b-85ce833e60a6",
	"f7376f50-86a5-afe9-65ec-522d0e786dfc",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7e18108f-847f-8308-488b-85ce833e60a6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7e18108f-847f-8308-488b-85ce833e60a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7e18108f-847f-8308-488b-85ce833e60a6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2182e1ed-a4f7-3429-cfbc-fe6d7168970d",
	"f7376f50-86a5-afe9-65ec-522d0e786dfc",
	3,
	155.000000,
	-202.000000);
INSERT INTO DIM_ND
	VALUES (205.000000,
	41.000000,
	"2182e1ed-a4f7-3429-cfbc-fe6d7168970d");
INSERT INTO DIM_GE
	VALUES (2331.000000,
	1231.000000,
	"2182e1ed-a4f7-3429-cfbc-fe6d7168970d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2182e1ed-a4f7-3429-cfbc-fe6d7168970d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("dcb0064c-e168-cf7e-6ac6-b8493f337fe1",
	"f7376f50-86a5-afe9-65ec-522d0e786dfc",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"dcb0064c-e168-cf7e-6ac6-b8493f337fe1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"dcb0064c-e168-cf7e-6ac6-b8493f337fe1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dcb0064c-e168-cf7e-6ac6-b8493f337fe1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("0bfe7d63-cd8b-f51d-0e91-218cae3b26e8",
	"f7376f50-86a5-afe9-65ec-522d0e786dfc",
	"00000000-0000-0000-0000-000000000000",
	"2ce106d8-5710-ccf2-0c56-a38fb5b88507",
	"003a6b4a-1d3f-2b90-85c5-3072e48e4195");
INSERT INTO GD_LS
	VALUES ("6e57ee8b-318c-b808-f850-58ed3d65f9e3",
	"f7376f50-86a5-afe9-65ec-522d0e786dfc",
	"0bfe7d63-cd8b-f51d-0e91-218cae3b26e8",
	"003a6b4a-1d3f-2b90-85c5-3072e48e4195",
	"c0167b59-101c-acc7-dca6-ad121c58d91f");
INSERT INTO GD_LS
	VALUES ("8708c837-8fb9-7649-0c9f-707355cf4a89",
	"f7376f50-86a5-afe9-65ec-522d0e786dfc",
	"6e57ee8b-318c-b808-f850-58ed3d65f9e3",
	"c0167b59-101c-acc7-dca6-ad121c58d91f",
	"8cbc4e4d-4e72-5e03-855c-2b2fa201d2a7");
INSERT INTO GD_LS
	VALUES ("f4fc3c22-c974-dea9-11ab-7884f7ea4e33",
	"f7376f50-86a5-afe9-65ec-522d0e786dfc",
	"8708c837-8fb9-7649-0c9f-707355cf4a89",
	"8cbc4e4d-4e72-5e03-855c-2b2fa201d2a7",
	"12677fea-9c80-5307-71ab-aa3ae4748fa9");
INSERT INTO DIM_WAY
	VALUES ("2ce106d8-5710-ccf2-0c56-a38fb5b88507",
	2064.000000,
	1712.000000,
	"f7376f50-86a5-afe9-65ec-522d0e786dfc",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("003a6b4a-1d3f-2b90-85c5-3072e48e4195",
	2192.000000,
	1712.000000,
	"f7376f50-86a5-afe9-65ec-522d0e786dfc",
	"00000000-0000-0000-0000-000000000000",
	"2ce106d8-5710-ccf2-0c56-a38fb5b88507");
INSERT INTO DIM_WAY
	VALUES ("c0167b59-101c-acc7-dca6-ad121c58d91f",
	2192.000000,
	1232.000000,
	"f7376f50-86a5-afe9-65ec-522d0e786dfc",
	"00000000-0000-0000-0000-000000000000",
	"003a6b4a-1d3f-2b90-85c5-3072e48e4195");
INSERT INTO DIM_WAY
	VALUES ("8cbc4e4d-4e72-5e03-855c-2b2fa201d2a7",
	2320.000000,
	1232.000000,
	"f7376f50-86a5-afe9-65ec-522d0e786dfc",
	"00000000-0000-0000-0000-000000000000",
	"c0167b59-101c-acc7-dca6-ad121c58d91f");
INSERT INTO DIM_WAY
	VALUES ("12677fea-9c80-5307-71ab-aa3ae4748fa9",
	2320.000000,
	1280.000000,
	"f7376f50-86a5-afe9-65ec-522d0e786dfc",
	"00000000-0000-0000-0000-000000000000",
	"8cbc4e4d-4e72-5e03-855c-2b2fa201d2a7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f7376f50-86a5-afe9-65ec-522d0e786dfc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f7376f50-86a5-afe9-65ec-522d0e786dfc",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("7e504c45-8acf-6b26-336b-bc787cd36114",
	"8a20c02e-4625-7e1c-302f-f63727d0ecb1",
	"f7376f50-86a5-afe9-65ec-522d0e786dfc");
INSERT INTO GD_GE
	VALUES ("70a48af3-41cb-e5c5-a82b-f5dcb08840b8",
	"4c03fc97-d0bd-08d4-9a8a-590e2fde3204",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a::BET2: Continue and test');
INSERT INTO GD_CON
	VALUES ("70a48af3-41cb-e5c5-a82b-f5dcb08840b8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6c219a77-fb3c-a872-afe7-15f474afdd67",
	"70a48af3-41cb-e5c5-a82b-f5dcb08840b8",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6c219a77-fb3c-a872-afe7-15f474afdd67");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6c219a77-fb3c-a872-afe7-15f474afdd67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6c219a77-fb3c-a872-afe7-15f474afdd67",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5477d408-a6cd-9c2b-6810-887acb77c611",
	"70a48af3-41cb-e5c5-a82b-f5dcb08840b8",
	3,
	-247.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (270.000000,
	40.000000,
	"5477d408-a6cd-9c2b-6810-887acb77c611");
INSERT INTO DIM_GE
	VALUES (1705.000000,
	1407.000000,
	"5477d408-a6cd-9c2b-6810-887acb77c611",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5477d408-a6cd-9c2b-6810-887acb77c611",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b4d7c5b5-0dc6-c033-4b12-836894d1d5d8",
	"70a48af3-41cb-e5c5-a82b-f5dcb08840b8",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b4d7c5b5-0dc6-c033-4b12-836894d1d5d8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b4d7c5b5-0dc6-c033-4b12-836894d1d5d8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b4d7c5b5-0dc6-c033-4b12-836894d1d5d8",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("701317df-c50e-ac61-7226-fc24f991908c",
	"70a48af3-41cb-e5c5-a82b-f5dcb08840b8",
	"00000000-0000-0000-0000-000000000000",
	"43699e04-d5ae-13bd-ad17-ab4c98be280d",
	"754c3751-e5d3-08d8-3929-f3de089542e6");
INSERT INTO DIM_WAY
	VALUES ("43699e04-d5ae-13bd-ad17-ab4c98be280d",
	1968.000000,
	1376.000000,
	"70a48af3-41cb-e5c5-a82b-f5dcb08840b8",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("754c3751-e5d3-08d8-3929-f3de089542e6",
	1968.000000,
	1472.000000,
	"70a48af3-41cb-e5c5-a82b-f5dcb08840b8",
	"00000000-0000-0000-0000-000000000000",
	"43699e04-d5ae-13bd-ad17-ab4c98be280d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"70a48af3-41cb-e5c5-a82b-f5dcb08840b8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("70a48af3-41cb-e5c5-a82b-f5dcb08840b8",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("31998d5a-a1ef-fc6e-ac86-e2d2db87a7bd",
	"33111758-d9fc-8841-0afb-3cf84870c6e3",
	"70a48af3-41cb-e5c5-a82b-f5dcb08840b8");
INSERT INTO GD_GE
	VALUES ("526adb0e-69e4-f788-1f12-e1a7e029fb41",
	"4c03fc97-d0bd-08d4-9a8a-590e2fde3204",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1b::BET2: Continue and test');
INSERT INTO GD_CON
	VALUES ("526adb0e-69e4-f788-1f12-e1a7e029fb41",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("77f26a4e-9fc6-ecf3-cee0-fbadfed43d5e",
	"526adb0e-69e4-f788-1f12-e1a7e029fb41",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"77f26a4e-9fc6-ecf3-cee0-fbadfed43d5e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"77f26a4e-9fc6-ecf3-cee0-fbadfed43d5e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("77f26a4e-9fc6-ecf3-cee0-fbadfed43d5e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("96c72293-ae6a-3d39-a6cb-a14c81bbf3a3",
	"526adb0e-69e4-f788-1f12-e1a7e029fb41",
	3,
	-257.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (279.000000,
	44.000000,
	"96c72293-ae6a-3d39-a6cb-a14c81bbf3a3");
INSERT INTO DIM_GE
	VALUES (1695.000000,
	1610.000000,
	"96c72293-ae6a-3d39-a6cb-a14c81bbf3a3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("96c72293-ae6a-3d39-a6cb-a14c81bbf3a3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d7fc8f06-f329-b1f2-02cc-deb9b1b6de20",
	"526adb0e-69e4-f788-1f12-e1a7e029fb41",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d7fc8f06-f329-b1f2-02cc-deb9b1b6de20");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d7fc8f06-f329-b1f2-02cc-deb9b1b6de20",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d7fc8f06-f329-b1f2-02cc-deb9b1b6de20",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("5f9a9a3d-3565-6b1f-ac94-fdd744df998b",
	"526adb0e-69e4-f788-1f12-e1a7e029fb41",
	"00000000-0000-0000-0000-000000000000",
	"6880a2c3-dd2f-29c6-5715-7ee61197e17e",
	"2ff41ad8-6f17-153b-084c-ffe548379eba");
INSERT INTO DIM_WAY
	VALUES ("6880a2c3-dd2f-29c6-5715-7ee61197e17e",
	1968.000000,
	1568.000000,
	"526adb0e-69e4-f788-1f12-e1a7e029fb41",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("2ff41ad8-6f17-153b-084c-ffe548379eba",
	1968.000000,
	1680.000000,
	"526adb0e-69e4-f788-1f12-e1a7e029fb41",
	"00000000-0000-0000-0000-000000000000",
	"6880a2c3-dd2f-29c6-5715-7ee61197e17e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"526adb0e-69e4-f788-1f12-e1a7e029fb41",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("526adb0e-69e4-f788-1f12-e1a7e029fb41",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("2ea4e21e-19f0-bc54-c29d-160441c1ea9e",
	"20309d50-3e19-a640-b26d-cf68b49d56b7",
	"526adb0e-69e4-f788-1f12-e1a7e029fb41");
INSERT INTO GD_GE
	VALUES ("9c07b681-59ff-1d53-cb63-d10ab7e60a7c",
	"4c03fc97-d0bd-08d4-9a8a-590e2fde3204",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1a::BET4: Continue or test');
INSERT INTO GD_CON
	VALUES ("9c07b681-59ff-1d53-cb63-d10ab7e60a7c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2ed08ab1-e880-bcee-4f2e-38971cb3e88c",
	"9c07b681-59ff-1d53-cb63-d10ab7e60a7c",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"2ed08ab1-e880-bcee-4f2e-38971cb3e88c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2ed08ab1-e880-bcee-4f2e-38971cb3e88c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2ed08ab1-e880-bcee-4f2e-38971cb3e88c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("286817fc-7a2b-483a-e3c5-e8d2d7521eda",
	"9c07b681-59ff-1d53-cb63-d10ab7e60a7c",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (252.000000,
	49.000000,
	"286817fc-7a2b-483a-e3c5-e8d2d7521eda");
INSERT INTO DIM_GE
	VALUES (2304.000000,
	1408.000000,
	"286817fc-7a2b-483a-e3c5-e8d2d7521eda",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("286817fc-7a2b-483a-e3c5-e8d2d7521eda",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e9783c0c-8ae5-6edd-eeab-46be851a56ee",
	"9c07b681-59ff-1d53-cb63-d10ab7e60a7c",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e9783c0c-8ae5-6edd-eeab-46be851a56ee");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e9783c0c-8ae5-6edd-eeab-46be851a56ee",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e9783c0c-8ae5-6edd-eeab-46be851a56ee",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("bf44c31a-b1d4-dd60-0600-3978cb75e96b",
	"9c07b681-59ff-1d53-cb63-d10ab7e60a7c",
	"00000000-0000-0000-0000-000000000000",
	"3461f0a4-1b81-aa34-e8b0-85feb5083a4b",
	"3906f057-325d-5e2c-32d9-e370852f3fa7");
INSERT INTO DIM_WAY
	VALUES ("3461f0a4-1b81-aa34-e8b0-85feb5083a4b",
	2320.000000,
	1376.000000,
	"9c07b681-59ff-1d53-cb63-d10ab7e60a7c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("3906f057-325d-5e2c-32d9-e370852f3fa7",
	2320.000000,
	1472.000000,
	"9c07b681-59ff-1d53-cb63-d10ab7e60a7c",
	"00000000-0000-0000-0000-000000000000",
	"3461f0a4-1b81-aa34-e8b0-85feb5083a4b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9c07b681-59ff-1d53-cb63-d10ab7e60a7c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9c07b681-59ff-1d53-cb63-d10ab7e60a7c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b46c919b-292f-1e8f-af93-5aa2fa01bc1c",
	"13e8ba02-b29b-4c5a-4b54-69d5ee821389",
	"9c07b681-59ff-1d53-cb63-d10ab7e60a7c");
INSERT INTO GD_GE
	VALUES ("b8d2cc7f-4baf-0120-65e6-b29a6f7d9990",
	"4c03fc97-d0bd-08d4-9a8a-590e2fde3204",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1b::BET4: Continue or test');
INSERT INTO GD_CON
	VALUES ("b8d2cc7f-4baf-0120-65e6-b29a6f7d9990",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("21ebcce8-4565-dfb5-f664-ba0263a6f5d3",
	"b8d2cc7f-4baf-0120-65e6-b29a6f7d9990",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"21ebcce8-4565-dfb5-f664-ba0263a6f5d3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"21ebcce8-4565-dfb5-f664-ba0263a6f5d3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("21ebcce8-4565-dfb5-f664-ba0263a6f5d3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c972bc19-86d5-5281-a93f-cc4ffd0eab98",
	"b8d2cc7f-4baf-0120-65e6-b29a6f7d9990",
	3,
	9.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (241.000000,
	48.000000,
	"c972bc19-86d5-5281-a93f-cc4ffd0eab98");
INSERT INTO DIM_GE
	VALUES (2313.000000,
	1601.000000,
	"c972bc19-86d5-5281-a93f-cc4ffd0eab98",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c972bc19-86d5-5281-a93f-cc4ffd0eab98",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("862f4c95-e385-c85f-f9f2-3fccbde3f4e0",
	"b8d2cc7f-4baf-0120-65e6-b29a6f7d9990",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"862f4c95-e385-c85f-f9f2-3fccbde3f4e0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"862f4c95-e385-c85f-f9f2-3fccbde3f4e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("862f4c95-e385-c85f-f9f2-3fccbde3f4e0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("64c88b7a-82b4-72e9-8f24-b2b35bf6752b",
	"b8d2cc7f-4baf-0120-65e6-b29a6f7d9990",
	"00000000-0000-0000-0000-000000000000",
	"9cd8c958-6bf9-ab52-15f2-ab86d59211bd",
	"6009ed98-57ba-0665-d207-241e9d90a64f");
INSERT INTO DIM_WAY
	VALUES ("9cd8c958-6bf9-ab52-15f2-ab86d59211bd",
	2320.000000,
	1568.000000,
	"b8d2cc7f-4baf-0120-65e6-b29a6f7d9990",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("6009ed98-57ba-0665-d207-241e9d90a64f",
	2320.000000,
	1680.000000,
	"b8d2cc7f-4baf-0120-65e6-b29a6f7d9990",
	"00000000-0000-0000-0000-000000000000",
	"9cd8c958-6bf9-ab52-15f2-ab86d59211bd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b8d2cc7f-4baf-0120-65e6-b29a6f7d9990",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b8d2cc7f-4baf-0120-65e6-b29a6f7d9990",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("03332365-046b-71de-2f3e-4b1451793c8f",
	"62e9fa0c-d86d-ad11-59bc-488b6ce70297",
	"b8d2cc7f-4baf-0120-65e6-b29a6f7d9990");
INSERT INTO DIM_DIA
	VALUES ("4c03fc97-d0bd-08d4-9a8a-590e2fde3204",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("1aaede22-0fcc-95bd-209b-fd34bb0689e3",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("1aaede22-0fcc-95bd-209b-fd34bb0689e3",
	'Event Instance',
	21,
	'EV',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("a7a57e1b-c248-765e-6ca6-e33a4b838ba3",
	"1aaede22-0fcc-95bd-209b-fd34bb0689e3");
INSERT INTO O_BATTR
	VALUES ("a7a57e1b-c248-765e-6ca6-e33a4b838ba3",
	"1aaede22-0fcc-95bd-209b-fd34bb0689e3");
INSERT INTO O_ATTR
	VALUES ("a7a57e1b-c248-765e-6ca6-e33a4b838ba3",
	"1aaede22-0fcc-95bd-209b-fd34bb0689e3",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ca72b1ff-e5a6-e38d-f4b2-46e6a7aa5538",
	"1aaede22-0fcc-95bd-209b-fd34bb0689e3");
INSERT INTO O_BATTR
	VALUES ("ca72b1ff-e5a6-e38d-f4b2-46e6a7aa5538",
	"1aaede22-0fcc-95bd-209b-fd34bb0689e3");
INSERT INTO O_ATTR
	VALUES ("ca72b1ff-e5a6-e38d-f4b2-46e6a7aa5538",
	"1aaede22-0fcc-95bd-209b-fd34bb0689e3",
	"a7a57e1b-c248-765e-6ca6-e33a4b838ba3",
	'shutdown_count',
	'',
	'',
	'shutdown_count',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("27280732-2bfa-bede-3bc6-dd987bccb815",
	"1aaede22-0fcc-95bd-209b-fd34bb0689e3");
INSERT INTO O_BATTR
	VALUES ("27280732-2bfa-bede-3bc6-dd987bccb815",
	"1aaede22-0fcc-95bd-209b-fd34bb0689e3");
INSERT INTO O_ATTR
	VALUES ("27280732-2bfa-bede-3bc6-dd987bccb815",
	"1aaede22-0fcc-95bd-209b-fd34bb0689e3",
	"ca72b1ff-e5a6-e38d-f4b2-46e6a7aa5538",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"1aaede22-0fcc-95bd-209b-fd34bb0689e3");
INSERT INTO O_OIDA
	VALUES ("a7a57e1b-c248-765e-6ca6-e33a4b838ba3",
	"1aaede22-0fcc-95bd-209b-fd34bb0689e3",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"1aaede22-0fcc-95bd-209b-fd34bb0689e3");
INSERT INTO O_ID
	VALUES (2,
	"1aaede22-0fcc-95bd-209b-fd34bb0689e3");
INSERT INTO SM_ISM
	VALUES ("1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"1aaede22-0fcc-95bd-209b-fd34bb0689e3");
INSERT INTO SM_SM
	VALUES ("1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	'',
	7);
INSERT INTO SM_MOORE
	VALUES ("1797fae4-2704-51ad-0b60-c9d297ba1fa2");
INSERT INTO SM_EVTDI
	VALUES ("7e0429f4-c89a-7acf-5271-494d452aa79e",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	'message',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_LEVT
	VALUES ("691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Event Instance',
	0,
	'',
	'EV1',
	'');
INSERT INTO SM_LEVT
	VALUES ("417f5810-e42c-e0e2-fb4b-3cec12ff8438",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("417f5810-e42c-e0e2-fb4b-3cec12ff8438",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("417f5810-e42c-e0e2-fb4b-3cec12ff8438",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"00000000-0000-0000-0000-000000000000",
	2,
	'shutdown',
	0,
	'',
	'EV2',
	'');
INSERT INTO SM_STATE
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"00000000-0000-0000-0000-000000000000",
	'dummy',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"417f5810-e42c-e0e2-fb4b-3cec12ff8438",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("50628439-bb7f-3f44-440b-d959629750e3",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"59917f33-cef2-9af9-8dd3-a33ee8073757");
INSERT INTO SM_AH
	VALUES ("50628439-bb7f-3f44-440b-d959629750e3",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2");
INSERT INTO SM_ACT
	VALUES ("50628439-bb7f-3f44-440b-d959629750e3",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	1,
	'',
	'');
INSERT INTO SM_STATE
	VALUES ("010e5b79-68d0-bcb1-520c-f74108fb87da",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"00000000-0000-0000-0000-000000000000",
	'shutdown',
	2,
	0);
INSERT INTO SM_SEME
	VALUES ("010e5b79-68d0-bcb1-520c-f74108fb87da",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("010e5b79-68d0-bcb1-520c-f74108fb87da",
	"417f5810-e42c-e0e2-fb4b-3cec12ff8438",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("df711df7-b52b-f9f4-1daf-1faa5eb3698c",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"010e5b79-68d0-bcb1-520c-f74108fb87da");
INSERT INTO SM_AH
	VALUES ("df711df7-b52b-f9f4-1daf-1faa5eb3698c",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2");
INSERT INTO SM_ACT
	VALUES ("df711df7-b52b-f9f4-1daf-1faa5eb3698c",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	1,
	'self.shutdown_count = self.shutdown_count - 1;

if ( self.shutdown_count == 0 )
  bridge ARCH::shutdown();
end if;',
	'');
INSERT INTO SM_NSTXN
	VALUES ("7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"59917f33-cef2-9af9-8dd3-a33ee8073757",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("e8693089-41c0-1fec-1856-19f196b4055d",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e");
INSERT INTO SM_AH
	VALUES ("e8693089-41c0-1fec-1856-19f196b4055d",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2");
INSERT INTO SM_ACT
	VALUES ("e8693089-41c0-1fec-1856-19f196b4055d",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"59917f33-cef2-9af9-8dd3-a33ee8073757",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("b0a1d77e-4bd3-d8a6-936b-e90d7275bab0",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"010e5b79-68d0-bcb1-520c-f74108fb87da",
	"417f5810-e42c-e0e2-fb4b-3cec12ff8438",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("60b1be3f-099c-2d6e-1a66-521cf72e6bb6",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"b0a1d77e-4bd3-d8a6-936b-e90d7275bab0");
INSERT INTO SM_AH
	VALUES ("60b1be3f-099c-2d6e-1a66-521cf72e6bb6",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2");
INSERT INTO SM_ACT
	VALUES ("60b1be3f-099c-2d6e-1a66-521cf72e6bb6",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("b0a1d77e-4bd3-d8a6-936b-e90d7275bab0",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"010e5b79-68d0-bcb1-520c-f74108fb87da",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("f64ff628-c913-616a-bbe7-83682902a298",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"010e5b79-68d0-bcb1-520c-f74108fb87da",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("039fe8f5-af7d-7451-32d4-b3cf1d5ea922",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"f64ff628-c913-616a-bbe7-83682902a298");
INSERT INTO SM_AH
	VALUES ("039fe8f5-af7d-7451-32d4-b3cf1d5ea922",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2");
INSERT INTO SM_ACT
	VALUES ("039fe8f5-af7d-7451-32d4-b3cf1d5ea922",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("f64ff628-c913-616a-bbe7-83682902a298",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"59917f33-cef2-9af9-8dd3-a33ee8073757",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("93ea5f31-2048-2ab7-bae9-4e08a4ea93cc",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"59917f33-cef2-9af9-8dd3-a33ee8073757",
	"417f5810-e42c-e0e2-fb4b-3cec12ff8438",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("124933f0-be4f-4b48-43da-d36851efe3c1",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"93ea5f31-2048-2ab7-bae9-4e08a4ea93cc");
INSERT INTO SM_AH
	VALUES ("124933f0-be4f-4b48-43da-d36851efe3c1",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2");
INSERT INTO SM_ACT
	VALUES ("124933f0-be4f-4b48-43da-d36851efe3c1",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("93ea5f31-2048-2ab7-bae9-4e08a4ea93cc",
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	"010e5b79-68d0-bcb1-520c-f74108fb87da",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("c768cc03-fd74-debb-bd62-5942f5ec99c8",
	8,
	"1797fae4-2704-51ad-0b60-c9d297ba1fa2",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("a5c29edc-6e60-fb09-813d-d0a6e668369b",
	"c768cc03-fd74-debb-bd62-5942f5ec99c8",
	"59917f33-cef2-9af9-8dd3-a33ee8073757",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy');
INSERT INTO GD_SHP
	VALUES ("a5c29edc-6e60-fb09-813d-d0a6e668369b");
INSERT INTO GD_NCS
	VALUES ("a5c29edc-6e60-fb09-813d-d0a6e668369b");
INSERT INTO DIM_ND
	VALUES (288.000000,
	128.000000,
	"a5c29edc-6e60-fb09-813d-d0a6e668369b");
INSERT INTO DIM_GE
	VALUES (1856.000000,
	1328.000000,
	"a5c29edc-6e60-fb09-813d-d0a6e668369b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a5c29edc-6e60-fb09-813d-d0a6e668369b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("1753a654-2160-8069-f3a4-d3c5cd94551b",
	1888.000000,
	1328.000000,
	"a5c29edc-6e60-fb09-813d-d0a6e668369b");
INSERT INTO DIM_CON
	VALUES ("91a4813e-c095-0136-f6b0-3aeb073270bd",
	2016.000000,
	1328.000000,
	"a5c29edc-6e60-fb09-813d-d0a6e668369b");
INSERT INTO DIM_CON
	VALUES ("83499637-e597-cb9a-5bbf-bf31fca4ce6b",
	2144.000000,
	1408.000000,
	"a5c29edc-6e60-fb09-813d-d0a6e668369b");
INSERT INTO DIM_CON
	VALUES ("9702ae3b-2a34-6bed-99ed-00138a6170d9",
	1856.000000,
	1392.000000,
	"a5c29edc-6e60-fb09-813d-d0a6e668369b");
INSERT INTO GD_GE
	VALUES ("c1d6d9df-998b-fa15-b531-1613cc93b75a",
	"c768cc03-fd74-debb-bd62-5942f5ec99c8",
	"010e5b79-68d0-bcb1-520c-f74108fb87da",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown');
INSERT INTO GD_SHP
	VALUES ("c1d6d9df-998b-fa15-b531-1613cc93b75a");
INSERT INTO GD_NCS
	VALUES ("c1d6d9df-998b-fa15-b531-1613cc93b75a");
INSERT INTO DIM_ND
	VALUES (288.000000,
	128.000000,
	"c1d6d9df-998b-fa15-b531-1613cc93b75a");
INSERT INTO DIM_GE
	VALUES (1856.000000,
	1056.000000,
	"c1d6d9df-998b-fa15-b531-1613cc93b75a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c1d6d9df-998b-fa15-b531-1613cc93b75a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("7142f68e-8a37-dddf-f9f7-9cd1851244b4",
	1920.000000,
	1056.000000,
	"c1d6d9df-998b-fa15-b531-1613cc93b75a");
INSERT INTO DIM_CON
	VALUES ("8d0199c9-796a-9ce5-1163-85da156628ec",
	2096.000000,
	1056.000000,
	"c1d6d9df-998b-fa15-b531-1613cc93b75a");
INSERT INTO DIM_CON
	VALUES ("3208b5d0-39c2-913d-70bc-3eea1cff30f6",
	2144.000000,
	1120.000000,
	"c1d6d9df-998b-fa15-b531-1613cc93b75a");
INSERT INTO DIM_CON
	VALUES ("b8dcc786-8b4d-ecd7-b522-622aaccc8c0a",
	1856.000000,
	1120.000000,
	"c1d6d9df-998b-fa15-b531-1613cc93b75a");
INSERT INTO GD_GE
	VALUES ("4e1e742b-c4ca-67a9-049a-ae8759076709",
	"c768cc03-fd74-debb-bd62-5942f5ec99c8",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy::EV1: Event Instance');
INSERT INTO GD_CON
	VALUES ("4e1e742b-c4ca-67a9-049a-ae8759076709",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c1a6c595-df27-51de-3fdd-e702e470d9bd",
	"4e1e742b-c4ca-67a9-049a-ae8759076709",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c1a6c595-df27-51de-3fdd-e702e470d9bd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c1a6c595-df27-51de-3fdd-e702e470d9bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c1a6c595-df27-51de-3fdd-e702e470d9bd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2af7edd7-4fc1-b08a-e690-17841139b900",
	"4e1e742b-c4ca-67a9-049a-ae8759076709",
	3,
	-7.000000,
	-28.000000);
INSERT INTO DIM_ND
	VALUES (284.000000,
	59.000000,
	"2af7edd7-4fc1-b08a-e690-17841139b900");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1243.000000,
	"2af7edd7-4fc1-b08a-e690-17841139b900",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2af7edd7-4fc1-b08a-e690-17841139b900",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cf3a7b77-333d-5184-4059-2e84fdfe24e9",
	"4e1e742b-c4ca-67a9-049a-ae8759076709",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"cf3a7b77-333d-5184-4059-2e84fdfe24e9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cf3a7b77-333d-5184-4059-2e84fdfe24e9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cf3a7b77-333d-5184-4059-2e84fdfe24e9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("10339afe-b9a1-2940-4049-e8e1b01f755a",
	"4e1e742b-c4ca-67a9-049a-ae8759076709",
	"00000000-0000-0000-0000-000000000000",
	"5c25c046-de44-2c2a-7b8e-cdc5822b6099",
	"2883217a-e32b-d529-924c-304ed8159def");
INSERT INTO GD_LS
	VALUES ("0f442834-ea40-6b05-287b-95973697d75c",
	"4e1e742b-c4ca-67a9-049a-ae8759076709",
	"10339afe-b9a1-2940-4049-e8e1b01f755a",
	"2883217a-e32b-d529-924c-304ed8159def",
	"329641b0-0c0f-3829-40f6-b6c40ca76c02");
INSERT INTO GD_LS
	VALUES ("e30aeeee-e82f-fa7a-31de-018f92ed9b82",
	"4e1e742b-c4ca-67a9-049a-ae8759076709",
	"0f442834-ea40-6b05-287b-95973697d75c",
	"329641b0-0c0f-3829-40f6-b6c40ca76c02",
	"214d6259-29aa-3e70-75ef-8c445160c51a");
INSERT INTO DIM_WAY
	VALUES ("5c25c046-de44-2c2a-7b8e-cdc5822b6099",
	1888.000000,
	1328.000000,
	"4e1e742b-c4ca-67a9-049a-ae8759076709",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("2883217a-e32b-d529-924c-304ed8159def",
	1888.000000,
	1296.000000,
	"4e1e742b-c4ca-67a9-049a-ae8759076709",
	"00000000-0000-0000-0000-000000000000",
	"5c25c046-de44-2c2a-7b8e-cdc5822b6099");
INSERT INTO DIM_WAY
	VALUES ("329641b0-0c0f-3829-40f6-b6c40ca76c02",
	2016.000000,
	1296.000000,
	"4e1e742b-c4ca-67a9-049a-ae8759076709",
	"00000000-0000-0000-0000-000000000000",
	"2883217a-e32b-d529-924c-304ed8159def");
INSERT INTO DIM_WAY
	VALUES ("214d6259-29aa-3e70-75ef-8c445160c51a",
	2016.000000,
	1328.000000,
	"4e1e742b-c4ca-67a9-049a-ae8759076709",
	"00000000-0000-0000-0000-000000000000",
	"329641b0-0c0f-3829-40f6-b6c40ca76c02");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4e1e742b-c4ca-67a9-049a-ae8759076709",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4e1e742b-c4ca-67a9-049a-ae8759076709",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("1753a654-2160-8069-f3a4-d3c5cd94551b",
	"91a4813e-c095-0136-f6b0-3aeb073270bd",
	"4e1e742b-c4ca-67a9-049a-ae8759076709");
INSERT INTO GD_GE
	VALUES ("419dc224-dc32-8291-35b5-8c47a4de8d2f",
	"c768cc03-fd74-debb-bd62-5942f5ec99c8",
	"b0a1d77e-4bd3-d8a6-936b-e90d7275bab0",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown::EV2: shutdown');
INSERT INTO GD_CON
	VALUES ("419dc224-dc32-8291-35b5-8c47a4de8d2f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("114a0063-a75c-a7f3-a96c-7f6eb029f8aa",
	"419dc224-dc32-8291-35b5-8c47a4de8d2f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"114a0063-a75c-a7f3-a96c-7f6eb029f8aa");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"114a0063-a75c-a7f3-a96c-7f6eb029f8aa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("114a0063-a75c-a7f3-a96c-7f6eb029f8aa",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a8f76ff8-c47f-c17e-8994-1da664e1d603",
	"419dc224-dc32-8291-35b5-8c47a4de8d2f",
	3,
	0.000000,
	-29.000000);
INSERT INTO DIM_ND
	VALUES (144.000000,
	44.000000,
	"a8f76ff8-c47f-c17e-8994-1da664e1d603");
INSERT INTO DIM_GE
	VALUES (1983.000000,
	954.000000,
	"a8f76ff8-c47f-c17e-8994-1da664e1d603",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a8f76ff8-c47f-c17e-8994-1da664e1d603",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("06e45234-c6b8-7ac6-cff7-1b50327aee84",
	"419dc224-dc32-8291-35b5-8c47a4de8d2f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"06e45234-c6b8-7ac6-cff7-1b50327aee84");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"06e45234-c6b8-7ac6-cff7-1b50327aee84",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("06e45234-c6b8-7ac6-cff7-1b50327aee84",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("1cbabc05-92e6-42ba-0c44-33d4dd69b970",
	"419dc224-dc32-8291-35b5-8c47a4de8d2f",
	"00000000-0000-0000-0000-000000000000",
	"245ae7a8-f583-a226-cda1-bc6ca5a71002",
	"f98a1a1d-a7f8-8a67-1bed-83f777fb9202");
INSERT INTO GD_LS
	VALUES ("4a361c25-5613-e374-6c92-3ebbc5c3bb26",
	"419dc224-dc32-8291-35b5-8c47a4de8d2f",
	"1cbabc05-92e6-42ba-0c44-33d4dd69b970",
	"f98a1a1d-a7f8-8a67-1bed-83f777fb9202",
	"a9477b8c-0edb-653f-6348-81989c16408a");
INSERT INTO GD_LS
	VALUES ("19000aeb-4678-40f9-25f5-c8c10c7c4e98",
	"419dc224-dc32-8291-35b5-8c47a4de8d2f",
	"4a361c25-5613-e374-6c92-3ebbc5c3bb26",
	"a9477b8c-0edb-653f-6348-81989c16408a",
	"b63fa1a7-dfb1-cdb9-17f8-91ff45887ec4");
INSERT INTO DIM_WAY
	VALUES ("245ae7a8-f583-a226-cda1-bc6ca5a71002",
	1920.000000,
	1056.000000,
	"419dc224-dc32-8291-35b5-8c47a4de8d2f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("f98a1a1d-a7f8-8a67-1bed-83f777fb9202",
	1920.000000,
	1008.000000,
	"419dc224-dc32-8291-35b5-8c47a4de8d2f",
	"00000000-0000-0000-0000-000000000000",
	"245ae7a8-f583-a226-cda1-bc6ca5a71002");
INSERT INTO DIM_WAY
	VALUES ("a9477b8c-0edb-653f-6348-81989c16408a",
	2096.000000,
	1008.000000,
	"419dc224-dc32-8291-35b5-8c47a4de8d2f",
	"00000000-0000-0000-0000-000000000000",
	"f98a1a1d-a7f8-8a67-1bed-83f777fb9202");
INSERT INTO DIM_WAY
	VALUES ("b63fa1a7-dfb1-cdb9-17f8-91ff45887ec4",
	2096.000000,
	1056.000000,
	"419dc224-dc32-8291-35b5-8c47a4de8d2f",
	"00000000-0000-0000-0000-000000000000",
	"a9477b8c-0edb-653f-6348-81989c16408a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"419dc224-dc32-8291-35b5-8c47a4de8d2f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("419dc224-dc32-8291-35b5-8c47a4de8d2f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("7142f68e-8a37-dddf-f9f7-9cd1851244b4",
	"8d0199c9-796a-9ce5-1163-85da156628ec",
	"419dc224-dc32-8291-35b5-8c47a4de8d2f");
INSERT INTO GD_GE
	VALUES ("c3ce0471-8b16-e51c-9d54-2585961a0640",
	"c768cc03-fd74-debb-bd62-5942f5ec99c8",
	"93ea5f31-2048-2ab7-bae9-4e08a4ea93cc",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy::EV2: shutdown');
INSERT INTO GD_CON
	VALUES ("c3ce0471-8b16-e51c-9d54-2585961a0640",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3b4bab80-0d44-0f87-c6ab-6a19ec42d78c",
	"c3ce0471-8b16-e51c-9d54-2585961a0640",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3b4bab80-0d44-0f87-c6ab-6a19ec42d78c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3b4bab80-0d44-0f87-c6ab-6a19ec42d78c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3b4bab80-0d44-0f87-c6ab-6a19ec42d78c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("41aaf15b-3f6b-0008-0aa7-4a0da2d2f494",
	"c3ce0471-8b16-e51c-9d54-2585961a0640",
	3,
	23.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (134.000000,
	42.000000,
	"41aaf15b-3f6b-0008-0aa7-4a0da2d2f494");
INSERT INTO DIM_GE
	VALUES (2247.000000,
	1247.000000,
	"41aaf15b-3f6b-0008-0aa7-4a0da2d2f494",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("41aaf15b-3f6b-0008-0aa7-4a0da2d2f494",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c5b7fc42-fd34-d879-fdd8-a581dbf3f2f7",
	"c3ce0471-8b16-e51c-9d54-2585961a0640",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c5b7fc42-fd34-d879-fdd8-a581dbf3f2f7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c5b7fc42-fd34-d879-fdd8-a581dbf3f2f7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c5b7fc42-fd34-d879-fdd8-a581dbf3f2f7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("dbc4075a-264e-88f0-060f-fe9fdab70a70",
	"c3ce0471-8b16-e51c-9d54-2585961a0640",
	"00000000-0000-0000-0000-000000000000",
	"498d04d2-8517-8522-996d-e8d16bfcd06e",
	"8283ee26-6a06-92da-aaa0-ee3edf2737cb");
INSERT INTO GD_LS
	VALUES ("48a486ff-3864-9eac-d3f1-afc839aee692",
	"c3ce0471-8b16-e51c-9d54-2585961a0640",
	"dbc4075a-264e-88f0-060f-fe9fdab70a70",
	"8283ee26-6a06-92da-aaa0-ee3edf2737cb",
	"1a48102a-df50-5fc2-c418-0ff0cbefe9ba");
INSERT INTO GD_LS
	VALUES ("32a29fc2-ccbb-940f-2379-bdcc3f6eb3eb",
	"c3ce0471-8b16-e51c-9d54-2585961a0640",
	"48a486ff-3864-9eac-d3f1-afc839aee692",
	"1a48102a-df50-5fc2-c418-0ff0cbefe9ba",
	"55e34ae0-6941-20f8-0091-b3467c739fe9");
INSERT INTO DIM_WAY
	VALUES ("498d04d2-8517-8522-996d-e8d16bfcd06e",
	2144.000000,
	1408.000000,
	"c3ce0471-8b16-e51c-9d54-2585961a0640",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("8283ee26-6a06-92da-aaa0-ee3edf2737cb",
	2240.000000,
	1408.000000,
	"c3ce0471-8b16-e51c-9d54-2585961a0640",
	"00000000-0000-0000-0000-000000000000",
	"498d04d2-8517-8522-996d-e8d16bfcd06e");
INSERT INTO DIM_WAY
	VALUES ("1a48102a-df50-5fc2-c418-0ff0cbefe9ba",
	2240.000000,
	1120.000000,
	"c3ce0471-8b16-e51c-9d54-2585961a0640",
	"00000000-0000-0000-0000-000000000000",
	"8283ee26-6a06-92da-aaa0-ee3edf2737cb");
INSERT INTO DIM_WAY
	VALUES ("55e34ae0-6941-20f8-0091-b3467c739fe9",
	2144.000000,
	1120.000000,
	"c3ce0471-8b16-e51c-9d54-2585961a0640",
	"00000000-0000-0000-0000-000000000000",
	"1a48102a-df50-5fc2-c418-0ff0cbefe9ba");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c3ce0471-8b16-e51c-9d54-2585961a0640",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c3ce0471-8b16-e51c-9d54-2585961a0640",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("83499637-e597-cb9a-5bbf-bf31fca4ce6b",
	"3208b5d0-39c2-913d-70bc-3eea1cff30f6",
	"c3ce0471-8b16-e51c-9d54-2585961a0640");
INSERT INTO GD_GE
	VALUES ("4a20940f-3bb7-74f6-6299-2de8af998ecb",
	"c768cc03-fd74-debb-bd62-5942f5ec99c8",
	"f64ff628-c913-616a-bbe7-83682902a298",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown::EV1: Event Instance');
INSERT INTO GD_CON
	VALUES ("4a20940f-3bb7-74f6-6299-2de8af998ecb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("eddc3341-c78b-3292-19bf-10663928dd16",
	"4a20940f-3bb7-74f6-6299-2de8af998ecb",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"eddc3341-c78b-3292-19bf-10663928dd16");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"eddc3341-c78b-3292-19bf-10663928dd16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("eddc3341-c78b-3292-19bf-10663928dd16",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("297533af-2293-a9a2-b9df-757b54e01d35",
	"4a20940f-3bb7-74f6-6299-2de8af998ecb",
	3,
	18.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (136.000000,
	44.000000,
	"297533af-2293-a9a2-b9df-757b54e01d35");
INSERT INTO DIM_GE
	VALUES (1778.000000,
	1237.000000,
	"297533af-2293-a9a2-b9df-757b54e01d35",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("297533af-2293-a9a2-b9df-757b54e01d35",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fca2e8c5-bddd-03ac-bbbf-f4d3cf9b5c45",
	"4a20940f-3bb7-74f6-6299-2de8af998ecb",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"fca2e8c5-bddd-03ac-bbbf-f4d3cf9b5c45");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fca2e8c5-bddd-03ac-bbbf-f4d3cf9b5c45",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fca2e8c5-bddd-03ac-bbbf-f4d3cf9b5c45",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("6e7895b9-c926-16d8-1bcd-589a05e3004d",
	"4a20940f-3bb7-74f6-6299-2de8af998ecb",
	"00000000-0000-0000-0000-000000000000",
	"cc945366-6e04-36fb-2039-4f1b2196b4ae",
	"f7a5e4e2-de25-4e0d-c55c-ba583f707706");
INSERT INTO GD_LS
	VALUES ("4a8315db-76fc-c182-67af-c3e7b6fe4b78",
	"4a20940f-3bb7-74f6-6299-2de8af998ecb",
	"6e7895b9-c926-16d8-1bcd-589a05e3004d",
	"f7a5e4e2-de25-4e0d-c55c-ba583f707706",
	"68d7b766-cca2-2ed4-8e3e-27c97765a419");
INSERT INTO GD_LS
	VALUES ("f508baf0-2881-3012-06fc-e9b182986a3d",
	"4a20940f-3bb7-74f6-6299-2de8af998ecb",
	"4a8315db-76fc-c182-67af-c3e7b6fe4b78",
	"68d7b766-cca2-2ed4-8e3e-27c97765a419",
	"2bcea08b-5946-aee0-8105-bd0f223d6151");
INSERT INTO DIM_WAY
	VALUES ("cc945366-6e04-36fb-2039-4f1b2196b4ae",
	1856.000000,
	1120.000000,
	"4a20940f-3bb7-74f6-6299-2de8af998ecb",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("f7a5e4e2-de25-4e0d-c55c-ba583f707706",
	1776.000000,
	1120.000000,
	"4a20940f-3bb7-74f6-6299-2de8af998ecb",
	"00000000-0000-0000-0000-000000000000",
	"cc945366-6e04-36fb-2039-4f1b2196b4ae");
INSERT INTO DIM_WAY
	VALUES ("68d7b766-cca2-2ed4-8e3e-27c97765a419",
	1776.000000,
	1392.000000,
	"4a20940f-3bb7-74f6-6299-2de8af998ecb",
	"00000000-0000-0000-0000-000000000000",
	"f7a5e4e2-de25-4e0d-c55c-ba583f707706");
INSERT INTO DIM_WAY
	VALUES ("2bcea08b-5946-aee0-8105-bd0f223d6151",
	1856.000000,
	1392.000000,
	"4a20940f-3bb7-74f6-6299-2de8af998ecb",
	"00000000-0000-0000-0000-000000000000",
	"68d7b766-cca2-2ed4-8e3e-27c97765a419");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4a20940f-3bb7-74f6-6299-2de8af998ecb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4a20940f-3bb7-74f6-6299-2de8af998ecb",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b8dcc786-8b4d-ecd7-b522-622aaccc8c0a",
	"9702ae3b-2a34-6bed-99ed-00138a6170d9",
	"4a20940f-3bb7-74f6-6299-2de8af998ecb");
INSERT INTO DIM_DIA
	VALUES ("c768cc03-fd74-debb-bd62-5942f5ec99c8",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	'Expression Test Object B',
	12,
	'ETOB',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("1b59e831-033b-9ce7-b65e-5fe2efb3849d",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_BATTR
	VALUES ("1b59e831-033b-9ce7-b65e-5fe2efb3849d",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_ATTR
	VALUES ("1b59e831-033b-9ce7-b65e-5fe2efb3849d",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"00000000-0000-0000-0000-000000000000",
	'etob_id',
	'',
	'',
	'etob_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("988bf124-e0f1-2e44-35f8-20aa22f2b32e",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_BATTR
	VALUES ("988bf124-e0f1-2e44-35f8-20aa22f2b32e",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_ATTR
	VALUES ("988bf124-e0f1-2e44-35f8-20aa22f2b32e",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"1b59e831-033b-9ce7-b65e-5fe2efb3849d",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a80aa59c-df79-e41d-8fbf-e286acbecbfd",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_BATTR
	VALUES ("a80aa59c-df79-e41d-8fbf-e286acbecbfd",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_ATTR
	VALUES ("a80aa59c-df79-e41d-8fbf-e286acbecbfd",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"988bf124-e0f1-2e44-35f8-20aa22f2b32e",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("9f821190-633f-b88a-15c0-58473e04dab8",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_BATTR
	VALUES ("9f821190-633f-b88a-15c0-58473e04dab8",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_ATTR
	VALUES ("9f821190-633f-b88a-15c0-58473e04dab8",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"a80aa59c-df79-e41d-8fbf-e286acbecbfd",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("8ca4e67c-d9ba-ea2d-6855-dd300826b5d1",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_BATTR
	VALUES ("8ca4e67c-d9ba-ea2d-6855-dd300826b5d1",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_ATTR
	VALUES ("8ca4e67c-d9ba-ea2d-6855-dd300826b5d1",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"9f821190-633f-b88a-15c0-58473e04dab8",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("684076c7-a2d3-be88-66ff-b7481115f804",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_BATTR
	VALUES ("684076c7-a2d3-be88-66ff-b7481115f804",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_ATTR
	VALUES ("684076c7-a2d3-be88-66ff-b7481115f804",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"8ca4e67c-d9ba-ea2d-6855-dd300826b5d1",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("012785f1-36c8-ba79-1c2f-35e33f32ee40",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_BATTR
	VALUES ("012785f1-36c8-ba79-1c2f-35e33f32ee40",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_ATTR
	VALUES ("012785f1-36c8-ba79-1c2f-35e33f32ee40",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"684076c7-a2d3-be88-66ff-b7481115f804",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1c6e4e05-9a57-8267-b621-28a6cb4da292",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_BATTR
	VALUES ("1c6e4e05-9a57-8267-b621-28a6cb4da292",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_ATTR
	VALUES ("1c6e4e05-9a57-8267-b621-28a6cb4da292",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"012785f1-36c8-ba79-1c2f-35e33f32ee40",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("dc6947ac-d33d-7048-bd97-232710b93e96",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_BATTR
	VALUES ("dc6947ac-d33d-7048-bd97-232710b93e96",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_ATTR
	VALUES ("dc6947ac-d33d-7048-bd97-232710b93e96",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"1c6e4e05-9a57-8267-b621-28a6cb4da292",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bd1acf6e-e8e6-46c9-9b64-272d3b5b77ed",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_BATTR
	VALUES ("bd1acf6e-e8e6-46c9-9b64-272d3b5b77ed",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_ATTR
	VALUES ("bd1acf6e-e8e6-46c9-9b64-272d3b5b77ed",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"dc6947ac-d33d-7048-bd97-232710b93e96",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_REF
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	0,
	"b243aea3-7f76-54e6-9dcf-022365a6e156",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	"51c69cc9-966b-1f42-77f3-40556127d89a",
	"0a69908c-030b-344c-d1fc-2ae53261c05c",
	"38adcac6-84e1-dc89-98ff-0edee32865f3",
	"968e1cad-ef5d-3411-d3dd-66e45fdc2e80",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R8');
INSERT INTO O_RATTR
	VALUES ("38adcac6-84e1-dc89-98ff-0edee32865f3",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"b243aea3-7f76-54e6-9dcf-022365a6e156",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("38adcac6-84e1-dc89-98ff-0edee32865f3",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"bd1acf6e-e8e6-46c9-9b64-272d3b5b77ed",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"1c56708e-a313-7ca5-5d96-5d1ee6c1fe59",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"419b7f76-6dfa-f359-4e15-08b301b3e7a2",
	"ef4095b5-d93f-175b-157a-c4c45199fe91",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'etoc_id',
	'R6');
INSERT INTO O_RATTR
	VALUES ("419b7f76-6dfa-f359-4e15-08b301b3e7a2",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"1c56708e-a313-7ca5-5d96-5d1ee6c1fe59",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	1,
	'etoc_id');
INSERT INTO O_ATTR
	VALUES ("419b7f76-6dfa-f359-4e15-08b301b3e7a2",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"38adcac6-84e1-dc89-98ff-0edee32865f3",
	'etoc_id',
	'',
	'',
	'etoc_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"cf36702f-b276-7fda-3f2d-abcf77209ad3",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"1674e145-2ea0-7680-7186-958c54b8419f",
	"6285ee46-8c13-728a-e11d-16d51800214e",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'btrue',
	'R6');
INSERT INTO O_RATTR
	VALUES ("1674e145-2ea0-7680-7186-958c54b8419f",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"cf36702f-b276-7fda-3f2d-abcf77209ad3",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("1674e145-2ea0-7680-7186-958c54b8419f",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"419b7f76-6dfa-f359-4e15-08b301b3e7a2",
	'r6btrue',
	'',
	'r6',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"f676b389-0874-7ee7-2e04-c83e8e718308",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"d44d4c61-01ed-33cd-a609-3756268333de",
	"9fcd02d4-1b8b-0046-d650-787e82d22386",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'bfalse',
	'R6');
INSERT INTO O_RATTR
	VALUES ("d44d4c61-01ed-33cd-a609-3756268333de",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"f676b389-0874-7ee7-2e04-c83e8e718308",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("d44d4c61-01ed-33cd-a609-3756268333de",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"1674e145-2ea0-7680-7186-958c54b8419f",
	'r6bfalse',
	'',
	'r6',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"0257293a-c610-33d0-961c-38c3e1d07895",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"888d7a07-9f82-6fad-3fdb-5af2c45afe74",
	"50b670b1-2d1d-8625-76e2-e35753fd1678",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'r',
	'R6');
INSERT INTO O_RATTR
	VALUES ("888d7a07-9f82-6fad-3fdb-5af2c45afe74",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"0257293a-c610-33d0-961c-38c3e1d07895",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	1,
	'r');
INSERT INTO O_ATTR
	VALUES ("888d7a07-9f82-6fad-3fdb-5af2c45afe74",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"d44d4c61-01ed-33cd-a609-3756268333de",
	'r6r',
	'',
	'r6',
	'r',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"99e9ca65-b88e-e920-9601-e9de152e4ab1",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"52c72186-a863-2c6f-bd5b-2d47f5e4f360",
	"c9a9c243-5ff9-883b-80d5-a7c8382e965b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	's',
	'R6');
INSERT INTO O_RATTR
	VALUES ("52c72186-a863-2c6f-bd5b-2d47f5e4f360",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"99e9ca65-b88e-e920-9601-e9de152e4ab1",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	1,
	's');
INSERT INTO O_ATTR
	VALUES ("52c72186-a863-2c6f-bd5b-2d47f5e4f360",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"888d7a07-9f82-6fad-3fdb-5af2c45afe74",
	'r6s',
	'',
	'r6',
	's',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"de4c4040-b4d8-8dd0-e1f6-cc648576c11b",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"6ced82e3-f53d-39ee-666d-63b10c07ed28",
	"36730d4d-8453-99e0-6f66-02e86b7b7e14",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'u',
	'R6');
INSERT INTO O_RATTR
	VALUES ("6ced82e3-f53d-39ee-666d-63b10c07ed28",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"de4c4040-b4d8-8dd0-e1f6-cc648576c11b",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	1,
	'u');
INSERT INTO O_ATTR
	VALUES ("6ced82e3-f53d-39ee-666d-63b10c07ed28",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"52c72186-a863-2c6f-bd5b-2d47f5e4f360",
	'r6u',
	'',
	'r6',
	'u',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"bcf06e4a-5409-7333-0252-9499c9e8150e",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"69dcc395-2a33-1e70-a5e7-f9806e4b9404",
	"6a3f577c-0633-98ee-31e6-a1c9843b882b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'd',
	'R6');
INSERT INTO O_RATTR
	VALUES ("69dcc395-2a33-1e70-a5e7-f9806e4b9404",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"bcf06e4a-5409-7333-0252-9499c9e8150e",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	1,
	'd');
INSERT INTO O_ATTR
	VALUES ("69dcc395-2a33-1e70-a5e7-f9806e4b9404",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"6ced82e3-f53d-39ee-666d-63b10c07ed28",
	'r6d',
	'',
	'r6',
	'd',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"18264137-d16c-5d7c-561d-02186cae1d56",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"a92fbbc9-a5a0-f7d1-ee40-6a679b3b1164",
	"5669a790-b8d1-3ed2-adc1-a15c5748685b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	't',
	'R6');
INSERT INTO O_RATTR
	VALUES ("a92fbbc9-a5a0-f7d1-ee40-6a679b3b1164",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"18264137-d16c-5d7c-561d-02186cae1d56",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	1,
	't');
INSERT INTO O_ATTR
	VALUES ("a92fbbc9-a5a0-f7d1-ee40-6a679b3b1164",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"69dcc395-2a33-1e70-a5e7-f9806e4b9404",
	'r6t',
	'',
	'r6',
	't',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"9540e3db-f00c-d7f3-1476-89c2599510f4",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"4824d4fb-7902-b0e9-32ea-7a418861a863",
	"6c92c0a0-43ac-234e-c6ce-1ec2a655df3d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'tim',
	'R6');
INSERT INTO O_RATTR
	VALUES ("4824d4fb-7902-b0e9-32ea-7a418861a863",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"9540e3db-f00c-d7f3-1476-89c2599510f4",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	1,
	'tim');
INSERT INTO O_ATTR
	VALUES ("4824d4fb-7902-b0e9-32ea-7a418861a863",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"a92fbbc9-a5a0-f7d1-ee40-6a679b3b1164",
	'r6tim',
	'',
	'r6',
	'tim',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"8b0ce55c-dcd0-fe78-9fe2-2c531cd75838",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"2d83d263-22d1-cd33-b351-097b49f6d09b",
	"770dd365-5254-96db-959d-bbceea84050b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'ev',
	'R6');
INSERT INTO O_RATTR
	VALUES ("2d83d263-22d1-cd33-b351-097b49f6d09b",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"8b0ce55c-dcd0-fe78-9fe2-2c531cd75838",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	1,
	'ev');
INSERT INTO O_ATTR
	VALUES ("2d83d263-22d1-cd33-b351-097b49f6d09b",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"4824d4fb-7902-b0e9-32ea-7a418861a863",
	'r6ev',
	'',
	'r6',
	'ev',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_OIDA
	VALUES ("bd1acf6e-e8e6-46c9-9b64-272d3b5b77ed",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	'ev');
INSERT INTO O_OIDA
	VALUES ("684076c7-a2d3-be88-66ff-b7481115f804",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	'u');
INSERT INTO O_OIDA
	VALUES ("988bf124-e0f1-2e44-35f8-20aa22f2b32e",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("012785f1-36c8-ba79-1c2f-35e33f32ee40",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	'd');
INSERT INTO O_OIDA
	VALUES ("dc6947ac-d33d-7048-bd97-232710b93e96",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	'tim');
INSERT INTO O_OIDA
	VALUES ("1b59e831-033b-9ce7-b65e-5fe2efb3849d",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	'etob_id');
INSERT INTO O_OIDA
	VALUES ("1c6e4e05-9a57-8267-b621-28a6cb4da292",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	't');
INSERT INTO O_OIDA
	VALUES ("9f821190-633f-b88a-15c0-58473e04dab8",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	'r');
INSERT INTO O_OIDA
	VALUES ("a80aa59c-df79-e41d-8fbf-e286acbecbfd",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("8ca4e67c-d9ba-ea2d-6855-dd300826b5d1",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	's');
INSERT INTO O_ID
	VALUES (1,
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO O_ID
	VALUES (2,
	"71c54fe4-59a0-240f-b91a-32f5ee853c14");
INSERT INTO PE_PE
	VALUES ("b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	'Expression Test Object C',
	13,
	'ETOC',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("1c56708e-a313-7ca5-5d96-5d1ee6c1fe59",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_BATTR
	VALUES ("1c56708e-a313-7ca5-5d96-5d1ee6c1fe59",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_ATTR
	VALUES ("1c56708e-a313-7ca5-5d96-5d1ee6c1fe59",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	"00000000-0000-0000-0000-000000000000",
	'etoc_id',
	'',
	'',
	'etoc_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("cf36702f-b276-7fda-3f2d-abcf77209ad3",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_BATTR
	VALUES ("cf36702f-b276-7fda-3f2d-abcf77209ad3",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_ATTR
	VALUES ("cf36702f-b276-7fda-3f2d-abcf77209ad3",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	"1c56708e-a313-7ca5-5d96-5d1ee6c1fe59",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("f676b389-0874-7ee7-2e04-c83e8e718308",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_BATTR
	VALUES ("f676b389-0874-7ee7-2e04-c83e8e718308",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_ATTR
	VALUES ("f676b389-0874-7ee7-2e04-c83e8e718308",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	"cf36702f-b276-7fda-3f2d-abcf77209ad3",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("0257293a-c610-33d0-961c-38c3e1d07895",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_BATTR
	VALUES ("0257293a-c610-33d0-961c-38c3e1d07895",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_ATTR
	VALUES ("0257293a-c610-33d0-961c-38c3e1d07895",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	"f676b389-0874-7ee7-2e04-c83e8e718308",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("99e9ca65-b88e-e920-9601-e9de152e4ab1",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_BATTR
	VALUES ("99e9ca65-b88e-e920-9601-e9de152e4ab1",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_ATTR
	VALUES ("99e9ca65-b88e-e920-9601-e9de152e4ab1",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	"0257293a-c610-33d0-961c-38c3e1d07895",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("de4c4040-b4d8-8dd0-e1f6-cc648576c11b",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_BATTR
	VALUES ("de4c4040-b4d8-8dd0-e1f6-cc648576c11b",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_ATTR
	VALUES ("de4c4040-b4d8-8dd0-e1f6-cc648576c11b",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	"99e9ca65-b88e-e920-9601-e9de152e4ab1",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bcf06e4a-5409-7333-0252-9499c9e8150e",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_BATTR
	VALUES ("bcf06e4a-5409-7333-0252-9499c9e8150e",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_ATTR
	VALUES ("bcf06e4a-5409-7333-0252-9499c9e8150e",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	"de4c4040-b4d8-8dd0-e1f6-cc648576c11b",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("18264137-d16c-5d7c-561d-02186cae1d56",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_BATTR
	VALUES ("18264137-d16c-5d7c-561d-02186cae1d56",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_ATTR
	VALUES ("18264137-d16c-5d7c-561d-02186cae1d56",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	"bcf06e4a-5409-7333-0252-9499c9e8150e",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("9540e3db-f00c-d7f3-1476-89c2599510f4",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_BATTR
	VALUES ("9540e3db-f00c-d7f3-1476-89c2599510f4",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_ATTR
	VALUES ("9540e3db-f00c-d7f3-1476-89c2599510f4",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	"18264137-d16c-5d7c-561d-02186cae1d56",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("8b0ce55c-dcd0-fe78-9fe2-2c531cd75838",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_BATTR
	VALUES ("8b0ce55c-dcd0-fe78-9fe2-2c531cd75838",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_ATTR
	VALUES ("8b0ce55c-dcd0-fe78-9fe2-2c531cd75838",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	"9540e3db-f00c-d7f3-1476-89c2599510f4",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_OIDA
	VALUES ("99e9ca65-b88e-e920-9601-e9de152e4ab1",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	's');
INSERT INTO O_OIDA
	VALUES ("8b0ce55c-dcd0-fe78-9fe2-2c531cd75838",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	'ev');
INSERT INTO O_OIDA
	VALUES ("bcf06e4a-5409-7333-0252-9499c9e8150e",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	'd');
INSERT INTO O_OIDA
	VALUES ("de4c4040-b4d8-8dd0-e1f6-cc648576c11b",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	'u');
INSERT INTO O_OIDA
	VALUES ("18264137-d16c-5d7c-561d-02186cae1d56",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	't');
INSERT INTO O_OIDA
	VALUES ("0257293a-c610-33d0-961c-38c3e1d07895",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	'r');
INSERT INTO O_OIDA
	VALUES ("cf36702f-b276-7fda-3f2d-abcf77209ad3",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("9540e3db-f00c-d7f3-1476-89c2599510f4",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	'tim');
INSERT INTO O_OIDA
	VALUES ("f676b389-0874-7ee7-2e04-c83e8e718308",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("1c56708e-a313-7ca5-5d96-5d1ee6c1fe59",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	'etoc_id');
INSERT INTO O_ID
	VALUES (1,
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO O_ID
	VALUES (2,
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903");
INSERT INTO PE_PE
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	'Expression Test',
	3,
	'ET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("5e6cc7f2-3284-fb66-539e-59825320243f",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	'no_parm_ret_void',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'LOG::LogFailure(message:"Operation ET::no_parm_ret_void should not have been translated.");
',
	1,
	'',
	"d09381b0-4a7b-4fd2-4f14-f812e97311db");
INSERT INTO O_TFR
	VALUES ("92851ea0-e968-8852-3977-05c80e689712",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	'i_parm_ret_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'LOG::LogFailure(message:"Operation ET::i_parm_ret_i should not have been translated.");
return param.i;',
	1,
	'',
	"ba1f9437-707c-21dc-b0af-6152d8103224");
INSERT INTO O_TPARM
	VALUES ("f2228e50-6bd1-9598-02ae-7f51defb49a8",
	"92851ea0-e968-8852-3977-05c80e689712",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("9e1cd40a-6950-f6c2-74a8-fc8a5f710081",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	'r_parm_ret_r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'LOG::LogFailure(message:"Operation ET::r_parm_ret_r should not have been translated.");
return param.r;',
	1,
	'',
	"5e6cc7f2-3284-fb66-539e-59825320243f");
INSERT INTO O_TPARM
	VALUES ("2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	"9e1cd40a-6950-f6c2-74a8-fc8a5f710081",
	'r',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("21f9c83c-5d29-cdd6-3825-1696153c01bb",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	'b_parm_ret_b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'LOG::LogFailure(message:"Operation ET::b_parm_ret_b should not have been translated.");
return param.b;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("be200624-30d5-d348-9648-b696c180ea95",
	"21f9c83c-5d29-cdd6-3825-1696153c01bb",
	'b',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("b9095bd1-c52b-bad3-aad2-3e64d425eb1e",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	's_parm_ret_s',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'LOG::LogFailure(message:"Operation ET::s_parm_ret_s should not have been translated.");
return param.s;',
	1,
	'',
	"9e1cd40a-6950-f6c2-74a8-fc8a5f710081");
INSERT INTO O_TPARM
	VALUES ("76ace3b7-9333-cfa2-e7e7-3ca1a75c2ea9",
	"b9095bd1-c52b-bad3-aad2-3e64d425eb1e",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("879d19f9-1ecd-9004-d179-1280d2b32a6e",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	'u_parm_ret_u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'LOG::LogFailure(message:"Operation ET::u_parm_ret_u should not have been translated.");
return param.u;',
	1,
	'',
	"0e284941-c030-3774-95ef-053390cb4782");
INSERT INTO O_TPARM
	VALUES ("90b4ec41-7a43-5fa7-4576-b48c3e51e620",
	"879d19f9-1ecd-9004-d179-1280d2b32a6e",
	'u',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("ba1f9437-707c-21dc-b0af-6152d8103224",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	'd_parm_ret_d',
	'',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'LOG::LogFailure(message:"Operation ET::d_parm_ret_d should not have been translated.");
return param.d;',
	1,
	'',
	"21f9c83c-5d29-cdd6-3825-1696153c01bb");
INSERT INTO O_TPARM
	VALUES ("f3716951-41eb-0058-f792-b6bb11cd041a",
	"ba1f9437-707c-21dc-b0af-6152d8103224",
	'd',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("0e284941-c030-3774-95ef-053390cb4782",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	't_parm_ret_t',
	'',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'LOG::LogFailure(message:"Operation ET::t_parm_ret_t should not have been translated.");
return param.t;',
	1,
	'',
	"b9095bd1-c52b-bad3-aad2-3e64d425eb1e");
INSERT INTO O_TPARM
	VALUES ("d35abe68-761c-4805-6622-ec58904bb650",
	"0e284941-c030-3774-95ef-053390cb4782",
	't',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("d09381b0-4a7b-4fd2-4f14-f812e97311db",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	'i_parm_ret_void',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'LOG::LogFailure(message:"Operation ET::i_parm_ret_void should not have been translated.");',
	1,
	'',
	"92851ea0-e968-8852-3977-05c80e689712");
INSERT INTO O_TPARM
	VALUES ("5731a408-b0d9-e43c-5a20-bcc9ce92a73e",
	"d09381b0-4a7b-4fd2-4f14-f812e97311db",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("b5d290fe-631e-9036-2fac-36d33583d0ff",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	'waitOneSec',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'',
	1,
	'',
	"879d19f9-1ecd-9004-d179-1280d2b32a6e");
INSERT INTO O_NBATTR
	VALUES ("b243aea3-7f76-54e6-9dcf-022365a6e156",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_BATTR
	VALUES ("b243aea3-7f76-54e6-9dcf-022365a6e156",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ATTR
	VALUES ("b243aea3-7f76-54e6-9dcf-022365a6e156",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"00000000-0000-0000-0000-000000000000",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("894ef6cf-6024-ed13-cc94-85b694333c5b",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_BATTR
	VALUES ("894ef6cf-6024-ed13-cc94-85b694333c5b",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ATTR
	VALUES ("894ef6cf-6024-ed13-cc94-85b694333c5b",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"b243aea3-7f76-54e6-9dcf-022365a6e156",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("aa8548e2-470a-b46f-14f2-d59dbdb38ca2",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_BATTR
	VALUES ("aa8548e2-470a-b46f-14f2-d59dbdb38ca2",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ATTR
	VALUES ("aa8548e2-470a-b46f-14f2-d59dbdb38ca2",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"894ef6cf-6024-ed13-cc94-85b694333c5b",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("951ad794-2873-d475-7cd7-c9e00e17e71d",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_BATTR
	VALUES ("951ad794-2873-d475-7cd7-c9e00e17e71d",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ATTR
	VALUES ("951ad794-2873-d475-7cd7-c9e00e17e71d",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"aa8548e2-470a-b46f-14f2-d59dbdb38ca2",
	'i',
	'',
	'',
	'i',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4d506659-eff5-a9b8-70b1-8ef421843fc1",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_BATTR
	VALUES ("4d506659-eff5-a9b8-70b1-8ef421843fc1",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ATTR
	VALUES ("4d506659-eff5-a9b8-70b1-8ef421843fc1",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"951ad794-2873-d475-7cd7-c9e00e17e71d",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ad8e527f-7f8a-b1d3-17a2-a8ece2a813be",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_BATTR
	VALUES ("ad8e527f-7f8a-b1d3-17a2-a8ece2a813be",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ATTR
	VALUES ("ad8e527f-7f8a-b1d3-17a2-a8ece2a813be",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"4d506659-eff5-a9b8-70b1-8ef421843fc1",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5b26dfa4-7f92-b09b-2dc0-59c0d0870334",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_BATTR
	VALUES ("5b26dfa4-7f92-b09b-2dc0-59c0d0870334",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ATTR
	VALUES ("5b26dfa4-7f92-b09b-2dc0-59c0d0870334",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"ad8e527f-7f8a-b1d3-17a2-a8ece2a813be",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("989cd201-f183-fd27-1734-0db7efb14e23",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_BATTR
	VALUES ("989cd201-f183-fd27-1734-0db7efb14e23",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ATTR
	VALUES ("989cd201-f183-fd27-1734-0db7efb14e23",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"5b26dfa4-7f92-b09b-2dc0-59c0d0870334",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ceb9e9a9-0bd6-56a8-01d7-f6f2f29488cb",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_BATTR
	VALUES ("ceb9e9a9-0bd6-56a8-01d7-f6f2f29488cb",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ATTR
	VALUES ("ceb9e9a9-0bd6-56a8-01d7-f6f2f29488cb",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"989cd201-f183-fd27-1734-0db7efb14e23",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("8fee6254-b6ab-a206-a6ba-2f8dbb47ce1b",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_BATTR
	VALUES ("8fee6254-b6ab-a206-a6ba-2f8dbb47ce1b",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ATTR
	VALUES ("8fee6254-b6ab-a206-a6ba-2f8dbb47ce1b",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"ceb9e9a9-0bd6-56a8-01d7-f6f2f29488cb",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("11819529-d2ee-1362-b74f-48748c1ca662",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_BATTR
	VALUES ("11819529-d2ee-1362-b74f-48748c1ca662",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ATTR
	VALUES ("11819529-d2ee-1362-b74f-48748c1ca662",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"8fee6254-b6ab-a206-a6ba-2f8dbb47ce1b",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3753592a-8926-f5c0-8141-f5aab60b273a",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_BATTR
	VALUES ("3753592a-8926-f5c0-8141-f5aab60b273a",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ATTR
	VALUES ("3753592a-8926-f5c0-8141-f5aab60b273a",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"11819529-d2ee-1362-b74f-48748c1ca662",
	'log_id',
	'',
	'',
	'log_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("adc56b61-419d-f174-634f-8845bff6308d",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_BATTR
	VALUES ("adc56b61-419d-f174-634f-8845bff6308d",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ATTR
	VALUES ("adc56b61-419d-f174-634f-8845bff6308d",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"3753592a-8926-f5c0-8141-f5aab60b273a",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1646c2b6-e1b8-2ff6-804d-2816d4def61f",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_BATTR
	VALUES ("1646c2b6-e1b8-2ff6-804d-2816d4def61f",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ATTR
	VALUES ("1646c2b6-e1b8-2ff6-804d-2816d4def61f",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"adc56b61-419d-f174-634f-8845bff6308d",
	'my_b',
	'',
	'',
	'my_b',
	0,
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5e7b239b-59a8-8274-3c8a-7abe276e36c6",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_BATTR
	VALUES ("5e7b239b-59a8-8274-3c8a-7abe276e36c6",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ATTR
	VALUES ("5e7b239b-59a8-8274-3c8a-7abe276e36c6",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"1646c2b6-e1b8-2ff6-804d-2816d4def61f",
	'my_i',
	'',
	'',
	'my_i',
	0,
	"083c9cf6-6a2b-7562-cbd5-2c4f7e75fe55",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("7bdb5dde-4d1f-9322-83f1-d4aef5ce28fc",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_BATTR
	VALUES ("7bdb5dde-4d1f-9322-83f1-d4aef5ce28fc",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ATTR
	VALUES ("7bdb5dde-4d1f-9322-83f1-d4aef5ce28fc",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"5e7b239b-59a8-8274-3c8a-7abe276e36c6",
	'my_r',
	'',
	'',
	'my_r',
	0,
	"e710b946-9035-55ff-a08d-d748e3f4803d",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("0a567d5d-743b-86df-7f36-8d47c97145b4",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_BATTR
	VALUES ("0a567d5d-743b-86df-7f36-8d47c97145b4",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ATTR
	VALUES ("0a567d5d-743b-86df-7f36-8d47c97145b4",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"7bdb5dde-4d1f-9322-83f1-d4aef5ce28fc",
	'my_s',
	'',
	'',
	'my_s',
	0,
	"63148bdd-fdd1-b725-e6bc-eff81f5bb5c1",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("955f9dc3-6792-d471-00ec-91b38ae7fb69",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_BATTR
	VALUES ("955f9dc3-6792-d471-00ec-91b38ae7fb69",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ATTR
	VALUES ("955f9dc3-6792-d471-00ec-91b38ae7fb69",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"0a567d5d-743b-86df-7f36-8d47c97145b4",
	'my_u',
	'',
	'',
	'my_u',
	0,
	"5b3fd52a-393a-a64d-3a7b-52e1d4a12a3f",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"1b59e831-033b-9ce7-b65e-5fe2efb3849d",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"4ed0e08d-602b-f2d5-2f05-b795e0fe4d69",
	"91bec1df-39c9-c5f1-5d5c-0281aa5a027d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'etob_id',
	'R1');
INSERT INTO O_RATTR
	VALUES ("4ed0e08d-602b-f2d5-2f05-b795e0fe4d69",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"1b59e831-033b-9ce7-b65e-5fe2efb3849d",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	1,
	'etob_id');
INSERT INTO O_ATTR
	VALUES ("4ed0e08d-602b-f2d5-2f05-b795e0fe4d69",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"955f9dc3-6792-d471-00ec-91b38ae7fb69",
	'etob_id',
	'',
	'',
	'etob_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"988bf124-e0f1-2e44-35f8-20aa22f2b32e",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"0cf5ecb2-9f89-da33-bb16-ce0693261674",
	"598ad041-3b07-8dbb-6be3-6b1375dcb092",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'btrue',
	'R1');
INSERT INTO O_RATTR
	VALUES ("0cf5ecb2-9f89-da33-bb16-ce0693261674",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"988bf124-e0f1-2e44-35f8-20aa22f2b32e",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("0cf5ecb2-9f89-da33-bb16-ce0693261674",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"4ed0e08d-602b-f2d5-2f05-b795e0fe4d69",
	'r1btrue',
	'',
	'r1',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"a80aa59c-df79-e41d-8fbf-e286acbecbfd",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"6367115e-8d6d-a5bb-91e9-beb7a37cff4f",
	"b5b5bb76-35aa-7542-3f75-1ddd3af43a17",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'bfalse',
	'R1');
INSERT INTO O_RATTR
	VALUES ("6367115e-8d6d-a5bb-91e9-beb7a37cff4f",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"a80aa59c-df79-e41d-8fbf-e286acbecbfd",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("6367115e-8d6d-a5bb-91e9-beb7a37cff4f",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"0cf5ecb2-9f89-da33-bb16-ce0693261674",
	'r1bfalse',
	'',
	'r1',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"9f821190-633f-b88a-15c0-58473e04dab8",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"bd201d9f-9c61-13d7-45a4-6d424fce92da",
	"44594cf1-a3ca-c481-7ce3-cabe9d0ac38d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'r',
	'R1');
INSERT INTO O_RATTR
	VALUES ("bd201d9f-9c61-13d7-45a4-6d424fce92da",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"9f821190-633f-b88a-15c0-58473e04dab8",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	1,
	'r');
INSERT INTO O_ATTR
	VALUES ("bd201d9f-9c61-13d7-45a4-6d424fce92da",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"6367115e-8d6d-a5bb-91e9-beb7a37cff4f",
	'r1r',
	'',
	'r1',
	'r',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"8ca4e67c-d9ba-ea2d-6855-dd300826b5d1",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"bf73a6b3-0f53-09cc-e95f-9595e1214551",
	"7decd51e-cb05-c3b8-e00f-c03ff3a8c3f8",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	's',
	'R1');
INSERT INTO O_RATTR
	VALUES ("bf73a6b3-0f53-09cc-e95f-9595e1214551",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"8ca4e67c-d9ba-ea2d-6855-dd300826b5d1",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	1,
	's');
INSERT INTO O_ATTR
	VALUES ("bf73a6b3-0f53-09cc-e95f-9595e1214551",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"bd201d9f-9c61-13d7-45a4-6d424fce92da",
	'r1s',
	'',
	'r1',
	's',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"684076c7-a2d3-be88-66ff-b7481115f804",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"144d12fb-7e88-d1fb-53aa-424716231706",
	"e2472006-ef20-b196-1d44-b01a92f2211f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'u',
	'R1');
INSERT INTO O_RATTR
	VALUES ("144d12fb-7e88-d1fb-53aa-424716231706",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"684076c7-a2d3-be88-66ff-b7481115f804",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	1,
	'u');
INSERT INTO O_ATTR
	VALUES ("144d12fb-7e88-d1fb-53aa-424716231706",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"bf73a6b3-0f53-09cc-e95f-9595e1214551",
	'r1u',
	'',
	'r1',
	'u',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"012785f1-36c8-ba79-1c2f-35e33f32ee40",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"a03c3f93-7906-d9ec-c231-9da2ea71de99",
	"57086d91-2c4b-df6d-f626-e9ee3b83db7c",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'd',
	'R1');
INSERT INTO O_RATTR
	VALUES ("a03c3f93-7906-d9ec-c231-9da2ea71de99",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"012785f1-36c8-ba79-1c2f-35e33f32ee40",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	1,
	'd');
INSERT INTO O_ATTR
	VALUES ("a03c3f93-7906-d9ec-c231-9da2ea71de99",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"144d12fb-7e88-d1fb-53aa-424716231706",
	'r1d',
	'',
	'r1',
	'd',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"1c6e4e05-9a57-8267-b621-28a6cb4da292",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"6f9cac5f-d145-2003-3c68-d84bc896ad7f",
	"1f62272b-3139-3cb6-c224-693f0bc22185",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	't',
	'R1');
INSERT INTO O_RATTR
	VALUES ("6f9cac5f-d145-2003-3c68-d84bc896ad7f",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"1c6e4e05-9a57-8267-b621-28a6cb4da292",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	1,
	't');
INSERT INTO O_ATTR
	VALUES ("6f9cac5f-d145-2003-3c68-d84bc896ad7f",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"a03c3f93-7906-d9ec-c231-9da2ea71de99",
	'r1t',
	'',
	'r1',
	't',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"dc6947ac-d33d-7048-bd97-232710b93e96",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"c9a07dee-437c-ad45-d4da-33b893d485c8",
	"b06e6426-e587-6bcd-733b-30386a92a82c",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'tim',
	'R1');
INSERT INTO O_RATTR
	VALUES ("c9a07dee-437c-ad45-d4da-33b893d485c8",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"dc6947ac-d33d-7048-bd97-232710b93e96",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	1,
	'tim');
INSERT INTO O_ATTR
	VALUES ("c9a07dee-437c-ad45-d4da-33b893d485c8",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"6f9cac5f-d145-2003-3c68-d84bc896ad7f",
	'r1tim',
	'',
	'r1',
	'tim',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"bd1acf6e-e8e6-46c9-9b64-272d3b5b77ed",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"2ccd5696-7ac7-25f4-5be6-b71dfc46c6e3",
	"bcac5850-1cfa-f535-32f6-13538f0a85fd",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'ev',
	'R1');
INSERT INTO O_RATTR
	VALUES ("2ccd5696-7ac7-25f4-5be6-b71dfc46c6e3",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"bd1acf6e-e8e6-46c9-9b64-272d3b5b77ed",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	1,
	'ev');
INSERT INTO O_ATTR
	VALUES ("2ccd5696-7ac7-25f4-5be6-b71dfc46c6e3",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"c9a07dee-437c-ad45-d4da-33b893d485c8",
	'r1ev',
	'',
	'r1',
	'ev',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_OIDA
	VALUES ("b243aea3-7f76-54e6-9dcf-022365a6e156",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	0,
	'et_id');
INSERT INTO O_ID
	VALUES (1,
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO O_ID
	VALUES (2,
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO SM_ISM
	VALUES ("551cfba7-b97a-f4e7-d936-b9948abbef39",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0");
INSERT INTO SM_SM
	VALUES ("551cfba7-b97a-f4e7-d936-b9948abbef39",
	'',
	4);
INSERT INTO SM_MOORE
	VALUES ("551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_EVTDI
	VALUES ("d42d0b33-c8f4-b99a-b65e-841ca7167ef9",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"ef055728-1abe-5400-459e-3e561261fd3e");
INSERT INTO SM_EVTDI
	VALUES ("1cbad8d4-1757-74e2-59a6-e0ab1eb0f1c4",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("71421373-fa85-5450-1273-ca7c22587198",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"d42d0b33-c8f4-b99a-b65e-841ca7167ef9");
INSERT INTO SM_EVTDI
	VALUES ("3602de48-8140-cc67-2675-a2013de83641",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	's',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"71421373-fa85-5450-1273-ca7c22587198");
INSERT INTO SM_EVTDI
	VALUES ("320f74de-d278-f5bf-13c3-f7461da6bdb8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"292fddd2-fd1c-40a4-2f64-b2651ef87e01");
INSERT INTO SM_EVTDI
	VALUES ("5ce8b495-4ab6-ab3a-be3e-a65f2ffee97c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'my_b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("35406479-3e37-9a1a-34fc-87e955bb1a47",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'my_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"5ce8b495-4ab6-ab3a-be3e-a65f2ffee97c");
INSERT INTO SM_EVTDI
	VALUES ("dc637563-b7cd-649a-faab-16ab0aaddbd3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'my_r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"35406479-3e37-9a1a-34fc-87e955bb1a47");
INSERT INTO SM_EVTDI
	VALUES ("228c0169-6e61-2427-0093-40cd9d2b073f",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'my_s',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"dc637563-b7cd-649a-faab-16ab0aaddbd3");
INSERT INTO SM_EVTDI
	VALUES ("8de012c7-1eac-33ac-20f5-b855fca9b1dc",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'my_u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"228c0169-6e61-2427-0093-40cd9d2b073f");
INSERT INTO SM_EVTDI
	VALUES ("62f734fa-09a5-f6ec-3293-84d7e94f3809",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"3602de48-8140-cc67-2675-a2013de83641");
INSERT INTO SM_EVTDI
	VALUES ("292fddd2-fd1c-40a4-2f64-b2651ef87e01",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"81338e04-5546-2f5b-942c-32c4fbbcdbbe");
INSERT INTO SM_EVTDI
	VALUES ("a6bb37b1-56f7-548b-ccb8-0e721bb4c639",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'tint1',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("f974e3e7-aada-5144-7e99-59015ca18609",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'tint2',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"a6bb37b1-56f7-548b-ccb8-0e721bb4c639");
INSERT INTO SM_EVTDI
	VALUES ("95bc1cbf-700f-3724-17d6-f6075c91725e",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'treal1',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"f974e3e7-aada-5144-7e99-59015ca18609");
INSERT INTO SM_EVTDI
	VALUES ("f9b76cf6-7f53-cd6d-daeb-154a730cc06f",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'treal2',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"95bc1cbf-700f-3724-17d6-f6075c91725e");
INSERT INTO SM_EVTDI
	VALUES ("e15fdb25-1e9a-34a4-b088-d23e01397b40",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'd',
	'',
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("81338e04-5546-2f5b-942c-32c4fbbcdbbe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'ts',
	'',
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"ec484440-6ae1-fa12-c3ea-b1ef666a8d7b");
INSERT INTO SM_EVTDI
	VALUES ("ec484440-6ae1-fa12-c3ea-b1ef666a8d7b",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'tim',
	'',
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"62f734fa-09a5-f6ec-3293-84d7e94f3809");
INSERT INTO SM_EVTDI
	VALUES ("ef055728-1abe-5400-459e-3e561261fd3e",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'ev',
	'',
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"e15fdb25-1e9a-34a4-b088-d23e01397b40");
INSERT INTO SM_EVTDI
	VALUES ("53f3a2a0-b67d-7643-b289-078c1df60ad2",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"ac159d2b-52a5-5605-efc9-9ace882da668");
INSERT INTO SM_EVTDI
	VALUES ("ac159d2b-52a5-5605-efc9-9ace882da668",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("cc8a7370-a8a9-5c8a-4749-51b1318d59c1",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"53f3a2a0-b67d-7643-b289-078c1df60ad2");
INSERT INTO SM_EVTDI
	VALUES ("9c09d2a9-543a-40bc-b5c1-34a9b5a9c07c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	's',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"cc8a7370-a8a9-5c8a-4749-51b1318d59c1");
INSERT INTO SM_EVTDI
	VALUES ("c8560c7f-3f99-e2d4-4eed-0426fad503a7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"9c09d2a9-543a-40bc-b5c1-34a9b5a9c07c");
INSERT INTO SM_EVTDI
	VALUES ("792fe774-69e5-c629-d9f7-75bb1ad3b111",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("b4a0dbd1-25c6-4e5f-243a-a67226b836a6",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("bfa1cf00-d1ba-53e1-8044-01caded9c8f8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("8eb676f7-794d-49ca-675e-a952cbeee2b1",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"792fe774-69e5-c629-d9f7-75bb1ad3b111");
INSERT INTO SM_EVTDI
	VALUES ("c31ea8e2-a225-c2fa-958a-059b426ffb1b",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"b4a0dbd1-25c6-4e5f-243a-a67226b836a6");
INSERT INTO SM_EVTDI
	VALUES ("b10f7d2d-a3ed-ce04-cfb0-77057be886e1",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"bfa1cf00-d1ba-53e1-8044-01caded9c8f8");
INSERT INTO SM_LEVT
	VALUES ("db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start Expression Test',
	0,
	'',
	'ET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Run F3 Binary Ops',
	0,
	'',
	'ET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Run F15 Values',
	0,
	'',
	'ET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Run F16 Transformers',
	0,
	'',
	'ET4',
	'');
INSERT INTO SM_LEVT
	VALUES ("2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	5,
	'Run F17 Timestamp and F18 Date Operators',
	0,
	'',
	'ET5',
	'');
INSERT INTO SM_LEVT
	VALUES ("9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	6,
	'Run F1 and F2 for User Defined Types',
	0,
	'',
	'ET6',
	'');
INSERT INTO SM_LEVT
	VALUES ("d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	7,
	'Run F3 through F14 for User Defined Types',
	0,
	'',
	'ET7',
	'');
INSERT INTO SM_LEVT
	VALUES ("a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	8,
	'Run F15 for User Defined Types',
	0,
	'',
	'ET8',
	'');
INSERT INTO SM_LEVT
	VALUES ("56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	9,
	'Shut Down',
	0,
	'',
	'ET9',
	'');
INSERT INTO SM_LEVT
	VALUES ("4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	10,
	'Start not_empty test',
	0,
	'',
	'ET10',
	'');
INSERT INTO SM_LEVT
	VALUES ("cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	11,
	'Start cardinality test',
	0,
	'',
	'ET11',
	'');
INSERT INTO SM_LEVT
	VALUES ("1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	12,
	'Start empty test',
	0,
	'',
	'ET12',
	'');
INSERT INTO SM_LEVT
	VALUES ("44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	13,
	'Start not test',
	0,
	'',
	'ET13',
	'');
INSERT INTO SM_LEVT
	VALUES ("aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	14,
	'Start subtract test',
	0,
	'',
	'ET14',
	'');
INSERT INTO SM_LEVT
	VALUES ("ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	15,
	'Start assign test',
	0,
	'',
	'ET15',
	'');
INSERT INTO SM_LEVT
	VALUES ("a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	16,
	'Start and test',
	0,
	'',
	'ET16',
	'');
INSERT INTO SM_LEVT
	VALUES ("adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	17,
	'Start or test',
	0,
	'',
	'ET17',
	'');
INSERT INTO SM_STATE
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'Starting Expression Test F1 and F2',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("0e3485bf-605f-4586-56d5-85120b150c9e",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"89c3ffc3-5311-a448-3694-9f1d87d71a35");
INSERT INTO SM_AH
	VALUES ("0e3485bf-605f-4586-56d5-85120b150c9e",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("0e3485bf-605f-4586-56d5-85120b150c9e",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	1,
	'LOG::LogInfo(message:"Starting Expression Test F1 and F2") ;

//BEGIN EX.F.1
//check defaults

if (self.bfalse != FALSE)
  LOG::LogFailure(message:"EX.F.1: b default") ;
else
  LOG::LogSuccess(message:"EX.F.1: b default") ;
end if;

if (self.i != 0)
  LOG::LogFailure(message:"EX.F.1: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1: i default") ; 
end if;

//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.1: r default") real;

if (self.s != "")
  LOG::LogFailure(message:"EX.F.1: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1: s default") ;
end if;

//END EX.F.1

//BEGIN EX.F.2
//check integer assign

assign self.i = 10;
if (self.i == 10)
  LOG::LogSuccess(message:"EX.F.2: self.i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.i assign") ;  
end if;

//check real assign
assign self.r = 3.14;
//generate LOGREAL1:''Log Real''(r:3.14,message:"EX.F.2: r assigned to") real;
//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.2: r assigned is") real;

//check bool assign
assign self.bfalse = TRUE;
if (self.bfalse == TRUE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;
assign self.bfalse = FALSE;
if (self.bfalse == FALSE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;

//check string assign
assign self.s = "String";
if (self.s == "String")
  LOG::LogSuccess(message:"EX.F.2: self.s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.s assign") ;  
end if;

LOG::LogInfo(message:"Finished Expression Test F1 and F2") ;

//generate event to commence Operations test
generate ET13:''Start not test''(tfalse:FALSE, ttrue:TRUE) to self;',
	'');
INSERT INTO SM_STATE
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'Run F3 through F14 Binary Operations',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("a256916d-332b-8bb2-d4ff-eae907f0d71a",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1");
INSERT INTO SM_AH
	VALUES ("a256916d-332b-8bb2-d4ff-eae907f0d71a",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("a256916d-332b-8bb2-d4ff-eae907f0d71a",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	1,
	'
LOG::LogInfo(message:"Running F3 through F14 Binary Operations") ;

//BEGIN EX.F.3
// boolean and, or, ==, and !=

//and
assign b1 = TRUE;
assign b2 = FALSE;
if (b1 and b2)
  LOG::LogFailure(message:"EX.F.3 boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean and") ;
end if;

// or
if (b1 or b2)
  LOG::LogSuccess(message:"EX.F.3 boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean or") ;
end if;

//==
if (b1 == b2)
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
end if;

//!=
if (b1 != b2)
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
end if;
//END EX.F.3

//BEGIN EX.F.4
// integer + - * / %

// +
assign i1 = 5;
assign i2 = -6;
assign i3 = i1 + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4 integer +") ;
else
  LOG::LogFailure(message:"EX.F.4 integer +") ;
end if;
//- 
assign i4 = i1 - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4 integer -") ;
else
  LOG::LogFailure(message:"EX.F.4 integer -") ;
end if;
// *
assign i5 = i1*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4 integer *") ;
else
  LOG::LogFailure(message:"EX.F.4 integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/i1;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4 integer /") ;
else
  LOG::LogFailure(message:"EX.F.4 integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%i1;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4 integer %") ;
else
  LOG::LogFailure(message:"EX.F.4 integer %") ;
end if;
//END EX.F.4

//BEGIN EX.F.5
// integer  < <= == != >= >

assign j1 = 12;
assign j2 = 6;
assign j3 = 6;
// <
if (j2 < j1)
  LOG::LogSuccess(message:"EX.F.5 integer <") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <") ;
end if;
// <=
if (j2 <= j3)
  LOG::LogSuccess(message:"EX.F.5 integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <=") ;
end if;
//==
if (j2 == j3)
  LOG::LogSuccess(message:"EX.F.5 integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5 integer ==") ;
end if;
//!=
if (j2 != j1)
  LOG::LogSuccess(message:"EX.F.5 integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer !=") ;
end if;
//>=
if (j1 >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >=") ;
end if;
//>
if (j1 > j2)
  LOG::LogSuccess(message:"EX.F.5 integer >") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >") ;
end if;
//END EX.F.5

//BEGIN EX.F.6
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = i1 + r1;
LOG::LogReal(r:r3,message:"EX.F.6 int real + : r should be -1.0") ;

//- 
assign r4 = i1 - r1;
LOG::LogReal(r:r4,message:"EX.F.6 int real - : r should be 11.0") ;

// *
assign r5 = i1*r1;
LOG::LogReal(r:r5,message:"EX.F.6 int real * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = i10/r2;
LOG::LogReal(r:r6,message:"EX.F.6 int real / : r should be 2.0") ;

//END EX.F.6

//BEGIN EX.F.7
//  < <= == != >= > int as left operand, real as right, and bool result

assign k1 = 12;
assign s1 = 6.0;
assign s2 = 12.0;
assign k2 = 6;

// <
if (k2 < s2)
  LOG::LogSuccess(message:"EX.F.7 int real <") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <") ;
end if;

// <=
if (k2 <= s1)
  LOG::LogSuccess(message:"EX.F.7 int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <=") ;
end if;

//==
if (k2 == s1)
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
end if;

//!=
if (k1 != s1)
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
end if;

//>=
if (k1 >= s1)
  LOG::LogSuccess(message:"EX.F.7 int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (k1 > s1)
  LOG::LogSuccess(message:"EX.F.7 int real >") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >") ;
end if;
//END EX.F.7

//BEGIN EX.F.8
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = r1 + i1;
LOG::LogReal(r:r3,message:"EX.F.8 real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - i1;
LOG::LogReal(r:r4,message:"EX.F.8 real int - : r should be -11.0") ;

// *
assign r5 = r1*i1;
LOG::LogReal(r:r5,message:"EX.F.8 real int * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = r2/i10;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8

//BEGIN EX.F.9
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign k1 = 6;
assign k2 = 12;
assign s2 = 6.0;

// <
if (s2 < k2)
  LOG::LogSuccess(message:"EX.F.9 real int <") ;
else
  LOG::LogFailure(message:"EX.F.9 real int <") ;
end if;

// <=
if (s1 <= k2)
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
end if;

//==
if (s2 == k1)
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
end if;

//!=
if (s1 != k1)
  LOG::LogSuccess(message:"EX.F.9 real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int !=") ;
end if;

//>=
if (s1 >= k1)
  LOG::LogSuccess(message:"EX.F.9 real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >=") ;
end if;

//>
if (s1 > k1)
  LOG::LogSuccess(message:"EX.F.9 real int >") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >") ;
end if;

//END EX.F.9

//BEGIN EX.F.10
// real + - * / 

// +
assign r1 = 5.0;
assign r2 = -6.0;
assign r3 = r1 + r2;
LOG::LogReal(r:r3,message:"EX.F.10 real real + : r should be -1.0") ;

//- 
assign r4 = r1 - r2;
LOG::LogReal(r:r4,message:"EX.F.10 real real - : r should be 11.0") ;

// *
assign r5 = r1*r2;
LOG::LogReal(r:r5,message:"EX.F.10 real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/r1;
LOG::LogReal(r:r7,message:"EX.F.10 real real / : r should be 2.0") ;

//END EX.F.10


//BEGIN EX.F.11
// real  < <= == != >= >

assign r1 = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
// <
if (r2 < r1)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11 real <") ;
end if;
// <=
if (r2 <= r1)
  LOG::LogSuccess(message:"EX.F.11 real <=") ;
else
  LOG::LogFailure(message:"EX.F.11 real <=") ;
end if;
//==
if (r2 == r3)
  LOG::LogInfo(message:"EX.F.11 real ==") ;
else
  LOG::LogInfo(message:"EX.F.11 real ==") ;
end if;
//!=
if (r2 != r1)
  LOG::LogSuccess(message:"EX.F.11 real !=") ;
else
  LOG::LogFailure(message:"EX.F.11 real !=") ;
end if;
//>=
if (r1 >= r2)
  LOG::LogSuccess(message:"EX.F.11 real >=") ;
else
  LOG::LogFailure(message:"EX.F.11 real >=") ;
end if;
//>
if (r1 > r2)
  LOG::LogSuccess(message:"EX.F.11 real >") ;
else
  LOG::LogFailure(message:"EX.F.11 real >") ;
end if;
//END EX.F.11

//BEGIN EX.F.12
// string string +
assign str1 = "Hello";
assign str2 = "World";
assign str3 = str1+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12 string +") ;
else
  LOG::LogFailure(message:"EX.F.12 string +") ;
end if;
//END EX.F.12

//BEGIN EX.F.13
//string < <= == != >= >
assign str1 = "a";
assign str2 = "b";
assign str3 = "b";
// <
if (str1 < str2)
  LOG::LogSuccess(message:"EX.F.13 string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (str2 <= str3)
  LOG::LogSuccess(message:"EX.F.13 string <=") ;
else
  LOG::LogFailure(message:"EX.F.13 string <=") ;
end if;
// ==
if (str3 == str2)
  LOG::LogSuccess(message:"EX.F.13 string ==") ;
else
  LOG::LogFailure(message:"EX.F.13 string ==") ;
end if;
// !=
if (str3 != str1)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13 string !=") ;
end if;
// >=
if (str3 >= str1)
  LOG::LogSuccess(message:"EX.F.13 string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str3 > str1)
  LOG::LogSuccess(message:"EX.F.13 string >") ;
else
  LOG::LogFailure(message:"EX.F.13 string >") ;
end if;
if (str3 < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13 string < quoted") ;
end if;
//END EX.F.13

//BEGIN EX.F.14
// unique_id == !=
assign u = self.et_id;
if (u == self.et_id)
  LOG::LogSuccess(message:"EX.F.14 unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14 unique ==") ;
end if;

select any oi from instances of OI;
if (self.u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14 unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14 unique !=") ;
end if;
//END EX.F.14

LOG::LogInfo(message:"Finished F3 through F14 Binary Operations") ;

generate ET3:''Run F15 Values''(b:TRUE) to self;
',
	'');
INSERT INTO SM_STATE
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'Run F15 values',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("650d8560-41cb-105b-9a25-bc5546ca0485",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"c22abf22-ddf4-6652-febb-47c93b9980a1");
INSERT INTO SM_AH
	VALUES ("650d8560-41cb-105b-9a25-bc5546ca0485",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("650d8560-41cb-105b-9a25-bc5546ca0485",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	1,
	'// Test all of the data items.
// Data items can be literals, object attributes, received event data items, 
// and transient variables.

LOG::LogInfo(message:"Running F15 values") ;

// Literals and Transient

assign str1 = "Hello";
if (str1 == "Hello")
  LOG::LogSuccess(message:"EX.F.15 left transient, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left transient, right literal") ;
end if;

if ("Hello" == str1)
  LOG::LogSuccess(message:"EX.F.15 left literal, right transient") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right transient") ;
end if;

// Object Attributes

assign self.i = 23;
if (self.i  == 23)
  LOG::LogSuccess(message:"EX.F.15 left self.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left self.attr, right literal") ;
end if;

if (23== self.i)
  LOG::LogSuccess(message:"EX.F.15 left literal, right self.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right self.attr") ;
end if;

create object instance ao of AO;
assign ao.b = FALSE;
if (ao.b == FALSE)
  LOG::LogSuccess(message:"EX.F.15 left other.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;
if (FALSE == ao.b)
  LOG::LogSuccess(message:"EX.F.15 left literal, right other.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right other.attr") ;
end if;

// Received Event 
if (rcvd_evt.b == TRUE)
  LOG::LogSuccess(message:"EX.F.15 left rcvd_evt.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;

if (TRUE == rcvd_evt.b )
  LOG::LogSuccess(message:"EX.F.15  left literal, right rcvd_evt.attr") ;
else 
 LOG::LogFailure(message:"EX.F.15  left literal, right rcvd_evt.attr") ; 
end if;

// Use id attr as an rval
assign this_id = self.et_id;

// use ref attr as an rval
create object instance my_etob of ETOB;
assign my_etob.etob_id = 2;
relate self to my_etob across R1;
assign my_etob_id = self.etob_id * 100;

// use transient from select as an rval
create object instance of ETOB;
select many etobs from instances of ETOB;
for each e_etob in etobs
  assign my_etob = e_etob;
end for;


LOG::LogInfo(message:"Finished F15 values") ;

assign self.i=42;
assign self.r=3.14;
assign self.bfalse=TRUE;
assign self.s="Hello";
generate ET4:''Run F16 Transformers''(i:self.i, r:self.r, b:self.bfalse,s:self.s,u:self.u) to self;

',
	'');
INSERT INTO SM_STATE
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'Run F16 Transformers',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("54c573d1-aade-513b-dec9-05a9342535a9",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"5a4780cd-8012-878a-2d72-90231a8f5eaf");
INSERT INTO SM_AH
	VALUES ("54c573d1-aade-513b-dec9-05a9342535a9",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("54c573d1-aade-513b-dec9-05a9342535a9",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	1,
	'
LOG::LogInfo(message:"Running F16 Transformers") ;

// assign predetermined return values.  These will be the values that the coded 
// transforms use as return vals.

assign i_parm_ret_i_val = 42;
assign self.i = i_parm_ret_i_val;
assign r_parm_ret_r_val = 3.14;
assign b_parm_ret_b_val = TRUE;
assign s_parm_ret_s_val = "Hello";
assign u_parm_ret_u_val = rcvd_evt.u; //self.et_id
 
create object instance ao of AO;
assign ao.b = TRUE;

// no_parm_ret_void 
transform ET::no_parm_ret_void();

// i_parm_ret_void
transform ET::i_parm_ret_void(i:self.i);

// i_parm_ret_i
// use sefl.attr as parameter
transform i1 =  ET::i_parm_ret_i(i:self.i);
if (i1 == i_parm_ret_i_val )
  LOG::LogSuccess(message:"EX.F.16 i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 i_parm_ret_i") ;
end if;

// r_parm_ret_r
// use transient as parameter
assign r1 = 3.14;
transform r2 =  ET::r_parm_ret_r(r:r1);
LOG::LogReal(r:r2,message:"EX.F.16: r_parm_ret_r - r should be 3.14");

// b_parm_ret_b
// use attr of other object as parameter
transform b1 =  ET::b_parm_ret_b(b:ao.b);
if (b1 == b_parm_ret_b_val )
  LOG::LogSuccess(message:"EX.F.16 b_parm_ret_b") ;
else 
  LOG::LogFailure(message:"EX.F.16 b_parm_ret_b") ;
end if;

// s_parm_ret_s
// use literal as parm
transform s1 =  ET::s_parm_ret_s(s:"Hello");
if (s1 == s_parm_ret_s_val )
  LOG::LogSuccess(message:"EX.F.16 s_parm_ret_s") ;
else 
  LOG::LogFailure(message:"EX.F.16 s_parm_ret_s") ;
end if;

// u_parm_ret_u
// use received event as parm
transform u1 =  ET::u_parm_ret_u(u:rcvd_evt.u);
if (u1 == u_parm_ret_u_val )
  LOG::LogSuccess(message:"EX.F.16 u_parm_ret_u") ;
else 
  LOG::LogFailure(message:"EX.F.16 u_parm_ret_u") ;
end if;

// d_parm_ret_d

bridge d1 = TIM::create_date(second:30,minute:56,hour:19,day:3,month:1,year:1966);
LOG::LogDate(d:d1,message:"EX.F.16 d_parm_ret_d - d initial value");

bridge t1 = TIM::current_clock();
LOG::LogTime(t:t1,message:"EX.F.16 t_parm_ret_t - t initial value");


transform d2 = ET::d_parm_ret_d(d:d1);
LOG::LogDate(d:d2,message:"EX.F.16 d_parm_ret_d - d ret value");

// t_parm_ret_t

transform t2 = ET::t_parm_ret_t(t:t1);
LOG::LogTime(t:t2,message:"EX.F.16 t_parm_ret_t - t ret value");

// run a simple transform of another object
transform i3 = AO::i_parm_ret_i(i:24);

if (i3 == 24 )
  LOG::LogSuccess(message:"EX.F.16 other obj i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 other obj i_parm_ret_i") ;
end if;

LOG::LogInfo(message:"Finished F16 Transformers") ;

generate ET5:''Run F17 Timestamp and F18 Date Operators''() to self;
',
	'');
INSERT INTO SM_STATE
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'Shutting Down',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("40da950f-092d-1954-f95d-150a1ea1275e",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"fc6255fd-8f88-8578-2188-dbd8f9d6a99a");
INSERT INTO SM_AH
	VALUES ("40da950f-092d-1954-f95d-150a1ea1275e",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("40da950f-092d-1954-f95d-150a1ea1275e",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	1,
	'LOG::LogInfo(message:"a1test_exconfig Expression Test Complete") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
',
	'');
INSERT INTO SM_STATE
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'Runnning F17 Timestamp and F18 Date Operators',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("87d7123c-9ec5-c389-2fda-613f981c3404",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"4ce11644-bcb1-1dab-f4bb-1be90be3af13");
INSERT INTO SM_AH
	VALUES ("87d7123c-9ec5-c389-2fda-613f981c3404",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("87d7123c-9ec5-c389-2fda-613f981c3404",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	1,
	'
// BEGIN EX.F.17

bridge t1 = TIM::current_clock();

LOG::LogInfo(message:"Starting EX.F.17 and EX.F.18 Test") ;

assign t3 = t1;

transform ET::waitOneSec();
bridge t2 = TIM::current_clock();

if (t1== t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp == timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp == timestamp") ;
end if;

if (t1!= t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp != timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp != timestamp") ;
end if;

if (t1<  t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp < timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp < timestamp") ;
end if;

if (t1<= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp <= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp <= timestamp") ;
end if;

if (t2 > t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp > timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp > timestamp") ;
end if;

if (t1>= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp >= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp >= timestamp") ;
end if;

// END EX.F.17

// BEGIN EX.F.18

LOG::LogInfo(message:"Starting EX.F.18 Testing Date operators") ;


bridge d1 = TIM::current_date();
assign d4 = d1;
bridge d2 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1910);
bridge d3 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1911);

if (d1== d4)
  LOG::LogSuccess(message:"EX.F.18: date == date") ;
else
  LOG::LogFailure(message:"EX.F.18: date == date") ;
end if;

if (d2 != d3)
  LOG::LogSuccess(message:"EX.F.18: date != date") ;
else
  LOG::LogFailure(message:"EX.F.18: date != date") ;
end if;

if (d3<  d1)
  LOG::LogSuccess(message:"EX.F.18: date < date") ;
else
  LOG::LogFailure(message:"EX.F.18: date < date") ;
end if;

if (d1<= d4)
  LOG::LogSuccess(message:"EX.F.18: date <= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date <= date") ;
end if;

if (d1> d2)
  LOG::LogSuccess(message:"EX.F.18: date > date") ;
else
  LOG::LogFailure(message:"EX.F.18: date > date") ;
end if;

if (d1>= d4)
  LOG::LogSuccess(message:"EX.F.18: date >= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date >= date") ;
end if;

LOG::LogInfo(message:"Test EX.F.17 and EX.F.18 complete") ;
generate ET6:''Run F1 and F2 for User Defined Types''() to self;',
	'');
INSERT INTO SM_STATE
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'Running F1 and F2 for User Defined Types',
	7,
	0);
INSERT INTO SM_CH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("d050e693-f8f5-1446-254b-598c8cdb8c2a",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"f4d455ae-a833-7d5a-ae87-e1e91a986ae8");
INSERT INTO SM_AH
	VALUES ("d050e693-f8f5-1446-254b-598c8cdb8c2a",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("d050e693-f8f5-1446-254b-598c8cdb8c2a",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	1,
	'
LOG::LogInfo(message:"Expression Test F1 and F2 for User Defined Types") ;

//BEGIN EX.F.1_UDT
//check defaults

if (self.my_b != FALSE)
  LOG::LogFailure(message:"EX.F.1_UDT: my_b default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: my_b default") ;
end if;

if (self.my_i != 0)
  LOG::LogFailure(message:"EX.F.1_UDT: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1_UDT: i default") ; 
end if;
LOG::LogReal(r:self.r,message:"EX.F.1_UDT: r default");

if (self.my_s != "")
  LOG::LogFailure(message:"EX.F.1_UDT: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: s default") ;
end if;

//END EX.F.1_UDT

//BEGIN EX.F.2_UDT
//check integer assign

assign self.my_i = 10;
if (self.my_i == 10)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_i assign") ;  
end if;

//check real assign
assign self.my_r = 3.14;
LOG::LogReal(r:3.14,message:"EX.F.2_UDT: my_r assigned to") ;
LOG::LogReal(r:self.my_r,message:"EX.F.2_UDT: my_r assigned is");

//check bool assign
assign self.my_b = TRUE;
if (self.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_b assign") ;  
end if;

//check string assign
assign self.my_s = "String";
if (self.my_s == "String")
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_s assign") ;  
end if;

// check unary not
assign self.my_b = FALSE;
if (not self.my_b)
  LOG::LogSuccess(message:"EX.F.2_UDT: unary not") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: unary not") ;  
end if;  

LOG::LogInfo(message:"Finished F1 and F2 for User Defined Types") ;


//generate event to commence Binary Operations test
generate ET7:''Run F3 through F14 for User Defined Types''() to self;',
	'');
INSERT INTO SM_STATE
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'Running F3 through F14 for User Defined Types',
	8,
	0);
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("79786b0c-2583-a95c-3b50-3c627a6a2a28",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"19cb2e7f-a19f-70d8-82ef-f04173872fa1");
INSERT INTO SM_AH
	VALUES ("79786b0c-2583-a95c-3b50-3c627a6a2a28",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("79786b0c-2583-a95c-3b50-3c627a6a2a28",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	1,
	'LOG::LogInfo(message:"Running F3 through F14 for User Defined Types") ;

//BEGIN EX.F.3_UDT
// boolean and, or, ==, and !=

//and
assign self.my_b = TRUE;
assign b2 = FALSE;
if (self.my_b and b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean and") ;
end if;

// or
if (self.my_b or b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean or") ;
end if;

//==
if (self.my_b == b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
end if;

//!=
if (self.my_b != b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
end if;
//END EX.F.3_UDT

//BEGIN EX.F.4_UDT
// integer + - * / %

// +
assign self.my_i = 5;
assign i2 = -6;
assign i3 = self.my_i + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4_UDT integer +") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer +") ;
end if;
//- 
assign i4 = self.my_i - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4_UDT integer -") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer -") ;
end if;
// *
assign i5 = self.my_i*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4_UDT integer *") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/self.my_i;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4_UDT integer /") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%self.my_i;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4_UDT integer %") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer %") ;
end if;
//END EX.F.4_UDT

//BEGIN EX.F.5_UDT
// integer  < <= == != >= >

assign self.my_i = 12;
assign j2 = 6;
assign j3 = 12;
// <
if (j2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <") ;
end if;
// <=
if (j2 <= self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <=") ;
end if;
//==
if (self.my_i == j3)
  LOG::LogSuccess(message:"EX.F.5_UDT integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer ==") ;
end if;
//!=
if (j2 != self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer !=") ;
end if;
//>=
if (self.my_i >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >=") ;
end if;
//>
if (self.my_i > j2)
  LOG::LogSuccess(message:"EX.F.5_UDT integer >") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >") ;
end if;
//END EX.F.5_UDT

//BEGIN EX.F.6_UDT
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = self.my_i + r1;
LOG::LogReal(r:r3,message:"EX.F.6_UDT int real + : r should be -1.0") ;

//- 
assign r4 = self.my_i - r1;
LOG::LogReal(r:r4,message:"EX.F.6_UDT int real - : r should be 11.0") ;

// *
assign r5 = self.my_i*r1;
LOG::LogReal(r:r5,message:"EX.F.6_UDT int real * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = self.my_i/r2;
LOG::LogReal(r:r6,message:"EX.F.6_UDT int real / : r should be 2.0") ;

//END EX.F.6_UDT

//BEGIN EX.F.7_UDT
//  < <= == != >= > int as left operand, real as right, and bool result

assign s1 = 6.0;
assign s2 = 12.0;
assign self.my_i = 6;

// <
if (self.my_i < s2)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <") ;
end if;

// <=
if (self.my_i <= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <=") ;
end if;

//==
if (self.my_i == s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
end if;

assign self.my_i=12;
//!=
if (self.my_i != s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
end if;

//>=
if (self.my_i >= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (self.my_i > s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real >") ;
end if;
//END EX.F.7_UDT

//BEGIN EX.F.8_UDT
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = r1 + self.my_i;
LOG::LogReal(r:r3,message:"EX.F.8_UDT real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - self.my_i;
LOG::LogReal(r:r4,message:"EX.F.8_UDT real int - : r should be -11.0") ;

// *
assign r5 = r1*self.my_i;
LOG::LogReal(r:r5,message:"EX.F.8_UDT real int * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = r2/self.my_i;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8_UDT

//BEGIN EX.F.9_UDT
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign self.my_i = 12;
assign s2 = 6.0;

// <
if (s2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int <") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int <") ;
end if;

// <=
if (s1 <= self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
end if;

assign self.my_i = 6;

//==
if (s2 == self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
end if;

//!=
if (s1 != self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int !=") ;
end if;

//>=
if (s1 >= self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >=") ;
end if;

//>
if (s1 > self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >") ;
end if;

//END EX.F.9_UDT

//BEGIN EX.F.10_UDT
// real + - * / 

// +
assign self.my_r = 5.0;
assign r2 = -6.0;
assign r3 = self.my_r + r2;
LOG::LogReal(r:r3,message:"EX.F.10_UDT real real + : r should be -1.0") ;

//- 
assign r4 = self.my_r - r2;
LOG::LogReal(r:r4,message:"EX.F.10_UDT real real - : r should be 11.0") ;

// *
assign r5 = self.my_r*r2;
LOG::LogReal(r:r5,message:"EX.F.10_UDT real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/self.my_r;
LOG::LogReal(r:r7,message:"EX.F.10_UDT real real / : r should be 2.0") ;

//END EX.F.10_UDT


//BEGIN EX.F.11_UDT
// real  < <= == != >= >

assign self.my_r = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
assign r4=12.0;
// <
if (r2 < self.my_r)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <") ;
end if;
// <=
if (r2 <= self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real <=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <=") ;
end if;
//==
if (self.my_r == r4)
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
else
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
end if;
//!=
if (r2 != self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real !=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real !=") ;
end if;
//>=
if (self.my_r >= r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >=") ;
end if;
//>
if (self.my_r > r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >") ;
end if;
//END EX.F.11_UDT

//BEGIN EX.F.12_UDT
// string string +
assign self.my_s = "Hello";
assign str2 = "World";
assign str3 = self.my_s+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12_UDT string +") ;
else
  LOG::LogFailure(message:"EX.F.12_UDT string +") ;
end if;
//END EX.F.12_UDT

//BEGIN EX.F.13_UDT
//string < <= == != >= >
assign self.my_s = "a";
assign str2 = "b";
assign str3 = "a";
// <
if (self.my_s < str2)
  LOG::LogSuccess(message:"EX.F.13_UDT string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (self.my_s <= str3)
  LOG::LogSuccess(message:"EX.F.13_UDT string <=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string <=") ;
end if;
// ==
if (str3 == self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string ==") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string ==") ;
end if;
// !=
if (str2 != self.my_s)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string !=") ;
end if;
// >=
if (str2 >= self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str2 > self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string >") ;
end if;
if (self.my_s < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string < quoted") ;
end if;
//END EX.F.13_UDT

//BEGIN EX.F.14_UDT
// unique_id == !=
assign self.my_u = self.u;
if (self.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.14_UDT unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique ==") ;
end if;

select any oi from instances of OI;
if (self.my_u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14_UDT unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique !=") ;
end if;
//END EX.F.14_UDT

LOG::LogInfo(message:"Finished F3 through F14 for User Defined Types") ;

generate ET8:''Run F15 for User Defined Types''(my_b:TRUE,my_i:42,my_r:3.14,my_s:"Hello",my_u:self.u) to self;
',
	'');
INSERT INTO SM_STATE
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'Running F15 for User Defined Types',
	9,
	0);
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("fd31caa6-e766-7e79-f89d-6f233c353852",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"7f23a9c2-195b-71c1-db4b-d4ed84c2100e");
INSERT INTO SM_AH
	VALUES ("fd31caa6-e766-7e79-f89d-6f233c353852",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("fd31caa6-e766-7e79-f89d-6f233c353852",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	1,
	'LOG::LogInfo(message:"Running F15 for User Defined Types") ;

// Received Event 
if (rcvd_evt.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_b") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_b") ;
end if;

if (rcvd_evt.my_i == 42)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_i") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_i") ;
end if;

LOG::LogReal(message:"EX.F.15_UDT rcvd_evt.attr r",r:rcvd_evt.my_r) ; 

if (rcvd_evt.my_s == "Hello")
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_s") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_s") ;
end if;

if (rcvd_evt.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_u") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_u") ;
end if;

generate ET9:''Shut Down''() to self;

',
	'');
INSERT INTO SM_STATE
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'Testing empty operator',
	10,
	0);
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("3f8bf9ce-83b8-e625-b6be-03ca73a5014a",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"0c9f6778-2455-fa3a-438f-2566fd42bc5d");
INSERT INTO SM_AH
	VALUES ("3f8bf9ce-83b8-e625-b6be-03ca73a5014a",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("3f8bf9ce-83b8-e625-b6be-03ca73a5014a",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	1,
	'LOG::LogInfo(message:"Starting Expression Test empty operator") ;

//empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = empty saf0;
if (t1 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (true)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = empty saf1;
if (t2 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (false)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = empty smf0;
if (t3 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (true)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = empty smf1;
if ( t4 == FALSE )
  LOG::LogSuccess(message:"EX.F.2: empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (false)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = empty sar0;
if (t5 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (true)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = empty sar1;
if (t6 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (false)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = empty sor0;
if (t7 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = empty sor1;
if (t8 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = empty smr0;
if (t9 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = empty smr1;
if (t10 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

//generate event to commence next test
generate ET10:''Start not_empty test''() to self;',
	'');
INSERT INTO SM_STATE
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'Testing not_empty operator',
	11,
	0);
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("a3e25bf1-7639-e01a-cde7-3fbe241a8af4",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"449ece98-5845-8620-2ff4-5a12ab3e1e60");
INSERT INTO SM_AH
	VALUES ("a3e25bf1-7639-e01a-cde7-3fbe241a8af4",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("a3e25bf1-7639-e01a-cde7-3fbe241a8af4",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not_empty operator") ;

//not_empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = not_empty saf0;
if (t1 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (false)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = not_empty saf1;
if (t2 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (true)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = not_empty smf0;
if (t3 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (false)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = not_empty smf1;
if ( t4 == TRUE )
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (true)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = not_empty sar0;
if (t5 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (false)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = not_empty sar1;
if (t6 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (true)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = not_empty sor0;
if (t7 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = not_empty sor1;
if (t8 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = not_empty smr0;
if (t9 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = not_empty smr1;
if (t10 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

//generate event to commence next test
generate ET11:''Start cardinality test''() to self;
',
	'');
INSERT INTO SM_STATE
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'Testing cardinality operator',
	12,
	0);
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("73641449-6e50-c4dc-893d-b010d8f1d724",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"c8c285f9-b4d1-2922-6b3a-cb6b56eccf82");
INSERT INTO SM_AH
	VALUES ("73641449-6e50-c4dc-893d-b010d8f1d724",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("73641449-6e50-c4dc-893d-b010d8f1d724",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	1,
	'LOG::LogInfo(message:"Starting Expression Test cardinality operator") ;

// cardinality operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = cardinality saf0;
if (t1 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (0)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = cardinality saf1;
if (t2 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (1)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = cardinality smf0;
if (t3 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (0)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = cardinality smf1;
if ( t4 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (2)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = cardinality sar0;
if (t5 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (0)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = cardinality sar1;
if (t6 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (1)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = cardinality sor0;
if (t7 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = cardinality sor1;
if (t8 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (1)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = cardinality smr0;
if (t9 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = cardinality smr1;
if (t10 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (2)") ;  
end if;

// generate event to commence next test
generate ET14:''Start subtract test''( tint1:17, tint2:13, treal1:2.781828, treal2:11.2) to self;

',
	'');
INSERT INTO SM_STATE
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'Testing not operator',
	13,
	0);
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("2edc4743-d19f-ed9c-55ae-ca54affc866d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"364da495-bb86-2167-9bb5-cfd1580e2c98");
INSERT INTO SM_AH
	VALUES ("2edc4743-d19f-ed9c-55ae-ca54affc866d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("2edc4743-d19f-ed9c-55ae-ca54affc866d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not operator") ;

//not operation
  // local existing 
assign tfalse = false;
assign ttrue = true;
assign t1 = not tfalse;
if (t1 == TRUE)
  LOG::LogSuccess(message:"not local existing (true)") ;  
else
  LOG::LogFailure(message:"not local existing (true)") ;  
end if;

assign t2 = not ttrue;
if (t2 == FALSE)
  LOG::LogSuccess(message:"not local existing (false)") ;
else
  LOG::LogFailure(message:"not local existing (false)") ;
end if;

  // rcvd_evt
assign t3 = not rcvd_evt.tfalse;
if (t3 == TRUE)
  LOG::LogSuccess(message:"not rcvd_evt (true)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (true)") ;
end if;  
 
assign t4 = not rcvd_evt.ttrue;
if (t4 == FALSE)
  LOG::LogSuccess(message:"not rcvd_evt (false)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (false)") ;
end if;
 
  // constant 
assign t5 = not FALSE;
if (t5 == TRUE)
  LOG::LogSuccess(message:"not constant (true)") ;
else
  LOG::LogFailure(message:"not constant (true)") ;
end if;  
 
assign t6 = not TRUE;
if (t6 == FALSE)
  LOG::LogSuccess(message:"not constant (false)") ;
else
  LOG::LogFailure(message:"not constant (false)") ;
end if;
 
  // self.attribute
assign t7 = not self.bfalse;
if (t7 == TRUE)
  LOG::LogSuccess(message:"not self.attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.attribute (true)") ;
end if; 
 
assign t8 = not self.btrue;
if (t8 == FALSE)
  LOG::LogSuccess(message:"not self.attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.attribute (false)") ;
end if;
 
  // self.referential attribute
assign t9 = not self.r1bfalse;
if (t9 == TRUE)
  LOG::LogSuccess(message:"not self.referential attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (true)") ;
end if; 
 
assign t10 = not self.r1btrue;
if (t10 == FALSE)
  LOG::LogSuccess(message:"not self.referential attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (false)") ;
end if;

  // other.attribute (saf)
select any saf1 from instances of ETOB;
assign t11 = not saf1.bfalse;
if (t11 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (true)") ;
end if;
 
assign t12 = not saf1.btrue;
if (t12 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (false)") ;
end if;
 
  // other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  assign t13 = not smf.bfalse;
  if (t13 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (true)") ;
  end if;
 
  assign t14 = not smf.btrue;
  if (t14 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (false)") ;
  end if;
end for;
 
  // other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t15 = not sar1.bfalse;
if (t15 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (true)") ;
end if;
 
assign t16 = not sar1.btrue;
if (t16 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (false)") ;
end if;

  // other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t17 = not sor1.bfalse;
if (t17 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (true)") ;
end if;
 
assign t18 = not sor1.btrue;
if (t18 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (false)") ;
end if;


  // other.attribute (smr)
select many smr1 from instances of ETOB;
for each smr in smr1
  assign t19 = not smr.bfalse;
  if (t19 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (true)") ;
  end if;
 
  assign t20 = not smr.btrue;
  if (t20 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (false)") ;
  end if;
end for;

  // other.referential attribute (saf)
assign t21 = not saf1.r6bfalse;
if (t21 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (true)") ;
end if;
 
assign t22 = not saf1.r6btrue;
if (t22 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (false)") ;
end if;
 
  // other.referential attribute (smf)
for each smf in smf1
  assign t23 = not smf.r6bfalse;
  if (t23 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (true)") ;
  end if;
 
  assign t24 = not smf.r6btrue;
  if (t24 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (false)") ;
  end if;
end for;

  // other.referential attribute (sar)
assign t25 = not sar1.r6bfalse;
if (t25 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (true)") ;
end if;
 
assign t26 = not sar1.r6btrue;
if (t26 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (false)") ;
end if;

  // other.referential attribute (sor)
assign t27 = not sor1.r6bfalse;
if (t27 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (true)") ;
end if;
 
assign t28 = not sor1.r6btrue;
if (t28 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (false)") ;
end if;

  // other.referential attribute (smr)
for each smr in smr1
  assign t29 = not smr.r6bfalse;
  if (t29 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (true)") ;
  end if;
 
  assign t30 = not smr.r6btrue;
  if (t30 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (false)") ;
  end if;
end for;

 
LOG::LogInfo(message:"Finished Expression Test not operator") ;

//generate event to commence next test
generate ET12:''Start empty test''() to self;
',
	'');
INSERT INTO SM_STATE
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'Testing subtraction operator',
	14,
	0);
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("58982c68-0b67-fb2a-d66b-84b6496fe03a",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"d4ff2114-0b19-0230-b090-1a1b336e6257");
INSERT INTO SM_AH
	VALUES ("58982c68-0b67-fb2a-d66b-84b6496fe03a",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("58982c68-0b67-fb2a-d66b-84b6496fe03a",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	1,
	'LOG::LogInfo(message:"Starting subtract test") ;
select any event_instance from instances of EV;
//subtraction (-) operation
// perform each test combination with the following types:
     // integer integer
     // integer real
     // real integer
     // real real

  // local existing    local existing
assign temp1 = 13;
assign temp2 = 7;
assign temp3 = 2.4;
assign temp4 = 23.7;
assign t1 = temp1 - temp2 ;
if ( t1 == 6 )
  LOG::LogSuccess(message:" subtract local_existing local_existing ( 6 )") ;
else
  LOG::LogFailure(message:" subtract local_existing local_existing ( 6 )") ;
end if;
 
assign t2 = temp1 - temp3 ;
LOG::LogReal(r: t2 , message:" subtract local_existing local_existing ( 10.6 )") ;
 
assign t3 = temp3 - temp2 ;
LOG::LogReal(r: t3 , message:" subtract local_existing local_existing ( -4.6 )") ;
 
assign t4 = temp4 - temp3 ;
LOG::LogReal(r: t4 , message:" subtract local_existing local_existing ( 21.3 )") ;
 
  // local existing    rcvd_evt
// assume
// rcvd_evt.tint1 = 17
// rcvd_evt.treal1 = 2.781828
assign t5 = temp1 - rcvd_evt.tint1 ;
if ( t5 == -4 )
  LOG::LogSuccess(message:" subtract local_existing rcvd_evt ( -4 )") ;
else
  LOG::LogFailure(message:" subtract local_existing rcvd_evt ( -4 )") ;
end if;
 
assign t6 = temp1 - rcvd_evt.treal1 ;
LOG::LogReal(r: t6 , message:" subtract local_existing rcvd_evt ( 10.218172 )") ;
 
assign t7 = temp3 - rcvd_evt.tint1 ;
LOG::LogReal(r: t7 , message:" subtract local_existing rcvd_evt ( -14.6 )") ;
 
assign t8 = temp4 - rcvd_evt.treal1 ;
LOG::LogReal(r: t8 , message:" subtract local_existing rcvd_evt ( 20.918172 )") ;
 
  // local existing    constant
assign t9 = temp1 - 3 ;
if ( t9 == 10 )
  LOG::LogSuccess(message:" subtract local_existing constant ( 10 )") ;
else
  LOG::LogFailure(message:" subtract local_existing constant ( 10 )") ;
end if;
 
assign t10 = temp1 - 3.14 ;
LOG::LogReal(r: t10 , message:" subtract local_existing constant ( 9.86 )") ;
 
assign t11 = temp3 - 5.6 ;
LOG::LogReal(r: t11 , message:" subtract local_existing constant ( -3.2 )") ;
 
assign t12 = temp4 - 16.9 ;
LOG::LogReal(r: t12 , message:" subtract local_existing constant ( 6.8 )") ;
 
  // local existing    self.attribute
// assume self.i = 10
// assume self.r = 3.14
assign t13 = temp1 - self.i ;
if ( t13 == 3 )
  LOG::LogSuccess(message:" subtract local_existing self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.attribute ( 3 )") ;
end if;
 
assign t14 = temp1 - self.r ;
LOG::LogReal(r: t14 , message:" subtract local_existing self.attribute ( 9.86 )") ;
 
assign t15 = temp3 - self.i ;
LOG::LogReal(r: t15 , message:" subtract local_existing self.attribute ( -7.6 )") ;
 
assign t16 = temp4 - self.r ;
LOG::LogReal(r: t16 , message:" subtract local_existing self.attribute ( 20.56 )") ;
 
  // local existing    self.referential attribute
assign t17 = temp1 - self.etob_id ;
if ( t17 == 11 )
  LOG::LogSuccess(message:" subtract local_existing self.referential_attribute ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.referential_attribute ( 11 )") ;
end if;
 
assign t18 = temp1 - self.r1r ;
LOG::LogReal(r: t18 , message:" subtract local_existing self.referential_attribute ( 10.8282 )") ;
 
assign t19 = temp3 - self.etob_id ;
LOG::LogReal(r: t19 , message:" subtract local_existing self.referential_attribute ( 0.4 )") ;
 
assign t20 = temp4 - self.r1r ;
LOG::LogReal(r: t20 , message:" subtract local_existing self.referential_attribute ( 21.5282 )") ;
 
  // local existing    other.attribute (saf)
select any saf1 from instances of ETOB;
assign t21 = temp1 - saf1.etob_id ;
if ( t21 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
end if;
 
assign t22 = temp1 - saf1.r ;
LOG::LogReal(r: t22 , message:" subtract local_existing other.attribute(saf) ( 10.8282 )") ;
 
assign t23 = temp3 - saf1.etob_id ;
LOG::LogReal(r: t23 , message:" subtract local_existing other.attribute(saf) ( 0.4 )") ;
 
assign t24 = temp4 - saf1.r ;
LOG::LogReal(r: t24 , message:" subtract local_existing other.attribute(saf) ( 21.5282 )") ;
 
  // local existing    other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t25 = temp1 - smf.etob_id ;
if ( t25 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
end if;
 
assign t26 = temp1 - smf.r ;
LOG::LogReal(r: t26 , message:" subtract local_existing other.attribute(smf) ( 10.8282 )") ;
 
assign t27 = temp3 - smf.etob_id ;
LOG::LogReal(r: t27 , message:" subtract local_existing other.attribute(smf) ( 0.4 )") ;
 
assign t28 = temp4 - smf.r ;
LOG::LogReal(r: t28 , message:" subtract local_existing other.attribute(smf) ( 21.5282 )") ;
 
  // only do this once
  end if;
end for;
  // local existing    other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t29 = temp1 - sor1.etob_id ;
if ( t29 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
end if;
 
assign t30 = temp1 - sor1.r ;
LOG::LogReal(r: t30 , message:" subtract local_existing other.attribute(sor) ( 10.8282 )") ;
 
assign t31 = temp3 - sor1.etob_id ;
LOG::LogReal(r: t31 , message:" subtract local_existing other.attribute(sor) ( 0.4 )") ;
 
assign t32 = temp4 - sor1.r ;
LOG::LogReal(r: t32 , message:" subtract local_existing other.attribute(sor) ( 21.5282 )") ;
 
  // local existing    other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t33 = temp1 - sar1.etob_id ;
if ( t33 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
end if;
 
assign t34 = temp1 - sar1.r ;
LOG::LogReal(r: t34 , message:" subtract local_existing other.attribute(sar) ( 10.8282 )") ;
 
assign t35 = temp3 - sar1.etob_id ;
LOG::LogReal(r: t35 , message:" subtract local_existing other.attribute(sar) ( 0.4 )") ;
 
assign t36 = temp4 - sar1.r ;
LOG::LogReal(r: t36 , message:" subtract local_existing other.attribute(sar) ( 21.5282 )") ;
 
  // local existing    other.attribute (smr)
select many smr1 related by self->ETOB[R8];
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t37 = temp1 - smr.etob_id ;
if ( t37 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
end if;
 
assign t38 = temp1 - smr.r ;
LOG::LogReal(r: t38 , message:" subtract local_existing other.attribute(smr) ( 10.8282 )") ;
 
assign t39 = temp3 - smr.etob_id ;
LOG::LogReal(r: t39 , message:" subtract local_existing other.attribute(smr) ( 0.4 )") ;
 
assign t40 = temp4 - smr.r ;
LOG::LogReal(r: t40 , message:" subtract local_existing other.attribute(smr) ( 21.5282 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 - saf1.etoc_id ;
if ( t41 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
end if;
 
assign t42 = temp1 - saf1.r6r ;
LOG::LogReal(r: t42 , message:" subtract local_existing other.referential_attribute(saf) ( 1.689 )") ;
 
assign t43 = temp3 - saf1.etoc_id ;
LOG::LogReal(r: t43 , message:" subtract local_existing other.referential_attribute(saf) ( -1.6 )") ;
 
assign t44 = temp4 - saf1.r6r ;
LOG::LogReal(r: t44 , message:" subtract local_existing other.referential_attribute(saf) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smf)
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t45 = temp1 - smf.etoc_id ;
if ( t45 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
end if;
 
assign t46 = temp1 - smf.r6r ;
LOG::LogReal(r: t46 , message:" subtract local_existing other.referential_attribute(smf) ( 1.689 )") ;
 
assign t47 = temp3 - smf.etoc_id ;
LOG::LogReal(r: t47 , message:" subtract local_existing other.referential_attribute(smf) ( -1.6 )") ;
 
assign t48 = temp4 - smf.r6r ;
LOG::LogReal(r: t48 , message:" subtract local_existing other.referential_attribute(smf) ( 12.389 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 - sor1.etoc_id ;
if ( t49 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
end if;
 
assign t50 = temp1 - sor1.r6r ;
LOG::LogReal(r: t50 , message:" subtract local_existing other.referential_attribute(sor) ( 1.689 )") ;
 
assign t51 = temp3 - sor1.etoc_id ;
LOG::LogReal(r: t51 , message:" subtract local_existing other.referential_attribute(sor) ( -1.6 )") ;
 
assign t52 = temp4 - sor1.r6r ;
LOG::LogReal(r: t52 , message:" subtract local_existing other.referential_attribute(sor) ( 12.389 )") ;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 - sar1.etoc_id ;
if ( t53 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
end if;
 
assign t54 = temp1 - sar1.r6r ;
LOG::LogReal(r: t54 , message:" subtract local_existing other.referential_attribute(sar) ( 1.689 )") ;
 
assign t55 = temp3 - sar1.etoc_id ;
LOG::LogReal(r: t55 , message:" subtract local_existing other.referential_attribute(sar) ( -1.6 )") ;
 
assign t56 = temp4 - sar1.r6r ;
LOG::LogReal(r: t56 , message:" subtract local_existing other.referential_attribute(sar) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smr)
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t57 = temp1 - smr.etoc_id ;
if ( t57 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
end if;
 
assign t58 = temp1 - smr.r6r ;
LOG::LogReal(r: t58 , message:" subtract local_existing other.referential_attribute(smr) ( 1.689 )") ;
 
assign t59 = temp3 - smr.etoc_id ;
LOG::LogReal(r: t59 , message:" subtract local_existing other.referential_attribute(smr) ( -1.6 )") ;
 
assign t60 = temp4 - smr.r6r ;
LOG::LogReal(r: t60 , message:" subtract local_existing other.referential_attribute(smr) ( 12.389 )") ;
 
  end if;
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tint1 - temp1 ;
if ( t61 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt local_existing ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt local_existing ( 4 )") ;
end if;
 
assign t62 = rcvd_evt.tint1 - temp3 ;
LOG::LogReal(r: t62 , message:" subtract rcvd_evt local_existing ( 14.6 )") ;
 
assign t63 = rcvd_evt.treal1 - temp1 ;
LOG::LogReal(r: t63 , message:" subtract rcvd_evt local_existing ( -10.218172 )") ;
 
assign t64 = rcvd_evt.treal1 - temp3 ;
LOG::LogReal(r: t64 , message:" subtract rcvd_evt local_existing ( 0.381828 )") ;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tint1 - rcvd_evt.tint2 ;
if ( t65 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
end if;
 
assign t66 = rcvd_evt.tint1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t66 , message:" subtract rcvd_evt rcvd_evt ( 5.8 )") ;
 
assign t67 = rcvd_evt.treal1 - rcvd_evt.tint2 ;
LOG::LogReal(r: t67 , message:" subtract rcvd_evt rcvd_evt ( -10.218172 )") ;
 
assign t68 = rcvd_evt.treal1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t68 , message:" subtract rcvd_evt rcvd_evt ( -8.418172 )") ;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tint1 - 1 ;
if ( t69 == 16 )
  LOG::LogSuccess(message:" subtract rcvd_evt constant ( 16 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt constant ( 16 )") ;
end if;
 
assign t70 = rcvd_evt.tint1 - 1.0 ;
LOG::LogReal(r: t70 , message:" subtract rcvd_evt constant ( 16.0 )") ;
 
assign t71 = rcvd_evt.treal1 - 1 ;
LOG::LogReal(r: t71 , message:" subtract rcvd_evt constant ( 1.781828 )") ;
 
assign t72 = rcvd_evt.treal1 - 0.5 ;
LOG::LogReal(r: t72 , message:" subtract rcvd_evt constant ( 2.281828 )") ;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tint1 - self.i ;
if ( t73 == 7 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.attribute ( 7 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.attribute ( 7 )") ;
end if;
 
assign t74 = rcvd_evt.tint1 - self.r ;
LOG::LogReal(r: t74 , message:" subtract rcvd_evt self.attribute ( 13.86 )") ;
 
assign t75 = rcvd_evt.treal1 - self.i ;
LOG::LogReal(r: t75 , message:" subtract rcvd_evt self.attribute ( -7.218172 )") ;
 
assign t76 = rcvd_evt.treal1 - self.r ;
LOG::LogReal(r: t76 , message:" subtract rcvd_evt self.attribute ( -0.358172 )") ;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tint1 - self.etob_id ;
if ( t77 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
end if;
 
assign t78 = rcvd_evt.tint1 - self.r1r ;
LOG::LogReal(r: t78 , message:" subtract rcvd_evt self.referential_attribute ( 14.8282 )") ;
 
assign t79 = rcvd_evt.treal1 - self.etob_id ;
LOG::LogReal(r: t79 , message:" subtract rcvd_evt self.referential_attribute ( 0.781828 )") ;
 
assign t80 = rcvd_evt.treal1 - self.r1r ;
LOG::LogReal(r: t80 , message:" subtract rcvd_evt self.referential_attribute ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tint1 - saf1.etob_id ;
if ( t81 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
end if;
 
assign t82 = rcvd_evt.tint1 - saf1.r ;
LOG::LogReal(r: t82 , message:" subtract rcvd_evt other.attribute(saf) ( 14.8282 )") ;
 
assign t83 = rcvd_evt.treal1 - saf1.etob_id ;
LOG::LogReal(r: t83 , message:" subtract rcvd_evt other.attribute(saf) ( 0.781828 )") ;
 
assign t84 = rcvd_evt.treal1 - saf1.r ;
LOG::LogReal(r: t84 , message:" subtract rcvd_evt other.attribute(saf) ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (smf)
  // rcvd_evt    other.attribute (sor)
  // rcvd_evt    other.attribute (sar)
  // rcvd_evt    other.attribute (smr)
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tint1 - saf1.etoc_id ;
if ( t101 == 13 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
  // rcvd_evt    other.referential attribute (sor)
  // rcvd_evt    other.referential attribute (sar)
  // rcvd_evt    other.referential attribute (smr)
  // constant    local existing
assign t121 = 27 - temp1 ;
if ( t121 == 14 )
  LOG::LogSuccess(message:" subtract constant local_existing ( 14 )") ;
else
  LOG::LogFailure(message:" subtract constant local_existing ( 14 )") ;
end if;
 
  // constant    rcvd_evt
assign t126 = 27 - rcvd_evt.treal2 ;
LOG::LogReal(r: t126 , message:" subtract constant rcvd_evt ( 15.8 )") ;
 
  // constant    constant
assign t131 = 14.3 - 5 ;
LOG::LogReal(r: t131 , message:" subtract constant constant ( 9.3 )") ;
 
  // constant    self.attribute
assign t136 = 14.3 - self.r ;
LOG::LogReal(r: t136 , message:" subtract constant self.attribute ( 11.16 )") ;
 
  // constant    self.referential attribute
assign t137 = 27 - self.etob_id ;
if ( t137 == 25 )
  LOG::LogSuccess(message:" subtract constant self.referential_attribute ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant self.referential_attribute ( 25 )") ;
end if;
 
  // constant    other.attribute (saf)
assign t141 = 27 - saf1.etob_id ;
if ( t141 == 25 )
  LOG::LogSuccess(message:" subtract constant other.attribute(saf) ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant other.attribute(saf) ( 25 )") ;
end if;
 
  // constant    other.attribute (smf)
  // constant    other.attribute (sor)
  // constant    other.attribute (sar)
  // constant    other.attribute (smr)
  // constant    other.referential attribute (saf)
assign t161 = 27 - saf1.etoc_id ;
if ( t161 == 23 )
  LOG::LogSuccess(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
else
  LOG::LogFailure(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
end if;
 
  // constant    other.referential attribute (smf)
  // constant    other.referential attribute (sor)
  // constant    other.referential attribute (sar)
  // constant    other.referential attribute (smr)
  // self.attribute    local existing
assign t181 = self.i - temp1 ;
if ( t181 == -3 )
  LOG::LogSuccess(message:" subtract self.attribute local_existing ( -3 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute local_existing ( -3 )") ;
end if;
 
  // self.attribute    rcvd_evt
assign t186 = self.i - rcvd_evt.treal2 ;
LOG::LogReal(r: t186 , message:" subtract self.attribute rcvd_evt ( -1.2 )") ;
 
  // self.attribute    constant
assign t191 = self.r - 2 ;
LOG::LogReal(r: t191 , message:" subtract self.attribute constant ( 1.14 )") ;
 
  // self.attribute    self.attribute
assign t196 = self.i - self.r ;
LOG::LogReal(r: t196 , message:" subtract self.attribute self.attribute ( 6.86 )") ;
 
  // self.attribute    self.referential attribute
assign t197 = self.i - self.etob_id ;
if ( t197 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.i - saf1.etob_id ;
if ( t201 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (smf)
  // self.attribute    other.attribute (sor)
  // self.attribute    other.attribute (sar)
  // self.attribute    other.attribute (smr)
  // self.attribute    other.referential attribute (saf)
assign t221 = self.i - saf1.etoc_id ;
if ( t221 == 6 )
  LOG::LogSuccess(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
  // self.attribute    other.referential attribute (sor)
  // self.attribute    other.referential attribute (sar)
  // self.attribute    other.referential attribute (smr)
  // self.referential attribute    local existing
assign t241 = self.etob_id - temp1 ;
if ( t241 == -11 )
  LOG::LogSuccess(message:" subtract self.referential_attribute local_existing ( -11 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute local_existing ( -11 )") ;
end if;
 
  // self.referential attribute    rcvd_evt
assign t246 = self.etob_id - rcvd_evt.treal2 ;
LOG::LogReal(r: t246 , message:" subtract self.referential_attribute rcvd_evt ( -9.2 )") ;
 
  // self.referential attribute    constant
assign t251 = self.r1r - 2 ;
LOG::LogReal(r: t251 , message:" subtract self.referential_attribute constant ( 0.1718 )") ;
 
  // self.referential attribute    self.attribute
assign t256 = self.r1r - self.r ;
LOG::LogReal(r: t256 , message:" subtract self.referential_attribute self.attribute ( -0.9682 )") ;
 
  // self.referential attribute    self.referential attribute
assign t258 = self.etob_id - self.r1r ;
LOG::LogReal(r: t258 , message:" subtract self.referential_attribute self.referential_attribute ( -0.1718 )") ;
 
  // self.referential attribute    other.attribute (saf)
assign t261 = self.etob_id - saf1.etob_id ;
if ( t261 == 0 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
end if;
 
  // self.referential attribute    other.attribute (smf)
  // self.referential attribute    other.attribute (sor)
  // self.referential attribute    other.attribute (sar)
  // self.referential attribute    other.attribute (smr)
  // self.referential attribute    other.referential attribute (saf)
assign t281 = self.etob_id - saf1.etoc_id ;
if ( t281 == -2 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
end if;
 
  // self.referential attribute    other.referential attribute (smf)
  // self.referential attribute    other.referential attribute (sor)
  // self.referential attribute    other.referential attribute (sar)
  // self.referential attribute    other.referential attribute (smr)
  // other.attribute (saf)    local existing
  // other.attribute (saf)    rcvd_evt
  // other.attribute (saf)    constant
  // other.attribute (saf)    self.attribute
  // other.attribute (saf)    self.referential attribute
  // other.attribute (saf)    other.attribute (saf)
  // other.attribute (saf)    other.attribute (smf)
  // other.attribute (saf)    other.attribute (sor)
  // other.attribute (saf)    other.attribute (sar)
  // other.attribute (saf)    other.attribute (smr)
  // other.attribute (saf)    other.referential attribute (saf)
  // other.attribute (saf)    other.referential attribute (smf)
  // other.attribute (saf)    other.referential attribute (sor)
  // other.attribute (saf)    other.referential attribute (sar)
  // other.attribute (saf)    other.referential attribute (smr)
  // other.attribute (smf)    local existing
  // other.attribute (smf)    rcvd_evt
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    rcvd_evt
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    rcvd_evt
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    rcvd_evt
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
  // other.referential attribute (saf)    rcvd_evt
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    rcvd_evt
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    rcvd_evt
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    rcvd_evt
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    rcvd_evt
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed subtract test") ;

//generate event to commence next test
bridge d = TIM::current_date();
bridge ts = TIM::current_clock();
create event instance evinst of EV1:''Event Instance''(message:"timer event 1.2")  to event_instance;
bridge tim = TIM::timer_start ( microseconds:1000000, event_inst:evinst);
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: d, ts: ts, tim:tim, ev:evinst) to self;

',
	'');
INSERT INTO SM_STATE
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'Testing assign',
	15,
	0);
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("cdc6e879-7296-1184-cfe3-eff922b12e41",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"fd37b204-b5c7-0ea4-ffb9-91ca21babf11");
INSERT INTO SM_AH
	VALUES ("cdc6e879-7296-1184-cfe3-eff922b12e41",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("cdc6e879-7296-1184-cfe3-eff922b12e41",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	1,
	'LOG::LogInfo(message:"Starting assign test") ;
select any event_instance from instances of EV;
// Assign operation

  // boolean
assign t1 = true;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_initial constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( true )") ;
end if;
 
assign t2 = false;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_initial constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( false )") ;
end if;
 
  // integer
assign t3 = 5;
if ( t3 == 5 )
  LOG::LogSuccess(message:"assign local_initial constant ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( 5 )") ;
end if;
 
  // real
assign t4 = 16.98;
LOG::LogInfo( message:"assign local_initial constant ( 16.98 )") ;
 
  // string
assign t5 = "hissy";
if ( t5 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial constant ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( hissy )") ;
end if;

  // boolean
assign t6 = t1;
if ( t6 == true )
  LOG::LogSuccess(message:"assign local_initial local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( true )") ;
end if;
 
assign t7 = t2;
if ( t7 == false )
  LOG::LogSuccess(message:"assign local_initial local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( false )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 5 )
  LOG::LogSuccess(message:"assign local_initial local_existing ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( 5 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_initial local_existing ( 16.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial local_existing ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( hissy )") ;
end if;

// unique_id
assign temp_unique_id = self.u;
assign t11 = temp_unique_id;
if ( t11 == self.u )
  LOG::LogSuccess(message:"assign local_initial local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( self.u )") ;
end if;
 
  // date
bridge temp_date = TIM::create_date(second:30, minute:56, hour:19, day:3, month:1, year:1966);
assign t12 = temp_date;
LOG::LogDate(d:t12, message:"assign local_initial local_existing ( 3/1/1996 19:56:30 )");

  // timestamp
bridge temp_timestamp = TIM::current_clock();
assign t13 = temp_timestamp;
LOG::LogTime(t:t13, message:"assign local_initial local_existing ( )");

  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event")to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t14 = temp_timer;
if ( t14 == temp_timer )
  LOG::LogSuccess(message:"assign local_initial local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t15 = ev_inst1;
LOG::LogInfo( message:"assign local_initial local_existing ( LOG1(timer event) )") ;

  // inst_ref<Object>
select any none from instances of NOI;
assign t16 = none;
if ( t16 == none )
  LOG::LogSuccess(message:"assign local_initial local_existing ( none )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( none )") ;
end if;
 
select any inst from instances of OI;
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_initial local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( inst )") ;
end if;

// This is a special test case to verify that usage of 
// local variables of type inst_ref<Object> generate code
// without any error messages.  See the bp issue 659. 
assign t17b = self;
relate t17 to t17b across R3;
unrelate t17b from t17 across R3;

  // boolean
assign t19 = rcvd_evt.ttrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( true )") ;
end if;
 
assign t20 = rcvd_evt.tfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( false )") ;
end if;
 
  // integer
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( fit )") ;
end if;

  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst<Event>
assign t28 = rcvd_evt.ev;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( LOG1(timer event) )") ;

  // boolean
assign t29 = self.bfalse;
if ( t29 == false )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( false )") ;
end if;
 
assign t30 = self.btrue;
if ( t30 == true )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( true )") ;
end if;
 
  // integer
assign t31 = self.i;
if ( t31 == 10 )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( 10 )") ;
end if;
 
  // real
assign t32 = self.r;
LOG::LogInfo( message:"assign local_initial self.attribute ( 3.14 )") ;
 
  // string
assign t33 = self.s;
if ( t33 == "String" )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( String )") ;
end if;

  // unique_id
assign t34 = self.u;
if ( t34 == self.u )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.u )") ;
end if;
 
  // date
bridge self.d = TIM::create_date(second:31, minute:51, hour:18, day:4, month:4, year:1970);
assign t35 = self.d;
LOG::LogDate(d:t35, message:"assign local_initial self.attribute ( 4/4/1970 18:51:31 )");

  // timestamp
assign t36a = self.t;
LOG::LogTime(t:t36a, message:"assign local_initial self.attribute ( 0 )");
bridge self.t = TIM::current_clock();
assign t36b = self.t;
LOG::LogTime(t:t36b, message:"assign local_initial self.attribute ( current_time )") ;

  // inst_ref<Timer>
create event instance temp_ev of EV1:''Event Instance''(message:"timer event") to event_instance;
assign self.ev = temp_ev;
bridge self.tim = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t37 = self.tim;
if ( t37 == self.tim )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t38 = self.ev;
LOG::LogInfo( message:"assign local_initial self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t39 = self.r1btrue;
if ( t39 == true )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( true )") ;
end if;
 
assign t40 = self.r1bfalse;
if ( t40 == false )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( false )") ;
end if;
 
  // integer
assign t41 = self.etob_id;
if ( t41 == 2 )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t42 = self.r1r;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t43 = self.r1s;
if ( t43 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t44 = self.r1u;
if ( t44 == self.r1u )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t45 = self.r1d;
LOG::LogDate(d:t45, message:"assign local_initial self.referential_attribute ( 8/9/1991 13:07:17 )");

  // timestamp
assign t46 = self.r1t;
LOG::LogTime(t:t46, message:"assign local_initial self.referential_attribute ( 0 )");

  // inst_ref<Timer>
assign t47 = self.r1tim;
if ( t47 == self.r1tim )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t48 = self.r1ev;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( LOG1(timer event) )") ;

select any saf from instances of ETOB;
  // boolean
assign t49 = saf.btrue;
if ( t49 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( true )") ;
end if;
 
assign t50 = saf.bfalse;
if ( t50 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign t51 = saf.etob_id;
if ( t51 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t52 = saf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t53 = saf.s;
if ( t53 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t54 = saf.u;
if ( t54 == saf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t55 = saf.d;
LOG::LogDate(d:t55, message:"assign local_initial other.attribute(saf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t56 = saf.t;
LOG::LogTime(t:t56, message:"assign local_initial other.attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t57 = saf.tim;
if ( t57 == saf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t58 = saf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( LOG1(timer event) )") ;

select many smfs from instances of ETOB;
for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t59 = smf.btrue;
if ( t59 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( true )") ;
end if;
 
assign t60 = smf.bfalse;
if ( t60 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t61 = smf.etob_id;
if ( t61 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t62 = smf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t63 = smf.s;
if ( t63 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t64 = smf.u;
if ( t64 == smf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t65 = smf.d;
LOG::LogDate(d:t65, message:"assign local_initial other.attribute(smf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t66 = smf.t;
LOG::LogTime(t:t66, message:"assign local_initial other.attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t67 = smf.tim;
if ( t67 == smf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign t68 = smf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( LOG1(timer event) )") ;

  end if;
end for;

select one sor related by self->ETOB[R1];
  // boolean
assign t69 = sor.btrue;
if ( t69 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( true )") ;
end if;
 
assign t70 = sor.bfalse;
if ( t70 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( false )") ;
end if;
 
  // integer
assign t71 = sor.etob_id;
if ( t71 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( 2 )") ;
end if;
 
  // real
assign t72 = sor.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( 2.1718 )") ;
 
  // string
assign t73 = sor.s;
if ( t73 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
end if;
  // unique_id
assign t74 = sor.u;
if ( t74 == sor.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
end if;
 
  // date
assign t75 = sor.d;
LOG::LogDate(d:t75, message:"assign local_initial other.attribute(sor) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t76 = sor.t;
LOG::LogTime(t:t76, message:"assign local_initial other.attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t77 = sor.tim;
if ( t77 == sor.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
end if;
 
  // inst<Event>
assign t78 = sor.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( LOG1(timer event) )") ;

select any sar related by self->ETOB[R8];
  // boolean
assign t79 = sar.btrue;
if ( t79 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( true )") ;
end if;
 
assign t80 = sar.bfalse;
if ( t80 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( false )") ;
end if;
 
  // integer
assign t81 = sar.etob_id;
if ( t81 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( 2 )") ;
end if;
 
  // real
assign t82 = sar.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( 2.1718 )") ;
 
  // string
assign t83 = sar.s;
if ( t83 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
end if;
  // unique_id
assign t84 = sar.u;
if ( t84 == sar.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
end if;
 
  // date
assign t85 = sar.d;
LOG::LogDate(d:t85, message:"assign local_initial other.attribute(sar) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t86 = sar.t;
LOG::LogTime(t:t86, message:"assign local_initial other.attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t87 = sar.tim;
if ( t87 == sar.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
end if;
 
  // inst<Event>
assign t88 = sar.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( LOG1(timer event) )") ;

select many smrs related by self->ETOB[R8];
for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t89 = smr.btrue;
if ( t89 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( true )") ;
end if;
 
assign t90 = smr.bfalse;
if ( t90 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( false )") ;
end if;
 
  // integer
assign t91 = smr.etob_id;
if ( t91 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( 2 )") ;
end if;
 
  // real
assign t92 = smr.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( 2.1718 )") ;
 
  // string
assign t93 = smr.s;
if ( t93 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
end if;
  // unique_id
assign t94 = smr.u;
if ( t94 == smr.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
end if;
 
  // date
assign t95 = smr.d;
LOG::LogDate(d:t95, message:"assign local_initial other.attribute(smr) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t96 = smr.t;
LOG::LogTime(t:t96, message:"assign local_initial other.attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t97 = smr.tim;
if ( t97 == smr.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
end if;
 
  // inst<Event>
assign t98 = smr.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t99 = saf.r6btrue;
if ( t99 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
end if;
 
assign t100 = saf.r6bfalse;
if ( t100 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
end if;
 
  // integer
assign t101 = saf.etoc_id;
if ( t101 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
end if;
 
  // real
assign t102 = saf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( 11.311 )") ;
 
  // string
assign t103 = saf.r6s;
if ( t103 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
end if;
  // unique_id
assign t104 = saf.r6u;
if ( t104 == saf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
end if;
 
  // date
assign t105 = saf.r6d;
LOG::LogDate(d:t105, message:"assign local_initial other.referential_attribute(saf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t106 = saf.r6t;
LOG::LogTime(t:t106, message:"assign local_initial other.referential_attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t107 = saf.r6tim;
if ( t107 == saf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
end if;
 
  // inst<Event>
assign t108 = saf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if (smf.etob_id == 2)
  // boolean
assign t119 = smf.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( true )") ;
end if;
 
assign t110 = smf.r6bfalse;
if ( t110 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( false )") ;
end if;
 
  // integer
assign t111 = smf.etoc_id;
if ( t111 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( 4 )") ;
end if;
 
  // real
assign t112 = smf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute ( 11.311 )") ;
 
  // string
assign t113 = smf.r6s;
if ( t113 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
end if;
  // unique_id
assign t114 = smf.r6u;
if ( t114 == smf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
end if;
 
  // date
assign t115 = smf.r6d;
LOG::LogDate(d:t115, message:"assign local_initial other.referential_attribute(smf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t116 = smf.r6t;
LOG::LogTime(t:t116, message:"assign local_initial other.referential_attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t117 = smf.r6tim;
if ( t117 == smf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
end if;
 
  // inst<Event>
assign t118 = smf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smf) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t119 = sor.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
end if;
 
assign t120 = sor.r6bfalse;
if ( t120 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
end if;
 
  // integer
assign t121 = sor.etoc_id;
if ( t121 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
end if;
 
  // real
assign t122 = sor.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( 11.311 )") ;
 
  // string
assign t123 = sor.r6s;
if ( t123 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
end if;
  // unique_id
assign t124 = sor.r6u;
if ( t124 == sor.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
end if;
 
  // date
assign t125 = sor.r6d;
LOG::LogDate(d:t125, message:"assign local_initial other.referential_attribute(sor) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t126 = sor.r6t;
LOG::LogTime(t:t126, message:"assign local_initial other.referential_attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t127 = sor.r6tim;
if ( t127 == sor.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
end if;
 
  // inst<Event>
assign t128 = sor.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( LOG1(timer event) )") ;

  // boolean
assign t129 = sar.r6btrue;
if ( t129 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
end if;
 
assign t130 = sar.r6bfalse;
if ( t130 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
end if;
 
  // integer
assign t131 = sar.etoc_id;
if ( t131 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
end if;
 
  // real
assign t132 = sar.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( 11.311 )") ;
 
  // string
assign t133 = sar.r6s;
if ( t133 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
end if;
  // unique_id
assign t134 = sar.r6u;
if ( t134 == sar.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
end if;
 
  // date
assign t135 = sar.r6d;
LOG::LogDate(d:t135, message:"assign local_initial other.referential_attribute(sar) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t136 = sar.r6t;
LOG::LogTime(t:t136, message:"assign local_initial other.referential_attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t137 = sar.r6tim;
if ( t137 == sar.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
end if;
 
  // inst<Event>
assign t138 = sar.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( LOG1(timer event) )") ;

for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t139 = smr.r6btrue;
if ( t139 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
end if;
 
assign t140 = smr.r6bfalse;
if ( t140 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
end if;
 
  // integer
assign t141 = smr.etoc_id;
if ( t141 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
end if;
 
  // real
assign t142 = smr.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( 11.311 )") ;
 
  // string
assign t143 = smr.r6s;
if ( t143 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
end if;
  // unique_id
assign t144 = smr.r6u;
if ( t144 == smr.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
end if;
 
  // date
assign t145 = smr.r6d;
LOG::LogDate(d:t145, message:"assign local_initial other.referential_attribute(smr) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t146 = smr.r6t;
LOG::LogTime(t:t146, message:"assign local_initial other.referential_attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t147 = smr.r6tim;
if ( t147 == smr.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
end if;
 
  // inst<Event>
assign t148 = smr.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;


  // boolean
assign t1 = false;
if ( t1 == false )
  LOG::LogSuccess(message:"assign local_existing constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( false )") ;
end if;
 
assign t2 = true;
if ( t2 == true )
  LOG::LogSuccess(message:"assign local_existing constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( true )") ;
end if;
 
  // integer
assign t3 = 7;
if ( t3 == 7 )
  LOG::LogSuccess(message:"assign local_existing constant ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( 7 )") ;
end if;
 
  // real
assign t4 = 96.98;
LOG::LogInfo( message:"assign local_existing constant ( 96.98 )") ;
 
  // string
assign t5 = "fussy";
if ( t5 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing constant ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( fussy )") ;
end if;

  // boolean
assign t2 = t7;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( false )") ;
end if;
 
assign t1 = t6;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( true )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 7 )
  LOG::LogSuccess(message:"assign local_existing local_existing ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( 7 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_existing local_existing ( 96.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing local_existing ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( fussy )") ;
end if;

  // unique_id
assign t24 = t11;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( self.u )") ;
end if;
 
  // date
assign t25 = t12;
if ( t25 == temp_date )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_date )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_date )") ;
end if;
 
  // timestamp
assign t26 = t13;
if ( t26 == temp_timestamp )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timestamp )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timestamp )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = t14;
if ( t27 == temp_timer )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t28 = t15;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( LOG1(timer event) )");

  // inst_ref<Object>
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_existing local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( inst )") ;
end if;
 

  // boolean
assign t19 = rcvd_evt.tfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( false )") ;
end if;
 
assign t20 = rcvd_evt.ttrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( true )") ;
end if;
 
  // integer
assign t21 = 0;
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = 0.0;
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = "";
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( fit )") ;
end if;
 
  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // boolean
assign t19 = self.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( true )") ;
end if;
 
assign t20 = self.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( false )") ;
end if;
 
  // integer
assign t21 = self.i;
if ( t21 == 10 )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( 10 )") ;
end if;
 
  // real
assign t22 = self.r;
LOG::LogInfo( message:"assign local_existing self.attribute ( 3.14 )") ;
 
  // string
assign t23 = self.s;
if ( t23 == "String" )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( String )") ;
end if;
  // unique_id
assign t24 = self.u;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.u )") ;
end if;
 
  // date
assign t25 = self.d;
if ( t25 == self.d )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign t26 = self.t;
if ( t26 == self.t )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.tim;
if ( t27 == self.tim )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.ev;
LOG::LogInfo( message:"assign local_existing self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t19 = self.r1bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = self.r1btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( true )") ;
end if;
 
  // integer
assign t21 = self.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t22 = self.r1r;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t23 = self.r1s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t24 = self.r1u;
if ( t24 == self.r1u )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t25 = self.r1d;
if ( t25 == self.r1d )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign t26 = self.r1t;
if ( t26 == self.r1t )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.r1tim;
if ( t27 == self.r1tim )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.r1ev;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( LOG1(timer event) )") ;

// lval = local existing rval = other.attribute (saf)
  // boolean
assign t19 = saf.bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t20 = saf.btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign t21 = saf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t22 = saf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t23 = saf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = saf.u;
if ( t24 == saf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t25 = saf.d;
if ( t25 == saf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign t26 = saf.t;
if ( t26 == saf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = saf.tim;
if ( t27 == saf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t28 = saf.ev;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t19 = smf.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t20 = smf.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t21 = smf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t22 = smf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t23 = smf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = smf.u;
if ( t24 == smf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t25 = smf.d;
if ( t25 == smf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign t26 = smf.t;
if ( t26 == smf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = smf.tim;
if ( t27 == smf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
end if;
 
  end if;
end for;

//generate event to continue test
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: rcvd_evt.d, ts: rcvd_evt.ts, tim:rcvd_evt.tim, ev:rcvd_evt.ev) to self;

',
	'');
INSERT INTO SM_STATE
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'Additional assign tests',
	17,
	0);
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("4e680752-57da-475b-d8c4-11963be191ba",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"3e74eccc-6a4b-90a3-3c10-d25145a28ee8");
INSERT INTO SM_AH
	VALUES ("4e680752-57da-475b-d8c4-11963be191ba",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("4e680752-57da-475b-d8c4-11963be191ba",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	1,
	'select any event_instance from instances of EV;
  // boolean
assign self.btrue = false;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( false )") ;
end if;
 
assign self.btrue = true;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( true )") ;
end if;
 
  // integer
assign self.i = -17;
if ( self.i == -17 )
  LOG::LogSuccess(message:"assign self.attribute constant ( -17 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( -17 )") ;
end if;
 
assign self.i = 15;
if ( self.i == 15 )
  LOG::LogSuccess(message:"assign self.attribute constant ( 15 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( 15 )") ;
end if;

  // real
assign self.r = 387.32;
if ( ((self.r - 387.32 ) < .1) OR ((387.32 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute constant ( 387.21 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant (387.21 )") ;
end if;

  // string
assign self.s = "test 1029";
if ( self.s == "test 1029" )
  LOG::LogSuccess(message:"assign self.attribute constant ( test 1029 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( test 1029 )") ;
end if;

  // boolean
assign t20 = false;
assign self.btrue = t20;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( false )") ;
end if;

assign t19 = true; 
assign self.btrue = t19;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( true )") ;
end if;
 
  // integer
assign t21 = 2;
assign self.i = t21;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( 2 )") ;
end if;
 
  // real
assign t22 = 2.1718;
assign self.r = t22;
if ( ((self.r - 2.1718) < .1) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 real )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 real )") ;
end if;

  // string
assign t23 = "etob1 string";
assign self.s = t23;
if ( self.s == "etob1 string" )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 string )") ;
end if;

  // unique_id
assign save_u = self.u;
assign t24 = rcvd_evt.u;
assign self.u = t24;
if ( self.u == rcvd_evt.u )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
assign self.d = t25;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
assign self.t = t26;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event") to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign self.tim = temp_timer;
if ( self.tim == temp_timer )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign self.ev = ev_inst1;
LOG::LogInfo(message:"assign self.attribute local_existing ( LOG1(timer event) )");

  // boolean
assign self.btrue = rcvd_evt.tfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( false )") ;
end if;
 
assign self.btrue = rcvd_evt.ttrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( true )") ;
end if;
 
  // integer
assign self.i = rcvd_evt.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11 )") ;
end if;
 
  // real
assign self.r = rcvd_evt.r;
if ( ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
assign self.r = rcvd_evt.i;
if ( self.r == 11.0 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign self.s = rcvd_evt.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( fit )") ; 
end if; 
 
  // unique_id   
assign self.u = rcvd_evt.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( save_u )") ;
end if;
 
  // date
assign self.d = rcvd_evt.d;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp 
assign self.t = rcvd_evt.ts;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = rcvd_evt.tim;
if ( self.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = rcvd_evt.ev;
LOG::LogInfo(message:"assign self.attribute rcvd_evt ( LOG1(timer event) )") ; 
 

  // boolean
assign self.btrue = self.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( false )") ;
end if;
 
assign self.btrue = true;
assign self.bfalse = self.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( true )") ;
end if;
 
assign self.bfalse = false;

  // integer
assign self.i = self.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( 11 )") ;
end if;
 
  // real
assign self.r = self.r;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r )") ; 
end if; 
 
assign self.r = self.i;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r i)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r i)") ; 
end if; 
 
  // string
assign self.s = self.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( fit )") ; 
end if; 
 
  // unique_id
assign self.u = self.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( save_u )") ;
end if;
 
  // date
assign self.d = self.d;
if ( self.d == self.d )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign self.t = self.t;
if ( self.t == self.t )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.tim;
if ( self.tim == self.tim )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.ev;
LOG::LogInfo( message:"assign self.attribute self.attribute ( LOG1(timer event) )") ; 

  // boolean
assign self.btrue = self.r1bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
assign self.btrue = self.r1btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
  // integer
assign self.i = self.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign self.r = self.r1r;
if ( (( self.r - 2.1718) < .1 ) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
assign self.r = self.etob_id;
if ( (( self.r - 2.0) < .1 ) OR ((2.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
  // string
assign self.s = self.r1s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute self.referential attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.referential attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = self.r1u;
if ( self.u == self.r1u )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign self.d = self.r1d;
if ( self.d == self.r1d )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign self.t = self.r1t;
if ( self.t == self.r1t )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.r1tim;
if ( self.tim == self.r1tim )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.r1ev;
LOG::LogInfo(message:"assign self.attribute self.referential attribute ( LOG1(timer event) )") ; 


  // boolean
select any saf from instances of ETOB;
assign self.btrue = saf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign self.btrue = saf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign self.i = saf.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign self.r = saf.r;
if (  ((self.r -2.1718) < .1) OR (( 2.1718 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
end if;
 
assign self.r = saf.etob_id;
if (  ((self.r -2.0) < .1) OR (( 2.0 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.etob_id; )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) (assign self.r = saf.etob_id; )") ;
end if;
 
  // string
assign self.s = saf.s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute saf.attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute saf.attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = saf.u;
if ( self.u == saf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign self.d = saf.d;
if ( self.d == saf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign self.t = saf.t;
if ( self.t == saf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = saf.tim;
if ( self.tim == saf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = saf.ev;
LOG::LogInfo(message:"assign self.attribute saf.attribute ( LOG1(timer event) )") ; 

  // boolean
select many smfs from instances of ETOB;
for each smf in smfs
assign self.btrue = smf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign self.btrue = smf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign self.i = smf.etob_id;
if ( self.i == smf.etob_id )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign self.r = smf.r;
if ( ((self.r - smf.r ) < .1) OR ((smf.r - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
end if;
 
assign self.r = smf.etob_id;
if ( ((self.r - smf.etob_id ) < .1) OR ((smf.etob_id - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) (assign self.r = smf.etob_id )") ;
end if;
 
  // string
assign self.s = smf.s; 
if ( self.s == smf.s ) 
  LOG::LogSuccess(message:"assign self.attribute smf.attribute  etob1 string") ;
else 
  LOG::LogFailure(message:"assign self.attribute smf.attribute ( etob1 string)") ; 
end if; 
  // unique_id
assign self.u = smf.u;
if ( self.u == smf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign self.d = smf.d;
if ( self.d == smf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign self.t = smf.t;
if ( self.t == smf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = smf.tim;
if ( self.tim == smf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign self.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;

  // boolean
assign saf.btrue = false;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
assign saf.btrue = true;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = true;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = false;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
  // integer
assign saf.etob_id = 435;
if ( saf.etob_id == 435 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 435 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 435 )") ;
end if;
 
  // real
assign saf.r = 12;
if ( saf.r == 12 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 12 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 12 )") ;
end if;
 
assign saf.r = 17.6;
LOG::LogInfo(message:"assign other.attribute(saf) constant ( 17.6 )");
 
  // string
assign saf.s = "test 222";
if ( saf.s == "test 222" )
  LOG::LogSuccess(message:"assign other.attribute constant ( test 222 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute constant ( test 222 )") ; 
end if;

  // boolean
assign temp10 = true;
assign temp11 = false;
assign saf.btrue = temp11;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
assign saf.btrue = temp10;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp10;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp11;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
  // integer
assign temp12 = 31;
assign saf.etob_id = temp12;
if ( saf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( 31 )") ;
end if;
 
  // real
assign temp13 = 9.874;
assign saf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 31.0 )") ;
 
assign saf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 9.874 )") ;
 
  // string
assign temp14 = "test 333";
assign saf.s = temp14;
if ( saf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute local_existing ( test 333 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute local_existing ( test 333 )") ; 
end if;

  // date
assign saf.d = t25;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = t26;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = temp_timer;
if ( saf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign saf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute local_existing ( LOG1(timer event) )") to event_instance; 
  // boolean
assign saf.btrue = rcvd_evt.tfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign saf.btrue = rcvd_evt.ttrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign saf.etob_id = rcvd_evt.i;
if ( saf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign saf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(saf) rcvd_evt ( 12.34 )") ;
 
assign saf.r = rcvd_evt.i;
if ( saf.r == 11.0 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign saf.s = rcvd_evt.s;
if ( saf.s == "fit" )
  LOG::LogSuccess(message:"assign saf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign saf.attribute rcvd_evt ( fit )") ;
end if;
 
  // date
assign saf.d = rcvd_evt.d;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = rcvd_evt.ts;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = rcvd_evt.tim;
if ( saf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign saf.btrue = self.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = self.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign saf.bfalse = false;

  // integer
assign saf.etob_id = self.i;
if ( saf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
end if;
 
  // real
assign saf.r = self.r;
LOG::LogInfo(message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
assign saf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
  // string
assign saf.s = self.s;
if ( saf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.attribute ( etob2 string )") ;
end if;

  // date
assign saf.d = self.d;
if ( saf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign saf.t = self.t;
if ( saf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.tim;
if ( saf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = self.r1bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign saf.btrue = self.r1btrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1bfalse;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
  // integer
assign saf.etob_id = self.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign saf.r = self.r1r;
LOG::LogInfo(message:"assign other.attribute(saf) self.referential_attribute ( 2.1718 )") ;
 
assign saf.r = self.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) self.referential_attribute ( 2.0 )") ;
 
  // string
assign saf.s = self.r1s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = self.r1d;
if ( saf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign saf.t = self.r1t;
if ( saf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.r1tim;
if ( saf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.referential attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = saf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign saf.bfalse = saf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
assign saf.bfalse = false; 
 
  // integer
assign saf.etob_id = saf.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign saf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
assign saf.r = saf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = saf.s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = saf.d;
if ( saf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign saf.t = saf.t;
if ( saf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = saf.tim;
if ( saf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute saf.attribute ( LOG1(timer event)") to event_instance; 

  // boolean
for each smf in smfs
assign saf.btrue = smf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = smf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign saf.bfalse = false;
 
  // integer
assign saf.etob_id = smf.etob_id;
if ( saf.etob_id == smf.etob_id )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign saf.r = smf.r;
LOG::LogInfo(message:"assign other.attribute(saf) other.attribute(smf) ( smf.r )") ;
 
assign saf.r = smf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
 
  // string
assign saf.s = smf.s;
if ( saf.s == smf.s )
  LOG::LogSuccess(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = smf.d;
if ( saf.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign saf.t = smf.t;
if ( saf.t == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = smf.tim;
if ( saf.tim == smf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;


for each smf in smfs
  // boolean
assign smf.btrue = false;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
assign smf.btrue = true;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = true;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = false;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
  // integer
assign smf.etob_id = 29;
if ( smf.etob_id == 29 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 29 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 29 )") ;
end if;
 
  // real
assign smf.r = 12;
if ( smf.r == 12.0 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 12.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 12.0 )") ;
end if;
 
assign smf.r = 17.5;
if ( smf.r == 17.5 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 17.5 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 17.5 )") ;
end if;
 
  // string
assign smf.s = "test 444";
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 444 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 444 )") ;
end if;


  // boolean
assign smf.btrue = temp11;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
assign smf.btrue = temp10;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp10;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp11;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
  // integer
assign smf.etob_id = temp12;
if ( smf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( 31 )") ;
end if;
 
  // real
assign smf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 31.0 )") ;
 
assign smf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 9.874 )") ;
 
  // string
assign smf.s = temp14;
if ( smf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 333 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 333 )") ;
end if;

  // date
assign smf.d = t25;
if ( rcvd_evt.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = t26;
if ( rcvd_evt.ts == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = temp_timer;
if ( smf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign smf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute(smf) local_existing ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = rcvd_evt.tfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
end if;
 
assign smf.btrue = rcvd_evt.ttrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign smf.etob_id = rcvd_evt.i;
if ( smf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign smf.r = rcvd_evt.i;
LOG::LogInfo(message:"assign other.attribute(smf) rcvd_evt ( 11.0 )") ;
 
assign smf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(smf) rcvd_evt ( 12.34 )") ;
 
  // string
assign smf.s = rcvd_evt.s;
if ( smf.s == "fit" )
  LOG::LogSuccess(message:"assign smf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign smf.attribute rcvd_evt ( fit )") ;
end if;

  // date
assign smf.d = rcvd_evt.d;
if ( smf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = rcvd_evt.ts;
if ( smf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = rcvd_evt.tim;
if ( smf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = self.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( false )") ;
end if;
 
assign smf.btrue = self.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.i;
if ( smf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
end if;
 
  // real
assign smf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
assign smf.r = self.r;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
  // string
assign smf.s = self.s;
if ( smf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.attribute ( etob2 string )") ;
end if;
 
  // date
assign smf.d = self.d;
if ( smf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign smf.t = self.t;
if ( smf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.tim;
if ( smf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign smf.btrue = self.r1bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
end if;
 
assign smf.btrue = self.r1btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign smf.r = self.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) self.referential_attribute ( 2.0 )") ;
 
assign smf.r = self.r1r;
LOG::LogInfo( message:"assign other.attribute(smf) self.referential_attribute ( 2.1718 )") ;
 
  // string
assign smf.s = self.r1s;
if ( smf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
end if;
 
  // date
assign smf.d = self.r1d;
if ( smf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign smf.t = self.r1t;
if ( smf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.r1tim;
if ( smf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.referentialattribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = saf.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign smf.btrue = saf.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign smf.etob_id = saf.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign smf.r = saf.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
assign smf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = "test 444";
assign smf.s = saf.s;
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign smf.attribute saf.attribute ( test 444 )") ;
else
  LOG::LogFailure(message:"assign smf.attribute saf.attribute ( test 444 )") ;
end if;
 
  // date
assign smf.d = saf.d;
if ( smf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign smf.t = saf.t;
if ( smf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = saf.tim;
if ( smf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute saf.attribute ( LOG1(timer event) )") to event_instance; 

end for;

LOG::LogInfo(message:"Completed assign test") ;
 
//generate event to commence next test
generate ET16:''Start and test''(tfalse:false, ttrue: true) to self;

',
	'');
INSERT INTO SM_NSTXN
	VALUES ("2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("34a5e6e0-847a-50f3-ef23-f85efff5bdcf",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8");
INSERT INTO SM_AH
	VALUES ("34a5e6e0-847a-50f3-ef23-f85efff5bdcf",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("34a5e6e0-847a-50f3-ef23-f85efff5bdcf",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"c22abf22-ddf4-6652-febb-47c93b9980a1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("3aee7789-2566-d5ea-0a55-3334b0129fef",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"c22abf22-ddf4-6652-febb-47c93b9980a1",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("cf95098f-4252-ba65-3456-c9b4a1343e0f",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"3aee7789-2566-d5ea-0a55-3334b0129fef");
INSERT INTO SM_AH
	VALUES ("cf95098f-4252-ba65-3456-c9b4a1343e0f",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("cf95098f-4252-ba65-3456-c9b4a1343e0f",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("3aee7789-2566-d5ea-0a55-3334b0129fef",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("9fa007f1-541d-0bc4-3c0f-4aa0d489a4a2",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9");
INSERT INTO SM_AH
	VALUES ("9fa007f1-541d-0bc4-3c0f-4aa0d489a4a2",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("9fa007f1-541d-0bc4-3c0f-4aa0d489a4a2",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("7ff18bc9-dd83-a426-7399-3138989126a6",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("cdd13c86-54db-7f68-6857-5ca99f29f6ba",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"7ff18bc9-dd83-a426-7399-3138989126a6");
INSERT INTO SM_AH
	VALUES ("cdd13c86-54db-7f68-6857-5ca99f29f6ba",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("cdd13c86-54db-7f68-6857-5ca99f29f6ba",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("7ff18bc9-dd83-a426-7399-3138989126a6",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("7985e41c-606c-12dd-f296-171a2171df48",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("ff6f1b48-36d8-488e-f7ea-8a35c8743cbe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"7985e41c-606c-12dd-f296-171a2171df48");
INSERT INTO SM_AH
	VALUES ("ff6f1b48-36d8-488e-f7ea-8a35c8743cbe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("ff6f1b48-36d8-488e-f7ea-8a35c8743cbe",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("7985e41c-606c-12dd-f296-171a2171df48",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("784504ea-ab07-1eac-c5e9-37e4a4b84356",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9");
INSERT INTO SM_AH
	VALUES ("784504ea-ab07-1eac-c5e9-37e4a4b84356",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("784504ea-ab07-1eac-c5e9-37e4a4b84356",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("262cf679-02e3-a7ce-b418-7f8e0211e719",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c");
INSERT INTO SM_AH
	VALUES ("262cf679-02e3-a7ce-b418-7f8e0211e719",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("262cf679-02e3-a7ce-b418-7f8e0211e719",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("6454a5de-2886-d6c1-fb18-beb471f43a49",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("7d77c1bc-3502-17f9-db93-6a04522cbc13",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"6454a5de-2886-d6c1-fb18-beb471f43a49");
INSERT INTO SM_AH
	VALUES ("7d77c1bc-3502-17f9-db93-6a04522cbc13",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("7d77c1bc-3502-17f9-db93-6a04522cbc13",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("6454a5de-2886-d6c1-fb18-beb471f43a49",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("8d3d1fba-de33-a5f4-13c7-ca1fbe6e5091",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f");
INSERT INTO SM_AH
	VALUES ("8d3d1fba-de33-a5f4-13c7-ca1fbe6e5091",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("8d3d1fba-de33-a5f4-13c7-ca1fbe6e5091",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("0d33209d-819b-d9d4-c071-879715aa4ad5",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa");
INSERT INTO SM_AH
	VALUES ("0d33209d-819b-d9d4-c071-879715aa4ad5",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("0d33209d-819b-d9d4-c071-879715aa4ad5",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"364da495-bb86-2167-9bb5-cfd1580e2c98",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("074f9794-c854-36f8-7fbe-953d45cd09da",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9");
INSERT INTO SM_AH
	VALUES ("074f9794-c854-36f8-7fbe-953d45cd09da",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("074f9794-c854-36f8-7fbe-953d45cd09da",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("ddc29b70-eecb-11e9-eb31-a98dd7dfef2d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc");
INSERT INTO SM_AH
	VALUES ("ddc29b70-eecb-11e9-eb31-a98dd7dfef2d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("ddc29b70-eecb-11e9-eb31-a98dd7dfef2d",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"364da495-bb86-2167-9bb5-cfd1580e2c98",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("a29fdda1-5cd2-d79e-2a19-8384dff593e4",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0");
INSERT INTO SM_AH
	VALUES ("a29fdda1-5cd2-d79e-2a19-8384dff593e4",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("a29fdda1-5cd2-d79e-2a19-8384dff593e4",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"d4ff2114-0b19-0230-b090-1a1b336e6257",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"d4ff2114-0b19-0230-b090-1a1b336e6257",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("9a4d225a-f77a-10c1-490a-4b9ecd091fb6",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c");
INSERT INTO SM_AH
	VALUES ("9a4d225a-f77a-10c1-490a-4b9ecd091fb6",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("9a4d225a-f77a-10c1-490a-4b9ecd091fb6",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("42a487c0-edd1-525b-10fc-9c9c8d5d5303",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed");
INSERT INTO SM_AH
	VALUES ("42a487c0-edd1-525b-10fc-9c9c8d5d5303",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("42a487c0-edd1-525b-10fc-9c9c8d5d5303",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("c5317a29-9458-8cab-1c80-699f0dbfdf45",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a");
INSERT INTO SM_AH
	VALUES ("c5317a29-9458-8cab-1c80-699f0dbfdf45",
	"551cfba7-b97a-f4e7-d936-b9948abbef39");
INSERT INTO SM_ACT
	VALUES ("c5317a29-9458-8cab-1c80-699f0dbfdf45",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	"70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("9923bb9b-7a59-1fda-220c-56aea9e1632d",
	8,
	"551cfba7-b97a-f4e7-d936-b9948abbef39",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("366a0ce0-282c-e1ba-45e2-65733eb43f12",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"89c3ffc3-5311-a448-3694-9f1d87d71a35",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2');
INSERT INTO GD_SHP
	VALUES ("366a0ce0-282c-e1ba-45e2-65733eb43f12");
INSERT INTO GD_NCS
	VALUES ("366a0ce0-282c-e1ba-45e2-65733eb43f12");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"366a0ce0-282c-e1ba-45e2-65733eb43f12");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1360.000000,
	"366a0ce0-282c-e1ba-45e2-65733eb43f12",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("366a0ce0-282c-e1ba-45e2-65733eb43f12",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("11df4de2-694f-8659-ed9a-17314671f1f2",
	752.000000,
	1408.000000,
	"366a0ce0-282c-e1ba-45e2-65733eb43f12");
INSERT INTO DIM_CON
	VALUES ("f4cf9676-627f-377f-f54c-1745ba69153b",
	784.000000,
	1360.000000,
	"366a0ce0-282c-e1ba-45e2-65733eb43f12");
INSERT INTO DIM_CON
	VALUES ("6ed7c821-e37f-c9fa-abc7-b33dc4557975",
	928.000000,
	1456.000000,
	"366a0ce0-282c-e1ba-45e2-65733eb43f12");
INSERT INTO GD_GE
	VALUES ("f4a16760-94d3-04b9-ca66-42b4cb21fe88",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations');
INSERT INTO GD_SHP
	VALUES ("f4a16760-94d3-04b9-ca66-42b4cb21fe88");
INSERT INTO GD_NCS
	VALUES ("f4a16760-94d3-04b9-ca66-42b4cb21fe88");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"f4a16760-94d3-04b9-ca66-42b4cb21fe88");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1520.000000,
	"f4a16760-94d3-04b9-ca66-42b4cb21fe88",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f4a16760-94d3-04b9-ca66-42b4cb21fe88",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("2f9979da-033b-a529-812e-6e0002ece0d7",
	2128.000000,
	1616.000000,
	"f4a16760-94d3-04b9-ca66-42b4cb21fe88");
INSERT INTO DIM_CON
	VALUES ("fbd61b75-4871-c39a-631d-48438e87b5d2",
	1712.000000,
	1568.000000,
	"f4a16760-94d3-04b9-ca66-42b4cb21fe88");
INSERT INTO GD_GE
	VALUES ("904b9cec-200b-6913-e207-79569bad5b01",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"c22abf22-ddf4-6652-febb-47c93b9980a1",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F15 values');
INSERT INTO GD_SHP
	VALUES ("904b9cec-200b-6913-e207-79569bad5b01");
INSERT INTO GD_NCS
	VALUES ("904b9cec-200b-6913-e207-79569bad5b01");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"904b9cec-200b-6913-e207-79569bad5b01");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1696.000000,
	"904b9cec-200b-6913-e207-79569bad5b01",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("904b9cec-200b-6913-e207-79569bad5b01",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("937ce1fe-5b75-9088-8901-6c46f038c406",
	2128.000000,
	1760.000000,
	"904b9cec-200b-6913-e207-79569bad5b01");
INSERT INTO DIM_CON
	VALUES ("db71e127-c79b-5fe3-6aee-9a2a5f29699e",
	2128.000000,
	1792.000000,
	"904b9cec-200b-6913-e207-79569bad5b01");
INSERT INTO GD_GE
	VALUES ("e6f9078a-912c-35c5-fd45-6dbc362e5816",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"5a4780cd-8012-878a-2d72-90231a8f5eaf",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers');
INSERT INTO GD_SHP
	VALUES ("e6f9078a-912c-35c5-fd45-6dbc362e5816");
INSERT INTO GD_NCS
	VALUES ("e6f9078a-912c-35c5-fd45-6dbc362e5816");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"e6f9078a-912c-35c5-fd45-6dbc362e5816");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1872.000000,
	"e6f9078a-912c-35c5-fd45-6dbc362e5816",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e6f9078a-912c-35c5-fd45-6dbc362e5816",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("e0fc8c1f-f76f-696c-cf3c-d12c7be8ce6d",
	2128.000000,
	1920.000000,
	"e6f9078a-912c-35c5-fd45-6dbc362e5816");
INSERT INTO DIM_CON
	VALUES ("7c65538c-0828-0a2e-0bd4-6999a21b3cd3",
	2128.000000,
	1952.000000,
	"e6f9078a-912c-35c5-fd45-6dbc362e5816");
INSERT INTO GD_GE
	VALUES ("73c9d16f-b059-71a8-8812-f6f784c23973",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Shutting Down');
INSERT INTO GD_SHP
	VALUES ("73c9d16f-b059-71a8-8812-f6f784c23973");
INSERT INTO GD_NCS
	VALUES ("73c9d16f-b059-71a8-8812-f6f784c23973");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"73c9d16f-b059-71a8-8812-f6f784c23973");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1536.000000,
	"73c9d16f-b059-71a8-8812-f6f784c23973",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("73c9d16f-b059-71a8-8812-f6f784c23973",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("2a069a98-b98e-877a-8ea1-e523635255b6",
	2592.000000,
	1632.000000,
	"73c9d16f-b059-71a8-8812-f6f784c23973");
INSERT INTO GD_GE
	VALUES ("25cef1f7-e1a8-9f87-ceb1-a75ff79460a4",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators');
INSERT INTO GD_SHP
	VALUES ("25cef1f7-e1a8-9f87-ceb1-a75ff79460a4");
INSERT INTO GD_NCS
	VALUES ("25cef1f7-e1a8-9f87-ceb1-a75ff79460a4");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"25cef1f7-e1a8-9f87-ceb1-a75ff79460a4");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	2016.000000,
	"25cef1f7-e1a8-9f87-ceb1-a75ff79460a4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("25cef1f7-e1a8-9f87-ceb1-a75ff79460a4",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("9e76f15b-c443-9deb-2888-e9e1fdc0eedd",
	2128.000000,
	2048.000000,
	"25cef1f7-e1a8-9f87-ceb1-a75ff79460a4");
INSERT INTO DIM_CON
	VALUES ("3825ddc1-528e-416e-3366-0e947a9d78df",
	2128.000000,
	2080.000000,
	"25cef1f7-e1a8-9f87-ceb1-a75ff79460a4");
INSERT INTO GD_GE
	VALUES ("d152f50f-185a-99d8-8849-1af9bc4d0069",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("d152f50f-185a-99d8-8849-1af9bc4d0069");
INSERT INTO GD_NCS
	VALUES ("d152f50f-185a-99d8-8849-1af9bc4d0069");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"d152f50f-185a-99d8-8849-1af9bc4d0069");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	2016.000000,
	"d152f50f-185a-99d8-8849-1af9bc4d0069",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d152f50f-185a-99d8-8849-1af9bc4d0069",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("6a4cf609-41b8-9293-e37f-d447e0150d16",
	2400.000000,
	2080.000000,
	"d152f50f-185a-99d8-8849-1af9bc4d0069");
INSERT INTO DIM_CON
	VALUES ("0e529b3d-dc6d-9a5b-8e4c-33a6bdbf2115",
	2608.000000,
	2016.000000,
	"d152f50f-185a-99d8-8849-1af9bc4d0069");
INSERT INTO GD_GE
	VALUES ("3f37692d-f5dd-b112-b668-3b6cdbf0f256",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("3f37692d-f5dd-b112-b668-3b6cdbf0f256");
INSERT INTO GD_NCS
	VALUES ("3f37692d-f5dd-b112-b668-3b6cdbf0f256");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"3f37692d-f5dd-b112-b668-3b6cdbf0f256");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1872.000000,
	"3f37692d-f5dd-b112-b668-3b6cdbf0f256",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3f37692d-f5dd-b112-b668-3b6cdbf0f256",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("e4fea4a9-478f-91e1-d779-f5af1e774347",
	2608.000000,
	1968.000000,
	"3f37692d-f5dd-b112-b668-3b6cdbf0f256");
INSERT INTO DIM_CON
	VALUES ("f29b440e-def4-6b32-3a9d-6647a3619d1b",
	2608.000000,
	1872.000000,
	"3f37692d-f5dd-b112-b668-3b6cdbf0f256");
INSERT INTO GD_GE
	VALUES ("c96c191f-3ce5-025f-b828-a506dcd01c53",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("c96c191f-3ce5-025f-b828-a506dcd01c53");
INSERT INTO GD_NCS
	VALUES ("c96c191f-3ce5-025f-b828-a506dcd01c53");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"c96c191f-3ce5-025f-b828-a506dcd01c53");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1712.000000,
	"c96c191f-3ce5-025f-b828-a506dcd01c53",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c96c191f-3ce5-025f-b828-a506dcd01c53",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("35f99c1b-c328-2a1d-143c-6f2fbb899363",
	2608.000000,
	1808.000000,
	"c96c191f-3ce5-025f-b828-a506dcd01c53");
INSERT INTO DIM_CON
	VALUES ("24abe727-4ef9-c199-8d52-5f77bae0f142",
	2592.000000,
	1712.000000,
	"c96c191f-3ce5-025f-b828-a506dcd01c53");
INSERT INTO GD_GE
	VALUES ("96304bca-0ccf-898a-1a86-46acaa628294",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing empty operator');
INSERT INTO GD_SHP
	VALUES ("96304bca-0ccf-898a-1a86-46acaa628294");
INSERT INTO GD_NCS
	VALUES ("96304bca-0ccf-898a-1a86-46acaa628294");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"96304bca-0ccf-898a-1a86-46acaa628294");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1680.000000,
	"96304bca-0ccf-898a-1a86-46acaa628294",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("96304bca-0ccf-898a-1a86-46acaa628294",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("40416284-4f5f-e738-8f49-ba6ab2b6eee4",
	928.000000,
	1776.000000,
	"96304bca-0ccf-898a-1a86-46acaa628294");
INSERT INTO DIM_CON
	VALUES ("26e490a1-1dad-d616-e2c8-1bc16f8e06c1",
	928.000000,
	1680.000000,
	"96304bca-0ccf-898a-1a86-46acaa628294");
INSERT INTO GD_GE
	VALUES ("51ecd3f3-ee05-ae01-618b-66b5897528b4",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"449ece98-5845-8620-2ff4-5a12ab3e1e60",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator');
INSERT INTO GD_SHP
	VALUES ("51ecd3f3-ee05-ae01-618b-66b5897528b4");
INSERT INTO GD_NCS
	VALUES ("51ecd3f3-ee05-ae01-618b-66b5897528b4");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"51ecd3f3-ee05-ae01-618b-66b5897528b4");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1840.000000,
	"51ecd3f3-ee05-ae01-618b-66b5897528b4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("51ecd3f3-ee05-ae01-618b-66b5897528b4",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("5ce08a5a-bc00-0374-aa50-bb8157e7d6fb",
	928.000000,
	1840.000000,
	"51ecd3f3-ee05-ae01-618b-66b5897528b4");
INSERT INTO DIM_CON
	VALUES ("603f54ea-b8b5-c88c-4e46-18475f702500",
	928.000000,
	1936.000000,
	"51ecd3f3-ee05-ae01-618b-66b5897528b4");
INSERT INTO GD_GE
	VALUES ("08c96fb7-697f-2f7d-a558-430120450bd0",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator');
INSERT INTO GD_SHP
	VALUES ("08c96fb7-697f-2f7d-a558-430120450bd0");
INSERT INTO GD_NCS
	VALUES ("08c96fb7-697f-2f7d-a558-430120450bd0");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"08c96fb7-697f-2f7d-a558-430120450bd0");
INSERT INTO DIM_GE
	VALUES (752.000000,
	2016.000000,
	"08c96fb7-697f-2f7d-a558-430120450bd0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("08c96fb7-697f-2f7d-a558-430120450bd0",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("0fcbb0a5-a35d-f170-f62f-4a5088d0fbfc",
	928.000000,
	2016.000000,
	"08c96fb7-697f-2f7d-a558-430120450bd0");
INSERT INTO DIM_CON
	VALUES ("a55ec3d9-49ce-ec36-8ef1-efcb89803261",
	1072.000000,
	2080.000000,
	"08c96fb7-697f-2f7d-a558-430120450bd0");
INSERT INTO GD_GE
	VALUES ("acf81bfa-97d9-1e5f-8e88-38a2aa32621f",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"364da495-bb86-2167-9bb5-cfd1580e2c98",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not operator');
INSERT INTO GD_SHP
	VALUES ("acf81bfa-97d9-1e5f-8e88-38a2aa32621f");
INSERT INTO GD_NCS
	VALUES ("acf81bfa-97d9-1e5f-8e88-38a2aa32621f");
INSERT INTO DIM_ND
	VALUES (320.000000,
	80.000000,
	"acf81bfa-97d9-1e5f-8e88-38a2aa32621f");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1536.000000,
	"acf81bfa-97d9-1e5f-8e88-38a2aa32621f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("acf81bfa-97d9-1e5f-8e88-38a2aa32621f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("eb88c55a-f970-63f8-c1dd-16f50067cff0",
	928.000000,
	1616.000000,
	"acf81bfa-97d9-1e5f-8e88-38a2aa32621f");
INSERT INTO DIM_CON
	VALUES ("02fa9f48-7024-82aa-e147-40d4ad7a0179",
	928.000000,
	1536.000000,
	"acf81bfa-97d9-1e5f-8e88-38a2aa32621f");
INSERT INTO GD_GE
	VALUES ("1c813fef-ffaa-dcb6-40af-35b55206b040",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"d4ff2114-0b19-0230-b090-1a1b336e6257",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator');
INSERT INTO GD_SHP
	VALUES ("1c813fef-ffaa-dcb6-40af-35b55206b040");
INSERT INTO GD_NCS
	VALUES ("1c813fef-ffaa-dcb6-40af-35b55206b040");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"1c813fef-ffaa-dcb6-40af-35b55206b040");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1360.000000,
	"1c813fef-ffaa-dcb6-40af-35b55206b040",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1c813fef-ffaa-dcb6-40af-35b55206b040",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("54d5cb9f-394b-95b5-d92a-224853a43404",
	1280.000000,
	1376.000000,
	"1c813fef-ffaa-dcb6-40af-35b55206b040");
INSERT INTO DIM_CON
	VALUES ("30d3315f-25b0-e820-eb9c-530c0d5a847c",
	1424.000000,
	1456.000000,
	"1c813fef-ffaa-dcb6-40af-35b55206b040");
INSERT INTO GD_GE
	VALUES ("88b5aab2-ba7c-36f6-0af8-bfc814450da7",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing assign');
INSERT INTO GD_SHP
	VALUES ("88b5aab2-ba7c-36f6-0af8-bfc814450da7");
INSERT INTO GD_NCS
	VALUES ("88b5aab2-ba7c-36f6-0af8-bfc814450da7");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"88b5aab2-ba7c-36f6-0af8-bfc814450da7");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1520.000000,
	"88b5aab2-ba7c-36f6-0af8-bfc814450da7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("88b5aab2-ba7c-36f6-0af8-bfc814450da7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("1b86aa26-a7c3-0fd5-2a6b-c45f2103d0ad",
	1424.000000,
	1520.000000,
	"88b5aab2-ba7c-36f6-0af8-bfc814450da7");
INSERT INTO DIM_CON
	VALUES ("6c9f3dec-59d9-8b32-7ef1-fabbe6bdfdbf",
	1456.000000,
	1616.000000,
	"88b5aab2-ba7c-36f6-0af8-bfc814450da7");
INSERT INTO GD_GE
	VALUES ("1d2e8667-c53a-469a-9201-0dba94d21836",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Additional assign tests');
INSERT INTO GD_SHP
	VALUES ("1d2e8667-c53a-469a-9201-0dba94d21836");
INSERT INTO GD_NCS
	VALUES ("1d2e8667-c53a-469a-9201-0dba94d21836");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"1d2e8667-c53a-469a-9201-0dba94d21836");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1680.000000,
	"1d2e8667-c53a-469a-9201-0dba94d21836",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1d2e8667-c53a-469a-9201-0dba94d21836",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("908b80b9-21eb-1cdd-e346-408eaf4ab1ce",
	1456.000000,
	1680.000000,
	"1d2e8667-c53a-469a-9201-0dba94d21836");
INSERT INTO DIM_CON
	VALUES ("1d1fa075-211c-803e-03cf-0ad839472d58",
	1600.000000,
	1728.000000,
	"1d2e8667-c53a-469a-9201-0dba94d21836");
INSERT INTO GD_GE
	VALUES ("3ee5e23c-66b7-a9d3-44f7-3679ff5dcdc2",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations::ET3: Run F15 Values');
INSERT INTO GD_CON
	VALUES ("3ee5e23c-66b7-a9d3-44f7-3679ff5dcdc2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0e29a5f7-5d51-df6f-4478-124e2fa30efa",
	"3ee5e23c-66b7-a9d3-44f7-3679ff5dcdc2",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0e29a5f7-5d51-df6f-4478-124e2fa30efa");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0e29a5f7-5d51-df6f-4478-124e2fa30efa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0e29a5f7-5d51-df6f-4478-124e2fa30efa",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("13a5129d-78b2-7f64-c081-1ab5c197152c",
	"3ee5e23c-66b7-a9d3-44f7-3679ff5dcdc2",
	3,
	16.000000,
	2.000000);
INSERT INTO DIM_ND
	VALUES (204.000000,
	44.000000,
	"13a5129d-78b2-7f64-c081-1ab5c197152c");
INSERT INTO DIM_GE
	VALUES (2176.000000,
	1675.000000,
	"13a5129d-78b2-7f64-c081-1ab5c197152c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("13a5129d-78b2-7f64-c081-1ab5c197152c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("50e9c662-dea7-c3b1-5d10-d7eea5ffbd19",
	"3ee5e23c-66b7-a9d3-44f7-3679ff5dcdc2",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"50e9c662-dea7-c3b1-5d10-d7eea5ffbd19");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"50e9c662-dea7-c3b1-5d10-d7eea5ffbd19",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("50e9c662-dea7-c3b1-5d10-d7eea5ffbd19",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("fc7937bf-7f79-3bb6-b954-6f50ff61515e",
	"3ee5e23c-66b7-a9d3-44f7-3679ff5dcdc2",
	"00000000-0000-0000-0000-000000000000",
	"bfa840d3-19d5-801b-bd06-522d2573b919",
	"6f94457c-8b58-af37-3dc1-a3ee44adade3");
INSERT INTO GD_LS
	VALUES ("aa8bd33b-b50a-43bb-264d-1e5ea3d823b6",
	"3ee5e23c-66b7-a9d3-44f7-3679ff5dcdc2",
	"fc7937bf-7f79-3bb6-b954-6f50ff61515e",
	"6f94457c-8b58-af37-3dc1-a3ee44adade3",
	"eecac180-9415-d32f-d8c0-59f0980c76ec");
INSERT INTO GD_LS
	VALUES ("de9d19e9-53f3-55ce-acc8-1d50deff38c8",
	"3ee5e23c-66b7-a9d3-44f7-3679ff5dcdc2",
	"aa8bd33b-b50a-43bb-264d-1e5ea3d823b6",
	"eecac180-9415-d32f-d8c0-59f0980c76ec",
	"09cf4845-b943-e207-d69e-98cb65d6a84e");
INSERT INTO DIM_WAY
	VALUES ("bfa840d3-19d5-801b-bd06-522d2573b919",
	2128.000000,
	1616.000000,
	"3ee5e23c-66b7-a9d3-44f7-3679ff5dcdc2",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("6f94457c-8b58-af37-3dc1-a3ee44adade3",
	2176.000000,
	1616.000000,
	"3ee5e23c-66b7-a9d3-44f7-3679ff5dcdc2",
	"00000000-0000-0000-0000-000000000000",
	"bfa840d3-19d5-801b-bd06-522d2573b919");
INSERT INTO DIM_WAY
	VALUES ("eecac180-9415-d32f-d8c0-59f0980c76ec",
	2176.000000,
	1760.000000,
	"3ee5e23c-66b7-a9d3-44f7-3679ff5dcdc2",
	"00000000-0000-0000-0000-000000000000",
	"6f94457c-8b58-af37-3dc1-a3ee44adade3");
INSERT INTO DIM_WAY
	VALUES ("09cf4845-b943-e207-d69e-98cb65d6a84e",
	2128.000000,
	1760.000000,
	"3ee5e23c-66b7-a9d3-44f7-3679ff5dcdc2",
	"00000000-0000-0000-0000-000000000000",
	"eecac180-9415-d32f-d8c0-59f0980c76ec");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3ee5e23c-66b7-a9d3-44f7-3679ff5dcdc2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3ee5e23c-66b7-a9d3-44f7-3679ff5dcdc2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("2f9979da-033b-a529-812e-6e0002ece0d7",
	"937ce1fe-5b75-9088-8901-6c46f038c406",
	"3ee5e23c-66b7-a9d3-44f7-3679ff5dcdc2");
INSERT INTO GD_GE
	VALUES ("c591bd46-7618-3fc4-869a-fc9b6c5397a7",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F15 values::ET4: Run F16 Transformers');
INSERT INTO GD_CON
	VALUES ("c591bd46-7618-3fc4-869a-fc9b6c5397a7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1a3ee906-9966-4c86-4b21-2a818328da93",
	"c591bd46-7618-3fc4-869a-fc9b6c5397a7",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1a3ee906-9966-4c86-4b21-2a818328da93");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1a3ee906-9966-4c86-4b21-2a818328da93",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1a3ee906-9966-4c86-4b21-2a818328da93",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e72d2fd4-d62d-c8af-421d-fffb32da5d26",
	"c591bd46-7618-3fc4-869a-fc9b6c5397a7",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (227.000000,
	53.000000,
	"e72d2fd4-d62d-c8af-421d-fffb32da5d26");
INSERT INTO DIM_GE
	VALUES (2160.000000,
	1840.000000,
	"e72d2fd4-d62d-c8af-421d-fffb32da5d26",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e72d2fd4-d62d-c8af-421d-fffb32da5d26",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0dbef121-6369-5ba9-07c4-32f7c85cb149",
	"c591bd46-7618-3fc4-869a-fc9b6c5397a7",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0dbef121-6369-5ba9-07c4-32f7c85cb149");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0dbef121-6369-5ba9-07c4-32f7c85cb149",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0dbef121-6369-5ba9-07c4-32f7c85cb149",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("c5cc36e4-3061-5190-8620-362492a0edab",
	"c591bd46-7618-3fc4-869a-fc9b6c5397a7",
	"00000000-0000-0000-0000-000000000000",
	"f314bd0e-d470-b58b-4858-6737f2d64a88",
	"fedc4586-1ef9-fc9a-1de3-1f7c4095d389");
INSERT INTO GD_LS
	VALUES ("d4c583a2-ec27-7e36-6761-f340201208aa",
	"c591bd46-7618-3fc4-869a-fc9b6c5397a7",
	"c5cc36e4-3061-5190-8620-362492a0edab",
	"fedc4586-1ef9-fc9a-1de3-1f7c4095d389",
	"fd0c6e73-022d-64c4-5674-2e894886c9b4");
INSERT INTO GD_LS
	VALUES ("e8d1fa03-9e10-28e7-b039-b19b2a332ab7",
	"c591bd46-7618-3fc4-869a-fc9b6c5397a7",
	"d4c583a2-ec27-7e36-6761-f340201208aa",
	"fd0c6e73-022d-64c4-5674-2e894886c9b4",
	"dda3901b-d196-ab01-ec2f-edeb8cfdaef6");
INSERT INTO DIM_WAY
	VALUES ("f314bd0e-d470-b58b-4858-6737f2d64a88",
	2128.000000,
	1792.000000,
	"c591bd46-7618-3fc4-869a-fc9b6c5397a7",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("fedc4586-1ef9-fc9a-1de3-1f7c4095d389",
	2176.000000,
	1792.000000,
	"c591bd46-7618-3fc4-869a-fc9b6c5397a7",
	"00000000-0000-0000-0000-000000000000",
	"f314bd0e-d470-b58b-4858-6737f2d64a88");
INSERT INTO DIM_WAY
	VALUES ("fd0c6e73-022d-64c4-5674-2e894886c9b4",
	2176.000000,
	1920.000000,
	"c591bd46-7618-3fc4-869a-fc9b6c5397a7",
	"00000000-0000-0000-0000-000000000000",
	"fedc4586-1ef9-fc9a-1de3-1f7c4095d389");
INSERT INTO DIM_WAY
	VALUES ("dda3901b-d196-ab01-ec2f-edeb8cfdaef6",
	2128.000000,
	1920.000000,
	"c591bd46-7618-3fc4-869a-fc9b6c5397a7",
	"00000000-0000-0000-0000-000000000000",
	"fd0c6e73-022d-64c4-5674-2e894886c9b4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c591bd46-7618-3fc4-869a-fc9b6c5397a7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c591bd46-7618-3fc4-869a-fc9b6c5397a7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("db71e127-c79b-5fe3-6aee-9a2a5f29699e",
	"e0fc8c1f-f76f-696c-cf3c-d12c7be8ce6d",
	"c591bd46-7618-3fc4-869a-fc9b6c5397a7");
INSERT INTO GD_GE
	VALUES ("8a403ad5-5546-2ab2-5f13-742440cc61ff",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers::ET5: Run F17 Timestamp and F18 Date Operators');
INSERT INTO GD_CON
	VALUES ("8a403ad5-5546-2ab2-5f13-742440cc61ff",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6655762c-32b5-b212-04cd-bd5703f1d816",
	"8a403ad5-5546-2ab2-5f13-742440cc61ff",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6655762c-32b5-b212-04cd-bd5703f1d816");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6655762c-32b5-b212-04cd-bd5703f1d816",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6655762c-32b5-b212-04cd-bd5703f1d816",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("284626e7-cf32-4f2a-4cdf-3c68968b4224",
	"8a403ad5-5546-2ab2-5f13-742440cc61ff",
	3,
	22.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (212.000000,
	60.000000,
	"284626e7-cf32-4f2a-4cdf-3c68968b4224");
INSERT INTO DIM_GE
	VALUES (2182.000000,
	1984.000000,
	"284626e7-cf32-4f2a-4cdf-3c68968b4224",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("284626e7-cf32-4f2a-4cdf-3c68968b4224",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("07fabfdb-7dd4-15e6-8d53-87d29e101c23",
	"8a403ad5-5546-2ab2-5f13-742440cc61ff",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"07fabfdb-7dd4-15e6-8d53-87d29e101c23");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"07fabfdb-7dd4-15e6-8d53-87d29e101c23",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("07fabfdb-7dd4-15e6-8d53-87d29e101c23",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2fffe67a-cf40-7a23-ae6b-5f993dfe3266",
	"8a403ad5-5546-2ab2-5f13-742440cc61ff",
	"00000000-0000-0000-0000-000000000000",
	"f19fd55d-a259-a9a1-9010-180f6644ee01",
	"c8362829-2ced-fb7a-51b1-9021b08c13bb");
INSERT INTO GD_LS
	VALUES ("e6ddd43f-c6d8-f73c-4bc7-cd658e53342a",
	"8a403ad5-5546-2ab2-5f13-742440cc61ff",
	"2fffe67a-cf40-7a23-ae6b-5f993dfe3266",
	"c8362829-2ced-fb7a-51b1-9021b08c13bb",
	"c1d6c246-0f7a-3fc2-429d-b2eca3222db3");
INSERT INTO GD_LS
	VALUES ("0797f216-a688-92fa-49a5-28c80ba3efbf",
	"8a403ad5-5546-2ab2-5f13-742440cc61ff",
	"e6ddd43f-c6d8-f73c-4bc7-cd658e53342a",
	"c1d6c246-0f7a-3fc2-429d-b2eca3222db3",
	"a5fe4f57-5091-3dfb-c8c7-58685862c2e1");
INSERT INTO DIM_WAY
	VALUES ("f19fd55d-a259-a9a1-9010-180f6644ee01",
	2128.000000,
	1952.000000,
	"8a403ad5-5546-2ab2-5f13-742440cc61ff",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c8362829-2ced-fb7a-51b1-9021b08c13bb",
	2176.000000,
	1952.000000,
	"8a403ad5-5546-2ab2-5f13-742440cc61ff",
	"00000000-0000-0000-0000-000000000000",
	"f19fd55d-a259-a9a1-9010-180f6644ee01");
INSERT INTO DIM_WAY
	VALUES ("c1d6c246-0f7a-3fc2-429d-b2eca3222db3",
	2176.000000,
	2048.000000,
	"8a403ad5-5546-2ab2-5f13-742440cc61ff",
	"00000000-0000-0000-0000-000000000000",
	"c8362829-2ced-fb7a-51b1-9021b08c13bb");
INSERT INTO DIM_WAY
	VALUES ("a5fe4f57-5091-3dfb-c8c7-58685862c2e1",
	2128.000000,
	2048.000000,
	"8a403ad5-5546-2ab2-5f13-742440cc61ff",
	"00000000-0000-0000-0000-000000000000",
	"c1d6c246-0f7a-3fc2-429d-b2eca3222db3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8a403ad5-5546-2ab2-5f13-742440cc61ff",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8a403ad5-5546-2ab2-5f13-742440cc61ff",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("7c65538c-0828-0a2e-0bd4-6999a21b3cd3",
	"9e76f15b-c443-9deb-2888-e9e1fdc0eedd",
	"8a403ad5-5546-2ab2-5f13-742440cc61ff");
INSERT INTO GD_GE
	VALUES ("5e7ce5a4-aac4-d1a5-efaa-43427aafba6d",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"7ff18bc9-dd83-a426-7399-3138989126a6",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators::ET6: Run F1 and F2 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("5e7ce5a4-aac4-d1a5-efaa-43427aafba6d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7f35b2fd-61b4-834b-0aba-228dfac2fa44",
	"5e7ce5a4-aac4-d1a5-efaa-43427aafba6d",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7f35b2fd-61b4-834b-0aba-228dfac2fa44");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7f35b2fd-61b4-834b-0aba-228dfac2fa44",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7f35b2fd-61b4-834b-0aba-228dfac2fa44",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6f0fa68b-eee6-8f2c-993b-36b2a448a3ee",
	"5e7ce5a4-aac4-d1a5-efaa-43427aafba6d",
	3,
	-62.000000,
	22.000000);
INSERT INTO DIM_ND
	VALUES (186.000000,
	64.000000,
	"6f0fa68b-eee6-8f2c-993b-36b2a448a3ee");
INSERT INTO DIM_GE
	VALUES (2177.000000,
	2077.000000,
	"6f0fa68b-eee6-8f2c-993b-36b2a448a3ee",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6f0fa68b-eee6-8f2c-993b-36b2a448a3ee",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("57a8adb5-38f8-23e4-094d-597a1a86c066",
	"5e7ce5a4-aac4-d1a5-efaa-43427aafba6d",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"57a8adb5-38f8-23e4-094d-597a1a86c066");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"57a8adb5-38f8-23e4-094d-597a1a86c066",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("57a8adb5-38f8-23e4-094d-597a1a86c066",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("037829ed-046f-40c8-3b9f-82a9dbde655a",
	"5e7ce5a4-aac4-d1a5-efaa-43427aafba6d",
	"00000000-0000-0000-0000-000000000000",
	"3cf70ddc-784e-719b-0b75-f7e6aa7e1bd8",
	"b5649f05-a700-ee45-6100-90c1d5854e1c");
INSERT INTO DIM_WAY
	VALUES ("3cf70ddc-784e-719b-0b75-f7e6aa7e1bd8",
	2128.000000,
	2080.000000,
	"5e7ce5a4-aac4-d1a5-efaa-43427aafba6d",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("b5649f05-a700-ee45-6100-90c1d5854e1c",
	2400.000000,
	2080.000000,
	"5e7ce5a4-aac4-d1a5-efaa-43427aafba6d",
	"00000000-0000-0000-0000-000000000000",
	"3cf70ddc-784e-719b-0b75-f7e6aa7e1bd8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5e7ce5a4-aac4-d1a5-efaa-43427aafba6d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5e7ce5a4-aac4-d1a5-efaa-43427aafba6d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("3825ddc1-528e-416e-3366-0e947a9d78df",
	"6a4cf609-41b8-9293-e37f-d447e0150d16",
	"5e7ce5a4-aac4-d1a5-efaa-43427aafba6d");
INSERT INTO GD_GE
	VALUES ("b5215f94-406c-884e-bc73-473e5391a9f9",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"7985e41c-606c-12dd-f296-171a2171df48",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types::ET7: Run F3 through F14 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("b5215f94-406c-884e-bc73-473e5391a9f9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("21e8ae62-2170-256d-4e96-68c3434ccfc3",
	"b5215f94-406c-884e-bc73-473e5391a9f9",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"21e8ae62-2170-256d-4e96-68c3434ccfc3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"21e8ae62-2170-256d-4e96-68c3434ccfc3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("21e8ae62-2170-256d-4e96-68c3434ccfc3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3692c85d-68db-fc12-0cd2-9df3f979a65c",
	"b5215f94-406c-884e-bc73-473e5391a9f9",
	3,
	40.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (247.000000,
	49.000000,
	"3692c85d-68db-fc12-0cd2-9df3f979a65c");
INSERT INTO DIM_GE
	VALUES (2632.000000,
	1975.000000,
	"3692c85d-68db-fc12-0cd2-9df3f979a65c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3692c85d-68db-fc12-0cd2-9df3f979a65c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("477998c9-53c8-3d5d-34b7-d1dbe6fb5832",
	"b5215f94-406c-884e-bc73-473e5391a9f9",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"477998c9-53c8-3d5d-34b7-d1dbe6fb5832");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"477998c9-53c8-3d5d-34b7-d1dbe6fb5832",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("477998c9-53c8-3d5d-34b7-d1dbe6fb5832",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("72d00c64-e6d1-2e3e-3152-f3aba3ebe8dd",
	"b5215f94-406c-884e-bc73-473e5391a9f9",
	"00000000-0000-0000-0000-000000000000",
	"31ce9cb8-c64c-2558-6ce5-d4776ee1867b",
	"23fa03fd-8acd-3d2c-59b0-13aecb8b4de4");
INSERT INTO DIM_WAY
	VALUES ("31ce9cb8-c64c-2558-6ce5-d4776ee1867b",
	2608.000000,
	2016.000000,
	"b5215f94-406c-884e-bc73-473e5391a9f9",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("23fa03fd-8acd-3d2c-59b0-13aecb8b4de4",
	2608.000000,
	1968.000000,
	"b5215f94-406c-884e-bc73-473e5391a9f9",
	"00000000-0000-0000-0000-000000000000",
	"31ce9cb8-c64c-2558-6ce5-d4776ee1867b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b5215f94-406c-884e-bc73-473e5391a9f9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b5215f94-406c-884e-bc73-473e5391a9f9",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("0e529b3d-dc6d-9a5b-8e4c-33a6bdbf2115",
	"e4fea4a9-478f-91e1-d779-f5af1e774347",
	"b5215f94-406c-884e-bc73-473e5391a9f9");
INSERT INTO GD_GE
	VALUES ("a2abdfec-cca4-2cb8-e940-d833771ed054",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types::ET8: Run F15 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("a2abdfec-cca4-2cb8-e940-d833771ed054",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2a5aadd6-2953-dfa5-d758-03ebe20926ef",
	"a2abdfec-cca4-2cb8-e940-d833771ed054",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"2a5aadd6-2953-dfa5-d758-03ebe20926ef");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2a5aadd6-2953-dfa5-d758-03ebe20926ef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2a5aadd6-2953-dfa5-d758-03ebe20926ef",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("897fdaa5-46d0-dc70-9fcd-3de2364f3371",
	"a2abdfec-cca4-2cb8-e940-d833771ed054",
	3,
	34.000000,
	-5.000000);
INSERT INTO DIM_ND
	VALUES (228.000000,
	45.000000,
	"897fdaa5-46d0-dc70-9fcd-3de2364f3371");
INSERT INTO DIM_GE
	VALUES (2626.000000,
	1820.000000,
	"897fdaa5-46d0-dc70-9fcd-3de2364f3371",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("897fdaa5-46d0-dc70-9fcd-3de2364f3371",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7b9fa48b-0300-f94b-3b59-f08b7d962895",
	"a2abdfec-cca4-2cb8-e940-d833771ed054",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7b9fa48b-0300-f94b-3b59-f08b7d962895");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7b9fa48b-0300-f94b-3b59-f08b7d962895",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7b9fa48b-0300-f94b-3b59-f08b7d962895",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2692cf3f-8ff5-12c2-31e8-bbd61c92da82",
	"a2abdfec-cca4-2cb8-e940-d833771ed054",
	"00000000-0000-0000-0000-000000000000",
	"921610d2-f115-c628-c47e-0d624d039844",
	"05199465-70e5-b730-febc-ced01416e8b4");
INSERT INTO DIM_WAY
	VALUES ("921610d2-f115-c628-c47e-0d624d039844",
	2608.000000,
	1872.000000,
	"a2abdfec-cca4-2cb8-e940-d833771ed054",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("05199465-70e5-b730-febc-ced01416e8b4",
	2608.000000,
	1808.000000,
	"a2abdfec-cca4-2cb8-e940-d833771ed054",
	"00000000-0000-0000-0000-000000000000",
	"921610d2-f115-c628-c47e-0d624d039844");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a2abdfec-cca4-2cb8-e940-d833771ed054",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a2abdfec-cca4-2cb8-e940-d833771ed054",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("f29b440e-def4-6b32-3a9d-6647a3619d1b",
	"35f99c1b-c328-2a1d-143c-6f2fbb899363",
	"a2abdfec-cca4-2cb8-e940-d833771ed054");
INSERT INTO GD_GE
	VALUES ("758dd11c-4f78-fa7e-b503-6743e499a736",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types::ET9: Shut Down');
INSERT INTO GD_CON
	VALUES ("758dd11c-4f78-fa7e-b503-6743e499a736",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("321041d4-b02b-b315-c423-8f5c9aec101b",
	"758dd11c-4f78-fa7e-b503-6743e499a736",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"321041d4-b02b-b315-c423-8f5c9aec101b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"321041d4-b02b-b315-c423-8f5c9aec101b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("321041d4-b02b-b315-c423-8f5c9aec101b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a9ed1883-b0a3-6a8a-5fbe-dc112fac51d9",
	"758dd11c-4f78-fa7e-b503-6743e499a736",
	3,
	-5.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (274.000000,
	52.000000,
	"a9ed1883-b0a3-6a8a-5fbe-dc112fac51d9");
INSERT INTO DIM_GE
	VALUES (2571.000000,
	1649.000000,
	"a9ed1883-b0a3-6a8a-5fbe-dc112fac51d9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a9ed1883-b0a3-6a8a-5fbe-dc112fac51d9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("68e81f5d-7063-fe8d-ea01-fdfc68723da3",
	"758dd11c-4f78-fa7e-b503-6743e499a736",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"68e81f5d-7063-fe8d-ea01-fdfc68723da3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"68e81f5d-7063-fe8d-ea01-fdfc68723da3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("68e81f5d-7063-fe8d-ea01-fdfc68723da3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("621138b4-5059-bcff-d7e1-adb1f8f5d900",
	"758dd11c-4f78-fa7e-b503-6743e499a736",
	"00000000-0000-0000-0000-000000000000",
	"b9062cd4-72f3-eac4-4d07-c1f5b65dc12c",
	"285a4d95-27da-20d0-9a91-8946d55dd11b");
INSERT INTO DIM_WAY
	VALUES ("b9062cd4-72f3-eac4-4d07-c1f5b65dc12c",
	2592.000000,
	1712.000000,
	"758dd11c-4f78-fa7e-b503-6743e499a736",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("285a4d95-27da-20d0-9a91-8946d55dd11b",
	2592.000000,
	1632.000000,
	"758dd11c-4f78-fa7e-b503-6743e499a736",
	"00000000-0000-0000-0000-000000000000",
	"b9062cd4-72f3-eac4-4d07-c1f5b65dc12c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"758dd11c-4f78-fa7e-b503-6743e499a736",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("758dd11c-4f78-fa7e-b503-6743e499a736",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("24abe727-4ef9-c199-8d52-5f77bae0f142",
	"2a069a98-b98e-877a-8ea1-e523635255b6",
	"758dd11c-4f78-fa7e-b503-6743e499a736");
INSERT INTO GD_GE
	VALUES ("4ca45e97-4970-8043-e1e3-cdb2bd98a41c",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing empty operator::ET10: Start not_empty test');
INSERT INTO GD_CON
	VALUES ("4ca45e97-4970-8043-e1e3-cdb2bd98a41c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4525cf05-d65d-38d6-221a-f2d1d3f2137f",
	"4ca45e97-4970-8043-e1e3-cdb2bd98a41c",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4525cf05-d65d-38d6-221a-f2d1d3f2137f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4525cf05-d65d-38d6-221a-f2d1d3f2137f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4525cf05-d65d-38d6-221a-f2d1d3f2137f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fc7e0a08-7790-48bd-b946-1a2ed51b6c30",
	"4ca45e97-4970-8043-e1e3-cdb2bd98a41c",
	3,
	-170.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (199.000000,
	37.000000,
	"fc7e0a08-7790-48bd-b946-1a2ed51b6c30");
INSERT INTO DIM_GE
	VALUES (742.000000,
	1794.000000,
	"fc7e0a08-7790-48bd-b946-1a2ed51b6c30",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fc7e0a08-7790-48bd-b946-1a2ed51b6c30",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("21c1803b-1c71-9946-95eb-abc8dc3ef697",
	"4ca45e97-4970-8043-e1e3-cdb2bd98a41c",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"21c1803b-1c71-9946-95eb-abc8dc3ef697");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"21c1803b-1c71-9946-95eb-abc8dc3ef697",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("21c1803b-1c71-9946-95eb-abc8dc3ef697",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("75b92626-f502-c80f-fc52-b1ab7086be1b",
	"4ca45e97-4970-8043-e1e3-cdb2bd98a41c",
	"00000000-0000-0000-0000-000000000000",
	"f723a535-85c9-ef71-24d1-6601b776d566",
	"c2ffaeb7-7710-f537-8004-51b34b84c9a9");
INSERT INTO DIM_WAY
	VALUES ("f723a535-85c9-ef71-24d1-6601b776d566",
	928.000000,
	1776.000000,
	"4ca45e97-4970-8043-e1e3-cdb2bd98a41c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c2ffaeb7-7710-f537-8004-51b34b84c9a9",
	928.000000,
	1840.000000,
	"4ca45e97-4970-8043-e1e3-cdb2bd98a41c",
	"00000000-0000-0000-0000-000000000000",
	"f723a535-85c9-ef71-24d1-6601b776d566");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4ca45e97-4970-8043-e1e3-cdb2bd98a41c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4ca45e97-4970-8043-e1e3-cdb2bd98a41c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("40416284-4f5f-e738-8f49-ba6ab2b6eee4",
	"5ce08a5a-bc00-0374-aa50-bb8157e7d6fb",
	"4ca45e97-4970-8043-e1e3-cdb2bd98a41c");
INSERT INTO GD_GE
	VALUES ("428fafbb-dd14-9280-551d-5aa94cc26d2b",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator::ET11: Start cardinality test');
INSERT INTO GD_CON
	VALUES ("428fafbb-dd14-9280-551d-5aa94cc26d2b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("32b22163-da49-5c01-c6d1-971a9c664fda",
	"428fafbb-dd14-9280-551d-5aa94cc26d2b",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"32b22163-da49-5c01-c6d1-971a9c664fda");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"32b22163-da49-5c01-c6d1-971a9c664fda",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("32b22163-da49-5c01-c6d1-971a9c664fda",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("525cd684-9c80-2dd6-995c-81ca659dc54c",
	"428fafbb-dd14-9280-551d-5aa94cc26d2b",
	3,
	-163.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (169.000000,
	36.000000,
	"525cd684-9c80-2dd6-995c-81ca659dc54c");
INSERT INTO DIM_GE
	VALUES (749.000000,
	1961.000000,
	"525cd684-9c80-2dd6-995c-81ca659dc54c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("525cd684-9c80-2dd6-995c-81ca659dc54c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a1581955-45de-c0a3-94f8-d4e6ee4bf423",
	"428fafbb-dd14-9280-551d-5aa94cc26d2b",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a1581955-45de-c0a3-94f8-d4e6ee4bf423");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a1581955-45de-c0a3-94f8-d4e6ee4bf423",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a1581955-45de-c0a3-94f8-d4e6ee4bf423",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("34e153e3-bbe3-4044-fc14-5df3c4975d76",
	"428fafbb-dd14-9280-551d-5aa94cc26d2b",
	"00000000-0000-0000-0000-000000000000",
	"b0fff850-9662-3d04-7681-bbf1e9ab3914",
	"2ef38bda-1899-7d43-662f-5100a826a9b3");
INSERT INTO DIM_WAY
	VALUES ("b0fff850-9662-3d04-7681-bbf1e9ab3914",
	928.000000,
	1936.000000,
	"428fafbb-dd14-9280-551d-5aa94cc26d2b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("2ef38bda-1899-7d43-662f-5100a826a9b3",
	928.000000,
	2016.000000,
	"428fafbb-dd14-9280-551d-5aa94cc26d2b",
	"00000000-0000-0000-0000-000000000000",
	"b0fff850-9662-3d04-7681-bbf1e9ab3914");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"428fafbb-dd14-9280-551d-5aa94cc26d2b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("428fafbb-dd14-9280-551d-5aa94cc26d2b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("603f54ea-b8b5-c88c-4e46-18475f702500",
	"0fcbb0a5-a35d-f170-f62f-4a5088d0fbfc",
	"428fafbb-dd14-9280-551d-5aa94cc26d2b");
INSERT INTO GD_GE
	VALUES ("cd1d3f55-e8a1-d14f-9ef6-1ecb62a58ba5",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET1: Start Expression Test');
INSERT INTO GD_CON
	VALUES ("cd1d3f55-e8a1-d14f-9ef6-1ecb62a58ba5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e48e4ca0-39f3-e1f8-af2b-ed0610a4d97d",
	"cd1d3f55-e8a1-d14f-9ef6-1ecb62a58ba5",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e48e4ca0-39f3-e1f8-af2b-ed0610a4d97d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e48e4ca0-39f3-e1f8-af2b-ed0610a4d97d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e48e4ca0-39f3-e1f8-af2b-ed0610a4d97d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("59284c4b-5324-c90e-af91-2083508c71cc",
	"cd1d3f55-e8a1-d14f-9ef6-1ecb62a58ba5",
	3,
	-38.000000,
	-24.000000);
INSERT INTO DIM_ND
	VALUES (161.000000,
	35.000000,
	"59284c4b-5324-c90e-af91-2083508c71cc");
INSERT INTO DIM_GE
	VALUES (681.000000,
	1279.000000,
	"59284c4b-5324-c90e-af91-2083508c71cc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("59284c4b-5324-c90e-af91-2083508c71cc",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f7e163e0-890c-c0b9-1882-8b4aedfce1e8",
	"cd1d3f55-e8a1-d14f-9ef6-1ecb62a58ba5",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f7e163e0-890c-c0b9-1882-8b4aedfce1e8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f7e163e0-890c-c0b9-1882-8b4aedfce1e8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f7e163e0-890c-c0b9-1882-8b4aedfce1e8",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("03a5ff71-8e86-ebc6-a07b-6808a9948e58",
	"cd1d3f55-e8a1-d14f-9ef6-1ecb62a58ba5",
	"00000000-0000-0000-0000-000000000000",
	"428fdb37-1f88-d23d-9694-2201d967abe7",
	"c9782c3b-cde4-2027-5088-368cd5662f72");
INSERT INTO GD_LS
	VALUES ("cd6e951b-6811-fb4d-f080-77d6c16194b2",
	"cd1d3f55-e8a1-d14f-9ef6-1ecb62a58ba5",
	"03a5ff71-8e86-ebc6-a07b-6808a9948e58",
	"c9782c3b-cde4-2027-5088-368cd5662f72",
	"ae6f814a-25fd-2313-d399-37a47d7d795b");
INSERT INTO GD_LS
	VALUES ("687620ee-7a7a-4f84-d810-78dcf46c1bac",
	"cd1d3f55-e8a1-d14f-9ef6-1ecb62a58ba5",
	"cd6e951b-6811-fb4d-f080-77d6c16194b2",
	"ae6f814a-25fd-2313-d399-37a47d7d795b",
	"268ffeb4-9b3f-0976-0fa4-530b0a971df6");
INSERT INTO GD_LS
	VALUES ("f1b7b721-d260-c174-aaca-10e33880f02a",
	"cd1d3f55-e8a1-d14f-9ef6-1ecb62a58ba5",
	"687620ee-7a7a-4f84-d810-78dcf46c1bac",
	"268ffeb4-9b3f-0976-0fa4-530b0a971df6",
	"62a36a86-eeb7-0498-ed66-beb95adf2b59");
INSERT INTO DIM_WAY
	VALUES ("428fdb37-1f88-d23d-9694-2201d967abe7",
	752.000000,
	1408.000000,
	"cd1d3f55-e8a1-d14f-9ef6-1ecb62a58ba5",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c9782c3b-cde4-2027-5088-368cd5662f72",
	624.000000,
	1408.000000,
	"cd1d3f55-e8a1-d14f-9ef6-1ecb62a58ba5",
	"00000000-0000-0000-0000-000000000000",
	"428fdb37-1f88-d23d-9694-2201d967abe7");
INSERT INTO DIM_WAY
	VALUES ("ae6f814a-25fd-2313-d399-37a47d7d795b",
	624.000000,
	1328.000000,
	"cd1d3f55-e8a1-d14f-9ef6-1ecb62a58ba5",
	"00000000-0000-0000-0000-000000000000",
	"c9782c3b-cde4-2027-5088-368cd5662f72");
INSERT INTO DIM_WAY
	VALUES ("268ffeb4-9b3f-0976-0fa4-530b0a971df6",
	784.000000,
	1328.000000,
	"cd1d3f55-e8a1-d14f-9ef6-1ecb62a58ba5",
	"00000000-0000-0000-0000-000000000000",
	"ae6f814a-25fd-2313-d399-37a47d7d795b");
INSERT INTO DIM_WAY
	VALUES ("62a36a86-eeb7-0498-ed66-beb95adf2b59",
	784.000000,
	1360.000000,
	"cd1d3f55-e8a1-d14f-9ef6-1ecb62a58ba5",
	"00000000-0000-0000-0000-000000000000",
	"268ffeb4-9b3f-0976-0fa4-530b0a971df6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cd1d3f55-e8a1-d14f-9ef6-1ecb62a58ba5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cd1d3f55-e8a1-d14f-9ef6-1ecb62a58ba5",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("11df4de2-694f-8659-ed9a-17314671f1f2",
	"f4cf9676-627f-377f-f54c-1745ba69153b",
	"cd1d3f55-e8a1-d14f-9ef6-1ecb62a58ba5");
INSERT INTO GD_GE
	VALUES ("45dfedde-ac4f-0593-7bbb-b7eca3ff4b58",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not operator::ET12: Start empty test');
INSERT INTO GD_CON
	VALUES ("45dfedde-ac4f-0593-7bbb-b7eca3ff4b58",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9b791fe5-15d3-53f3-5237-315eab5f3d5c",
	"45dfedde-ac4f-0593-7bbb-b7eca3ff4b58",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9b791fe5-15d3-53f3-5237-315eab5f3d5c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9b791fe5-15d3-53f3-5237-315eab5f3d5c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9b791fe5-15d3-53f3-5237-315eab5f3d5c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ed028daf-fa96-d1ae-a466-8d08fe5614ae",
	"45dfedde-ac4f-0593-7bbb-b7eca3ff4b58",
	3,
	-159.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (189.000000,
	36.000000,
	"ed028daf-fa96-d1ae-a466-8d08fe5614ae");
INSERT INTO DIM_GE
	VALUES (753.000000,
	1632.000000,
	"ed028daf-fa96-d1ae-a466-8d08fe5614ae",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ed028daf-fa96-d1ae-a466-8d08fe5614ae",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9592816d-9001-5209-df67-0b8d722c3539",
	"45dfedde-ac4f-0593-7bbb-b7eca3ff4b58",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9592816d-9001-5209-df67-0b8d722c3539");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9592816d-9001-5209-df67-0b8d722c3539",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9592816d-9001-5209-df67-0b8d722c3539",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("3091897a-3b8e-bca0-b30d-4e2fc75557a8",
	"45dfedde-ac4f-0593-7bbb-b7eca3ff4b58",
	"00000000-0000-0000-0000-000000000000",
	"75f44a05-9efa-87c3-ff81-c961edb11811",
	"5c5d2d9b-d34a-cc26-bc31-18191ac86c2c");
INSERT INTO DIM_WAY
	VALUES ("75f44a05-9efa-87c3-ff81-c961edb11811",
	928.000000,
	1616.000000,
	"45dfedde-ac4f-0593-7bbb-b7eca3ff4b58",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("5c5d2d9b-d34a-cc26-bc31-18191ac86c2c",
	928.000000,
	1680.000000,
	"45dfedde-ac4f-0593-7bbb-b7eca3ff4b58",
	"00000000-0000-0000-0000-000000000000",
	"75f44a05-9efa-87c3-ff81-c961edb11811");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"45dfedde-ac4f-0593-7bbb-b7eca3ff4b58",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("45dfedde-ac4f-0593-7bbb-b7eca3ff4b58",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("eb88c55a-f970-63f8-c1dd-16f50067cff0",
	"26e490a1-1dad-d616-e2c8-1bc16f8e06c1",
	"45dfedde-ac4f-0593-7bbb-b7eca3ff4b58");
INSERT INTO GD_GE
	VALUES ("c85849ca-056e-fbf4-e3dc-f68088f7f516",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET13: Start not test');
INSERT INTO GD_CON
	VALUES ("c85849ca-056e-fbf4-e3dc-f68088f7f516",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1da731e4-2e9e-fb22-5fdf-62c78dff1468",
	"c85849ca-056e-fbf4-e3dc-f68088f7f516",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1da731e4-2e9e-fb22-5fdf-62c78dff1468");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1da731e4-2e9e-fb22-5fdf-62c78dff1468",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1da731e4-2e9e-fb22-5fdf-62c78dff1468",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3a217e3f-8afc-1d81-2377-2aea837f5023",
	"c85849ca-056e-fbf4-e3dc-f68088f7f516",
	3,
	-220.000000,
	-6.000000);
INSERT INTO DIM_ND
	VALUES (226.000000,
	40.000000,
	"3a217e3f-8afc-1d81-2377-2aea837f5023");
INSERT INTO DIM_GE
	VALUES (692.000000,
	1475.000000,
	"3a217e3f-8afc-1d81-2377-2aea837f5023",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3a217e3f-8afc-1d81-2377-2aea837f5023",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ba3b0424-6cc2-3a70-b29b-2c3200500107",
	"c85849ca-056e-fbf4-e3dc-f68088f7f516",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ba3b0424-6cc2-3a70-b29b-2c3200500107");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ba3b0424-6cc2-3a70-b29b-2c3200500107",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ba3b0424-6cc2-3a70-b29b-2c3200500107",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("21be748e-13dd-911d-e674-328ca7c47df5",
	"c85849ca-056e-fbf4-e3dc-f68088f7f516",
	"00000000-0000-0000-0000-000000000000",
	"5898f507-03a7-a1d6-8521-7f5e805b1657",
	"8c559704-9d6c-b9fd-1851-e10f7b5b6fba");
INSERT INTO DIM_WAY
	VALUES ("5898f507-03a7-a1d6-8521-7f5e805b1657",
	928.000000,
	1456.000000,
	"c85849ca-056e-fbf4-e3dc-f68088f7f516",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("8c559704-9d6c-b9fd-1851-e10f7b5b6fba",
	928.000000,
	1536.000000,
	"c85849ca-056e-fbf4-e3dc-f68088f7f516",
	"00000000-0000-0000-0000-000000000000",
	"5898f507-03a7-a1d6-8521-7f5e805b1657");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c85849ca-056e-fbf4-e3dc-f68088f7f516",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c85849ca-056e-fbf4-e3dc-f68088f7f516",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("6ed7c821-e37f-c9fa-abc7-b33dc4557975",
	"02fa9f48-7024-82aa-e147-40d4ad7a0179",
	"c85849ca-056e-fbf4-e3dc-f68088f7f516");
INSERT INTO GD_GE
	VALUES ("9b539b3d-4ee9-9e8e-2c04-f9b0f9f698cb",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator::ET14: Start subtract test');
INSERT INTO GD_CON
	VALUES ("9b539b3d-4ee9-9e8e-2c04-f9b0f9f698cb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bc1df725-268c-9642-17aa-08364b7c5048",
	"9b539b3d-4ee9-9e8e-2c04-f9b0f9f698cb",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"bc1df725-268c-9642-17aa-08364b7c5048");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bc1df725-268c-9642-17aa-08364b7c5048",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bc1df725-268c-9642-17aa-08364b7c5048",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7f42bbad-8797-d534-2aa1-b5e2fb0a7a09",
	"9b539b3d-4ee9-9e8e-2c04-f9b0f9f698cb",
	3,
	-54.000000,
	-372.000000);
INSERT INTO DIM_ND
	VALUES (233.000000,
	39.000000,
	"7f42bbad-8797-d534-2aa1-b5e2fb0a7a09");
INSERT INTO DIM_GE
	VALUES (1098.000000,
	1333.000000,
	"7f42bbad-8797-d534-2aa1-b5e2fb0a7a09",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7f42bbad-8797-d534-2aa1-b5e2fb0a7a09",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6cbcdd5f-8d1d-b7ad-0ace-bf77f489f165",
	"9b539b3d-4ee9-9e8e-2c04-f9b0f9f698cb",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6cbcdd5f-8d1d-b7ad-0ace-bf77f489f165");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6cbcdd5f-8d1d-b7ad-0ace-bf77f489f165",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6cbcdd5f-8d1d-b7ad-0ace-bf77f489f165",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("8a56f922-aeda-3e14-3574-f5e1dd4cd1d7",
	"9b539b3d-4ee9-9e8e-2c04-f9b0f9f698cb",
	"00000000-0000-0000-0000-000000000000",
	"9072c5c9-4522-9c27-fc72-2763487d824d",
	"0e2fbfb3-1a30-2577-3469-c664e2a5e8b0");
INSERT INTO GD_LS
	VALUES ("e355a493-b925-dcfc-d21e-dad47a769074",
	"9b539b3d-4ee9-9e8e-2c04-f9b0f9f698cb",
	"8a56f922-aeda-3e14-3574-f5e1dd4cd1d7",
	"0e2fbfb3-1a30-2577-3469-c664e2a5e8b0",
	"c52fa29e-ee05-f582-42b3-7d3a715d9343");
INSERT INTO GD_LS
	VALUES ("d8a06973-b125-1c06-486f-fd77d2c59f00",
	"9b539b3d-4ee9-9e8e-2c04-f9b0f9f698cb",
	"e355a493-b925-dcfc-d21e-dad47a769074",
	"c52fa29e-ee05-f582-42b3-7d3a715d9343",
	"9d07ef89-3c9f-98c3-82a2-c17823cc7db4");
INSERT INTO DIM_WAY
	VALUES ("9072c5c9-4522-9c27-fc72-2763487d824d",
	1072.000000,
	2080.000000,
	"9b539b3d-4ee9-9e8e-2c04-f9b0f9f698cb",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("0e2fbfb3-1a30-2577-3469-c664e2a5e8b0",
	1168.000000,
	2080.000000,
	"9b539b3d-4ee9-9e8e-2c04-f9b0f9f698cb",
	"00000000-0000-0000-0000-000000000000",
	"9072c5c9-4522-9c27-fc72-2763487d824d");
INSERT INTO DIM_WAY
	VALUES ("c52fa29e-ee05-f582-42b3-7d3a715d9343",
	1168.000000,
	1376.000000,
	"9b539b3d-4ee9-9e8e-2c04-f9b0f9f698cb",
	"00000000-0000-0000-0000-000000000000",
	"0e2fbfb3-1a30-2577-3469-c664e2a5e8b0");
INSERT INTO DIM_WAY
	VALUES ("9d07ef89-3c9f-98c3-82a2-c17823cc7db4",
	1280.000000,
	1376.000000,
	"9b539b3d-4ee9-9e8e-2c04-f9b0f9f698cb",
	"00000000-0000-0000-0000-000000000000",
	"c52fa29e-ee05-f582-42b3-7d3a715d9343");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9b539b3d-4ee9-9e8e-2c04-f9b0f9f698cb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9b539b3d-4ee9-9e8e-2c04-f9b0f9f698cb",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a55ec3d9-49ce-ec36-8ef1-efcb89803261",
	"54d5cb9f-394b-95b5-d92a-224853a43404",
	"9b539b3d-4ee9-9e8e-2c04-f9b0f9f698cb");
INSERT INTO GD_GE
	VALUES ("d992dede-357d-e471-6a31-8fd4b00c88af",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("d992dede-357d-e471-6a31-8fd4b00c88af",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0a5715ca-3360-a2ab-e543-a674edb1fdef",
	"d992dede-357d-e471-6a31-8fd4b00c88af",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0a5715ca-3360-a2ab-e543-a674edb1fdef");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0a5715ca-3360-a2ab-e543-a674edb1fdef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0a5715ca-3360-a2ab-e543-a674edb1fdef",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c1b57b3c-e8a8-7576-2d22-a52dc6b39ed9",
	"d992dede-357d-e471-6a31-8fd4b00c88af",
	3,
	-210.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (220.000000,
	34.000000,
	"c1b57b3c-e8a8-7576-2d22-a52dc6b39ed9");
INSERT INTO DIM_GE
	VALUES (1198.000000,
	1469.000000,
	"c1b57b3c-e8a8-7576-2d22-a52dc6b39ed9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c1b57b3c-e8a8-7576-2d22-a52dc6b39ed9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("af54024b-b6a1-0026-7224-c96cd7f02b3f",
	"d992dede-357d-e471-6a31-8fd4b00c88af",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"af54024b-b6a1-0026-7224-c96cd7f02b3f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"af54024b-b6a1-0026-7224-c96cd7f02b3f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("af54024b-b6a1-0026-7224-c96cd7f02b3f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("fd76f88c-2fe4-6f95-b6a2-dc42c9d8862d",
	"d992dede-357d-e471-6a31-8fd4b00c88af",
	"00000000-0000-0000-0000-000000000000",
	"24840783-47e6-d5f4-e180-1fedf0d57fa4",
	"a0244fe5-a0a6-71f8-6d8e-06d2a180e73f");
INSERT INTO DIM_WAY
	VALUES ("24840783-47e6-d5f4-e180-1fedf0d57fa4",
	1424.000000,
	1456.000000,
	"d992dede-357d-e471-6a31-8fd4b00c88af",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a0244fe5-a0a6-71f8-6d8e-06d2a180e73f",
	1424.000000,
	1520.000000,
	"d992dede-357d-e471-6a31-8fd4b00c88af",
	"00000000-0000-0000-0000-000000000000",
	"24840783-47e6-d5f4-e180-1fedf0d57fa4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d992dede-357d-e471-6a31-8fd4b00c88af",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d992dede-357d-e471-6a31-8fd4b00c88af",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("30d3315f-25b0-e820-eb9c-530c0d5a847c",
	"1b86aa26-a7c3-0fd5-2a6b-c45f2103d0ad",
	"d992dede-357d-e471-6a31-8fd4b00c88af");
INSERT INTO GD_GE
	VALUES ("19b19c8b-84e6-c064-7885-831c026b2543",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing assign::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("19b19c8b-84e6-c064-7885-831c026b2543",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b815ba73-645d-5f48-b8d1-5e5d8606b5b1",
	"19b19c8b-84e6-c064-7885-831c026b2543",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b815ba73-645d-5f48-b8d1-5e5d8606b5b1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b815ba73-645d-5f48-b8d1-5e5d8606b5b1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b815ba73-645d-5f48-b8d1-5e5d8606b5b1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4b049305-30e7-d6a9-6fad-e911bce79a2b",
	"19b19c8b-84e6-c064-7885-831c026b2543",
	3,
	-246.000000,
	-3.000000);
INSERT INTO DIM_ND
	VALUES (263.000000,
	34.000000,
	"4b049305-30e7-d6a9-6fad-e911bce79a2b");
INSERT INTO DIM_GE
	VALUES (1194.000000,
	1630.000000,
	"4b049305-30e7-d6a9-6fad-e911bce79a2b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4b049305-30e7-d6a9-6fad-e911bce79a2b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("74a37e5a-ecfd-e23f-083a-f0d8bc075d83",
	"19b19c8b-84e6-c064-7885-831c026b2543",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"74a37e5a-ecfd-e23f-083a-f0d8bc075d83");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"74a37e5a-ecfd-e23f-083a-f0d8bc075d83",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("74a37e5a-ecfd-e23f-083a-f0d8bc075d83",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("12113308-7047-c263-6b49-333ccdedbff1",
	"19b19c8b-84e6-c064-7885-831c026b2543",
	"00000000-0000-0000-0000-000000000000",
	"f6ab8e37-a962-a6d0-0d77-7f1f421f8d6f",
	"d12dc021-2848-9957-b6f6-de369409b6d4");
INSERT INTO DIM_WAY
	VALUES ("f6ab8e37-a962-a6d0-0d77-7f1f421f8d6f",
	1456.000000,
	1616.000000,
	"19b19c8b-84e6-c064-7885-831c026b2543",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("d12dc021-2848-9957-b6f6-de369409b6d4",
	1456.000000,
	1680.000000,
	"19b19c8b-84e6-c064-7885-831c026b2543",
	"00000000-0000-0000-0000-000000000000",
	"f6ab8e37-a962-a6d0-0d77-7f1f421f8d6f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"19b19c8b-84e6-c064-7885-831c026b2543",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("19b19c8b-84e6-c064-7885-831c026b2543",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("6c9f3dec-59d9-8b32-7ef1-fabbe6bdfdbf",
	"908b80b9-21eb-1cdd-e346-408eaf4ab1ce",
	"19b19c8b-84e6-c064-7885-831c026b2543");
INSERT INTO GD_GE
	VALUES ("6dc41762-f2dd-abc8-8d1c-3958c0dfdd0f",
	"9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Additional assign tests::ET16: Start and test');
INSERT INTO GD_CON
	VALUES ("6dc41762-f2dd-abc8-8d1c-3958c0dfdd0f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("694329e0-6771-e99d-8018-8a2ad6c8dbb2",
	"6dc41762-f2dd-abc8-8d1c-3958c0dfdd0f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"694329e0-6771-e99d-8018-8a2ad6c8dbb2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"694329e0-6771-e99d-8018-8a2ad6c8dbb2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("694329e0-6771-e99d-8018-8a2ad6c8dbb2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7b02d2b5-ee5b-b150-1dde-5ab8c15af9f3",
	"6dc41762-f2dd-abc8-8d1c-3958c0dfdd0f",
	3,
	22.000000,
	16.000000);
INSERT INTO DIM_ND
	VALUES (187.000000,
	35.000000,
	"7b02d2b5-ee5b-b150-1dde-5ab8c15af9f3");
INSERT INTO DIM_GE
	VALUES (1654.000000,
	1641.000000,
	"7b02d2b5-ee5b-b150-1dde-5ab8c15af9f3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7b02d2b5-ee5b-b150-1dde-5ab8c15af9f3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1e9f5d79-e0b3-6f29-d0ef-2864bf0de611",
	"6dc41762-f2dd-abc8-8d1c-3958c0dfdd0f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1e9f5d79-e0b3-6f29-d0ef-2864bf0de611");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1e9f5d79-e0b3-6f29-d0ef-2864bf0de611",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1e9f5d79-e0b3-6f29-d0ef-2864bf0de611",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("4e7a047b-78ff-4479-889e-a07f7bc537f3",
	"6dc41762-f2dd-abc8-8d1c-3958c0dfdd0f",
	"00000000-0000-0000-0000-000000000000",
	"d26966c0-bbab-8924-1892-a94064b27c1d",
	"2765ce81-39ab-791c-7839-f0280d4c88a3");
INSERT INTO GD_LS
	VALUES ("c8f7c8d2-3f62-abf7-85e6-2cd5f0c05f85",
	"6dc41762-f2dd-abc8-8d1c-3958c0dfdd0f",
	"4e7a047b-78ff-4479-889e-a07f7bc537f3",
	"2765ce81-39ab-791c-7839-f0280d4c88a3",
	"ff92733c-09b0-192b-2508-c2ed6a63638f");
INSERT INTO GD_LS
	VALUES ("1f4a1b78-5d33-fc73-bf74-3173158b88d2",
	"6dc41762-f2dd-abc8-8d1c-3958c0dfdd0f",
	"c8f7c8d2-3f62-abf7-85e6-2cd5f0c05f85",
	"ff92733c-09b0-192b-2508-c2ed6a63638f",
	"abb0f6ed-e3d5-df65-d07d-16ea3ea69b8a");
INSERT INTO DIM_WAY
	VALUES ("d26966c0-bbab-8924-1892-a94064b27c1d",
	1600.000000,
	1728.000000,
	"6dc41762-f2dd-abc8-8d1c-3958c0dfdd0f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("2765ce81-39ab-791c-7839-f0280d4c88a3",
	1648.000000,
	1728.000000,
	"6dc41762-f2dd-abc8-8d1c-3958c0dfdd0f",
	"00000000-0000-0000-0000-000000000000",
	"d26966c0-bbab-8924-1892-a94064b27c1d");
INSERT INTO DIM_WAY
	VALUES ("ff92733c-09b0-192b-2508-c2ed6a63638f",
	1648.000000,
	1568.000000,
	"6dc41762-f2dd-abc8-8d1c-3958c0dfdd0f",
	"00000000-0000-0000-0000-000000000000",
	"2765ce81-39ab-791c-7839-f0280d4c88a3");
INSERT INTO DIM_WAY
	VALUES ("abb0f6ed-e3d5-df65-d07d-16ea3ea69b8a",
	1712.000000,
	1568.000000,
	"6dc41762-f2dd-abc8-8d1c-3958c0dfdd0f",
	"00000000-0000-0000-0000-000000000000",
	"ff92733c-09b0-192b-2508-c2ed6a63638f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6dc41762-f2dd-abc8-8d1c-3958c0dfdd0f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6dc41762-f2dd-abc8-8d1c-3958c0dfdd0f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("1d1fa075-211c-803e-03cf-0ad839472d58",
	"fbd61b75-4871-c39a-631d-48438e87b5d2",
	"6dc41762-f2dd-abc8-8d1c-3958c0dfdd0f");
INSERT INTO DIM_DIA
	VALUES ("9923bb9b-7a59-1fda-220c-56aea9e1632d",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("7c122a7e-3103-34cd-02f7-40c493971529",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("7c122a7e-3103-34cd-02f7-40c493971529",
	'Many Instances',
	7,
	'MI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("25efb86d-6612-1018-8acb-f77147ecf0e8",
	"7c122a7e-3103-34cd-02f7-40c493971529");
INSERT INTO O_BATTR
	VALUES ("25efb86d-6612-1018-8acb-f77147ecf0e8",
	"7c122a7e-3103-34cd-02f7-40c493971529");
INSERT INTO O_ATTR
	VALUES ("25efb86d-6612-1018-8acb-f77147ecf0e8",
	"7c122a7e-3103-34cd-02f7-40c493971529",
	"00000000-0000-0000-0000-000000000000",
	'mi_id',
	'',
	'',
	'mi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("7c122a7e-3103-34cd-02f7-40c493971529",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	0,
	"b243aea3-7f76-54e6-9dcf-022365a6e156",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"3c55c927-841a-b2ef-2e4f-65509835d7e6",
	"fddb96c4-ae5e-78b8-2e0e-a128df260b0a",
	"afd2ccbc-87e1-0def-4b6f-6fbc5f6212dd",
	"b10b197a-d973-859d-fe91-71588fee3321",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R4');
INSERT INTO O_RATTR
	VALUES ("afd2ccbc-87e1-0def-4b6f-6fbc5f6212dd",
	"7c122a7e-3103-34cd-02f7-40c493971529",
	"b243aea3-7f76-54e6-9dcf-022365a6e156",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("afd2ccbc-87e1-0def-4b6f-6fbc5f6212dd",
	"7c122a7e-3103-34cd-02f7-40c493971529",
	"25efb86d-6612-1018-8acb-f77147ecf0e8",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"7c122a7e-3103-34cd-02f7-40c493971529");
INSERT INTO O_OIDA
	VALUES ("25efb86d-6612-1018-8acb-f77147ecf0e8",
	"7c122a7e-3103-34cd-02f7-40c493971529",
	0,
	'mi_id');
INSERT INTO O_ID
	VALUES (1,
	"7c122a7e-3103-34cd-02f7-40c493971529");
INSERT INTO O_ID
	VALUES (2,
	"7c122a7e-3103-34cd-02f7-40c493971529");
INSERT INTO PE_PE
	VALUES ("4499f6c3-80dc-704a-30c4-634afc20fa11",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("4499f6c3-80dc-704a-30c4-634afc20fa11",
	'No Instances',
	5,
	'NOI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("973dbe08-33fa-a285-2845-2c8684a3fb11",
	"4499f6c3-80dc-704a-30c4-634afc20fa11");
INSERT INTO O_BATTR
	VALUES ("973dbe08-33fa-a285-2845-2c8684a3fb11",
	"4499f6c3-80dc-704a-30c4-634afc20fa11");
INSERT INTO O_ATTR
	VALUES ("973dbe08-33fa-a285-2845-2c8684a3fb11",
	"4499f6c3-80dc-704a-30c4-634afc20fa11",
	"00000000-0000-0000-0000-000000000000",
	'noi_id',
	'',
	'',
	'noi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("4499f6c3-80dc-704a-30c4-634afc20fa11",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	0,
	"b243aea3-7f76-54e6-9dcf-022365a6e156",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"fec823f3-30b7-8aec-c9b7-169afcf2e052",
	"6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5",
	"e0c89490-70ea-71e1-db27-031f50b642d4",
	"56385d49-43e3-c23e-5f47-f820a34b873e",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R2');
INSERT INTO O_RATTR
	VALUES ("e0c89490-70ea-71e1-db27-031f50b642d4",
	"4499f6c3-80dc-704a-30c4-634afc20fa11",
	"b243aea3-7f76-54e6-9dcf-022365a6e156",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("e0c89490-70ea-71e1-db27-031f50b642d4",
	"4499f6c3-80dc-704a-30c4-634afc20fa11",
	"973dbe08-33fa-a285-2845-2c8684a3fb11",
	'r2et_id',
	'',
	'r2',
	'et_id',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("4499f6c3-80dc-704a-30c4-634afc20fa11",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	0,
	"b243aea3-7f76-54e6-9dcf-022365a6e156",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	"bd0d89e0-a4f6-1cf8-6797-98220022bdef",
	"1532eced-0f36-6463-4a58-51234289a64d",
	"44c3dc13-bcb9-8e9c-b58e-badcbb1af8e9",
	"2650dd30-4375-af91-8693-ce8c8d57016b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R5');
INSERT INTO O_RATTR
	VALUES ("44c3dc13-bcb9-8e9c-b58e-badcbb1af8e9",
	"4499f6c3-80dc-704a-30c4-634afc20fa11",
	"b243aea3-7f76-54e6-9dcf-022365a6e156",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("44c3dc13-bcb9-8e9c-b58e-badcbb1af8e9",
	"4499f6c3-80dc-704a-30c4-634afc20fa11",
	"e0c89490-70ea-71e1-db27-031f50b642d4",
	'r5et_id',
	'',
	'r5',
	'et_id',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"4499f6c3-80dc-704a-30c4-634afc20fa11");
INSERT INTO O_OIDA
	VALUES ("973dbe08-33fa-a285-2845-2c8684a3fb11",
	"4499f6c3-80dc-704a-30c4-634afc20fa11",
	0,
	'noi_id');
INSERT INTO O_ID
	VALUES (1,
	"4499f6c3-80dc-704a-30c4-634afc20fa11");
INSERT INTO O_ID
	VALUES (2,
	"4499f6c3-80dc-704a-30c4-634afc20fa11");
INSERT INTO PE_PE
	VALUES ("5e5da798-8add-9fc9-ec77-a674a64f4e16",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("5e5da798-8add-9fc9-ec77-a674a64f4e16",
	'One Instance',
	6,
	'OI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("acac9317-23a1-95d7-41a4-e6f4f347ccf1",
	"5e5da798-8add-9fc9-ec77-a674a64f4e16");
INSERT INTO O_BATTR
	VALUES ("acac9317-23a1-95d7-41a4-e6f4f347ccf1",
	"5e5da798-8add-9fc9-ec77-a674a64f4e16");
INSERT INTO O_ATTR
	VALUES ("acac9317-23a1-95d7-41a4-e6f4f347ccf1",
	"5e5da798-8add-9fc9-ec77-a674a64f4e16",
	"00000000-0000-0000-0000-000000000000",
	'oi_id',
	'',
	'',
	'oi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("5e5da798-8add-9fc9-ec77-a674a64f4e16",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	0,
	"b243aea3-7f76-54e6-9dcf-022365a6e156",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	"e46687fc-d696-59c0-16bf-f541d57a57d1",
	"5bf95f81-bb7c-8400-6836-f1339f7c917e",
	"56579ffb-8fdb-490d-7d0b-97cc1d2e611e",
	"5b55fc44-2d46-d665-6f87-618adb002bfb",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R3');
INSERT INTO O_RATTR
	VALUES ("56579ffb-8fdb-490d-7d0b-97cc1d2e611e",
	"5e5da798-8add-9fc9-ec77-a674a64f4e16",
	"b243aea3-7f76-54e6-9dcf-022365a6e156",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("56579ffb-8fdb-490d-7d0b-97cc1d2e611e",
	"5e5da798-8add-9fc9-ec77-a674a64f4e16",
	"acac9317-23a1-95d7-41a4-e6f4f347ccf1",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"5e5da798-8add-9fc9-ec77-a674a64f4e16");
INSERT INTO O_OIDA
	VALUES ("acac9317-23a1-95d7-41a4-e6f4f347ccf1",
	"5e5da798-8add-9fc9-ec77-a674a64f4e16",
	0,
	'oi_id');
INSERT INTO O_ID
	VALUES (1,
	"5e5da798-8add-9fc9-ec77-a674a64f4e16");
INSERT INTO O_ID
	VALUES (2,
	"5e5da798-8add-9fc9-ec77-a674a64f4e16");
INSERT INTO PE_PE
	VALUES ("860e6be9-79b5-6cac-948f-79de5ae20b77",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("860e6be9-79b5-6cac-948f-79de5ae20b77",
	'Other Boolean Expression Test',
	16,
	'OBET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("4894243b-2a30-4adf-abf8-ad29eb612d93",
	"860e6be9-79b5-6cac-948f-79de5ae20b77");
INSERT INTO O_BATTR
	VALUES ("4894243b-2a30-4adf-abf8-ad29eb612d93",
	"860e6be9-79b5-6cac-948f-79de5ae20b77");
INSERT INTO O_ATTR
	VALUES ("4894243b-2a30-4adf-abf8-ad29eb612d93",
	"860e6be9-79b5-6cac-948f-79de5ae20b77",
	"00000000-0000-0000-0000-000000000000",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("cf465ea6-30e2-2b28-87b9-c08791e751ab",
	"860e6be9-79b5-6cac-948f-79de5ae20b77");
INSERT INTO O_BATTR
	VALUES ("cf465ea6-30e2-2b28-87b9-c08791e751ab",
	"860e6be9-79b5-6cac-948f-79de5ae20b77");
INSERT INTO O_ATTR
	VALUES ("cf465ea6-30e2-2b28-87b9-c08791e751ab",
	"860e6be9-79b5-6cac-948f-79de5ae20b77",
	"4894243b-2a30-4adf-abf8-ad29eb612d93",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_REF
	VALUES ("860e6be9-79b5-6cac-948f-79de5ae20b77",
	"45229792-5569-b0f9-9dbf-fe9afe229577",
	0,
	"21f99b5b-bf90-a6e1-f01a-4f18121d29c0",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	"61b47bf0-bbf7-9b3e-1647-9b192abee0e4",
	"b38d2601-6548-7b5d-a632-40a2974b50a4",
	"770cbafe-c7de-b1c2-5839-59ccb9f303fd",
	"5f1cf737-918c-ed30-1933-f683620cce66",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Boolean Expression Test',
	'id',
	'R10');
INSERT INTO O_RATTR
	VALUES ("770cbafe-c7de-b1c2-5839-59ccb9f303fd",
	"860e6be9-79b5-6cac-948f-79de5ae20b77",
	"21f99b5b-bf90-a6e1-f01a-4f18121d29c0",
	"45229792-5569-b0f9-9dbf-fe9afe229577",
	1,
	'id');
INSERT INTO O_ATTR
	VALUES ("770cbafe-c7de-b1c2-5839-59ccb9f303fd",
	"860e6be9-79b5-6cac-948f-79de5ae20b77",
	"cf465ea6-30e2-2b28-87b9-c08791e751ab",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("860e6be9-79b5-6cac-948f-79de5ae20b77",
	"c763a61f-25b6-1e54-fd8e-6ff3753a82f1",
	0,
	"dcdaea83-d87b-de84-fa3c-6706cbfdd35a",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	"c8a47aa4-20fd-54b7-8943-e806342b7bc4",
	"79d2f928-3950-26af-ffc1-c07aed1996ff",
	"7be62edf-4758-17b6-2da1-445f35b3beb8",
	"4e230405-b143-8a69-ea76-544b8476c6e9",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Third Boolean Expression Test',
	'btrue',
	'R11');
INSERT INTO O_RATTR
	VALUES ("7be62edf-4758-17b6-2da1-445f35b3beb8",
	"860e6be9-79b5-6cac-948f-79de5ae20b77",
	"dcdaea83-d87b-de84-fa3c-6706cbfdd35a",
	"c763a61f-25b6-1e54-fd8e-6ff3753a82f1",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("7be62edf-4758-17b6-2da1-445f35b3beb8",
	"860e6be9-79b5-6cac-948f-79de5ae20b77",
	"770cbafe-c7de-b1c2-5839-59ccb9f303fd",
	'r11btrue',
	'',
	'r11',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("860e6be9-79b5-6cac-948f-79de5ae20b77",
	"c763a61f-25b6-1e54-fd8e-6ff3753a82f1",
	0,
	"6f6fd546-9e31-73af-8b66-24ea7e794d4d",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	"c8a47aa4-20fd-54b7-8943-e806342b7bc4",
	"79d2f928-3950-26af-ffc1-c07aed1996ff",
	"27c99522-5892-10ba-f285-109c5fea2d9d",
	"afce8ef1-6bb4-2038-d4ae-38c2c91d1b1e",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Third Boolean Expression Test',
	'bfalse',
	'R11');
INSERT INTO O_RATTR
	VALUES ("27c99522-5892-10ba-f285-109c5fea2d9d",
	"860e6be9-79b5-6cac-948f-79de5ae20b77",
	"6f6fd546-9e31-73af-8b66-24ea7e794d4d",
	"c763a61f-25b6-1e54-fd8e-6ff3753a82f1",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("27c99522-5892-10ba-f285-109c5fea2d9d",
	"860e6be9-79b5-6cac-948f-79de5ae20b77",
	"7be62edf-4758-17b6-2da1-445f35b3beb8",
	'r11bfalse',
	'',
	'r11',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"860e6be9-79b5-6cac-948f-79de5ae20b77");
INSERT INTO O_OIDA
	VALUES ("4894243b-2a30-4adf-abf8-ad29eb612d93",
	"860e6be9-79b5-6cac-948f-79de5ae20b77",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("cf465ea6-30e2-2b28-87b9-c08791e751ab",
	"860e6be9-79b5-6cac-948f-79de5ae20b77",
	0,
	'btrue');
INSERT INTO O_ID
	VALUES (1,
	"860e6be9-79b5-6cac-948f-79de5ae20b77");
INSERT INTO O_ID
	VALUES (2,
	"860e6be9-79b5-6cac-948f-79de5ae20b77");
INSERT INTO PE_PE
	VALUES ("c763a61f-25b6-1e54-fd8e-6ff3753a82f1",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("c763a61f-25b6-1e54-fd8e-6ff3753a82f1",
	'Third Boolean Expression Test',
	17,
	'TBET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("dcdaea83-d87b-de84-fa3c-6706cbfdd35a",
	"c763a61f-25b6-1e54-fd8e-6ff3753a82f1");
INSERT INTO O_BATTR
	VALUES ("dcdaea83-d87b-de84-fa3c-6706cbfdd35a",
	"c763a61f-25b6-1e54-fd8e-6ff3753a82f1");
INSERT INTO O_ATTR
	VALUES ("dcdaea83-d87b-de84-fa3c-6706cbfdd35a",
	"c763a61f-25b6-1e54-fd8e-6ff3753a82f1",
	"00000000-0000-0000-0000-000000000000",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("6f6fd546-9e31-73af-8b66-24ea7e794d4d",
	"c763a61f-25b6-1e54-fd8e-6ff3753a82f1");
INSERT INTO O_BATTR
	VALUES ("6f6fd546-9e31-73af-8b66-24ea7e794d4d",
	"c763a61f-25b6-1e54-fd8e-6ff3753a82f1");
INSERT INTO O_ATTR
	VALUES ("6f6fd546-9e31-73af-8b66-24ea7e794d4d",
	"c763a61f-25b6-1e54-fd8e-6ff3753a82f1",
	"dcdaea83-d87b-de84-fa3c-6706cbfdd35a",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"c763a61f-25b6-1e54-fd8e-6ff3753a82f1");
INSERT INTO O_OIDA
	VALUES ("6f6fd546-9e31-73af-8b66-24ea7e794d4d",
	"c763a61f-25b6-1e54-fd8e-6ff3753a82f1",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("dcdaea83-d87b-de84-fa3c-6706cbfdd35a",
	"c763a61f-25b6-1e54-fd8e-6ff3753a82f1",
	0,
	'btrue');
INSERT INTO O_ID
	VALUES (1,
	"c763a61f-25b6-1e54-fd8e-6ff3753a82f1");
INSERT INTO O_ID
	VALUES (2,
	"c763a61f-25b6-1e54-fd8e-6ff3753a82f1");
INSERT INTO PE_PE
	VALUES ("7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	'User Boolean Test',
	18,
	'UBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("5b342212-a9f5-41ad-f1b0-3ebaed8d7588",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348");
INSERT INTO O_BATTR
	VALUES ("5b342212-a9f5-41ad-f1b0-3ebaed8d7588",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348");
INSERT INTO O_ATTR
	VALUES ("5b342212-a9f5-41ad-f1b0-3ebaed8d7588",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4ea4ac8e-6522-c228-b4ab-0f5a849d7238",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348");
INSERT INTO O_BATTR
	VALUES ("4ea4ac8e-6522-c228-b4ab-0f5a849d7238",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348");
INSERT INTO O_ATTR
	VALUES ("4ea4ac8e-6522-c228-b4ab-0f5a849d7238",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	"5b342212-a9f5-41ad-f1b0-3ebaed8d7588",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("13e1f921-8ec3-7572-8e68-d3ae9d68abdc",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348");
INSERT INTO O_BATTR
	VALUES ("13e1f921-8ec3-7572-8e68-d3ae9d68abdc",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348");
INSERT INTO O_ATTR
	VALUES ("13e1f921-8ec3-7572-8e68-d3ae9d68abdc",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	"4ea4ac8e-6522-c228-b4ab-0f5a849d7238",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	'',
	'');
INSERT INTO O_REF
	VALUES ("7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	0,
	"f91add83-0bb5-b790-fa50-83e130b4fa84",
	"145977af-a605-53dc-67d0-523f68958d00",
	"2266ed22-2062-951c-1c75-d77359aa8342",
	"9adc1dd1-bd35-472d-5c73-97f8244fa0fc",
	"e1390b75-8ab8-348c-727d-ec5f32cea4ec",
	"057c8c8a-3480-5e92-6029-a8412947eb30",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Other Boolean Test',
	'bfalse',
	'R12');
INSERT INTO O_RATTR
	VALUES ("e1390b75-8ab8-348c-727d-ec5f32cea4ec",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	"f91add83-0bb5-b790-fa50-83e130b4fa84",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("e1390b75-8ab8-348c-727d-ec5f32cea4ec",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	"13e1f921-8ec3-7572-8e68-d3ae9d68abdc",
	'r9bfalse',
	'',
	'r9',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	0,
	"5e42ba8d-3d4c-4b02-58b6-96f03c4520fc",
	"145977af-a605-53dc-67d0-523f68958d00",
	"2266ed22-2062-951c-1c75-d77359aa8342",
	"9adc1dd1-bd35-472d-5c73-97f8244fa0fc",
	"da2a31aa-f0ed-56d3-a09f-dae20839ce7d",
	"ec864d68-9be0-5fb0-bfc7-cb648f5182c3",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Other Boolean Test',
	'btrue',
	'R12');
INSERT INTO O_RATTR
	VALUES ("da2a31aa-f0ed-56d3-a09f-dae20839ce7d",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	"5e42ba8d-3d4c-4b02-58b6-96f03c4520fc",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("da2a31aa-f0ed-56d3-a09f-dae20839ce7d",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	"e1390b75-8ab8-348c-727d-ec5f32cea4ec",
	'r9btrue',
	'',
	'r9',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("9aabebdb-d891-ae49-5620-10a0e81f9b1b",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348");
INSERT INTO O_BATTR
	VALUES ("9aabebdb-d891-ae49-5620-10a0e81f9b1b",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348");
INSERT INTO O_ATTR
	VALUES ("9aabebdb-d891-ae49-5620-10a0e81f9b1b",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	"da2a31aa-f0ed-56d3-a09f-dae20839ce7d",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348");
INSERT INTO O_OIDA
	VALUES ("5b342212-a9f5-41ad-f1b0-3ebaed8d7588",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348");
INSERT INTO O_ID
	VALUES (2,
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348");
INSERT INTO SM_ISM
	VALUES ("36899362-ee2a-ac4e-01c5-ecc170189108",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348");
INSERT INTO SM_SM
	VALUES ("36899362-ee2a-ac4e-01c5-ecc170189108",
	'',
	6);
INSERT INTO SM_MOORE
	VALUES ("36899362-ee2a-ac4e-01c5-ecc170189108");
INSERT INTO SM_EVTDI
	VALUES ("98668044-8949-ce3c-c773-64a5c513abfc",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	'tfalse',
	'',
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	'',
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("ff6e556d-fc46-7470-9b7e-db002e78921c",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	'ttrue',
	'',
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	'',
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"98668044-8949-ce3c-c773-64a5c513abfc");
INSERT INTO SM_EVTDI
	VALUES ("f5aa6b4b-fb5e-01fe-56aa-3df381896848",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	'tfalse',
	'',
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	'',
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("7eaa6fda-7321-f90a-e38c-0677a7363709",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	'tfalse',
	'',
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	'',
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("add55a8f-b9ea-9479-c36e-2ad2f5bfe53d",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	'tfalse',
	'',
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	'',
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("29cb091b-eb75-8d7e-1ac2-5fe410cad773",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	'ttrue',
	'',
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	'',
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"f5aa6b4b-fb5e-01fe-56aa-3df381896848");
INSERT INTO SM_EVTDI
	VALUES ("59354e20-333b-07fd-9cb0-034af02bb47a",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	'ttrue',
	'',
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	'',
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"7eaa6fda-7321-f90a-e38c-0677a7363709");
INSERT INTO SM_EVTDI
	VALUES ("77a1826e-aa55-665e-5654-0e2251a36b73",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	'ttrue',
	'',
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	'',
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"add55a8f-b9ea-9479-c36e-2ad2f5bfe53d");
INSERT INTO SM_LEVT
	VALUES ("7a133f52-371a-6d89-995f-845ec5c9c51f",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("7a133f52-371a-6d89-995f-845ec5c9c51f",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("7a133f52-371a-6d89-995f-845ec5c9c51f",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start and test',
	0,
	'',
	'UBT1',
	'');
INSERT INTO SM_LEVT
	VALUES ("3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Continue and test',
	0,
	'',
	'UBT2',
	'');
INSERT INTO SM_LEVT
	VALUES ("ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Start or test',
	0,
	'',
	'UBT3',
	'');
INSERT INTO SM_LEVT
	VALUES ("c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Continue or test',
	0,
	'',
	'UBT4',
	'');
INSERT INTO SM_STATE
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'And test 1a',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("2b635c4b-c91f-c9ec-1fc9-7ea21c68afc7",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"e62c16fa-be01-6570-fa1c-d8851a2b75fe");
INSERT INTO SM_AH
	VALUES ("2b635c4b-c91f-c9ec-1fc9-7ea21c68afc7",
	"36899362-ee2a-ac4e-01c5-ecc170189108");
INSERT INTO SM_ACT
	VALUES ("2b635c4b-c91f-c9ec-1fc9-7ea21c68afc7",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	1,
	'LOG::LogInfo(message:"Starting and (user-defined type) test") ;

//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    rcvd_evt
assign t5 = temp1 and rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 and rcvd_evt.ttrue ;
if ( t6 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t7 = temp2 and rcvd_evt.tfalse ;
if ( t7 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t8 = temp2 and rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 and self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 and self.btrue ;
if ( t14 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t15 = temp2 and self.bfalse ;
if ( t15 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t16 = temp2 and self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" and local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 and self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 and self.r9btrue ;
if ( t18 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t19 = temp2 and self.r9bfalse ;
if ( t19 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = temp2 and self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of UOBT;
assign t21 = temp1 and saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 and saf.btrue ;
if ( t22 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t23 = temp2 and saf.bfalse ;
if ( t23 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t24 = temp2 and saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of UOBT;
for each smf in smfs
assign t25 = temp1 and smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 and smf.btrue ;
if ( t26 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t27 = temp2 and smf.bfalse ;
if ( t27 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t28 = temp2 and smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->UOBT[R12];
assign t29 = temp1 and sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 and sor.btrue ;
if ( t30 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t31 = temp2 and sor.bfalse ;
if ( t31 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t32 = temp2 and sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->UOBT[R13];
assign t33 = temp1 and sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 and sar.btrue ;
if ( t34 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t35 = temp2 and sar.bfalse ;
if ( t35 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t36 = temp2 and sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->UOBT[R13];
for each smr in smrs
assign t37 = temp1 and smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 and smr.btrue ;
if ( t38 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t39 = temp2 and smr.bfalse ;
if ( t39 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t40 = temp2 and smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 and saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 and saf.r11btrue ;
if ( t42 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t43 = temp2 and saf.r11bfalse ;
if ( t43 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t44 = temp2 and saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 and smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 and smf.r11btrue ;
if ( t46 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t47 = temp2 and smf.r11bfalse ;
if ( t47 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t48 = temp2 and smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 and sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 and sor.r11btrue ;
if ( t50 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t51 = temp2 and sor.r11bfalse ;
if ( t51 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t52 = temp2 and sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 and sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 and sar.r11btrue ;
if ( t54 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t55 = temp2 and sar.r11bfalse ;
if ( t55 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t56 = temp2 and sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 and smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 and smr.r11btrue ;
if ( t58 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t59 = temp2 and smr.r11bfalse ;
if ( t59 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t60 = temp2 and smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse and temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue and temp1 ;
if ( t62 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t63 = rcvd_evt.tfalse and temp2 ;
if ( t63 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t64 = rcvd_evt.ttrue and temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse and rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue and rcvd_evt.tfalse ;
if ( t66 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t67 = rcvd_evt.tfalse and rcvd_evt.ttrue ;
if ( t67 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t68 = rcvd_evt.ttrue and rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse and false ;
if ( t69 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue and false ;
if ( t70 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t71 = rcvd_evt.tfalse and true ;
if ( t71 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t72 = rcvd_evt.ttrue and true ;
if ( t72 == true )
  LOG::LogSuccess(message:" and rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse and self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue and self.bfalse ;
if ( t74 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t75 = rcvd_evt.tfalse and self.btrue ;
if ( t75 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t76 = rcvd_evt.ttrue and self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse and self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue and self.r9bfalse ;
if ( t78 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t79 = rcvd_evt.tfalse and self.r9btrue ;
if ( t79 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t80 = rcvd_evt.ttrue and self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse and saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse and saf.btrue ;
if ( t82 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t83 = rcvd_evt.ttrue and saf.bfalse ;
if ( t83 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t84 = rcvd_evt.ttrue and saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse and smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse and smf.btrue ;
if ( t86 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t87 = rcvd_evt.ttrue and smf.bfalse ;
if ( t87 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t88 = rcvd_evt.ttrue and smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse and sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse and sor.btrue ;
if ( t90 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t91 = rcvd_evt.ttrue and sor.bfalse ;
if ( t91 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t92 = rcvd_evt.ttrue and sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse and sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse and sar.btrue ;
if ( t94 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t95 = rcvd_evt.ttrue and sar.bfalse ;
if ( t95 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t96 = rcvd_evt.ttrue and sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse and smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse and smr.btrue ;
if ( t98 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t99 = rcvd_evt.ttrue and smr.bfalse ;
if ( t99 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t100 = rcvd_evt.ttrue and smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse and saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse and saf.r11btrue ;
if ( t102 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t103 = rcvd_evt.ttrue and saf.r11bfalse ;
if ( t103 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t104 = rcvd_evt.ttrue and saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse and smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse and smf.r11btrue ;
if ( t106 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t107 = rcvd_evt.ttrue and smf.r11bfalse ;
if ( t107 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t108 = rcvd_evt.ttrue and smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse and sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse and sor.r11btrue ;
if ( t110 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t111 = rcvd_evt.ttrue and sor.r11bfalse ;
if ( t111 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t112 = rcvd_evt.ttrue and sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse and sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse and sar.r11btrue ;
if ( t114 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t115 = rcvd_evt.ttrue and sar.r11bfalse ;
if ( t115 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t116 = rcvd_evt.ttrue and sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse and smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse and smr.r11btrue ;
if ( t118 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t119 = rcvd_evt.ttrue and smr.r11bfalse ;
if ( t119 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t120 = rcvd_evt.ttrue and smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_STATE
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'And test 1b',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("d0ae6971-b6ab-bfc9-1a94-c2cd44b42f00",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"40f4044e-f142-b000-1c88-3043effa3abe");
INSERT INTO SM_AH
	VALUES ("d0ae6971-b6ab-bfc9-1a94-c2cd44b42f00",
	"36899362-ee2a-ac4e-01c5-ecc170189108");
INSERT INTO SM_ACT
	VALUES ("d0ae6971-b6ab-bfc9-1a94-c2cd44b42f00",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	1,
	'assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true and temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse and temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue and temp1 ;
if ( t182 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t183 = self.bfalse and temp2 ;
if ( t183 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t184 = self.btrue and temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" and self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse and rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue and rcvd_evt.tfalse ;
if ( t186 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t187 = self.bfalse and rcvd_evt.ttrue ;
if ( t187 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t188 = self.btrue and rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse and false ;
if ( t189 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue and false ;
if ( t190 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t191 = self.bfalse and true ;
if ( t191 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t192 = self.btrue and true ;
if ( t192 == true )
  LOG::LogSuccess(message:" and self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse and self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue and self.bfalse ;
if ( t194 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t195 = self.bfalse and self.btrue ;
if ( t195 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t196 = self.btrue and self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse and self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue and self.r9bfalse ;
if ( t198 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t199 = self.bfalse and self.r9btrue ;
if ( t199 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t200 = self.btrue and self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse and saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse and saf.btrue ;
if ( t202 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t203 = self.btrue and saf.bfalse ;
if ( t203 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t204 = self.btrue and saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse and smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse and smf.btrue ;
if ( t206 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t207 = self.btrue and smf.bfalse ;
if ( t207 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t208 = self.btrue and smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse and sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse and sor.btrue ;
if ( t210 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t211 = self.btrue and sor.bfalse ;
if ( t211 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t212 = self.btrue and sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse and sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse and sar.btrue ;
if ( t214 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t215 = self.btrue and sar.bfalse ;
if ( t215 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t216 = self.btrue and sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse and smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse and smr.btrue ;
if ( t218 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t219 = self.btrue and smr.bfalse ;
if ( t219 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t220 = self.btrue and smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse and saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse and saf.r11btrue ;
if ( t222 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t223 = self.btrue and saf.r11bfalse ;
if ( t223 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t224 = self.btrue and saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse and smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse and smf.r11btrue ;
if ( t226 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t227 = self.btrue and smf.r11bfalse ;
if ( t227 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t228 = self.btrue and smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse and sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse and sor.r11btrue ;
if ( t230 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t231 = self.btrue and sor.r11bfalse ;
if ( t231 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t232 = self.btrue and sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse and sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse and sar.r11btrue ;
if ( t234 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t235 = self.btrue and sar.r11bfalse ;
if ( t235 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t236 = self.btrue and sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse and smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse and smr.r11btrue ;
if ( t238 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t239 = self.btrue and smr.r11bfalse ;
if ( t239 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t240 = self.btrue and smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse and temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue and temp1 ;
if ( t242 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t243 = self.r9bfalse and temp2 ;
if ( t243 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t244 = self.r9btrue and temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse and rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue and rcvd_evt.tfalse ;
if ( t246 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t247 = self.r9bfalse and rcvd_evt.ttrue ;
if ( t247 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t248 = self.r9btrue and rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse and false ;
if ( t249 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue and false ;
if ( t250 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t251 = self.r9bfalse and true ;
if ( t251 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t252 = self.r9btrue and true ;
if ( t252 == true )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse and self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue and self.bfalse ;
if ( t254 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t255 = self.r9bfalse and self.btrue ;
if ( t255 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t256 = self.r9btrue and self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse and self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue and self.r9bfalse ;
if ( t258 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t259 = self.r9bfalse and self.r9btrue ;
if ( t259 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t260 = self.r9btrue and self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse and saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse and saf.btrue ;
if ( t262 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t263 = self.r9btrue and saf.bfalse ;
if ( t263 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t264 = self.r9btrue and saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse and smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse and smf.btrue ;
if ( t266 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t267 = self.r9btrue and smf.bfalse ;
if ( t267 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t268 = self.r9btrue and smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse and sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse and sor.btrue ;
if ( t270 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t271 = self.r9btrue and sor.bfalse ;
if ( t271 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t272 = self.r9btrue and sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse and sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse and sar.btrue ;
if ( t274 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t275 = self.r9btrue and sar.bfalse ;
if ( t275 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t276 = self.r9btrue and sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse and smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse and smr.btrue ;
if ( t278 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t279 = self.r9btrue and smr.bfalse ;
if ( t279 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t280 = self.r9btrue and smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse and saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse and saf.r11btrue ;
if ( t282 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t283 = self.r9btrue and saf.r11bfalse ;
if ( t283 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t284 = self.r9btrue and saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse and smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse and smf.r11btrue ;
if ( t286 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t287 = self.r9btrue and smf.r11bfalse ;
if ( t287 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t288 = self.r9btrue and smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse and sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse and sor.r11btrue ;
if ( t290 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t291 = self.r9btrue and sor.r11bfalse ;
if ( t291 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t292 = self.r9btrue and sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse and sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse and sar.r11btrue ;
if ( t294 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t295 = self.r9btrue and sar.r11bfalse ;
if ( t295 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t296 = self.r9btrue and sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse and smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse and smr.r11btrue ;
if ( t298 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t299 = self.r9btrue and smr.r11bfalse ;
if ( t299 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t300 = self.r9btrue and smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_STATE
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'And test 2',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("c3598d3e-2da9-3791-b806-9d6892e8d521",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"8e354c1d-5852-273a-2a70-02e9cab68075");
INSERT INTO SM_AH
	VALUES ("c3598d3e-2da9-3791-b806-9d6892e8d521",
	"36899362-ee2a-ac4e-01c5-ecc170189108");
INSERT INTO SM_ACT
	VALUES ("c3598d3e-2da9-3791-b806-9d6892e8d521",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	1,
	'//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse and temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue and temp1 ;
if ( t302 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t303 = saf.bfalse and temp2 ;
if ( t303 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t304 = saf.btrue and temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse and rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue and rcvd_evt.tfalse ;
if ( t306 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t307 = saf.bfalse and rcvd_evt.ttrue ;
if ( t307 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t308 = saf.btrue and rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse and false ;
if ( t309 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue and false ;
if ( t310 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t311 = saf.bfalse and true ;
if ( t311 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t312 = saf.btrue and true ;
if ( t312 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse and self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue and self.bfalse ;
if ( t314 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t315 = saf.bfalse and self.btrue ;
if ( t315 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t316 = saf.btrue and self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse and self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue and self.r9bfalse ;
if ( t318 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t319 = saf.bfalse and self.r9btrue ;
if ( t319 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t320 = saf.btrue and self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse and saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse and saf.btrue ;
if ( t322 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t323 = saf.btrue and saf.bfalse ;
if ( t323 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t324 = saf.btrue and saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse and smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse and smf.btrue ;
if ( t326 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t327 = saf.btrue and smf.bfalse ;
if ( t327 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t328 = saf.btrue and smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse and sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse and sor.btrue ;
if ( t330 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t331 = saf.btrue and sor.bfalse ;
if ( t331 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t332 = saf.btrue and sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse and sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse and sar.btrue ;
if ( t334 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t335 = saf.btrue and sar.bfalse ;
if ( t335 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t336 = saf.btrue and sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse and smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse and smr.btrue ;
if ( t338 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t339 = saf.btrue and smr.bfalse ;
if ( t339 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t340 = saf.btrue and smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse and saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse and saf.r11btrue ;
if ( t342 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t343 = saf.btrue and saf.r11bfalse ;
if ( t343 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t344 = saf.btrue and saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse and smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse and smf.r11btrue ;
if ( t346 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t347 = saf.btrue and smf.r11bfalse ;
if ( t347 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t348 = saf.btrue and smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse and sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse and sor.r11btrue ;
if ( t350 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t351 = saf.btrue and sor.r11bfalse ;
if ( t351 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t352 = saf.btrue and sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse and sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse and sar.r11btrue ;
if ( t354 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t355 = saf.btrue and sar.r11bfalse ;
if ( t355 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t356 = saf.btrue and sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse and smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse and smr.r11btrue ;
if ( t358 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t359 = saf.btrue and smr.r11bfalse ;
if ( t359 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t360 = saf.btrue and smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse and temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue and temp1 ;
if ( t602 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t603 = saf.r11bfalse and temp2 ;
if ( t603 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t604 = saf.r11btrue and temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse and rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue and rcvd_evt.tfalse ;
if ( t606 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t607 = saf.r11bfalse and rcvd_evt.ttrue ;
if ( t607 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t608 = saf.r11btrue and rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse and false ;
if ( t609 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue and false ;
if ( t610 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t611 = saf.r11bfalse and true ;
if ( t611 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t612 = saf.r11btrue and true ;
if ( t612 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse and self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue and self.bfalse ;
if ( t614 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t615 = saf.r11bfalse and self.btrue ;
if ( t615 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t616 = saf.r11btrue and self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse and self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue and self.r9bfalse ;
if ( t618 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t619 = saf.r11bfalse and self.r9btrue ;
if ( t619 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t620 = saf.r11btrue and self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse and saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse and saf.btrue ;
if ( t622 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t623 = saf.r11btrue and saf.bfalse ;
if ( t623 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t624 = saf.r11btrue and saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse and smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse and smf.btrue ;
if ( t626 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t627 = saf.r11btrue and smf.bfalse ;
if ( t627 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t628 = saf.r11btrue and smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse and sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse and sor.btrue ;
if ( t630 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t631 = saf.r11btrue and sor.bfalse ;
if ( t631 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t632 = saf.r11btrue and sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse and sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse and sar.btrue ;
if ( t634 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t635 = saf.r11btrue and sar.bfalse ;
if ( t635 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t636 = saf.r11btrue and sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse and smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse and smr.btrue ;
if ( t638 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t639 = saf.r11btrue and smr.bfalse ;
if ( t639 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t640 = saf.r11btrue and smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse and saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse and saf.r11btrue ;
if ( t642 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t643 = saf.r11btrue and saf.r11bfalse ;
if ( t643 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t644 = saf.r11btrue and saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse and smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse and smf.r11btrue ;
if ( t646 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t647 = saf.r11btrue and smf.r11bfalse ;
if ( t647 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t648 = saf.r11btrue and smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse and sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse and sor.r11btrue ;
if ( t650 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t651 = saf.r11btrue and sor.r11bfalse ;
if ( t651 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t652 = saf.r11btrue and sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse and sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse and sar.r11btrue ;
if ( t654 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t655 = saf.r11btrue and sar.r11bfalse ;
if ( t655 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t656 = saf.r11btrue and sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse and smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse and smr.r11btrue ;
if ( t658 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t659 = saf.r11btrue and smr.r11bfalse ;
if ( t659 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t660 = saf.r11btrue and smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed and (user-defined type) test") ;

//generate event to commence next test
generate UBT3:''Start or test''(tfalse:false, ttrue:true) to self;
 

',
	'');
INSERT INTO SM_STATE
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1a',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("17c8b070-f378-1878-120c-a5031c34628d",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"d32743f7-4644-a40d-b13b-137ddb048cea");
INSERT INTO SM_AH
	VALUES ("17c8b070-f378-1878-120c-a5031c34628d",
	"36899362-ee2a-ac4e-01c5-ecc170189108");
INSERT INTO SM_ACT
	VALUES ("17c8b070-f378-1878-120c-a5031c34628d",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	1,
	'LOG::LogInfo(message:"Starting or (user-defined type) test") ;

//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    rcvd_evt
assign t5 = temp1 or rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 or rcvd_evt.ttrue ;
if ( t6 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t7 = temp2 or rcvd_evt.tfalse ;
if ( t7 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t8 = temp2 or rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 or false ;
if ( t9 == false )
  LOG::LogSuccess(message:" or local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 or true ;
if ( t10 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t11 = temp2 or false ;
if ( t11 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t12 = temp2 or true ;
if ( t12 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 or self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" or local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 or self.btrue ;
if ( t14 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t15 = temp2 or self.bfalse ;
if ( t15 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t16 = temp2 or self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 or self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 or self.r9btrue ;
if ( t18 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t19 = temp2 or self.r9bfalse ;
if ( t19 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t20 = temp2 or self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of UOBT;
assign t21 = temp1 or saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 or saf.btrue ;
if ( t22 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t23 = temp2 or saf.bfalse ;
if ( t23 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t24 = temp2 or saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of UOBT;
for each smf in smfs
assign t25 = temp1 or smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 or smf.btrue ;
if ( t26 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t27 = temp2 or smf.bfalse ;
if ( t27 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t28 = temp2 or smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->UOBT[R12];
assign t29 = temp1 or sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 or sor.btrue ;
if ( t30 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t31 = temp2 or sor.bfalse ;
if ( t31 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t32 = temp2 or sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->UOBT[R13];
assign t33 = temp1 or sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 or sar.btrue ;
if ( t34 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t35 = temp2 or sar.bfalse ;
if ( t35 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t36 = temp2 or sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->UOBT[R13];
for each smr in smrs
assign t37 = temp1 or smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 or smr.btrue ;
if ( t38 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t39 = temp2 or smr.bfalse ;
if ( t39 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t40 = temp2 or smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 or saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 or saf.r11btrue ;
if ( t42 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t43 = temp2 or saf.r11bfalse ;
if ( t43 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t44 = temp2 or saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 or smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 or smf.r11btrue ;
if ( t46 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t47 = temp2 or smf.r11bfalse ;
if ( t47 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t48 = temp2 or smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 or sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 or sor.r11btrue ;
if ( t50 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t51 = temp2 or sor.r11bfalse ;
if ( t51 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t52 = temp2 or sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 or sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 or sar.r11btrue ;
if ( t54 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t55 = temp2 or sar.r11bfalse ;
if ( t55 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t56 = temp2 or sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 or smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 or smr.r11btrue ;
if ( t58 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t59 = temp2 or smr.r11bfalse ;
if ( t59 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t60 = temp2 or smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse or temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue or temp1 ;
if ( t62 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t63 = rcvd_evt.tfalse or temp2 ;
if ( t63 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t64 = rcvd_evt.ttrue or temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse or rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue or rcvd_evt.tfalse ;
if ( t66 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t67 = rcvd_evt.tfalse or rcvd_evt.ttrue ;
if ( t67 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t68 = rcvd_evt.ttrue or rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse or false ;
if ( t69 == false )
  LOG::LogSuccess(message:" or rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue or false ;
if ( t70 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t71 = rcvd_evt.tfalse or true ;
if ( t71 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t72 = rcvd_evt.ttrue or true ;
if ( t72 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse or self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue or self.bfalse ;
if ( t74 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t75 = rcvd_evt.tfalse or self.btrue ;
if ( t75 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t76 = rcvd_evt.ttrue or self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse or self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue or self.r9bfalse ;
if ( t78 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t79 = rcvd_evt.tfalse or self.r9btrue ;
if ( t79 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t80 = rcvd_evt.ttrue or self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse or saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse or saf.btrue ;
if ( t82 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t83 = rcvd_evt.ttrue or saf.bfalse ;
if ( t83 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t84 = rcvd_evt.ttrue or saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse or smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse or smf.btrue ;
if ( t86 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t87 = rcvd_evt.ttrue or smf.bfalse ;
if ( t87 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t88 = rcvd_evt.ttrue or smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse or sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse or sor.btrue ;
if ( t90 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t91 = rcvd_evt.ttrue or sor.bfalse ;
if ( t91 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t92 = rcvd_evt.ttrue or sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse or sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse or sar.btrue ;
if ( t94 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t95 = rcvd_evt.ttrue or sar.bfalse ;
if ( t95 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t96 = rcvd_evt.ttrue or sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse or smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse or smr.btrue ;
if ( t98 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t99 = rcvd_evt.ttrue or smr.bfalse ;
if ( t99 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t100 = rcvd_evt.ttrue or smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse or saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse or saf.r11btrue ;
if ( t102 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t103 = rcvd_evt.ttrue or saf.r11bfalse ;
if ( t103 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t104 = rcvd_evt.ttrue or saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse or smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse or smf.r11btrue ;
if ( t106 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t107 = rcvd_evt.ttrue or smf.r11bfalse ;
if ( t107 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t108 = rcvd_evt.ttrue or smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse or sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse or sor.r11btrue ;
if ( t110 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t111 = rcvd_evt.ttrue or sor.r11bfalse ;
if ( t111 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t112 = rcvd_evt.ttrue or sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse or sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse or sar.r11btrue ;
if ( t114 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t115 = rcvd_evt.ttrue or sar.r11bfalse ;
if ( t115 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t116 = rcvd_evt.ttrue or sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse or smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse or smr.r11btrue ;
if ( t118 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t119 = rcvd_evt.ttrue or smr.r11bfalse ;
if ( t119 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t120 = rcvd_evt.ttrue or smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT4:''Continue or test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_STATE
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1b',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("632b3aeb-abc5-6afe-29c9-ed7c6f5ab8e7",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"f13e2674-401b-bc19-80b6-5220f5c83006");
INSERT INTO SM_AH
	VALUES ("632b3aeb-abc5-6afe-29c9-ed7c6f5ab8e7",
	"36899362-ee2a-ac4e-01c5-ecc170189108");
INSERT INTO SM_ACT
	VALUES ("632b3aeb-abc5-6afe-29c9-ed7c6f5ab8e7",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	1,
	'
assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true or temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse or temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" or self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue or temp1 ;
if ( t182 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t183 = self.bfalse or temp2 ;
if ( t183 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t184 = self.btrue or temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse or rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue or rcvd_evt.tfalse ;
if ( t186 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t187 = self.bfalse or rcvd_evt.ttrue ;
if ( t187 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t188 = self.btrue or rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse or false ;
if ( t189 == false )
  LOG::LogSuccess(message:" or self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue or false ;
if ( t190 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t191 = self.bfalse or true ;
if ( t191 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t192 = self.btrue or true ;
if ( t192 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse or self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue or self.bfalse ;
if ( t194 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t195 = self.bfalse or self.btrue ;
if ( t195 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t196 = self.btrue or self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse or self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue or self.r9bfalse ;
if ( t198 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t199 = self.bfalse or self.r9btrue ;
if ( t199 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t200 = self.btrue or self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse or saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse or saf.btrue ;
if ( t202 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t203 = self.btrue or saf.bfalse ;
if ( t203 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t204 = self.btrue or saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse or smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse or smf.btrue ;
if ( t206 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t207 = self.btrue or smf.bfalse ;
if ( t207 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t208 = self.btrue or smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse or sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse or sor.btrue ;
if ( t210 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t211 = self.btrue or sor.bfalse ;
if ( t211 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t212 = self.btrue or sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse or sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse or sar.btrue ;
if ( t214 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t215 = self.btrue or sar.bfalse ;
if ( t215 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t216 = self.btrue or sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse or smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse or smr.btrue ;
if ( t218 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t219 = self.btrue or smr.bfalse ;
if ( t219 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t220 = self.btrue or smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse or saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse or saf.r11btrue ;
if ( t222 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t223 = self.btrue or saf.r11bfalse ;
if ( t223 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t224 = self.btrue or saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse or smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse or smf.r11btrue ;
if ( t226 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t227 = self.btrue or smf.r11bfalse ;
if ( t227 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t228 = self.btrue or smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse or sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse or sor.r11btrue ;
if ( t230 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t231 = self.btrue or sor.r11bfalse ;
if ( t231 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t232 = self.btrue or sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse or sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse or sar.r11btrue ;
if ( t234 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t235 = self.btrue or sar.r11bfalse ;
if ( t235 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t236 = self.btrue or sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse or smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse or smr.r11btrue ;
if ( t238 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t239 = self.btrue or smr.r11bfalse ;
if ( t239 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t240 = self.btrue or smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse or temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue or temp1 ;
if ( t242 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t243 = self.r9bfalse or temp2 ;
if ( t243 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t244 = self.r9btrue or temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse or rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue or rcvd_evt.tfalse ;
if ( t246 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t247 = self.r9bfalse or rcvd_evt.ttrue ;
if ( t247 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t248 = self.r9btrue or rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse or false ;
if ( t249 == false )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue or false ;
if ( t250 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t251 = self.r9bfalse or true ;
if ( t251 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t252 = self.r9btrue or true ;
if ( t252 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse or self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue or self.bfalse ;
if ( t254 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t255 = self.r9bfalse or self.btrue ;
if ( t255 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t256 = self.r9btrue or self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse or self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue or self.r9bfalse ;
if ( t258 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t259 = self.r9bfalse or self.r9btrue ;
if ( t259 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t260 = self.r9btrue or self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse or saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse or saf.btrue ;
if ( t262 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t263 = self.r9btrue or saf.bfalse ;
if ( t263 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t264 = self.r9btrue or saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse or smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse or smf.btrue ;
if ( t266 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t267 = self.r9btrue or smf.bfalse ;
if ( t267 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t268 = self.r9btrue or smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse or sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse or sor.btrue ;
if ( t270 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t271 = self.r9btrue or sor.bfalse ;
if ( t271 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t272 = self.r9btrue or sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse or sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse or sar.btrue ;
if ( t274 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t275 = self.r9btrue or sar.bfalse ;
if ( t275 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t276 = self.r9btrue or sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse or smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse or smr.btrue ;
if ( t278 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t279 = self.r9btrue or smr.bfalse ;
if ( t279 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t280 = self.r9btrue or smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse or saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse or saf.r11btrue ;
if ( t282 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t283 = self.r9btrue or saf.r11bfalse ;
if ( t283 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t284 = self.r9btrue or saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse or smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse or smf.r11btrue ;
if ( t286 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t287 = self.r9btrue or smf.r11bfalse ;
if ( t287 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t288 = self.r9btrue or smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse or sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse or sor.r11btrue ;
if ( t290 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t291 = self.r9btrue or sor.r11bfalse ;
if ( t291 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t292 = self.r9btrue or sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse or sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse or sar.r11btrue ;
if ( t294 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t295 = self.r9btrue or sar.r11bfalse ;
if ( t295 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t296 = self.r9btrue or sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse or smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse or smr.r11btrue ;
if ( t298 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t299 = self.r9btrue or smr.r11bfalse ;
if ( t299 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t300 = self.r9btrue or smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT4:''Continue or test''( ttrue: true, tfalse: false ) to self;


',
	'');
INSERT INTO SM_STATE
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'Or test 2',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("194c1f4a-429c-39ef-1821-0ee02a1df3ec",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"b3799b4d-80e2-c190-89d5-aa9411a565dc");
INSERT INTO SM_AH
	VALUES ("194c1f4a-429c-39ef-1821-0ee02a1df3ec",
	"36899362-ee2a-ac4e-01c5-ecc170189108");
INSERT INTO SM_ACT
	VALUES ("194c1f4a-429c-39ef-1821-0ee02a1df3ec",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	1,
	'//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse or temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue or temp1 ;
if ( t302 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t303 = saf.bfalse or temp2 ;
if ( t303 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t304 = saf.btrue or temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse or rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue or rcvd_evt.tfalse ;
if ( t306 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t307 = saf.bfalse or rcvd_evt.ttrue ;
if ( t307 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t308 = saf.btrue or rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse or false ;
if ( t309 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue or false ;
if ( t310 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t311 = saf.bfalse or true ;
if ( t311 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t312 = saf.btrue or true ;
if ( t312 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse or self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue or self.bfalse ;
if ( t314 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t315 = saf.bfalse or self.btrue ;
if ( t315 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t316 = saf.btrue or self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse or self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue or self.r9bfalse ;
if ( t318 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t319 = saf.bfalse or self.r9btrue ;
if ( t319 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t320 = saf.btrue or self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse or saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse or saf.btrue ;
if ( t322 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t323 = saf.btrue or saf.bfalse ;
if ( t323 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t324 = saf.btrue or saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse or smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse or smf.btrue ;
if ( t326 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t327 = saf.btrue or smf.bfalse ;
if ( t327 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t328 = saf.btrue or smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse or sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse or sor.btrue ;
if ( t330 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t331 = saf.btrue or sor.bfalse ;
if ( t331 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t332 = saf.btrue or sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse or sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse or sar.btrue ;
if ( t334 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t335 = saf.btrue or sar.bfalse ;
if ( t335 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t336 = saf.btrue or sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse or smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse or smr.btrue ;
if ( t338 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t339 = saf.btrue or smr.bfalse ;
if ( t339 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t340 = saf.btrue or smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse or saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse or saf.r11btrue ;
if ( t342 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t343 = saf.btrue or saf.r11bfalse ;
if ( t343 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t344 = saf.btrue or saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse or smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse or smf.r11btrue ;
if ( t346 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t347 = saf.btrue or smf.r11bfalse ;
if ( t347 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t348 = saf.btrue or smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse or sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse or sor.r11btrue ;
if ( t350 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t351 = saf.btrue or sor.r11bfalse ;
if ( t351 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t352 = saf.btrue or sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse or sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse or sar.r11btrue ;
if ( t354 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t355 = saf.btrue or sar.r11bfalse ;
if ( t355 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t356 = saf.btrue or sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse or smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse or smr.r11btrue ;
if ( t358 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t359 = saf.btrue or smr.r11bfalse ;
if ( t359 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t360 = saf.btrue or smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse or temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue or temp1 ;
if ( t602 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t603 = saf.r11bfalse or temp2 ;
if ( t603 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t604 = saf.r11btrue or temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse or rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue or rcvd_evt.tfalse ;
if ( t606 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t607 = saf.r11bfalse or rcvd_evt.ttrue ;
if ( t607 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t608 = saf.r11btrue or rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse or false ;
if ( t609 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue or false ;
if ( t610 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t611 = saf.r11bfalse or true ;
if ( t611 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t612 = saf.r11btrue or true ;
if ( t612 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse or self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue or self.bfalse ;
if ( t614 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t615 = saf.r11bfalse or self.btrue ;
if ( t615 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t616 = saf.r11btrue or self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse or self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue or self.r9bfalse ;
if ( t618 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t619 = saf.r11bfalse or self.r9btrue ;
if ( t619 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t620 = saf.r11btrue or self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse or saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse or saf.btrue ;
if ( t622 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t623 = saf.r11btrue or saf.bfalse ;
if ( t623 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t624 = saf.r11btrue or saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse or smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse or smf.btrue ;
if ( t626 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t627 = saf.r11btrue or smf.bfalse ;
if ( t627 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t628 = saf.r11btrue or smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse or sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse or sor.btrue ;
if ( t630 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t631 = saf.r11btrue or sor.bfalse ;
if ( t631 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t632 = saf.r11btrue or sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse or sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse or sar.btrue ;
if ( t634 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t635 = saf.r11btrue or sar.bfalse ;
if ( t635 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t636 = saf.r11btrue or sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse or smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse or smr.btrue ;
if ( t638 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t639 = saf.r11btrue or smr.bfalse ;
if ( t639 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t640 = saf.r11btrue or smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse or saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse or saf.r11btrue ;
if ( t642 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t643 = saf.r11btrue or saf.r11bfalse ;
if ( t643 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t644 = saf.r11btrue or saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse or smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse or smf.r11btrue ;
if ( t646 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t647 = saf.r11btrue or smf.r11bfalse ;
if ( t647 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t648 = saf.r11btrue or smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse or sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse or sor.r11btrue ;
if ( t650 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t651 = saf.r11btrue or sor.r11bfalse ;
if ( t651 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t652 = saf.r11btrue or sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse or sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse or sar.r11btrue ;
if ( t654 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t655 = saf.r11btrue or sar.r11bfalse ;
if ( t655 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t656 = saf.r11btrue or sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse or smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse or smr.r11btrue ;
if ( t658 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t659 = saf.r11btrue or smr.r11bfalse ;
if ( t659 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t660 = saf.r11btrue or smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed or (user-defined type) test") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
 
 

',
	'');
INSERT INTO SM_NSTXN
	VALUES ("38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("6562fd50-26ee-d6a9-930a-2363bc5744c4",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3");
INSERT INTO SM_AH
	VALUES ("6562fd50-26ee-d6a9-930a-2363bc5744c4",
	"36899362-ee2a-ac4e-01c5-ecc170189108");
INSERT INTO SM_ACT
	VALUES ("6562fd50-26ee-d6a9-930a-2363bc5744c4",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"8e354c1d-5852-273a-2a70-02e9cab68075",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("961493c7-ac97-75a1-8738-35ce6d8c8e91",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be");
INSERT INTO SM_AH
	VALUES ("961493c7-ac97-75a1-8738-35ce6d8c8e91",
	"36899362-ee2a-ac4e-01c5-ecc170189108");
INSERT INTO SM_ACT
	VALUES ("961493c7-ac97-75a1-8738-35ce6d8c8e91",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"d32743f7-4644-a40d-b13b-137ddb048cea",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("aa75aff3-40b8-c218-1567-bee8e6661517",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("3c1f7470-60f4-df06-cf95-7ce052ba19db",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"aa75aff3-40b8-c218-1567-bee8e6661517");
INSERT INTO SM_AH
	VALUES ("3c1f7470-60f4-df06-cf95-7ce052ba19db",
	"36899362-ee2a-ac4e-01c5-ecc170189108");
INSERT INTO SM_ACT
	VALUES ("3c1f7470-60f4-df06-cf95-7ce052ba19db",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("aa75aff3-40b8-c218-1567-bee8e6661517",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"40f4044e-f142-b000-1c88-3043effa3abe",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"40f4044e-f142-b000-1c88-3043effa3abe",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("6d12f674-d4ca-ab3e-0a7a-a34131024470",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb");
INSERT INTO SM_AH
	VALUES ("6d12f674-d4ca-ab3e-0a7a-a34131024470",
	"36899362-ee2a-ac4e-01c5-ecc170189108");
INSERT INTO SM_ACT
	VALUES ("6d12f674-d4ca-ab3e-0a7a-a34131024470",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"8e354c1d-5852-273a-2a70-02e9cab68075",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("e6176175-e590-5ee8-e918-dcff3a86153e",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"d32743f7-4644-a40d-b13b-137ddb048cea",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("13e70eb2-800b-89eb-b3d4-b63609adafbe",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"e6176175-e590-5ee8-e918-dcff3a86153e");
INSERT INTO SM_AH
	VALUES ("13e70eb2-800b-89eb-b3d4-b63609adafbe",
	"36899362-ee2a-ac4e-01c5-ecc170189108");
INSERT INTO SM_ACT
	VALUES ("13e70eb2-800b-89eb-b3d4-b63609adafbe",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("e6176175-e590-5ee8-e918-dcff3a86153e",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"f13e2674-401b-bc19-80b6-5220f5c83006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("d31332ef-3a64-01c2-29b3-30e4d5e7962e",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"f13e2674-401b-bc19-80b6-5220f5c83006",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("343b25d2-9730-b3c6-f285-fd4c7b69e37c",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"d31332ef-3a64-01c2-29b3-30e4d5e7962e");
INSERT INTO SM_AH
	VALUES ("343b25d2-9730-b3c6-f285-fd4c7b69e37c",
	"36899362-ee2a-ac4e-01c5-ecc170189108");
INSERT INTO SM_ACT
	VALUES ("343b25d2-9730-b3c6-f285-fd4c7b69e37c",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("d31332ef-3a64-01c2-29b3-30e4d5e7962e",
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	"b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("31b02a5f-3781-1711-76ac-5b4a258bc2b2",
	8,
	"36899362-ee2a-ac4e-01c5-ecc170189108",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("b149ad0a-e816-7559-68db-ba7267bc3124",
	"31b02a5f-3781-1711-76ac-5b4a258bc2b2",
	"e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a');
INSERT INTO GD_SHP
	VALUES ("b149ad0a-e816-7559-68db-ba7267bc3124");
INSERT INTO GD_NCS
	VALUES ("b149ad0a-e816-7559-68db-ba7267bc3124");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"b149ad0a-e816-7559-68db-ba7267bc3124");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1264.000000,
	"b149ad0a-e816-7559-68db-ba7267bc3124",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b149ad0a-e816-7559-68db-ba7267bc3124",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("e3d1d1d2-ab69-0eeb-cb58-c43cc2eebb57",
	1872.000000,
	1296.000000,
	"b149ad0a-e816-7559-68db-ba7267bc3124");
INSERT INTO DIM_CON
	VALUES ("860db073-9148-5b79-6003-306fc1807a91",
	1824.000000,
	1264.000000,
	"b149ad0a-e816-7559-68db-ba7267bc3124");
INSERT INTO DIM_CON
	VALUES ("df6f622e-f576-bbe0-7f9a-b0bb198064a1",
	1792.000000,
	1344.000000,
	"b149ad0a-e816-7559-68db-ba7267bc3124");
INSERT INTO GD_GE
	VALUES ("24eb01a7-3f67-2594-67db-d6d4f1c9ad3e",
	"31b02a5f-3781-1711-76ac-5b4a258bc2b2",
	"40f4044e-f142-b000-1c88-3043effa3abe",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1b');
INSERT INTO GD_SHP
	VALUES ("24eb01a7-3f67-2594-67db-d6d4f1c9ad3e");
INSERT INTO GD_NCS
	VALUES ("24eb01a7-3f67-2594-67db-d6d4f1c9ad3e");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"24eb01a7-3f67-2594-67db-d6d4f1c9ad3e");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1456.000000,
	"24eb01a7-3f67-2594-67db-d6d4f1c9ad3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("24eb01a7-3f67-2594-67db-d6d4f1c9ad3e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("cfef5945-988d-a77c-cf3f-10b37d483576",
	1792.000000,
	1456.000000,
	"24eb01a7-3f67-2594-67db-d6d4f1c9ad3e");
INSERT INTO DIM_CON
	VALUES ("d093db78-d1ad-07d0-2ee9-13ef6144ee6a",
	1792.000000,
	1536.000000,
	"24eb01a7-3f67-2594-67db-d6d4f1c9ad3e");
INSERT INTO GD_GE
	VALUES ("f7f4c9d0-2034-f74e-8c64-477213a4813f",
	"31b02a5f-3781-1711-76ac-5b4a258bc2b2",
	"8e354c1d-5852-273a-2a70-02e9cab68075",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 2');
INSERT INTO GD_SHP
	VALUES ("f7f4c9d0-2034-f74e-8c64-477213a4813f");
INSERT INTO GD_NCS
	VALUES ("f7f4c9d0-2034-f74e-8c64-477213a4813f");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"f7f4c9d0-2034-f74e-8c64-477213a4813f");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1648.000000,
	"f7f4c9d0-2034-f74e-8c64-477213a4813f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f7f4c9d0-2034-f74e-8c64-477213a4813f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("6e8517d3-ad3b-f8b3-9c70-42683aa451c2",
	1792.000000,
	1648.000000,
	"f7f4c9d0-2034-f74e-8c64-477213a4813f");
INSERT INTO DIM_CON
	VALUES ("43bb2535-8bcb-a45b-cc5f-d38ba7e6ad63",
	1872.000000,
	1696.000000,
	"f7f4c9d0-2034-f74e-8c64-477213a4813f");
INSERT INTO GD_GE
	VALUES ("3c529531-df06-a13a-f145-058ce9a8d040",
	"31b02a5f-3781-1711-76ac-5b4a258bc2b2",
	"d32743f7-4644-a40d-b13b-137ddb048cea",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1a');
INSERT INTO GD_SHP
	VALUES ("3c529531-df06-a13a-f145-058ce9a8d040");
INSERT INTO GD_NCS
	VALUES ("3c529531-df06-a13a-f145-058ce9a8d040");
INSERT INTO DIM_ND
	VALUES (128.000000,
	64.000000,
	"3c529531-df06-a13a-f145-058ce9a8d040");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1296.000000,
	"3c529531-df06-a13a-f145-058ce9a8d040",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3c529531-df06-a13a-f145-058ce9a8d040",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("24192307-8a71-57f4-fa8e-a99dd9d96feb",
	2096.000000,
	1360.000000,
	"3c529531-df06-a13a-f145-058ce9a8d040");
INSERT INTO DIM_CON
	VALUES ("87e90c27-4a59-2e6c-6a4b-58a8d2ca5f1d",
	2096.000000,
	1296.000000,
	"3c529531-df06-a13a-f145-058ce9a8d040");
INSERT INTO GD_GE
	VALUES ("1559ef88-15ca-8c09-de51-fe63bedd0e2f",
	"31b02a5f-3781-1711-76ac-5b4a258bc2b2",
	"f13e2674-401b-bc19-80b6-5220f5c83006",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1b');
INSERT INTO GD_SHP
	VALUES ("1559ef88-15ca-8c09-de51-fe63bedd0e2f");
INSERT INTO GD_NCS
	VALUES ("1559ef88-15ca-8c09-de51-fe63bedd0e2f");
INSERT INTO DIM_ND
	VALUES (128.000000,
	80.000000,
	"1559ef88-15ca-8c09-de51-fe63bedd0e2f");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1456.000000,
	"1559ef88-15ca-8c09-de51-fe63bedd0e2f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1559ef88-15ca-8c09-de51-fe63bedd0e2f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("0706b9bb-1a03-a22a-0f4a-d8c5ed6f212a",
	2096.000000,
	1456.000000,
	"1559ef88-15ca-8c09-de51-fe63bedd0e2f");
INSERT INTO DIM_CON
	VALUES ("0debcc22-d5a3-721c-4ba0-1ec3cbceb870",
	2096.000000,
	1536.000000,
	"1559ef88-15ca-8c09-de51-fe63bedd0e2f");
INSERT INTO GD_GE
	VALUES ("36091932-ea83-1d60-c865-a54747340681",
	"31b02a5f-3781-1711-76ac-5b4a258bc2b2",
	"b3799b4d-80e2-c190-89d5-aa9411a565dc",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 2');
INSERT INTO GD_SHP
	VALUES ("36091932-ea83-1d60-c865-a54747340681");
INSERT INTO GD_NCS
	VALUES ("36091932-ea83-1d60-c865-a54747340681");
INSERT INTO DIM_ND
	VALUES (128.000000,
	80.000000,
	"36091932-ea83-1d60-c865-a54747340681");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1648.000000,
	"36091932-ea83-1d60-c865-a54747340681",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("36091932-ea83-1d60-c865-a54747340681",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("98bf671a-f811-baae-c5b5-7875b236dda6",
	2096.000000,
	1648.000000,
	"36091932-ea83-1d60-c865-a54747340681");
INSERT INTO GD_GE
	VALUES ("2756266a-2df3-f751-8abd-3e1e2eb213eb",
	"31b02a5f-3781-1711-76ac-5b4a258bc2b2",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a::UBT1: Start and test');
INSERT INTO GD_CON
	VALUES ("2756266a-2df3-f751-8abd-3e1e2eb213eb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("00fbcff8-d490-9003-7c4f-4d5280c43c2b",
	"2756266a-2df3-f751-8abd-3e1e2eb213eb",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"00fbcff8-d490-9003-7c4f-4d5280c43c2b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00fbcff8-d490-9003-7c4f-4d5280c43c2b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00fbcff8-d490-9003-7c4f-4d5280c43c2b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3e15ccc4-e544-4cdc-99db-e968eb55be1b",
	"2756266a-2df3-f751-8abd-3e1e2eb213eb",
	3,
	-66.000000,
	-5.000000);
INSERT INTO DIM_ND
	VALUES (252.000000,
	41.000000,
	"3e15ccc4-e544-4cdc-99db-e968eb55be1b");
INSERT INTO DIM_GE
	VALUES (1821.000000,
	1186.000000,
	"3e15ccc4-e544-4cdc-99db-e968eb55be1b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3e15ccc4-e544-4cdc-99db-e968eb55be1b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("76b4bfaf-d70d-0316-3970-c750ef0b8bba",
	"2756266a-2df3-f751-8abd-3e1e2eb213eb",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"76b4bfaf-d70d-0316-3970-c750ef0b8bba");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"76b4bfaf-d70d-0316-3970-c750ef0b8bba",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("76b4bfaf-d70d-0316-3970-c750ef0b8bba",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("40c32c39-28f3-022c-e6bd-71ce8296f0fa",
	"2756266a-2df3-f751-8abd-3e1e2eb213eb",
	"00000000-0000-0000-0000-000000000000",
	"53b246b0-41d8-2f6e-f88a-a7cb1cec3377",
	"8c5f4764-b9f6-8240-112c-2f07add452ed");
INSERT INTO GD_LS
	VALUES ("3c9e6e90-8ccd-52b7-d4b6-2e6beb2d6106",
	"2756266a-2df3-f751-8abd-3e1e2eb213eb",
	"40c32c39-28f3-022c-e6bd-71ce8296f0fa",
	"8c5f4764-b9f6-8240-112c-2f07add452ed",
	"e5910b26-89d3-65d8-c7e4-09f2b878fd8e");
INSERT INTO GD_LS
	VALUES ("9b3812da-b941-dda1-f2b5-5ced97b86d76",
	"2756266a-2df3-f751-8abd-3e1e2eb213eb",
	"3c9e6e90-8ccd-52b7-d4b6-2e6beb2d6106",
	"e5910b26-89d3-65d8-c7e4-09f2b878fd8e",
	"0d5781ec-fa9f-9fb5-3d8e-ac4e3c51290d");
INSERT INTO GD_LS
	VALUES ("012312cc-0e41-d8e2-60c8-9033f614388b",
	"2756266a-2df3-f751-8abd-3e1e2eb213eb",
	"9b3812da-b941-dda1-f2b5-5ced97b86d76",
	"0d5781ec-fa9f-9fb5-3d8e-ac4e3c51290d",
	"be824962-1a55-57ec-d42a-5214887e7beb");
INSERT INTO DIM_WAY
	VALUES ("53b246b0-41d8-2f6e-f88a-a7cb1cec3377",
	1872.000000,
	1296.000000,
	"2756266a-2df3-f751-8abd-3e1e2eb213eb",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("8c5f4764-b9f6-8240-112c-2f07add452ed",
	1920.000000,
	1296.000000,
	"2756266a-2df3-f751-8abd-3e1e2eb213eb",
	"00000000-0000-0000-0000-000000000000",
	"53b246b0-41d8-2f6e-f88a-a7cb1cec3377");
INSERT INTO DIM_WAY
	VALUES ("e5910b26-89d3-65d8-c7e4-09f2b878fd8e",
	1920.000000,
	1216.000000,
	"2756266a-2df3-f751-8abd-3e1e2eb213eb",
	"00000000-0000-0000-0000-000000000000",
	"8c5f4764-b9f6-8240-112c-2f07add452ed");
INSERT INTO DIM_WAY
	VALUES ("0d5781ec-fa9f-9fb5-3d8e-ac4e3c51290d",
	1824.000000,
	1216.000000,
	"2756266a-2df3-f751-8abd-3e1e2eb213eb",
	"00000000-0000-0000-0000-000000000000",
	"e5910b26-89d3-65d8-c7e4-09f2b878fd8e");
INSERT INTO DIM_WAY
	VALUES ("be824962-1a55-57ec-d42a-5214887e7beb",
	1824.000000,
	1264.000000,
	"2756266a-2df3-f751-8abd-3e1e2eb213eb",
	"00000000-0000-0000-0000-000000000000",
	"0d5781ec-fa9f-9fb5-3d8e-ac4e3c51290d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2756266a-2df3-f751-8abd-3e1e2eb213eb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2756266a-2df3-f751-8abd-3e1e2eb213eb",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e3d1d1d2-ab69-0eeb-cb58-c43cc2eebb57",
	"860db073-9148-5b79-6003-306fc1807a91",
	"2756266a-2df3-f751-8abd-3e1e2eb213eb");
INSERT INTO GD_GE
	VALUES ("80aa53ce-0ae2-3eeb-a913-44c7c33d4b1a",
	"31b02a5f-3781-1711-76ac-5b4a258bc2b2",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a::UBT2: Continue and test');
INSERT INTO GD_CON
	VALUES ("80aa53ce-0ae2-3eeb-a913-44c7c33d4b1a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("50d49c55-5db3-387a-df74-c6c828a484b3",
	"80aa53ce-0ae2-3eeb-a913-44c7c33d4b1a",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"50d49c55-5db3-387a-df74-c6c828a484b3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"50d49c55-5db3-387a-df74-c6c828a484b3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("50d49c55-5db3-387a-df74-c6c828a484b3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3c4eb77f-134b-b3eb-5f19-4ccf5fd07c58",
	"80aa53ce-0ae2-3eeb-a913-44c7c33d4b1a",
	3,
	-231.000000,
	4.000000);
INSERT INTO DIM_ND
	VALUES (248.000000,
	37.000000,
	"3c4eb77f-134b-b3eb-5f19-4ccf5fd07c58");
INSERT INTO DIM_GE
	VALUES (1545.000000,
	1389.000000,
	"3c4eb77f-134b-b3eb-5f19-4ccf5fd07c58",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3c4eb77f-134b-b3eb-5f19-4ccf5fd07c58",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d3d7f489-afe2-aa14-06a3-db6466ea447e",
	"80aa53ce-0ae2-3eeb-a913-44c7c33d4b1a",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d3d7f489-afe2-aa14-06a3-db6466ea447e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d3d7f489-afe2-aa14-06a3-db6466ea447e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d3d7f489-afe2-aa14-06a3-db6466ea447e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2ae5ed11-5c81-5b32-bb5b-c400cb2d8c45",
	"80aa53ce-0ae2-3eeb-a913-44c7c33d4b1a",
	"00000000-0000-0000-0000-000000000000",
	"9325dc13-4ccd-8fe4-2f31-887730c908cb",
	"81449443-e68a-caf2-101e-1d2a815ee493");
INSERT INTO DIM_WAY
	VALUES ("9325dc13-4ccd-8fe4-2f31-887730c908cb",
	1792.000000,
	1344.000000,
	"80aa53ce-0ae2-3eeb-a913-44c7c33d4b1a",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("81449443-e68a-caf2-101e-1d2a815ee493",
	1792.000000,
	1456.000000,
	"80aa53ce-0ae2-3eeb-a913-44c7c33d4b1a",
	"00000000-0000-0000-0000-000000000000",
	"9325dc13-4ccd-8fe4-2f31-887730c908cb");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"80aa53ce-0ae2-3eeb-a913-44c7c33d4b1a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("80aa53ce-0ae2-3eeb-a913-44c7c33d4b1a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("df6f622e-f576-bbe0-7f9a-b0bb198064a1",
	"cfef5945-988d-a77c-cf3f-10b37d483576",
	"80aa53ce-0ae2-3eeb-a913-44c7c33d4b1a");
INSERT INTO GD_GE
	VALUES ("f6443b5d-c508-8e2c-9520-d0a68bcd9f83",
	"31b02a5f-3781-1711-76ac-5b4a258bc2b2",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1b::UBT2: Continue and test');
INSERT INTO GD_CON
	VALUES ("f6443b5d-c508-8e2c-9520-d0a68bcd9f83",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("966c73b8-b5e1-114d-2720-0c99e480b342",
	"f6443b5d-c508-8e2c-9520-d0a68bcd9f83",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"966c73b8-b5e1-114d-2720-0c99e480b342");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"966c73b8-b5e1-114d-2720-0c99e480b342",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("966c73b8-b5e1-114d-2720-0c99e480b342",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("aeef6937-5c14-fca8-d330-034f2214a813",
	"f6443b5d-c508-8e2c-9520-d0a68bcd9f83",
	3,
	-212.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (226.000000,
	44.000000,
	"aeef6937-5c14-fca8-d330-034f2214a813");
INSERT INTO DIM_GE
	VALUES (1564.000000,
	1575.000000,
	"aeef6937-5c14-fca8-d330-034f2214a813",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("aeef6937-5c14-fca8-d330-034f2214a813",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e56eaa53-c2f5-afd0-37d9-0418061ba4e7",
	"f6443b5d-c508-8e2c-9520-d0a68bcd9f83",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e56eaa53-c2f5-afd0-37d9-0418061ba4e7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e56eaa53-c2f5-afd0-37d9-0418061ba4e7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e56eaa53-c2f5-afd0-37d9-0418061ba4e7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("0e36bee2-f2db-b8e2-c488-239965c3d8b4",
	"f6443b5d-c508-8e2c-9520-d0a68bcd9f83",
	"00000000-0000-0000-0000-000000000000",
	"ff12a63a-c6b0-a58f-6a07-6afdf17eb85e",
	"5db37dad-f577-e497-9bcb-c443f35c1cc5");
INSERT INTO DIM_WAY
	VALUES ("ff12a63a-c6b0-a58f-6a07-6afdf17eb85e",
	1792.000000,
	1536.000000,
	"f6443b5d-c508-8e2c-9520-d0a68bcd9f83",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("5db37dad-f577-e497-9bcb-c443f35c1cc5",
	1792.000000,
	1648.000000,
	"f6443b5d-c508-8e2c-9520-d0a68bcd9f83",
	"00000000-0000-0000-0000-000000000000",
	"ff12a63a-c6b0-a58f-6a07-6afdf17eb85e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f6443b5d-c508-8e2c-9520-d0a68bcd9f83",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f6443b5d-c508-8e2c-9520-d0a68bcd9f83",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("d093db78-d1ad-07d0-2ee9-13ef6144ee6a",
	"6e8517d3-ad3b-f8b3-9c70-42683aa451c2",
	"f6443b5d-c508-8e2c-9520-d0a68bcd9f83");
INSERT INTO GD_GE
	VALUES ("5007e1fb-c6d6-7dcb-069b-f85d5b559106",
	"31b02a5f-3781-1711-76ac-5b4a258bc2b2",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1a::UBT4: Continue or test');
INSERT INTO GD_CON
	VALUES ("5007e1fb-c6d6-7dcb-069b-f85d5b559106",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("594e1f9a-5424-4314-1ad8-591c2ff0baf0",
	"5007e1fb-c6d6-7dcb-069b-f85d5b559106",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"594e1f9a-5424-4314-1ad8-591c2ff0baf0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"594e1f9a-5424-4314-1ad8-591c2ff0baf0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("594e1f9a-5424-4314-1ad8-591c2ff0baf0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("58137000-f844-d4fd-5401-aeae87982643",
	"5007e1fb-c6d6-7dcb-069b-f85d5b559106",
	3,
	-13.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (274.000000,
	38.000000,
	"58137000-f844-d4fd-5401-aeae87982643");
INSERT INTO DIM_GE
	VALUES (2067.000000,
	1394.000000,
	"58137000-f844-d4fd-5401-aeae87982643",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("58137000-f844-d4fd-5401-aeae87982643",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f8e90aea-3a49-2ec2-6a4a-7cfae645a9ff",
	"5007e1fb-c6d6-7dcb-069b-f85d5b559106",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f8e90aea-3a49-2ec2-6a4a-7cfae645a9ff");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f8e90aea-3a49-2ec2-6a4a-7cfae645a9ff",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f8e90aea-3a49-2ec2-6a4a-7cfae645a9ff",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("76830bf5-4e6e-fe81-ed6a-14dc15e61555",
	"5007e1fb-c6d6-7dcb-069b-f85d5b559106",
	"00000000-0000-0000-0000-000000000000",
	"c0aa5051-85e9-0487-0a22-da4574e2ecba",
	"01d1b458-5efe-daf7-17c1-ab741de57f70");
INSERT INTO DIM_WAY
	VALUES ("c0aa5051-85e9-0487-0a22-da4574e2ecba",
	2096.000000,
	1360.000000,
	"5007e1fb-c6d6-7dcb-069b-f85d5b559106",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("01d1b458-5efe-daf7-17c1-ab741de57f70",
	2096.000000,
	1456.000000,
	"5007e1fb-c6d6-7dcb-069b-f85d5b559106",
	"00000000-0000-0000-0000-000000000000",
	"c0aa5051-85e9-0487-0a22-da4574e2ecba");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5007e1fb-c6d6-7dcb-069b-f85d5b559106",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5007e1fb-c6d6-7dcb-069b-f85d5b559106",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("24192307-8a71-57f4-fa8e-a99dd9d96feb",
	"0706b9bb-1a03-a22a-0f4a-d8c5ed6f212a",
	"5007e1fb-c6d6-7dcb-069b-f85d5b559106");
INSERT INTO GD_GE
	VALUES ("4ee0b016-9878-7064-fc2a-fe0d8d64cf71",
	"31b02a5f-3781-1711-76ac-5b4a258bc2b2",
	"d31332ef-3a64-01c2-29b3-30e4d5e7962e",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1b::UBT4: Continue or test');
INSERT INTO GD_CON
	VALUES ("4ee0b016-9878-7064-fc2a-fe0d8d64cf71",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f008d2dc-3fbd-9d17-5788-d23e1e4868b1",
	"4ee0b016-9878-7064-fc2a-fe0d8d64cf71",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f008d2dc-3fbd-9d17-5788-d23e1e4868b1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f008d2dc-3fbd-9d17-5788-d23e1e4868b1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f008d2dc-3fbd-9d17-5788-d23e1e4868b1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("14987ea6-c5c1-26e5-b83a-733a09fc2af2",
	"4ee0b016-9878-7064-fc2a-fe0d8d64cf71",
	3,
	-15.000000,
	7.000000);
INSERT INTO DIM_ND
	VALUES (272.000000,
	41.000000,
	"14987ea6-c5c1-26e5-b83a-733a09fc2af2");
INSERT INTO DIM_GE
	VALUES (2065.000000,
	1584.000000,
	"14987ea6-c5c1-26e5-b83a-733a09fc2af2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("14987ea6-c5c1-26e5-b83a-733a09fc2af2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("566cb97f-18ba-f28f-ae27-9c4388e0c305",
	"4ee0b016-9878-7064-fc2a-fe0d8d64cf71",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"566cb97f-18ba-f28f-ae27-9c4388e0c305");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"566cb97f-18ba-f28f-ae27-9c4388e0c305",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("566cb97f-18ba-f28f-ae27-9c4388e0c305",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("0cac2611-994e-d717-8ce5-d4a46ea39f18",
	"4ee0b016-9878-7064-fc2a-fe0d8d64cf71",
	"00000000-0000-0000-0000-000000000000",
	"58c72aca-c49a-0666-be52-d7481a422eeb",
	"82b42a46-9717-fdfe-451d-9e9384f61b7a");
INSERT INTO DIM_WAY
	VALUES ("58c72aca-c49a-0666-be52-d7481a422eeb",
	2096.000000,
	1536.000000,
	"4ee0b016-9878-7064-fc2a-fe0d8d64cf71",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("82b42a46-9717-fdfe-451d-9e9384f61b7a",
	2096.000000,
	1648.000000,
	"4ee0b016-9878-7064-fc2a-fe0d8d64cf71",
	"00000000-0000-0000-0000-000000000000",
	"58c72aca-c49a-0666-be52-d7481a422eeb");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4ee0b016-9878-7064-fc2a-fe0d8d64cf71",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4ee0b016-9878-7064-fc2a-fe0d8d64cf71",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("0debcc22-d5a3-721c-4ba0-1ec3cbceb870",
	"98bf671a-f811-baae-c5b5-7875b236dda6",
	"4ee0b016-9878-7064-fc2a-fe0d8d64cf71");
INSERT INTO GD_GE
	VALUES ("52da47bc-c286-da55-7a3d-fe130ed163b8",
	"31b02a5f-3781-1711-76ac-5b4a258bc2b2",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 2::UBT3: Start or test');
INSERT INTO GD_CON
	VALUES ("52da47bc-c286-da55-7a3d-fe130ed163b8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("285918c3-9737-359e-e297-d3847a74c3b2",
	"52da47bc-c286-da55-7a3d-fe130ed163b8",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"285918c3-9737-359e-e297-d3847a74c3b2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"285918c3-9737-359e-e297-d3847a74c3b2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("285918c3-9737-359e-e297-d3847a74c3b2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("56b605ef-cce0-b0a4-f230-d39a2536d830",
	"52da47bc-c286-da55-7a3d-fe130ed163b8",
	3,
	105.000000,
	-196.000000);
INSERT INTO DIM_ND
	VALUES (235.000000,
	45.000000,
	"56b605ef-cce0-b0a4-f230-d39a2536d830");
INSERT INTO DIM_GE
	VALUES (2057.000000,
	1221.000000,
	"56b605ef-cce0-b0a4-f230-d39a2536d830",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("56b605ef-cce0-b0a4-f230-d39a2536d830",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("80692247-103c-28aa-63dd-a9bd8530a76d",
	"52da47bc-c286-da55-7a3d-fe130ed163b8",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"80692247-103c-28aa-63dd-a9bd8530a76d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"80692247-103c-28aa-63dd-a9bd8530a76d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("80692247-103c-28aa-63dd-a9bd8530a76d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("d01ea7c9-79a6-1b3d-112b-c358b8f04c5b",
	"52da47bc-c286-da55-7a3d-fe130ed163b8",
	"00000000-0000-0000-0000-000000000000",
	"e318a591-6c77-7998-2dff-d4ad546d4f39",
	"b6657474-f148-7d7b-ddc3-1addc4fb6837");
INSERT INTO GD_LS
	VALUES ("07a01a77-7940-91b8-3c53-1fdd940e4042",
	"52da47bc-c286-da55-7a3d-fe130ed163b8",
	"d01ea7c9-79a6-1b3d-112b-c358b8f04c5b",
	"b6657474-f148-7d7b-ddc3-1addc4fb6837",
	"95784f15-4e1f-d7a8-f8bb-07403e1e9ae5");
INSERT INTO GD_LS
	VALUES ("cadc37d1-ef13-18d3-c57a-b8d29d39080c",
	"52da47bc-c286-da55-7a3d-fe130ed163b8",
	"07a01a77-7940-91b8-3c53-1fdd940e4042",
	"95784f15-4e1f-d7a8-f8bb-07403e1e9ae5",
	"a5a0dd8e-b12c-27c3-84b8-85b77d92cc46");
INSERT INTO GD_LS
	VALUES ("2c2caa18-658e-25ad-6915-8a3156a2c579",
	"52da47bc-c286-da55-7a3d-fe130ed163b8",
	"cadc37d1-ef13-18d3-c57a-b8d29d39080c",
	"a5a0dd8e-b12c-27c3-84b8-85b77d92cc46",
	"4fa5b396-e538-d6ef-5f5e-6691d8d4cbba");
INSERT INTO DIM_WAY
	VALUES ("e318a591-6c77-7998-2dff-d4ad546d4f39",
	1872.000000,
	1696.000000,
	"52da47bc-c286-da55-7a3d-fe130ed163b8",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("b6657474-f148-7d7b-ddc3-1addc4fb6837",
	1968.000000,
	1696.000000,
	"52da47bc-c286-da55-7a3d-fe130ed163b8",
	"00000000-0000-0000-0000-000000000000",
	"e318a591-6c77-7998-2dff-d4ad546d4f39");
INSERT INTO DIM_WAY
	VALUES ("95784f15-4e1f-d7a8-f8bb-07403e1e9ae5",
	1968.000000,
	1248.000000,
	"52da47bc-c286-da55-7a3d-fe130ed163b8",
	"00000000-0000-0000-0000-000000000000",
	"b6657474-f148-7d7b-ddc3-1addc4fb6837");
INSERT INTO DIM_WAY
	VALUES ("a5a0dd8e-b12c-27c3-84b8-85b77d92cc46",
	2096.000000,
	1248.000000,
	"52da47bc-c286-da55-7a3d-fe130ed163b8",
	"00000000-0000-0000-0000-000000000000",
	"95784f15-4e1f-d7a8-f8bb-07403e1e9ae5");
INSERT INTO DIM_WAY
	VALUES ("4fa5b396-e538-d6ef-5f5e-6691d8d4cbba",
	2096.000000,
	1296.000000,
	"52da47bc-c286-da55-7a3d-fe130ed163b8",
	"00000000-0000-0000-0000-000000000000",
	"a5a0dd8e-b12c-27c3-84b8-85b77d92cc46");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"52da47bc-c286-da55-7a3d-fe130ed163b8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("52da47bc-c286-da55-7a3d-fe130ed163b8",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("43bb2535-8bcb-a45b-cc5f-d38ba7e6ad63",
	"87e90c27-4a59-2e6c-6a4b-58a8d2ca5f1d",
	"52da47bc-c286-da55-7a3d-fe130ed163b8");
INSERT INTO DIM_DIA
	VALUES ("31b02a5f-3781-1711-76ac-5b4a258bc2b2",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	'User Other Boolean Test',
	19,
	'UOBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("f91add83-0bb5-b790-fa50-83e130b4fa84",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70");
INSERT INTO O_BATTR
	VALUES ("f91add83-0bb5-b790-fa50-83e130b4fa84",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70");
INSERT INTO O_ATTR
	VALUES ("f91add83-0bb5-b790-fa50-83e130b4fa84",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"00000000-0000-0000-0000-000000000000",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5e42ba8d-3d4c-4b02-58b6-96f03c4520fc",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70");
INSERT INTO O_BATTR
	VALUES ("5e42ba8d-3d4c-4b02-58b6-96f03c4520fc",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70");
INSERT INTO O_ATTR
	VALUES ("5e42ba8d-3d4c-4b02-58b6-96f03c4520fc",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"f91add83-0bb5-b790-fa50-83e130b4fa84",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	'',
	'');
INSERT INTO O_REF
	VALUES ("2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	0,
	"5b342212-a9f5-41ad-f1b0-3ebaed8d7588",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"9f27ab91-0194-b361-7e67-c537592b48d1",
	"7fc2d4b2-faeb-3735-a9e1-bb2ab988fd86",
	"ec9ce7b0-4da6-ce7a-7d77-092b335e2936",
	"7fd31cc5-4c81-453c-5cea-ee1041f6ac96",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Boolean Test',
	'id',
	'R13');
INSERT INTO O_RATTR
	VALUES ("ec9ce7b0-4da6-ce7a-7d77-092b335e2936",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"5b342212-a9f5-41ad-f1b0-3ebaed8d7588",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	1,
	'id');
INSERT INTO O_ATTR
	VALUES ("ec9ce7b0-4da6-ce7a-7d77-092b335e2936",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"5e42ba8d-3d4c-4b02-58b6-96f03c4520fc",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"b206dfa5-6fc4-3dad-f9b8-10333f80829d",
	0,
	"4463774f-b7f4-496a-9234-f6187ee88b96",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	"f1b17a81-6479-6bae-e09d-40a3c7998cfc",
	"a51df3ee-4ec7-695a-e7b6-6e08001f8157",
	"73a87d8d-920f-5045-5d06-12de6044e2c7",
	"4e42ae8d-e3de-aceb-08e0-5e95cf30872d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Third Boolean Test',
	'btrue',
	'R14');
INSERT INTO O_RATTR
	VALUES ("73a87d8d-920f-5045-5d06-12de6044e2c7",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"4463774f-b7f4-496a-9234-f6187ee88b96",
	"b206dfa5-6fc4-3dad-f9b8-10333f80829d",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("73a87d8d-920f-5045-5d06-12de6044e2c7",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"ec9ce7b0-4da6-ce7a-7d77-092b335e2936",
	'r11btrue',
	'',
	'r11',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"b206dfa5-6fc4-3dad-f9b8-10333f80829d",
	0,
	"95296e2e-8956-9277-e949-d5f922af20d4",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	"f1b17a81-6479-6bae-e09d-40a3c7998cfc",
	"a51df3ee-4ec7-695a-e7b6-6e08001f8157",
	"23be9183-ac52-6ab4-4667-0427148fc222",
	"9c85cfe9-eceb-b23b-b4ae-4c474f4ad325",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Third Boolean Test',
	'bfalse',
	'R14');
INSERT INTO O_RATTR
	VALUES ("23be9183-ac52-6ab4-4667-0427148fc222",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"95296e2e-8956-9277-e949-d5f922af20d4",
	"b206dfa5-6fc4-3dad-f9b8-10333f80829d",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("23be9183-ac52-6ab4-4667-0427148fc222",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"73a87d8d-920f-5045-5d06-12de6044e2c7",
	'r11bfalse',
	'',
	'r11',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70");
INSERT INTO O_OIDA
	VALUES ("5e42ba8d-3d4c-4b02-58b6-96f03c4520fc",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("f91add83-0bb5-b790-fa50-83e130b4fa84",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	0,
	'bfalse');
INSERT INTO O_ID
	VALUES (1,
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70");
INSERT INTO O_ID
	VALUES (2,
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70");
INSERT INTO PE_PE
	VALUES ("b206dfa5-6fc4-3dad-f9b8-10333f80829d",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("b206dfa5-6fc4-3dad-f9b8-10333f80829d",
	'User Third Boolean Test',
	20,
	'UTBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("4463774f-b7f4-496a-9234-f6187ee88b96",
	"b206dfa5-6fc4-3dad-f9b8-10333f80829d");
INSERT INTO O_BATTR
	VALUES ("4463774f-b7f4-496a-9234-f6187ee88b96",
	"b206dfa5-6fc4-3dad-f9b8-10333f80829d");
INSERT INTO O_ATTR
	VALUES ("4463774f-b7f4-496a-9234-f6187ee88b96",
	"b206dfa5-6fc4-3dad-f9b8-10333f80829d",
	"00000000-0000-0000-0000-000000000000",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("95296e2e-8956-9277-e949-d5f922af20d4",
	"b206dfa5-6fc4-3dad-f9b8-10333f80829d");
INSERT INTO O_BATTR
	VALUES ("95296e2e-8956-9277-e949-d5f922af20d4",
	"b206dfa5-6fc4-3dad-f9b8-10333f80829d");
INSERT INTO O_ATTR
	VALUES ("95296e2e-8956-9277-e949-d5f922af20d4",
	"b206dfa5-6fc4-3dad-f9b8-10333f80829d",
	"4463774f-b7f4-496a-9234-f6187ee88b96",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"b206dfa5-6fc4-3dad-f9b8-10333f80829d");
INSERT INTO O_OIDA
	VALUES ("4463774f-b7f4-496a-9234-f6187ee88b96",
	"b206dfa5-6fc4-3dad-f9b8-10333f80829d",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("95296e2e-8956-9277-e949-d5f922af20d4",
	"b206dfa5-6fc4-3dad-f9b8-10333f80829d",
	0,
	'bfalse');
INSERT INTO O_ID
	VALUES (1,
	"b206dfa5-6fc4-3dad-f9b8-10333f80829d");
INSERT INTO O_ID
	VALUES (2,
	"b206dfa5-6fc4-3dad-f9b8-10333f80829d");
INSERT INTO PE_PE
	VALUES ("15897bf0-a009-f6d4-8f3c-4d78354e6954",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("15897bf0-a009-f6d4-8f3c-4d78354e6954",
	'ex init',
	1,
	'USERINIT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("6677d4a6-76bd-34bb-d740-6dfa7f61ff49",
	"15897bf0-a009-f6d4-8f3c-4d78354e6954");
INSERT INTO O_BATTR
	VALUES ("6677d4a6-76bd-34bb-d740-6dfa7f61ff49",
	"15897bf0-a009-f6d4-8f3c-4d78354e6954");
INSERT INTO O_ATTR
	VALUES ("6677d4a6-76bd-34bb-d740-6dfa7f61ff49",
	"15897bf0-a009-f6d4-8f3c-4d78354e6954",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1abaa67a-6790-7d12-6bbd-6c896f90ecf0",
	"15897bf0-a009-f6d4-8f3c-4d78354e6954");
INSERT INTO O_BATTR
	VALUES ("1abaa67a-6790-7d12-6bbd-6c896f90ecf0",
	"15897bf0-a009-f6d4-8f3c-4d78354e6954");
INSERT INTO O_ATTR
	VALUES ("1abaa67a-6790-7d12-6bbd-6c896f90ecf0",
	"15897bf0-a009-f6d4-8f3c-4d78354e6954",
	"6677d4a6-76bd-34bb-d740-6dfa7f61ff49",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"15897bf0-a009-f6d4-8f3c-4d78354e6954");
INSERT INTO O_OIDA
	VALUES ("6677d4a6-76bd-34bb-d740-6dfa7f61ff49",
	"15897bf0-a009-f6d4-8f3c-4d78354e6954",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"15897bf0-a009-f6d4-8f3c-4d78354e6954");
INSERT INTO O_ID
	VALUES (2,
	"15897bf0-a009-f6d4-8f3c-4d78354e6954");
INSERT INTO SM_ISM
	VALUES ("b1dc22d9-3d54-3e9e-2fe1-cb4f7ac46f9c",
	"15897bf0-a009-f6d4-8f3c-4d78354e6954");
INSERT INTO SM_SM
	VALUES ("b1dc22d9-3d54-3e9e-2fe1-cb4f7ac46f9c",
	'',
	3);
INSERT INTO SM_MOORE
	VALUES ("b1dc22d9-3d54-3e9e-2fe1-cb4f7ac46f9c");
INSERT INTO SM_LEVT
	VALUES ("36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"b1dc22d9-3d54-3e9e-2fe1-cb4f7ac46f9c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"b1dc22d9-3d54-3e9e-2fe1-cb4f7ac46f9c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"b1dc22d9-3d54-3e9e-2fe1-cb4f7ac46f9c",
	"00000000-0000-0000-0000-000000000000",
	1,
	'init',
	0,
	'',
	'USERINIT1',
	'');
INSERT INTO SM_STATE
	VALUES ("3e85b013-5007-89e2-0969-5e66fc0e2395",
	"b1dc22d9-3d54-3e9e-2fe1-cb4f7ac46f9c",
	"00000000-0000-0000-0000-000000000000",
	'ex init',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("3e85b013-5007-89e2-0969-5e66fc0e2395",
	"36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"b1dc22d9-3d54-3e9e-2fe1-cb4f7ac46f9c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("f761e7eb-7543-dcc4-dbdd-eb56ff47a2de",
	"b1dc22d9-3d54-3e9e-2fe1-cb4f7ac46f9c",
	"3e85b013-5007-89e2-0969-5e66fc0e2395");
INSERT INTO SM_AH
	VALUES ("f761e7eb-7543-dcc4-dbdd-eb56ff47a2de",
	"b1dc22d9-3d54-3e9e-2fe1-cb4f7ac46f9c");
INSERT INTO SM_ACT
	VALUES ("f761e7eb-7543-dcc4-dbdd-eb56ff47a2de",
	"b1dc22d9-3d54-3e9e-2fe1-cb4f7ac46f9c",
	1,
	'LOG::LogInfo(message:"a1test_exconfig: a1test_exconfig init") ;

// create preexisting instances
create object instance ev of EV;
assign ev.shutdown_count = 3;
create object instance et of ET;
assign et.btrue = TRUE;
assign et.et_id = 1;
create object instance one_inst of OI;
relate et to one_inst across R3;
create object instance mi1 of MI;
relate et to mi1 across R4;
create object instance mi2 of MI;
relate et to mi2 across R4;

create object instance etob1 of ETOB;
assign etob1.etob_id = 2;
assign etob1.r = 2.1718;
assign etob1.btrue = TRUE;
assign etob1.bfalse = FALSE;
assign etob1.s = "etob1 string";
bridge etob1.d = TIM::create_date(second:17,minute:7,hour:13,day:9,month:8,year:1991);
select any event_instance from instances of EV;
create event instance ev_temp of EV1:''Event Instance''(message:"etob1 event instance") to event_instance;
assign etob1.ev = ev_temp;
bridge etob1.tim = TIM::timer_start ( microseconds:2000000, event_inst:ev_temp);
relate et to etob1 across R1;
relate et to etob1 across R8;
create object instance etob2 of ETOB;
assign etob2.etob_id = 3;
assign etob2.r = 1.616;
assign etob2.btrue = TRUE;
assign etob2.bfalse = FALSE;
assign etob2.s = "etob2 string";
relate et to etob2 across R8;

create object instance etoc of ETOC;
assign etoc.etoc_id = 4;
assign etoc.r = 11.311;
assign etoc.btrue = TRUE;
assign etoc.bfalse = FALSE;
assign etoc.s = "etoc string";
bridge etoc.d = TIM::create_date(second:10,minute:0,hour:0,day:13,month:12,year:1997);
create event instance ev_temp2 of EV1:''Event Instance''(message:"etoc event instance") to event_instance;
assign etoc.ev = ev_temp2;
bridge etoc.tim = TIM::timer_start ( microseconds:2000000, event_inst:ev_temp2);

relate etob1 to etoc across R6;
create object instance etoc2 of ETOC;
assign etoc2.etoc_id = 5;
assign etoc2.r = 17.311;
assign etoc2.btrue = TRUE;
assign etoc2.bfalse = FALSE;
assign etoc2.s = "etoc2 string";
relate etob2 to etoc2 across R6;

create object instance bet of BET;
assign bet.btrue = TRUE;
assign bet.bfalse = FALSE;
create object instance obet1 of OBET;
assign obet1.btrue = TRUE;
assign obet1.bfalse = FALSE;
relate bet to obet1 across R9;
relate bet to obet1 across R10;
create object instance obet2 of OBET;
assign obet2.btrue = TRUE;
assign obet2.bfalse = FALSE;
relate bet to obet2 across R10;
create object instance tbet1 of TBET;
assign tbet1.btrue = TRUE;
assign tbet1.bfalse = FALSE;
relate tbet1 to obet1 across R11;
create object instance tbet2 of TBET;
assign tbet2.btrue = TRUE;
assign tbet2.bfalse = FALSE;
relate tbet2 to obet2 across R11;

create object instance ubt of UBT;
assign ubt.btrue = TRUE;
assign ubt.bfalse = FALSE;

create object instance uobt1 of UOBT;
assign uobt1.btrue = TRUE;
assign uobt1.bfalse = FALSE;
relate ubt to uobt1 across R12;
relate ubt to uobt1 across R13;

create object instance uobt2 of UOBT;
assign uobt2.btrue = TRUE;
assign uobt2.bfalse = FALSE;
relate ubt to uobt2 across R13;

create object instance utbt1 of UTBT;
assign utbt1.btrue = TRUE;
assign utbt1.bfalse = FALSE;
relate utbt1 to uobt1 across R14;

create object instance utbt2 of UTBT;
assign utbt2.btrue = TRUE;
assign utbt2.bfalse = FALSE;
relate utbt2 to uobt2 across R14;


// no instances of NOI should be created

// start the expression test
generate ET1:''Start Expression Test''() to et;

generate BET1:''Start and test''( ttrue: true, tfalse: false) to bet;
generate UBT1:''Start and test''( ttrue: true, tfalse: false) to ubt;
',
	'');
INSERT INTO SM_NSTXN
	VALUES ("b259479f-1956-e363-c395-911bb8c35cd3",
	"b1dc22d9-3d54-3e9e-2fe1-cb4f7ac46f9c",
	"3e85b013-5007-89e2-0969-5e66fc0e2395",
	"36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14",
	"b1dc22d9-3d54-3e9e-2fe1-cb4f7ac46f9c",
	"b259479f-1956-e363-c395-911bb8c35cd3");
INSERT INTO SM_AH
	VALUES ("32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14",
	"b1dc22d9-3d54-3e9e-2fe1-cb4f7ac46f9c");
INSERT INTO SM_ACT
	VALUES ("32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14",
	"b1dc22d9-3d54-3e9e-2fe1-cb4f7ac46f9c",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("b259479f-1956-e363-c395-911bb8c35cd3",
	"b1dc22d9-3d54-3e9e-2fe1-cb4f7ac46f9c",
	"3e85b013-5007-89e2-0969-5e66fc0e2395",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("709624c2-424c-e716-60b6-68615b621231",
	8,
	"b1dc22d9-3d54-3e9e-2fe1-cb4f7ac46f9c",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("0a322357-a215-cdc4-bd38-efa114bb7daf",
	"709624c2-424c-e716-60b6-68615b621231",
	"3e85b013-5007-89e2-0969-5e66fc0e2395",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine::ex init');
INSERT INTO GD_SHP
	VALUES ("0a322357-a215-cdc4-bd38-efa114bb7daf");
INSERT INTO GD_NCS
	VALUES ("0a322357-a215-cdc4-bd38-efa114bb7daf");
INSERT INTO DIM_ND
	VALUES (496.000000,
	480.000000,
	"0a322357-a215-cdc4-bd38-efa114bb7daf");
INSERT INTO DIM_GE
	VALUES (1744.000000,
	1248.000000,
	"0a322357-a215-cdc4-bd38-efa114bb7daf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0a322357-a215-cdc4-bd38-efa114bb7daf",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("4ae64cde-c5c5-198e-a964-558f0c217360",
	2240.000000,
	1296.000000,
	"0a322357-a215-cdc4-bd38-efa114bb7daf");
INSERT INTO DIM_CON
	VALUES ("fe041589-14b3-ac4b-a5ed-3bbeae197cf5",
	2176.000000,
	1248.000000,
	"0a322357-a215-cdc4-bd38-efa114bb7daf");
INSERT INTO GD_GE
	VALUES ("6403d002-cdd9-bcc8-e54d-8724359b5965",
	"709624c2-424c-e716-60b6-68615b621231",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine::ex init::USERINIT1: init');
INSERT INTO GD_CON
	VALUES ("6403d002-cdd9-bcc8-e54d-8724359b5965",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2cdd4571-b87e-e9d6-e576-973c5db726d2",
	"6403d002-cdd9-bcc8-e54d-8724359b5965",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"2cdd4571-b87e-e9d6-e576-973c5db726d2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2cdd4571-b87e-e9d6-e576-973c5db726d2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2cdd4571-b87e-e9d6-e576-973c5db726d2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e6cd6281-44e9-7c3e-1c80-ebd7e37b8c41",
	"6403d002-cdd9-bcc8-e54d-8724359b5965",
	3,
	-109.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (145.000000,
	33.000000,
	"e6cd6281-44e9-7c3e-1c80-ebd7e37b8c41");
INSERT INTO DIM_GE
	VALUES (2178.000000,
	1171.000000,
	"e6cd6281-44e9-7c3e-1c80-ebd7e37b8c41",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e6cd6281-44e9-7c3e-1c80-ebd7e37b8c41",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4d7cf5f6-cf16-c56f-e2bf-698803044c5c",
	"6403d002-cdd9-bcc8-e54d-8724359b5965",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4d7cf5f6-cf16-c56f-e2bf-698803044c5c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4d7cf5f6-cf16-c56f-e2bf-698803044c5c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4d7cf5f6-cf16-c56f-e2bf-698803044c5c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("26a17919-7f47-be2d-cb5d-5237da399f13",
	"6403d002-cdd9-bcc8-e54d-8724359b5965",
	"00000000-0000-0000-0000-000000000000",
	"1231b1cb-6737-401b-4742-5faddc0b5441",
	"64be1837-6be9-299b-1750-54ac53fe86be");
INSERT INTO GD_LS
	VALUES ("aea589df-463b-c449-bffd-45e7bf93ec48",
	"6403d002-cdd9-bcc8-e54d-8724359b5965",
	"26a17919-7f47-be2d-cb5d-5237da399f13",
	"64be1837-6be9-299b-1750-54ac53fe86be",
	"b4c7e04d-3793-c086-9d05-50053265754c");
INSERT INTO GD_LS
	VALUES ("61ba2fe9-529c-4576-2c23-4c1a6f7e55a4",
	"6403d002-cdd9-bcc8-e54d-8724359b5965",
	"aea589df-463b-c449-bffd-45e7bf93ec48",
	"b4c7e04d-3793-c086-9d05-50053265754c",
	"b6c3c321-400f-acfb-dc4e-b93f6b30a40f");
INSERT INTO GD_LS
	VALUES ("93ba4f6f-5311-6b27-e657-07f737812b48",
	"6403d002-cdd9-bcc8-e54d-8724359b5965",
	"61ba2fe9-529c-4576-2c23-4c1a6f7e55a4",
	"b6c3c321-400f-acfb-dc4e-b93f6b30a40f",
	"a888642c-d229-536b-0a3d-a28db25bedb5");
INSERT INTO DIM_WAY
	VALUES ("1231b1cb-6737-401b-4742-5faddc0b5441",
	2240.000000,
	1296.000000,
	"6403d002-cdd9-bcc8-e54d-8724359b5965",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("64be1837-6be9-299b-1750-54ac53fe86be",
	2320.000000,
	1296.000000,
	"6403d002-cdd9-bcc8-e54d-8724359b5965",
	"00000000-0000-0000-0000-000000000000",
	"1231b1cb-6737-401b-4742-5faddc0b5441");
INSERT INTO DIM_WAY
	VALUES ("b4c7e04d-3793-c086-9d05-50053265754c",
	2320.000000,
	1200.000000,
	"6403d002-cdd9-bcc8-e54d-8724359b5965",
	"00000000-0000-0000-0000-000000000000",
	"64be1837-6be9-299b-1750-54ac53fe86be");
INSERT INTO DIM_WAY
	VALUES ("b6c3c321-400f-acfb-dc4e-b93f6b30a40f",
	2176.000000,
	1200.000000,
	"6403d002-cdd9-bcc8-e54d-8724359b5965",
	"00000000-0000-0000-0000-000000000000",
	"b4c7e04d-3793-c086-9d05-50053265754c");
INSERT INTO DIM_WAY
	VALUES ("a888642c-d229-536b-0a3d-a28db25bedb5",
	2176.000000,
	1248.000000,
	"6403d002-cdd9-bcc8-e54d-8724359b5965",
	"00000000-0000-0000-0000-000000000000",
	"b6c3c321-400f-acfb-dc4e-b93f6b30a40f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6403d002-cdd9-bcc8-e54d-8724359b5965",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6403d002-cdd9-bcc8-e54d-8724359b5965",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("4ae64cde-c5c5-198e-a964-558f0c217360",
	"fe041589-14b3-ac4b-a5ed-3bbeae197cf5",
	"6403d002-cdd9-bcc8-e54d-8724359b5965");
INSERT INTO DIM_DIA
	VALUES ("709624c2-424c-e716-60b6-68615b621231",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("372f7ad8-e7f3-b8e3-5184-115687871612",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("372f7ad8-e7f3-b8e3-5184-115687871612",
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO R_PART
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("bd1acf6e-e8e6-46c9-9b64-272d3b5b77ed",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO O_RTIDA
	VALUES ("684076c7-a2d3-be88-66ff-b7481115f804",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO O_RTIDA
	VALUES ("988bf124-e0f1-2e44-35f8-20aa22f2b32e",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO O_RTIDA
	VALUES ("012785f1-36c8-ba79-1c2f-35e33f32ee40",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO O_RTIDA
	VALUES ("dc6947ac-d33d-7048-bd97-232710b93e96",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO O_RTIDA
	VALUES ("1b59e831-033b-9ce7-b65e-5fe2efb3849d",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO O_RTIDA
	VALUES ("1c6e4e05-9a57-8267-b621-28a6cb4da292",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO O_RTIDA
	VALUES ("9f821190-633f-b88a-15c0-58473e04dab8",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO O_RTIDA
	VALUES ("a80aa59c-df79-e41d-8fbf-e286acbecbfd",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO O_RTIDA
	VALUES ("8ca4e67c-d9ba-ea2d-6855-dd300826b5d1",
	"71c54fe4-59a0-240f-b91a-32f5ee853c14",
	0,
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO R_RTO
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	0);
INSERT INTO R_OIR
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"2c4dfa33-317a-2057-4799-ca233db1e10a");
INSERT INTO R_OIR
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("cfe272ca-4283-938d-c941-1cb80c6d35a9",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("cfe272ca-4283-938d-c941-1cb80c6d35a9",
	2,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("cfe272ca-4283-938d-c941-1cb80c6d35a9");
INSERT INTO R_PART
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("b243aea3-7f76-54e6-9dcf-022365a6e156",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	0,
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5");
INSERT INTO R_RTO
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5",
	0);
INSERT INTO R_OIR
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("4499f6c3-80dc-704a-30c4-634afc20fa11",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"fec823f3-30b7-8aec-c9b7-169afcf2e052",
	1,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("4499f6c3-80dc-704a-30c4-634afc20fa11",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"fec823f3-30b7-8aec-c9b7-169afcf2e052");
INSERT INTO R_OIR
	VALUES ("4499f6c3-80dc-704a-30c4-634afc20fa11",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"fec823f3-30b7-8aec-c9b7-169afcf2e052",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("db49e71d-0dee-550f-a922-b30ac8d361b3",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("db49e71d-0dee-550f-a922-b30ac8d361b3",
	3,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("db49e71d-0dee-550f-a922-b30ac8d361b3");
INSERT INTO R_PART
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	"5bf95f81-bb7c-8400-6836-f1339f7c917e",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("b243aea3-7f76-54e6-9dcf-022365a6e156",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	0,
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	"5bf95f81-bb7c-8400-6836-f1339f7c917e");
INSERT INTO R_RTO
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	"5bf95f81-bb7c-8400-6836-f1339f7c917e",
	0);
INSERT INTO R_OIR
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	"5bf95f81-bb7c-8400-6836-f1339f7c917e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("5e5da798-8add-9fc9-ec77-a674a64f4e16",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	"e46687fc-d696-59c0-16bf-f541d57a57d1",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("5e5da798-8add-9fc9-ec77-a674a64f4e16",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	"e46687fc-d696-59c0-16bf-f541d57a57d1");
INSERT INTO R_OIR
	VALUES ("5e5da798-8add-9fc9-ec77-a674a64f4e16",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	"e46687fc-d696-59c0-16bf-f541d57a57d1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("7f03b7d3-9777-13ff-faac-528ae6643bd6",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("7f03b7d3-9777-13ff-faac-528ae6643bd6",
	4,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("7f03b7d3-9777-13ff-faac-528ae6643bd6");
INSERT INTO R_PART
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"fddb96c4-ae5e-78b8-2e0e-a128df260b0a",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("b243aea3-7f76-54e6-9dcf-022365a6e156",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	0,
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"fddb96c4-ae5e-78b8-2e0e-a128df260b0a");
INSERT INTO R_RTO
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"fddb96c4-ae5e-78b8-2e0e-a128df260b0a",
	0);
INSERT INTO R_OIR
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"fddb96c4-ae5e-78b8-2e0e-a128df260b0a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("7c122a7e-3103-34cd-02f7-40c493971529",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"3c55c927-841a-b2ef-2e4f-65509835d7e6",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("7c122a7e-3103-34cd-02f7-40c493971529",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"3c55c927-841a-b2ef-2e4f-65509835d7e6");
INSERT INTO R_OIR
	VALUES ("7c122a7e-3103-34cd-02f7-40c493971529",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"3c55c927-841a-b2ef-2e4f-65509835d7e6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("23362b4b-de59-df84-7eeb-3f5165750202",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("23362b4b-de59-df84-7eeb-3f5165750202",
	5,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("23362b4b-de59-df84-7eeb-3f5165750202");
INSERT INTO R_PART
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	"1532eced-0f36-6463-4a58-51234289a64d",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("b243aea3-7f76-54e6-9dcf-022365a6e156",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	0,
	"23362b4b-de59-df84-7eeb-3f5165750202",
	"1532eced-0f36-6463-4a58-51234289a64d");
INSERT INTO R_RTO
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	"1532eced-0f36-6463-4a58-51234289a64d",
	0);
INSERT INTO R_OIR
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	"1532eced-0f36-6463-4a58-51234289a64d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("4499f6c3-80dc-704a-30c4-634afc20fa11",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	"bd0d89e0-a4f6-1cf8-6797-98220022bdef",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("4499f6c3-80dc-704a-30c4-634afc20fa11",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	"bd0d89e0-a4f6-1cf8-6797-98220022bdef");
INSERT INTO R_OIR
	VALUES ("4499f6c3-80dc-704a-30c4-634afc20fa11",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	"bd0d89e0-a4f6-1cf8-6797-98220022bdef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	6,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("6d4558a4-88ae-71ed-0dc9-c102aa63503f");
INSERT INTO R_FORM
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6");
INSERT INTO R_OIR
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("99e9ca65-b88e-e920-9601-e9de152e4ab1",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO O_RTIDA
	VALUES ("8b0ce55c-dcd0-fe78-9fe2-2c531cd75838",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO O_RTIDA
	VALUES ("bcf06e4a-5409-7333-0252-9499c9e8150e",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO O_RTIDA
	VALUES ("de4c4040-b4d8-8dd0-e1f6-cc648576c11b",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO O_RTIDA
	VALUES ("18264137-d16c-5d7c-561d-02186cae1d56",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO O_RTIDA
	VALUES ("0257293a-c610-33d0-961c-38c3e1d07895",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO O_RTIDA
	VALUES ("cf36702f-b276-7fda-3f2d-abcf77209ad3",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO O_RTIDA
	VALUES ("9540e3db-f00c-d7f3-1476-89c2599510f4",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO O_RTIDA
	VALUES ("f676b389-0874-7ee7-2e04-c83e8e718308",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO O_RTIDA
	VALUES ("1c56708e-a313-7ca5-5d96-5d1ee6c1fe59",
	"b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	0,
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO R_RTO
	VALUES ("b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	0);
INSERT INTO R_OIR
	VALUES ("b2d9bf49-60ce-a7d3-01e6-e298ec7fd903",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	8,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("5c946c1a-5ffb-74e2-42cf-afab37d2849c");
INSERT INTO R_PART
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	"0a69908c-030b-344c-d1fc-2ae53261c05c",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("b243aea3-7f76-54e6-9dcf-022365a6e156",
	"b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	0,
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	"0a69908c-030b-344c-d1fc-2ae53261c05c");
INSERT INTO R_RTO
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	"0a69908c-030b-344c-d1fc-2ae53261c05c",
	0);
INSERT INTO R_OIR
	VALUES ("b678d333-59e0-fe8f-b8ed-9d3780623ae0",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	"0a69908c-030b-344c-d1fc-2ae53261c05c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	"51c69cc9-966b-1f42-77f3-40556127d89a",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	"51c69cc9-966b-1f42-77f3-40556127d89a");
INSERT INTO R_OIR
	VALUES ("71c54fe4-59a0-240f-b91a-32f5ee853c14",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	"51c69cc9-966b-1f42-77f3-40556127d89a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("084c910b-ea58-912a-7353-1cda5c0ece3e",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("084c910b-ea58-912a-7353-1cda5c0ece3e",
	9,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("084c910b-ea58-912a-7353-1cda5c0ece3e");
INSERT INTO R_FORM
	VALUES ("45229792-5569-b0f9-9dbf-fe9afe229577",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	"2a2d9e47-a989-1434-6645-8cb939e6dd9b",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("45229792-5569-b0f9-9dbf-fe9afe229577",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	"2a2d9e47-a989-1434-6645-8cb939e6dd9b");
INSERT INTO R_OIR
	VALUES ("45229792-5569-b0f9-9dbf-fe9afe229577",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	"2a2d9e47-a989-1434-6645-8cb939e6dd9b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("860e6be9-79b5-6cac-948f-79de5ae20b77",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	"33c980d2-8225-907f-dfd4-e154279837ce",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("4894243b-2a30-4adf-abf8-ad29eb612d93",
	"860e6be9-79b5-6cac-948f-79de5ae20b77",
	0,
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	"33c980d2-8225-907f-dfd4-e154279837ce");
INSERT INTO O_RTIDA
	VALUES ("cf465ea6-30e2-2b28-87b9-c08791e751ab",
	"860e6be9-79b5-6cac-948f-79de5ae20b77",
	0,
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	"33c980d2-8225-907f-dfd4-e154279837ce");
INSERT INTO R_RTO
	VALUES ("860e6be9-79b5-6cac-948f-79de5ae20b77",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	"33c980d2-8225-907f-dfd4-e154279837ce",
	0);
INSERT INTO R_OIR
	VALUES ("860e6be9-79b5-6cac-948f-79de5ae20b77",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	"33c980d2-8225-907f-dfd4-e154279837ce",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	10,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("ff650d4b-85ba-ea3c-356a-eadcd2f0808c");
INSERT INTO R_PART
	VALUES ("45229792-5569-b0f9-9dbf-fe9afe229577",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	"b38d2601-6548-7b5d-a632-40a2974b50a4",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("21f99b5b-bf90-a6e1-f01a-4f18121d29c0",
	"45229792-5569-b0f9-9dbf-fe9afe229577",
	0,
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	"b38d2601-6548-7b5d-a632-40a2974b50a4");
INSERT INTO R_RTO
	VALUES ("45229792-5569-b0f9-9dbf-fe9afe229577",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	"b38d2601-6548-7b5d-a632-40a2974b50a4",
	0);
INSERT INTO R_OIR
	VALUES ("45229792-5569-b0f9-9dbf-fe9afe229577",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	"b38d2601-6548-7b5d-a632-40a2974b50a4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("860e6be9-79b5-6cac-948f-79de5ae20b77",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	"61b47bf0-bbf7-9b3e-1647-9b192abee0e4",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("860e6be9-79b5-6cac-948f-79de5ae20b77",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	"61b47bf0-bbf7-9b3e-1647-9b192abee0e4");
INSERT INTO R_OIR
	VALUES ("860e6be9-79b5-6cac-948f-79de5ae20b77",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	"61b47bf0-bbf7-9b3e-1647-9b192abee0e4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("c1010505-9287-83d8-7a1d-fcb1062ce46d",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("c1010505-9287-83d8-7a1d-fcb1062ce46d",
	11,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("c1010505-9287-83d8-7a1d-fcb1062ce46d");
INSERT INTO R_FORM
	VALUES ("860e6be9-79b5-6cac-948f-79de5ae20b77",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	"c8a47aa4-20fd-54b7-8943-e806342b7bc4",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("860e6be9-79b5-6cac-948f-79de5ae20b77",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	"c8a47aa4-20fd-54b7-8943-e806342b7bc4");
INSERT INTO R_OIR
	VALUES ("860e6be9-79b5-6cac-948f-79de5ae20b77",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	"c8a47aa4-20fd-54b7-8943-e806342b7bc4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("c763a61f-25b6-1e54-fd8e-6ff3753a82f1",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	"79d2f928-3950-26af-ffc1-c07aed1996ff",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("6f6fd546-9e31-73af-8b66-24ea7e794d4d",
	"c763a61f-25b6-1e54-fd8e-6ff3753a82f1",
	0,
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	"79d2f928-3950-26af-ffc1-c07aed1996ff");
INSERT INTO O_RTIDA
	VALUES ("dcdaea83-d87b-de84-fa3c-6706cbfdd35a",
	"c763a61f-25b6-1e54-fd8e-6ff3753a82f1",
	0,
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	"79d2f928-3950-26af-ffc1-c07aed1996ff");
INSERT INTO R_RTO
	VALUES ("c763a61f-25b6-1e54-fd8e-6ff3753a82f1",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	"79d2f928-3950-26af-ffc1-c07aed1996ff",
	0);
INSERT INTO R_OIR
	VALUES ("c763a61f-25b6-1e54-fd8e-6ff3753a82f1",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	"79d2f928-3950-26af-ffc1-c07aed1996ff",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("145977af-a605-53dc-67d0-523f68958d00",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("145977af-a605-53dc-67d0-523f68958d00",
	12,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("145977af-a605-53dc-67d0-523f68958d00");
INSERT INTO R_FORM
	VALUES ("7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	"145977af-a605-53dc-67d0-523f68958d00",
	"2266ed22-2062-951c-1c75-d77359aa8342",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	"145977af-a605-53dc-67d0-523f68958d00",
	"2266ed22-2062-951c-1c75-d77359aa8342");
INSERT INTO R_OIR
	VALUES ("7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	"145977af-a605-53dc-67d0-523f68958d00",
	"2266ed22-2062-951c-1c75-d77359aa8342",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9adc1dd1-bd35-472d-5c73-97f8244fa0fc",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("5e42ba8d-3d4c-4b02-58b6-96f03c4520fc",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	0,
	"145977af-a605-53dc-67d0-523f68958d00",
	"9adc1dd1-bd35-472d-5c73-97f8244fa0fc");
INSERT INTO O_RTIDA
	VALUES ("f91add83-0bb5-b790-fa50-83e130b4fa84",
	"2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	0,
	"145977af-a605-53dc-67d0-523f68958d00",
	"9adc1dd1-bd35-472d-5c73-97f8244fa0fc");
INSERT INTO R_RTO
	VALUES ("2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9adc1dd1-bd35-472d-5c73-97f8244fa0fc",
	0);
INSERT INTO R_OIR
	VALUES ("2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9adc1dd1-bd35-472d-5c73-97f8244fa0fc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	13,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO R_PART
	VALUES ("7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"7fc2d4b2-faeb-3735-a9e1-bb2ab988fd86",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("5b342212-a9f5-41ad-f1b0-3ebaed8d7588",
	"7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	0,
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"7fc2d4b2-faeb-3735-a9e1-bb2ab988fd86");
INSERT INTO R_RTO
	VALUES ("7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"7fc2d4b2-faeb-3735-a9e1-bb2ab988fd86",
	0);
INSERT INTO R_OIR
	VALUES ("7ee6c6c3-afaf-00e3-bc68-0c08473ca348",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"7fc2d4b2-faeb-3735-a9e1-bb2ab988fd86",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"9f27ab91-0194-b361-7e67-c537592b48d1",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"9f27ab91-0194-b361-7e67-c537592b48d1");
INSERT INTO R_OIR
	VALUES ("2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"9f27ab91-0194-b361-7e67-c537592b48d1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("190f6558-c27b-9657-8ac8-15e9f7be86b3",
	1,
	"d6685874-17cb-e254-651b-74df73d39af6",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("190f6558-c27b-9657-8ac8-15e9f7be86b3",
	14,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("190f6558-c27b-9657-8ac8-15e9f7be86b3");
INSERT INTO R_FORM
	VALUES ("2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	"f1b17a81-6479-6bae-e09d-40a3c7998cfc",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	"f1b17a81-6479-6bae-e09d-40a3c7998cfc");
INSERT INTO R_OIR
	VALUES ("2f6f90be-e7e7-feaf-25b5-caa6ec2b9d70",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	"f1b17a81-6479-6bae-e09d-40a3c7998cfc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("b206dfa5-6fc4-3dad-f9b8-10333f80829d",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	"a51df3ee-4ec7-695a-e7b6-6e08001f8157",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("4463774f-b7f4-496a-9234-f6187ee88b96",
	"b206dfa5-6fc4-3dad-f9b8-10333f80829d",
	0,
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	"a51df3ee-4ec7-695a-e7b6-6e08001f8157");
INSERT INTO O_RTIDA
	VALUES ("95296e2e-8956-9277-e949-d5f922af20d4",
	"b206dfa5-6fc4-3dad-f9b8-10333f80829d",
	0,
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	"a51df3ee-4ec7-695a-e7b6-6e08001f8157");
INSERT INTO R_RTO
	VALUES ("b206dfa5-6fc4-3dad-f9b8-10333f80829d",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	"a51df3ee-4ec7-695a-e7b6-6e08001f8157",
	0);
INSERT INTO R_OIR
	VALUES ("b206dfa5-6fc4-3dad-f9b8-10333f80829d",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	"a51df3ee-4ec7-695a-e7b6-6e08001f8157",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("c55e6fa6-defc-761d-630d-67b989a05dee",
	1,
	"63fd1de7-6bd5-10d1-407e-94c129def0be",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("c55e6fa6-defc-761d-630d-67b989a05dee",
	"00000000-0000-0000-0000-000000000000",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'External Entities',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("a64472bc-b662-7a86-dff1-43a7f6b23337",
	112,
	"c55e6fa6-defc-761d-630d-67b989a05dee",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.io.mdl.test::ex1::External Entities');
INSERT INTO DIM_DIA
	VALUES ("a64472bc-b662-7a86-dff1-43a7f6b23337",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("781601c2-1cf6-05c5-a6d4-fae80a33a280",
	1,
	"63fd1de7-6bd5-10d1-407e-94c129def0be",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'Datatypes',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("6f5613cf-d4a2-2f26-2694-572c14a13eaa",
	112,
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.io.mdl.test::ex1::Datatypes');
INSERT INTO GD_GE
	VALUES ("26aca08a-e623-0fcd-1631-d91767599cd7",
	"6f5613cf-d4a2-2f26-2694-572c14a13eaa",
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	51,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::Datatypes::my_b');
INSERT INTO GD_SHP
	VALUES ("26aca08a-e623-0fcd-1631-d91767599cd7");
INSERT INTO GD_NCS
	VALUES ("26aca08a-e623-0fcd-1631-d91767599cd7");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"26aca08a-e623-0fcd-1631-d91767599cd7");
INSERT INTO DIM_GE
	VALUES (2280.000000,
	1690.000000,
	"26aca08a-e623-0fcd-1631-d91767599cd7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("26aca08a-e623-0fcd-1631-d91767599cd7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("0d7c22db-d7b7-7557-2082-8affd003304b",
	"6f5613cf-d4a2-2f26-2694-572c14a13eaa",
	"083c9cf6-6a2b-7562-cbd5-2c4f7e75fe55",
	51,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::Datatypes::my_i');
INSERT INTO GD_SHP
	VALUES ("0d7c22db-d7b7-7557-2082-8affd003304b");
INSERT INTO GD_NCS
	VALUES ("0d7c22db-d7b7-7557-2082-8affd003304b");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"0d7c22db-d7b7-7557-2082-8affd003304b");
INSERT INTO DIM_GE
	VALUES (2500.000000,
	1690.000000,
	"0d7c22db-d7b7-7557-2082-8affd003304b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0d7c22db-d7b7-7557-2082-8affd003304b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("03564223-d120-78eb-6040-142c6a8dd4c3",
	"6f5613cf-d4a2-2f26-2694-572c14a13eaa",
	"e710b946-9035-55ff-a08d-d748e3f4803d",
	51,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::Datatypes::my_r');
INSERT INTO GD_SHP
	VALUES ("03564223-d120-78eb-6040-142c6a8dd4c3");
INSERT INTO GD_NCS
	VALUES ("03564223-d120-78eb-6040-142c6a8dd4c3");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"03564223-d120-78eb-6040-142c6a8dd4c3");
INSERT INTO DIM_GE
	VALUES (1620.000000,
	1855.000000,
	"03564223-d120-78eb-6040-142c6a8dd4c3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("03564223-d120-78eb-6040-142c6a8dd4c3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("92d03e2d-e7e4-66c8-07d8-0643f850c783",
	"6f5613cf-d4a2-2f26-2694-572c14a13eaa",
	"63148bdd-fdd1-b725-e6bc-eff81f5bb5c1",
	51,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::Datatypes::my_s');
INSERT INTO GD_SHP
	VALUES ("92d03e2d-e7e4-66c8-07d8-0643f850c783");
INSERT INTO GD_NCS
	VALUES ("92d03e2d-e7e4-66c8-07d8-0643f850c783");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"92d03e2d-e7e4-66c8-07d8-0643f850c783");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1855.000000,
	"92d03e2d-e7e4-66c8-07d8-0643f850c783",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("92d03e2d-e7e4-66c8-07d8-0643f850c783",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("fabfd9f9-4195-9ec9-246a-c2245a2a1959",
	"6f5613cf-d4a2-2f26-2694-572c14a13eaa",
	"5b3fd52a-393a-a64d-3a7b-52e1d4a12a3f",
	51,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::Datatypes::my_u');
INSERT INTO GD_SHP
	VALUES ("fabfd9f9-4195-9ec9-246a-c2245a2a1959");
INSERT INTO GD_NCS
	VALUES ("fabfd9f9-4195-9ec9-246a-c2245a2a1959");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"fabfd9f9-4195-9ec9-246a-c2245a2a1959");
INSERT INTO DIM_GE
	VALUES (2060.000000,
	1855.000000,
	"fabfd9f9-4195-9ec9-246a-c2245a2a1959",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fabfd9f9-4195-9ec9-246a-c2245a2a1959",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("6f5613cf-d4a2-2f26-2694-572c14a13eaa",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("b0c41c18-2ec3-082a-de04-0645538d81a5",
	1,
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("b0c41c18-2ec3-082a-de04-0645538d81a5",
	"00000000-0000-0000-0000-000000000000",
	'my_b',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("b0c41c18-2ec3-082a-de04-0645538d81a5",
	"ba5eda7a-def5-0000-0000-000000000001",
	0);
INSERT INTO PE_PE
	VALUES ("083c9cf6-6a2b-7562-cbd5-2c4f7e75fe55",
	1,
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("083c9cf6-6a2b-7562-cbd5-2c4f7e75fe55",
	"00000000-0000-0000-0000-000000000000",
	'my_i',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("083c9cf6-6a2b-7562-cbd5-2c4f7e75fe55",
	"ba5eda7a-def5-0000-0000-000000000002",
	0);
INSERT INTO PE_PE
	VALUES ("e710b946-9035-55ff-a08d-d748e3f4803d",
	1,
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("e710b946-9035-55ff-a08d-d748e3f4803d",
	"00000000-0000-0000-0000-000000000000",
	'my_r',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("e710b946-9035-55ff-a08d-d748e3f4803d",
	"ba5eda7a-def5-0000-0000-000000000003",
	0);
INSERT INTO PE_PE
	VALUES ("63148bdd-fdd1-b725-e6bc-eff81f5bb5c1",
	1,
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("63148bdd-fdd1-b725-e6bc-eff81f5bb5c1",
	"00000000-0000-0000-0000-000000000000",
	'my_s',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("63148bdd-fdd1-b725-e6bc-eff81f5bb5c1",
	"ba5eda7a-def5-0000-0000-000000000004",
	0);
INSERT INTO PE_PE
	VALUES ("5b3fd52a-393a-a64d-3a7b-52e1d4a12a3f",
	1,
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("5b3fd52a-393a-a64d-3a7b-52e1d4a12a3f",
	"00000000-0000-0000-0000-000000000000",
	'my_u',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("5b3fd52a-393a-a64d-3a7b-52e1d4a12a3f",
	"ba5eda7a-def5-0000-0000-000000000005",
	0);
INSERT INTO PE_PE
	VALUES ("63fd1de7-6bd5-10d1-407e-94c129def0be",
	0,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO GD_GE
	VALUES ("3cef39cd-c564-d8c2-7490-4b28ce18dbc2",
	"d07522c0-e942-4ccf-20d4-d90b58b8920f",
	"63fd1de7-6bd5-10d1-407e-94c129def0be",
	108,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1');
INSERT INTO GD_SHP
	VALUES ("3cef39cd-c564-d8c2-7490-4b28ce18dbc2");
INSERT INTO GD_NCS
	VALUES ("3cef39cd-c564-d8c2-7490-4b28ce18dbc2");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"3cef39cd-c564-d8c2-7490-4b28ce18dbc2");
INSERT INTO DIM_GE
	VALUES (4010.000000,
	0.000000,
	"3cef39cd-c564-d8c2-7490-4b28ce18dbc2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3cef39cd-c564-d8c2-7490-4b28ce18dbc2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYS_PROXY
	VALUES ("d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'com.mentor.nucleus.bp.io.mdl.test',
	1,
	'../com.mentor.nucleus.bp.io.mdl.test.xtuml');
=======
	VALUES ("8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	"50642553-6a49-751c-68da-981eb9cfa6bf",
	"50642553-6a49-751c-68da-981eb9cfa6bf",
	'ex1',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("1a92e7b0-9a7a-7cf2-2ded-a5b55355c65b",
	112,
	"8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	108,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1');
INSERT INTO GD_GE
	VALUES ("decd1389-dec9-9ebd-574e-1c8946d030b4",
	"1a92e7b0-9a7a-7cf2-2ded-a5b55355c65b",
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex');
INSERT INTO GD_SHP
	VALUES ("decd1389-dec9-9ebd-574e-1c8946d030b4");
INSERT INTO GD_NCS
	VALUES ("decd1389-dec9-9ebd-574e-1c8946d030b4");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"decd1389-dec9-9ebd-574e-1c8946d030b4");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1344.000000,
	"decd1389-dec9-9ebd-574e-1c8946d030b4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("decd1389-dec9-9ebd-574e-1c8946d030b4",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("01b97957-847d-5120-3edd-a5923b0a9cc7",
	"1a92e7b0-9a7a-7cf2-2ded-a5b55355c65b",
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes');
INSERT INTO GD_SHP
	VALUES ("01b97957-847d-5120-3edd-a5923b0a9cc7");
INSERT INTO GD_NCS
	VALUES ("01b97957-847d-5120-3edd-a5923b0a9cc7");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"01b97957-847d-5120-3edd-a5923b0a9cc7");
INSERT INTO DIM_GE
	VALUES (2240.000000,
	1568.000000,
	"01b97957-847d-5120-3edd-a5923b0a9cc7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("01b97957-847d-5120-3edd-a5923b0a9cc7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("03553c54-2624-b7c1-b893-ee546a5c9024",
	"1a92e7b0-9a7a-7cf2-2ded-a5b55355c65b",
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::External Entities');
INSERT INTO GD_SHP
	VALUES ("03553c54-2624-b7c1-b893-ee546a5c9024");
INSERT INTO GD_NCS
	VALUES ("03553c54-2624-b7c1-b893-ee546a5c9024");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"03553c54-2624-b7c1-b893-ee546a5c9024");
INSERT INTO DIM_GE
	VALUES (2064.000000,
	1568.000000,
	"03553c54-2624-b7c1-b893-ee546a5c9024",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("03553c54-2624-b7c1-b893-ee546a5c9024",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("1a92e7b0-9a7a-7cf2-2ded-a5b55355c65b",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("82bdba89-5c4a-655b-00b0-3a234d6b8796",
	1,
	"8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	"50642553-6a49-751c-68da-981eb9cfa6bf",
	'ex',
	'',
	1);
INSERT INTO GD_MD
	VALUES ("aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	112,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	108,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex');
INSERT INTO GD_GE
	VALUES ("b826b9d0-7355-be97-a5ea-d42f4c5d2742",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"1e6c89ff-f941-7c51-013e-1dc86807a023",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init');
INSERT INTO GD_SHP
	VALUES ("b826b9d0-7355-be97-a5ea-d42f4c5d2742");
INSERT INTO GD_NCS
	VALUES ("b826b9d0-7355-be97-a5ea-d42f4c5d2742");
INSERT INTO DIM_ND
	VALUES (224.000000,
	144.000000,
	"b826b9d0-7355-be97-a5ea-d42f4c5d2742");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1216.000000,
	"b826b9d0-7355-be97-a5ea-d42f4c5d2742",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b826b9d0-7355-be97-a5ea-d42f4c5d2742",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("b37f179a-b2ca-9ef4-3a57-461f10c17018",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test');
INSERT INTO GD_SHP
	VALUES ("b37f179a-b2ca-9ef4-3a57-461f10c17018");
INSERT INTO GD_NCS
	VALUES ("b37f179a-b2ca-9ef4-3a57-461f10c17018");
INSERT INTO DIM_ND
	VALUES (240.000000,
	464.000000,
	"b37f179a-b2ca-9ef4-3a57-461f10c17018");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1392.000000,
	"b37f179a-b2ca-9ef4-3a57-461f10c17018",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b37f179a-b2ca-9ef4-3a57-461f10c17018",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("89ab2ee0-db7e-c1d7-396e-760545004a23",
	1760.000000,
	1856.000000,
	"b37f179a-b2ca-9ef4-3a57-461f10c17018");
INSERT INTO DIM_CON
	VALUES ("18dfbdb4-e648-6e14-a468-46c9c1622429",
	1888.000000,
	1440.000000,
	"b37f179a-b2ca-9ef4-3a57-461f10c17018");
INSERT INTO DIM_CON
	VALUES ("95aa9471-bb88-bbfe-9f8e-7e8067af0346",
	1888.000000,
	1584.000000,
	"b37f179a-b2ca-9ef4-3a57-461f10c17018");
INSERT INTO DIM_CON
	VALUES ("78f8057a-4cd2-88dd-a29d-5731216bdc63",
	1888.000000,
	1728.000000,
	"b37f179a-b2ca-9ef4-3a57-461f10c17018");
INSERT INTO DIM_CON
	VALUES ("083ce3df-2abe-d172-3105-5e3b25275928",
	1888.000000,
	1472.000000,
	"b37f179a-b2ca-9ef4-3a57-461f10c17018");
INSERT INTO DIM_CON
	VALUES ("077f242a-1c87-c229-0f12-590f1393846b",
	1856.000000,
	1856.000000,
	"b37f179a-b2ca-9ef4-3a57-461f10c17018");
INSERT INTO GD_GE
	VALUES ("f9d75ef1-a679-b057-b0e8-f96974190b59",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::No Instances');
INSERT INTO GD_SHP
	VALUES ("f9d75ef1-a679-b057-b0e8-f96974190b59");
INSERT INTO GD_NCS
	VALUES ("f9d75ef1-a679-b057-b0e8-f96974190b59");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"f9d75ef1-a679-b057-b0e8-f96974190b59");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1392.000000,
	"f9d75ef1-a679-b057-b0e8-f96974190b59",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f9d75ef1-a679-b057-b0e8-f96974190b59",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("0bc8b857-5874-4841-72e1-351e8862fd2d",
	2112.000000,
	1440.000000,
	"f9d75ef1-a679-b057-b0e8-f96974190b59");
INSERT INTO DIM_CON
	VALUES ("c41ee70a-2172-e12d-397c-41497909ef1b",
	2112.000000,
	1472.000000,
	"f9d75ef1-a679-b057-b0e8-f96974190b59");
INSERT INTO GD_GE
	VALUES ("60106578-9e02-df41-0c94-e8c9bf690803",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::One Instance');
INSERT INTO GD_SHP
	VALUES ("60106578-9e02-df41-0c94-e8c9bf690803");
INSERT INTO GD_NCS
	VALUES ("60106578-9e02-df41-0c94-e8c9bf690803");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"60106578-9e02-df41-0c94-e8c9bf690803");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1520.000000,
	"60106578-9e02-df41-0c94-e8c9bf690803",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("60106578-9e02-df41-0c94-e8c9bf690803",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("74da663e-f5d1-36f3-afe9-945d3eaeb399",
	2112.000000,
	1584.000000,
	"60106578-9e02-df41-0c94-e8c9bf690803");
INSERT INTO GD_GE
	VALUES ("bf887835-7183-7771-23eb-da7622611e8f",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Many Instances');
INSERT INTO GD_SHP
	VALUES ("bf887835-7183-7771-23eb-da7622611e8f");
INSERT INTO GD_NCS
	VALUES ("bf887835-7183-7771-23eb-da7622611e8f");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"bf887835-7183-7771-23eb-da7622611e8f");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1664.000000,
	"bf887835-7183-7771-23eb-da7622611e8f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bf887835-7183-7771-23eb-da7622611e8f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("08420ad0-a5e5-0c8d-7e99-1d08b1010fe0",
	2112.000000,
	1728.000000,
	"bf887835-7183-7771-23eb-da7622611e8f");
INSERT INTO GD_GE
	VALUES ("79970f25-1a7b-efdb-a866-55bee411d3c1",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Any Object');
INSERT INTO GD_SHP
	VALUES ("79970f25-1a7b-efdb-a866-55bee411d3c1");
INSERT INTO GD_NCS
	VALUES ("79970f25-1a7b-efdb-a866-55bee411d3c1");
INSERT INTO DIM_ND
	VALUES (192.000000,
	160.000000,
	"79970f25-1a7b-efdb-a866-55bee411d3c1");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1216.000000,
	"79970f25-1a7b-efdb-a866-55bee411d3c1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("79970f25-1a7b-efdb-a866-55bee411d3c1",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("1bbf499e-d365-b399-4bfe-639e2752bf6f",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test Object B');
INSERT INTO GD_SHP
	VALUES ("1bbf499e-d365-b399-4bfe-639e2752bf6f");
INSERT INTO GD_NCS
	VALUES ("1bbf499e-d365-b399-4bfe-639e2752bf6f");
INSERT INTO DIM_ND
	VALUES (272.000000,
	368.000000,
	"1bbf499e-d365-b399-4bfe-639e2752bf6f");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1952.000000,
	"1bbf499e-d365-b399-4bfe-639e2752bf6f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1bbf499e-d365-b399-4bfe-639e2752bf6f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("f17289e0-af77-c0c0-2371-ff42c3549048",
	1760.000000,
	1952.000000,
	"1bbf499e-d365-b399-4bfe-639e2752bf6f");
INSERT INTO DIM_CON
	VALUES ("e3e3ec7d-c857-8e49-492e-66e08b485524",
	1712.000000,
	2320.000000,
	"1bbf499e-d365-b399-4bfe-639e2752bf6f");
INSERT INTO DIM_CON
	VALUES ("a5814191-b85a-9d84-43ae-4fce8b9ab773",
	1856.000000,
	1952.000000,
	"1bbf499e-d365-b399-4bfe-639e2752bf6f");
INSERT INTO GD_GE
	VALUES ("701baf54-9ea5-101d-728f-ef4d0142b383",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test Object C');
INSERT INTO GD_SHP
	VALUES ("701baf54-9ea5-101d-728f-ef4d0142b383");
INSERT INTO GD_NCS
	VALUES ("701baf54-9ea5-101d-728f-ef4d0142b383");
INSERT INTO DIM_ND
	VALUES (256.000000,
	192.000000,
	"701baf54-9ea5-101d-728f-ef4d0142b383");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	2432.000000,
	"701baf54-9ea5-101d-728f-ef4d0142b383",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("701baf54-9ea5-101d-728f-ef4d0142b383",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("6b623577-b93c-8b9d-3635-06ba0aef8b0b",
	1712.000000,
	2432.000000,
	"701baf54-9ea5-101d-728f-ef4d0142b383");
INSERT INTO GD_GE
	VALUES ("c0d405a9-92d5-5daa-3f92-9e34d4e75c7f",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("c0d405a9-92d5-5daa-3f92-9e34d4e75c7f");
INSERT INTO GD_NCS
	VALUES ("c0d405a9-92d5-5daa-3f92-9e34d4e75c7f");
INSERT INTO DIM_ND
	VALUES (272.000000,
	160.000000,
	"c0d405a9-92d5-5daa-3f92-9e34d4e75c7f");
INSERT INTO DIM_GE
	VALUES (1344.000000,
	1536.000000,
	"c0d405a9-92d5-5daa-3f92-9e34d4e75c7f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c0d405a9-92d5-5daa-3f92-9e34d4e75c7f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("b8ec0700-bfe5-4a44-f284-6e8916d5c2c2",
	1392.000000,
	1696.000000,
	"c0d405a9-92d5-5daa-3f92-9e34d4e75c7f");
INSERT INTO DIM_CON
	VALUES ("cc867255-765e-d032-17ab-281080f44805",
	1552.000000,
	1696.000000,
	"c0d405a9-92d5-5daa-3f92-9e34d4e75c7f");
INSERT INTO GD_GE
	VALUES ("252e60e7-f9ab-1a96-7ad9-6cf01778c556",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Other Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("252e60e7-f9ab-1a96-7ad9-6cf01778c556");
INSERT INTO GD_NCS
	VALUES ("252e60e7-f9ab-1a96-7ad9-6cf01778c556");
INSERT INTO DIM_ND
	VALUES (256.000000,
	192.000000,
	"252e60e7-f9ab-1a96-7ad9-6cf01778c556");
INSERT INTO DIM_GE
	VALUES (1344.000000,
	1856.000000,
	"252e60e7-f9ab-1a96-7ad9-6cf01778c556",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("252e60e7-f9ab-1a96-7ad9-6cf01778c556",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("607497c5-4cd4-35b4-fea5-7f29183231cf",
	1392.000000,
	1856.000000,
	"252e60e7-f9ab-1a96-7ad9-6cf01778c556");
INSERT INTO DIM_CON
	VALUES ("902f1673-d309-8b24-f730-684e2ea1533f",
	1552.000000,
	1856.000000,
	"252e60e7-f9ab-1a96-7ad9-6cf01778c556");
INSERT INTO DIM_CON
	VALUES ("9f56f2a2-469f-92a3-304e-407aa55d8531",
	1456.000000,
	2048.000000,
	"252e60e7-f9ab-1a96-7ad9-6cf01778c556");
INSERT INTO GD_GE
	VALUES ("4afe35cd-fe9e-cc17-1cb4-10c0817de483",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Third Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("4afe35cd-fe9e-cc17-1cb4-10c0817de483");
INSERT INTO GD_NCS
	VALUES ("4afe35cd-fe9e-cc17-1cb4-10c0817de483");
INSERT INTO DIM_ND
	VALUES (240.000000,
	160.000000,
	"4afe35cd-fe9e-cc17-1cb4-10c0817de483");
INSERT INTO DIM_GE
	VALUES (1360.000000,
	2160.000000,
	"4afe35cd-fe9e-cc17-1cb4-10c0817de483",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4afe35cd-fe9e-cc17-1cb4-10c0817de483",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("a6ec277c-92b5-4b72-133b-0072c56d4be7",
	1456.000000,
	2160.000000,
	"4afe35cd-fe9e-cc17-1cb4-10c0817de483");
INSERT INTO GD_GE
	VALUES ("bd2e25fe-51e4-b6e1-0d98-c22704a7411b",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test');
INSERT INTO GD_SHP
	VALUES ("bd2e25fe-51e4-b6e1-0d98-c22704a7411b");
INSERT INTO GD_NCS
	VALUES ("bd2e25fe-51e4-b6e1-0d98-c22704a7411b");
INSERT INTO DIM_ND
	VALUES (304.000000,
	160.000000,
	"bd2e25fe-51e4-b6e1-0d98-c22704a7411b");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1536.000000,
	"bd2e25fe-51e4-b6e1-0d98-c22704a7411b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bd2e25fe-51e4-b6e1-0d98-c22704a7411b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("89abc7b0-e136-9124-d0f7-f6a4a950f903",
	1024.000000,
	1696.000000,
	"bd2e25fe-51e4-b6e1-0d98-c22704a7411b");
INSERT INTO DIM_CON
	VALUES ("d4fcfe0c-2f9e-993e-01c2-a279e7a45b29",
	1200.000000,
	1696.000000,
	"bd2e25fe-51e4-b6e1-0d98-c22704a7411b");
INSERT INTO GD_GE
	VALUES ("6e6b7a1f-447a-2bcd-6ac3-6b20207607c5",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Other Boolean Test');
INSERT INTO GD_SHP
	VALUES ("6e6b7a1f-447a-2bcd-6ac3-6b20207607c5");
INSERT INTO GD_NCS
	VALUES ("6e6b7a1f-447a-2bcd-6ac3-6b20207607c5");
INSERT INTO DIM_ND
	VALUES (320.000000,
	208.000000,
	"6e6b7a1f-447a-2bcd-6ac3-6b20207607c5");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1856.000000,
	"6e6b7a1f-447a-2bcd-6ac3-6b20207607c5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6e6b7a1f-447a-2bcd-6ac3-6b20207607c5",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("a42c1084-76e7-50c9-d416-b6b37cb70fd1",
	1024.000000,
	1856.000000,
	"6e6b7a1f-447a-2bcd-6ac3-6b20207607c5");
INSERT INTO DIM_CON
	VALUES ("f55e7f65-4e12-3aba-bd0c-ed137df8be5a",
	1200.000000,
	1856.000000,
	"6e6b7a1f-447a-2bcd-6ac3-6b20207607c5");
INSERT INTO DIM_CON
	VALUES ("329ca0ef-5330-03b9-ea4c-dc8cbefd8c78",
	1104.000000,
	2064.000000,
	"6e6b7a1f-447a-2bcd-6ac3-6b20207607c5");
INSERT INTO GD_GE
	VALUES ("13006ca9-009f-4c1f-268a-467af971ea36",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Third Boolean Test');
INSERT INTO GD_SHP
	VALUES ("13006ca9-009f-4c1f-268a-467af971ea36");
INSERT INTO GD_NCS
	VALUES ("13006ca9-009f-4c1f-268a-467af971ea36");
INSERT INTO DIM_ND
	VALUES (288.000000,
	176.000000,
	"13006ca9-009f-4c1f-268a-467af971ea36");
INSERT INTO DIM_GE
	VALUES (976.000000,
	2160.000000,
	"13006ca9-009f-4c1f-268a-467af971ea36",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("13006ca9-009f-4c1f-268a-467af971ea36",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("86ad5a62-b25d-c5d0-1a99-30bcee45672e",
	1104.000000,
	2160.000000,
	"13006ca9-009f-4c1f-268a-467af971ea36");
INSERT INTO GD_GE
	VALUES ("fb32646b-24b4-f11b-03c6-fccea9b56702",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance');
INSERT INTO GD_SHP
	VALUES ("fb32646b-24b4-f11b-03c6-fccea9b56702");
INSERT INTO GD_NCS
	VALUES ("fb32646b-24b4-f11b-03c6-fccea9b56702");
INSERT INTO DIM_ND
	VALUES (256.000000,
	160.000000,
	"fb32646b-24b4-f11b-03c6-fccea9b56702");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1312.000000,
	"fb32646b-24b4-f11b-03c6-fccea9b56702",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fb32646b-24b4-f11b-03c6-fccea9b56702",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("8b8966c8-103c-23db-f3ec-9b6ee20c616a",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R1');
INSERT INTO GD_CON
	VALUES ("8b8966c8-103c-23db-f3ec-9b6ee20c616a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("143e7ab4-6424-565c-e75b-566867a6ec6e",
	"8b8966c8-103c-23db-f3ec-9b6ee20c616a",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"143e7ab4-6424-565c-e75b-566867a6ec6e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"143e7ab4-6424-565c-e75b-566867a6ec6e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("143e7ab4-6424-565c-e75b-566867a6ec6e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("86aba38a-88e1-934e-bcf1-a0f8b388a638",
	"8b8966c8-103c-23db-f3ec-9b6ee20c616a",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"86aba38a-88e1-934e-bcf1-a0f8b388a638");
INSERT INTO DIM_GE
	VALUES (1744.000000,
	1888.000000,
	"86aba38a-88e1-934e-bcf1-a0f8b388a638",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("86aba38a-88e1-934e-bcf1-a0f8b388a638",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cb49df61-a565-920e-0a25-f78296170e3d",
	"8b8966c8-103c-23db-f3ec-9b6ee20c616a",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"cb49df61-a565-920e-0a25-f78296170e3d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cb49df61-a565-920e-0a25-f78296170e3d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cb49df61-a565-920e-0a25-f78296170e3d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("af2b8864-872c-7885-318c-3dc37e55e3f5",
	"8b8966c8-103c-23db-f3ec-9b6ee20c616a",
	"00000000-0000-0000-0000-000000000000",
	"490cb18d-582d-4b42-94f5-5ff1ac4e4959",
	"cba580c1-e3f2-4ca0-514e-4ef499301915");
INSERT INTO DIM_WAY
	VALUES ("490cb18d-582d-4b42-94f5-5ff1ac4e4959",
	1760.000000,
	1952.000000,
	"8b8966c8-103c-23db-f3ec-9b6ee20c616a",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("cba580c1-e3f2-4ca0-514e-4ef499301915",
	1760.000000,
	1856.000000,
	"8b8966c8-103c-23db-f3ec-9b6ee20c616a",
	"00000000-0000-0000-0000-000000000000",
	"490cb18d-582d-4b42-94f5-5ff1ac4e4959");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8b8966c8-103c-23db-f3ec-9b6ee20c616a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8b8966c8-103c-23db-f3ec-9b6ee20c616a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("f17289e0-af77-c0c0-2371-ff42c3549048",
	"89ab2ee0-db7e-c1d7-396e-760545004a23",
	"8b8966c8-103c-23db-f3ec-9b6ee20c616a");
INSERT INTO GD_GE
	VALUES ("6a73f85b-b11a-afa8-3b67-ba918209b321",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R2');
INSERT INTO GD_CON
	VALUES ("6a73f85b-b11a-afa8-3b67-ba918209b321",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1c70ecb0-21e8-c98d-fac0-f2af7d40ff07",
	"6a73f85b-b11a-afa8-3b67-ba918209b321",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1c70ecb0-21e8-c98d-fac0-f2af7d40ff07");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1c70ecb0-21e8-c98d-fac0-f2af7d40ff07",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1c70ecb0-21e8-c98d-fac0-f2af7d40ff07",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4347b032-b03b-b7fc-8235-b9e1141f8693",
	"6a73f85b-b11a-afa8-3b67-ba918209b321",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"4347b032-b03b-b7fc-8235-b9e1141f8693");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1408.000000,
	"4347b032-b03b-b7fc-8235-b9e1141f8693",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4347b032-b03b-b7fc-8235-b9e1141f8693",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ea618019-8fd9-bbe4-f41f-f79c4e86c980",
	"6a73f85b-b11a-afa8-3b67-ba918209b321",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ea618019-8fd9-bbe4-f41f-f79c4e86c980");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ea618019-8fd9-bbe4-f41f-f79c4e86c980",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ea618019-8fd9-bbe4-f41f-f79c4e86c980",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("52ecec6f-e889-6f04-cfde-bbe669629ff8",
	"6a73f85b-b11a-afa8-3b67-ba918209b321",
	"00000000-0000-0000-0000-000000000000",
	"0cd2c19f-4bd2-5bdc-74b8-4fdf9bdbd56f",
	"2c25e762-4fa4-3b07-2335-3cd6b75d867a");
INSERT INTO DIM_WAY
	VALUES ("0cd2c19f-4bd2-5bdc-74b8-4fdf9bdbd56f",
	1888.000000,
	1440.000000,
	"6a73f85b-b11a-afa8-3b67-ba918209b321",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("2c25e762-4fa4-3b07-2335-3cd6b75d867a",
	2112.000000,
	1440.000000,
	"6a73f85b-b11a-afa8-3b67-ba918209b321",
	"00000000-0000-0000-0000-000000000000",
	"0cd2c19f-4bd2-5bdc-74b8-4fdf9bdbd56f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6a73f85b-b11a-afa8-3b67-ba918209b321",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6a73f85b-b11a-afa8-3b67-ba918209b321",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("18dfbdb4-e648-6e14-a468-46c9c1622429",
	"0bc8b857-5874-4841-72e1-351e8862fd2d",
	"6a73f85b-b11a-afa8-3b67-ba918209b321");
INSERT INTO GD_GE
	VALUES ("36882b00-052c-5316-229b-459327949eaa",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R3');
INSERT INTO GD_CON
	VALUES ("36882b00-052c-5316-229b-459327949eaa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("41834a33-f661-0a1c-ee31-028e03b1bf8c",
	"36882b00-052c-5316-229b-459327949eaa",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"41834a33-f661-0a1c-ee31-028e03b1bf8c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"41834a33-f661-0a1c-ee31-028e03b1bf8c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("41834a33-f661-0a1c-ee31-028e03b1bf8c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("77546f1c-0d3d-0c1f-7041-bb7e75eddf01",
	"36882b00-052c-5316-229b-459327949eaa",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"77546f1c-0d3d-0c1f-7041-bb7e75eddf01");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1552.000000,
	"77546f1c-0d3d-0c1f-7041-bb7e75eddf01",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("77546f1c-0d3d-0c1f-7041-bb7e75eddf01",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c1f5006d-4e28-608b-9cb8-0431ad2a50aa",
	"36882b00-052c-5316-229b-459327949eaa",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c1f5006d-4e28-608b-9cb8-0431ad2a50aa");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c1f5006d-4e28-608b-9cb8-0431ad2a50aa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c1f5006d-4e28-608b-9cb8-0431ad2a50aa",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2295cec7-da66-9f8d-c458-84f42a990779",
	"36882b00-052c-5316-229b-459327949eaa",
	"00000000-0000-0000-0000-000000000000",
	"e0d1959c-51ec-c829-6b2f-f4287a8bc504",
	"363d915b-51e7-ffbb-0b06-b55017b5efe9");
INSERT INTO DIM_WAY
	VALUES ("e0d1959c-51ec-c829-6b2f-f4287a8bc504",
	1888.000000,
	1584.000000,
	"36882b00-052c-5316-229b-459327949eaa",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("363d915b-51e7-ffbb-0b06-b55017b5efe9",
	2112.000000,
	1584.000000,
	"36882b00-052c-5316-229b-459327949eaa",
	"00000000-0000-0000-0000-000000000000",
	"e0d1959c-51ec-c829-6b2f-f4287a8bc504");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"36882b00-052c-5316-229b-459327949eaa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("36882b00-052c-5316-229b-459327949eaa",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("95aa9471-bb88-bbfe-9f8e-7e8067af0346",
	"74da663e-f5d1-36f3-afe9-945d3eaeb399",
	"36882b00-052c-5316-229b-459327949eaa");
INSERT INTO GD_GE
	VALUES ("0436aca9-027f-4679-c078-ffbea3cc2d4c",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R4');
INSERT INTO GD_CON
	VALUES ("0436aca9-027f-4679-c078-ffbea3cc2d4c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("973a2bf0-602a-56e7-9554-269763e7e20b",
	"0436aca9-027f-4679-c078-ffbea3cc2d4c",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"973a2bf0-602a-56e7-9554-269763e7e20b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"973a2bf0-602a-56e7-9554-269763e7e20b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("973a2bf0-602a-56e7-9554-269763e7e20b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f2e2e4ae-e098-0efd-4d40-bfbd0fe5928c",
	"0436aca9-027f-4679-c078-ffbea3cc2d4c",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"f2e2e4ae-e098-0efd-4d40-bfbd0fe5928c");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1696.000000,
	"f2e2e4ae-e098-0efd-4d40-bfbd0fe5928c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f2e2e4ae-e098-0efd-4d40-bfbd0fe5928c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4520e626-092d-5233-9699-60952e551453",
	"0436aca9-027f-4679-c078-ffbea3cc2d4c",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4520e626-092d-5233-9699-60952e551453");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4520e626-092d-5233-9699-60952e551453",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4520e626-092d-5233-9699-60952e551453",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2cfbdbdb-372b-f364-ed71-fd5521b737ac",
	"0436aca9-027f-4679-c078-ffbea3cc2d4c",
	"00000000-0000-0000-0000-000000000000",
	"b0a7211c-8b4d-d6d4-dc70-2be365bcefdd",
	"505b1cb3-60ec-ef31-6192-c13e93dccbd2");
INSERT INTO DIM_WAY
	VALUES ("b0a7211c-8b4d-d6d4-dc70-2be365bcefdd",
	1888.000000,
	1728.000000,
	"0436aca9-027f-4679-c078-ffbea3cc2d4c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("505b1cb3-60ec-ef31-6192-c13e93dccbd2",
	2112.000000,
	1728.000000,
	"0436aca9-027f-4679-c078-ffbea3cc2d4c",
	"00000000-0000-0000-0000-000000000000",
	"b0a7211c-8b4d-d6d4-dc70-2be365bcefdd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0436aca9-027f-4679-c078-ffbea3cc2d4c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0436aca9-027f-4679-c078-ffbea3cc2d4c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("78f8057a-4cd2-88dd-a29d-5731216bdc63",
	"08420ad0-a5e5-0c8d-7e99-1d08b1010fe0",
	"0436aca9-027f-4679-c078-ffbea3cc2d4c");
INSERT INTO GD_GE
	VALUES ("acda0729-68bf-59a1-a1ed-5f7d55637bb5",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R5');
INSERT INTO GD_CON
	VALUES ("acda0729-68bf-59a1-a1ed-5f7d55637bb5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b48f2388-1ae9-c5e6-82e8-e038bec7b775",
	"acda0729-68bf-59a1-a1ed-5f7d55637bb5",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b48f2388-1ae9-c5e6-82e8-e038bec7b775");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b48f2388-1ae9-c5e6-82e8-e038bec7b775",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b48f2388-1ae9-c5e6-82e8-e038bec7b775",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("78c90a56-d40f-9af5-be1b-042783bf3ee6",
	"acda0729-68bf-59a1-a1ed-5f7d55637bb5",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"78c90a56-d40f-9af5-be1b-042783bf3ee6");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1440.000000,
	"78c90a56-d40f-9af5-be1b-042783bf3ee6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("78c90a56-d40f-9af5-be1b-042783bf3ee6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b417c62b-5569-1db4-55de-98a6b0c72ec9",
	"acda0729-68bf-59a1-a1ed-5f7d55637bb5",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b417c62b-5569-1db4-55de-98a6b0c72ec9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b417c62b-5569-1db4-55de-98a6b0c72ec9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b417c62b-5569-1db4-55de-98a6b0c72ec9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("51d79d72-bd84-28af-46ef-d0c23cb357e6",
	"acda0729-68bf-59a1-a1ed-5f7d55637bb5",
	"00000000-0000-0000-0000-000000000000",
	"5cb84cb1-edd7-4654-f68c-308efaa1d11c",
	"1b97a54a-4943-a171-f341-e43a6e30e029");
INSERT INTO DIM_WAY
	VALUES ("5cb84cb1-edd7-4654-f68c-308efaa1d11c",
	1888.000000,
	1472.000000,
	"acda0729-68bf-59a1-a1ed-5f7d55637bb5",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("1b97a54a-4943-a171-f341-e43a6e30e029",
	2112.000000,
	1472.000000,
	"acda0729-68bf-59a1-a1ed-5f7d55637bb5",
	"00000000-0000-0000-0000-000000000000",
	"5cb84cb1-edd7-4654-f68c-308efaa1d11c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"acda0729-68bf-59a1-a1ed-5f7d55637bb5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("acda0729-68bf-59a1-a1ed-5f7d55637bb5",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("083ce3df-2abe-d172-3105-5e3b25275928",
	"c41ee70a-2172-e12d-397c-41497909ef1b",
	"acda0729-68bf-59a1-a1ed-5f7d55637bb5");
INSERT INTO GD_GE
	VALUES ("1820ef2a-2f09-aca2-9639-4bbc050d513d",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R6');
INSERT INTO GD_CON
	VALUES ("1820ef2a-2f09-aca2-9639-4bbc050d513d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ee1494f8-bc72-f0a1-4039-687175e283af",
	"1820ef2a-2f09-aca2-9639-4bbc050d513d",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ee1494f8-bc72-f0a1-4039-687175e283af");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ee1494f8-bc72-f0a1-4039-687175e283af",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ee1494f8-bc72-f0a1-4039-687175e283af",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fee34ddd-b4bc-a7a5-16a2-02cd8e847efa",
	"1820ef2a-2f09-aca2-9639-4bbc050d513d",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"fee34ddd-b4bc-a7a5-16a2-02cd8e847efa");
INSERT INTO DIM_GE
	VALUES (1696.000000,
	2344.000000,
	"fee34ddd-b4bc-a7a5-16a2-02cd8e847efa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fee34ddd-b4bc-a7a5-16a2-02cd8e847efa",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("18121973-ac9a-dd3b-9136-7bda1f7f17b4",
	"1820ef2a-2f09-aca2-9639-4bbc050d513d",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"18121973-ac9a-dd3b-9136-7bda1f7f17b4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"18121973-ac9a-dd3b-9136-7bda1f7f17b4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("18121973-ac9a-dd3b-9136-7bda1f7f17b4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("d24ff522-140a-7e51-162e-d417afd5f26f",
	"1820ef2a-2f09-aca2-9639-4bbc050d513d",
	"00000000-0000-0000-0000-000000000000",
	"0e20c15c-e84a-3321-094f-59827ebe816c",
	"d2ca61bf-07a2-8b4b-904c-c22896e30cba");
INSERT INTO DIM_WAY
	VALUES ("0e20c15c-e84a-3321-094f-59827ebe816c",
	1712.000000,
	2320.000000,
	"1820ef2a-2f09-aca2-9639-4bbc050d513d",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("d2ca61bf-07a2-8b4b-904c-c22896e30cba",
	1712.000000,
	2432.000000,
	"1820ef2a-2f09-aca2-9639-4bbc050d513d",
	"00000000-0000-0000-0000-000000000000",
	"0e20c15c-e84a-3321-094f-59827ebe816c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1820ef2a-2f09-aca2-9639-4bbc050d513d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1820ef2a-2f09-aca2-9639-4bbc050d513d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e3e3ec7d-c857-8e49-492e-66e08b485524",
	"6b623577-b93c-8b9d-3635-06ba0aef8b0b",
	"1820ef2a-2f09-aca2-9639-4bbc050d513d");
INSERT INTO GD_GE
	VALUES ("1334fdc4-2bcf-4255-edbc-ead0d95511f4",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R8');
INSERT INTO GD_CON
	VALUES ("1334fdc4-2bcf-4255-edbc-ead0d95511f4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1a4cab79-9419-0ad1-a293-cfd38f6cb067",
	"1334fdc4-2bcf-4255-edbc-ead0d95511f4",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1a4cab79-9419-0ad1-a293-cfd38f6cb067");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1a4cab79-9419-0ad1-a293-cfd38f6cb067",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1a4cab79-9419-0ad1-a293-cfd38f6cb067",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c12bbd05-e673-ca0b-720e-e12924d62216",
	"1334fdc4-2bcf-4255-edbc-ead0d95511f4",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"c12bbd05-e673-ca0b-720e-e12924d62216");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1888.000000,
	"c12bbd05-e673-ca0b-720e-e12924d62216",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c12bbd05-e673-ca0b-720e-e12924d62216",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5be5f0c3-f9d3-18b5-498d-bd5666ec4156",
	"1334fdc4-2bcf-4255-edbc-ead0d95511f4",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5be5f0c3-f9d3-18b5-498d-bd5666ec4156");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5be5f0c3-f9d3-18b5-498d-bd5666ec4156",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5be5f0c3-f9d3-18b5-498d-bd5666ec4156",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("44773c1f-d101-84f7-3893-253b0df96691",
	"1334fdc4-2bcf-4255-edbc-ead0d95511f4",
	"00000000-0000-0000-0000-000000000000",
	"1a5b371a-d8af-21cd-02ef-5c580f017570",
	"fc3b13f7-7d9e-1594-1ae8-888825b67729");
INSERT INTO DIM_WAY
	VALUES ("1a5b371a-d8af-21cd-02ef-5c580f017570",
	1856.000000,
	1856.000000,
	"1334fdc4-2bcf-4255-edbc-ead0d95511f4",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("fc3b13f7-7d9e-1594-1ae8-888825b67729",
	1856.000000,
	1952.000000,
	"1334fdc4-2bcf-4255-edbc-ead0d95511f4",
	"00000000-0000-0000-0000-000000000000",
	"1a5b371a-d8af-21cd-02ef-5c580f017570");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1334fdc4-2bcf-4255-edbc-ead0d95511f4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1334fdc4-2bcf-4255-edbc-ead0d95511f4",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("077f242a-1c87-c229-0f12-590f1393846b",
	"a5814191-b85a-9d84-43ae-4fce8b9ab773",
	"1334fdc4-2bcf-4255-edbc-ead0d95511f4");
INSERT INTO GD_GE
	VALUES ("0c9f6bd9-b6bb-8769-2368-8ec5bebb3b35",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R9');
INSERT INTO GD_CON
	VALUES ("0c9f6bd9-b6bb-8769-2368-8ec5bebb3b35",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("50451430-d228-b43c-7c55-eb415f8026b2",
	"0c9f6bd9-b6bb-8769-2368-8ec5bebb3b35",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"50451430-d228-b43c-7c55-eb415f8026b2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"50451430-d228-b43c-7c55-eb415f8026b2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("50451430-d228-b43c-7c55-eb415f8026b2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("48989b07-e312-8a3d-fb65-f1316741b003",
	"0c9f6bd9-b6bb-8769-2368-8ec5bebb3b35",
	3,
	14.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"48989b07-e312-8a3d-fb65-f1316741b003");
INSERT INTO DIM_GE
	VALUES (1390.000000,
	1749.000000,
	"48989b07-e312-8a3d-fb65-f1316741b003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("48989b07-e312-8a3d-fb65-f1316741b003",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("02a2d6a3-c15c-e76f-e43d-08935f96be6e",
	"0c9f6bd9-b6bb-8769-2368-8ec5bebb3b35",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"02a2d6a3-c15c-e76f-e43d-08935f96be6e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"02a2d6a3-c15c-e76f-e43d-08935f96be6e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("02a2d6a3-c15c-e76f-e43d-08935f96be6e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("f6ffad59-311d-c3f2-e57c-9e94537c16cd",
	"0c9f6bd9-b6bb-8769-2368-8ec5bebb3b35",
	"00000000-0000-0000-0000-000000000000",
	"c5574bd6-2973-9052-9948-5b86e45ceaa0",
	"32e8ad51-3c4c-d469-da09-00137d431390");
INSERT INTO DIM_WAY
	VALUES ("c5574bd6-2973-9052-9948-5b86e45ceaa0",
	1392.000000,
	1696.000000,
	"0c9f6bd9-b6bb-8769-2368-8ec5bebb3b35",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("32e8ad51-3c4c-d469-da09-00137d431390",
	1392.000000,
	1856.000000,
	"0c9f6bd9-b6bb-8769-2368-8ec5bebb3b35",
	"00000000-0000-0000-0000-000000000000",
	"c5574bd6-2973-9052-9948-5b86e45ceaa0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0c9f6bd9-b6bb-8769-2368-8ec5bebb3b35",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0c9f6bd9-b6bb-8769-2368-8ec5bebb3b35",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b8ec0700-bfe5-4a44-f284-6e8916d5c2c2",
	"607497c5-4cd4-35b4-fea5-7f29183231cf",
	"0c9f6bd9-b6bb-8769-2368-8ec5bebb3b35");
INSERT INTO GD_GE
	VALUES ("45848147-606c-7bd1-c838-297f0b415ff3",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R10');
INSERT INTO GD_CON
	VALUES ("45848147-606c-7bd1-c838-297f0b415ff3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("17187f62-f5b9-c62a-cafa-f530d1909a23",
	"45848147-606c-7bd1-c838-297f0b415ff3",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"17187f62-f5b9-c62a-cafa-f530d1909a23");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"17187f62-f5b9-c62a-cafa-f530d1909a23",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("17187f62-f5b9-c62a-cafa-f530d1909a23",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("16baac01-b9a9-b188-0840-fe139b2dabea",
	"45848147-606c-7bd1-c838-297f0b415ff3",
	3,
	16.000000,
	3.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"16baac01-b9a9-b188-0840-fe139b2dabea");
INSERT INTO DIM_GE
	VALUES (1552.000000,
	1756.000000,
	"16baac01-b9a9-b188-0840-fe139b2dabea",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("16baac01-b9a9-b188-0840-fe139b2dabea",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("98842463-818f-0d2e-3de5-22f45cf08167",
	"45848147-606c-7bd1-c838-297f0b415ff3",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"98842463-818f-0d2e-3de5-22f45cf08167");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"98842463-818f-0d2e-3de5-22f45cf08167",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("98842463-818f-0d2e-3de5-22f45cf08167",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("c55134d7-56c6-9bc6-85f3-e2ba1f638526",
	"45848147-606c-7bd1-c838-297f0b415ff3",
	"00000000-0000-0000-0000-000000000000",
	"c9eae0cf-5ef0-c3bf-9179-38522cf20e0a",
	"c00c2d89-33e0-b8b4-7ddc-21a55850e619");
INSERT INTO DIM_WAY
	VALUES ("c9eae0cf-5ef0-c3bf-9179-38522cf20e0a",
	1552.000000,
	1696.000000,
	"45848147-606c-7bd1-c838-297f0b415ff3",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c00c2d89-33e0-b8b4-7ddc-21a55850e619",
	1552.000000,
	1856.000000,
	"45848147-606c-7bd1-c838-297f0b415ff3",
	"00000000-0000-0000-0000-000000000000",
	"c9eae0cf-5ef0-c3bf-9179-38522cf20e0a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"45848147-606c-7bd1-c838-297f0b415ff3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("45848147-606c-7bd1-c838-297f0b415ff3",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("cc867255-765e-d032-17ab-281080f44805",
	"902f1673-d309-8b24-f730-684e2ea1533f",
	"45848147-606c-7bd1-c838-297f0b415ff3");
INSERT INTO GD_GE
	VALUES ("78b6ba42-addc-1d15-a19d-9afc4bc9a88d",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R11');
INSERT INTO GD_CON
	VALUES ("78b6ba42-addc-1d15-a19d-9afc4bc9a88d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b779d31f-0f83-b474-db1f-79b7cd29560e",
	"78b6ba42-addc-1d15-a19d-9afc4bc9a88d",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b779d31f-0f83-b474-db1f-79b7cd29560e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b779d31f-0f83-b474-db1f-79b7cd29560e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b779d31f-0f83-b474-db1f-79b7cd29560e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6333bf48-6a57-cbd4-d8f5-2ab0d65de66d",
	"78b6ba42-addc-1d15-a19d-9afc4bc9a88d",
	3,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6333bf48-6a57-cbd4-d8f5-2ab0d65de66d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6333bf48-6a57-cbd4-d8f5-2ab0d65de66d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6333bf48-6a57-cbd4-d8f5-2ab0d65de66d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("763d1bc8-3d77-011b-a221-749abcb7f193",
	"78b6ba42-addc-1d15-a19d-9afc4bc9a88d",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"763d1bc8-3d77-011b-a221-749abcb7f193");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"763d1bc8-3d77-011b-a221-749abcb7f193",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("763d1bc8-3d77-011b-a221-749abcb7f193",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("36f86b69-60c1-49db-3425-7127783c9951",
	"78b6ba42-addc-1d15-a19d-9afc4bc9a88d",
	"00000000-0000-0000-0000-000000000000",
	"fdbafcb9-4115-6c51-9b69-21e31b43f91c",
	"1b51832d-e015-3b2e-273e-bdd453881ec9");
INSERT INTO DIM_WAY
	VALUES ("fdbafcb9-4115-6c51-9b69-21e31b43f91c",
	1456.000000,
	2048.000000,
	"78b6ba42-addc-1d15-a19d-9afc4bc9a88d",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("1b51832d-e015-3b2e-273e-bdd453881ec9",
	1456.000000,
	2160.000000,
	"78b6ba42-addc-1d15-a19d-9afc4bc9a88d",
	"00000000-0000-0000-0000-000000000000",
	"fdbafcb9-4115-6c51-9b69-21e31b43f91c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"78b6ba42-addc-1d15-a19d-9afc4bc9a88d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("78b6ba42-addc-1d15-a19d-9afc4bc9a88d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("9f56f2a2-469f-92a3-304e-407aa55d8531",
	"a6ec277c-92b5-4b72-133b-0072c56d4be7",
	"78b6ba42-addc-1d15-a19d-9afc4bc9a88d");
INSERT INTO GD_GE
	VALUES ("dbe758c3-655e-d2ff-99e6-a652ab3909f6",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R12');
INSERT INTO GD_CON
	VALUES ("dbe758c3-655e-d2ff-99e6-a652ab3909f6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("56d49d53-0fa8-dbd4-7ca9-761a996fba80",
	"dbe758c3-655e-d2ff-99e6-a652ab3909f6",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"56d49d53-0fa8-dbd4-7ca9-761a996fba80");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"56d49d53-0fa8-dbd4-7ca9-761a996fba80",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("56d49d53-0fa8-dbd4-7ca9-761a996fba80",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("caff657a-c277-a466-a42c-bbd63b1f2989",
	"dbe758c3-655e-d2ff-99e6-a652ab3909f6",
	3,
	18.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"caff657a-c277-a466-a42c-bbd63b1f2989");
INSERT INTO DIM_GE
	VALUES (1026.000000,
	1761.000000,
	"caff657a-c277-a466-a42c-bbd63b1f2989",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("caff657a-c277-a466-a42c-bbd63b1f2989",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2e8628b9-15fa-71fe-d192-8b0b16a13e47",
	"dbe758c3-655e-d2ff-99e6-a652ab3909f6",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"2e8628b9-15fa-71fe-d192-8b0b16a13e47");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2e8628b9-15fa-71fe-d192-8b0b16a13e47",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2e8628b9-15fa-71fe-d192-8b0b16a13e47",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("65735b91-4834-0000-2da2-152ad040ee1f",
	"dbe758c3-655e-d2ff-99e6-a652ab3909f6",
	"00000000-0000-0000-0000-000000000000",
	"91a5dd3b-0158-408d-79b3-dc577a96269c",
	"484ce62d-3782-bbfb-9008-846cda725c05");
INSERT INTO DIM_WAY
	VALUES ("91a5dd3b-0158-408d-79b3-dc577a96269c",
	1024.000000,
	1696.000000,
	"dbe758c3-655e-d2ff-99e6-a652ab3909f6",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("484ce62d-3782-bbfb-9008-846cda725c05",
	1024.000000,
	1856.000000,
	"dbe758c3-655e-d2ff-99e6-a652ab3909f6",
	"00000000-0000-0000-0000-000000000000",
	"91a5dd3b-0158-408d-79b3-dc577a96269c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"dbe758c3-655e-d2ff-99e6-a652ab3909f6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dbe758c3-655e-d2ff-99e6-a652ab3909f6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("89abc7b0-e136-9124-d0f7-f6a4a950f903",
	"a42c1084-76e7-50c9-d416-b6b37cb70fd1",
	"dbe758c3-655e-d2ff-99e6-a652ab3909f6");
INSERT INTO GD_GE
	VALUES ("70410c38-f5e5-b107-83fd-9f7525d51e40",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R13');
INSERT INTO GD_CON
	VALUES ("70410c38-f5e5-b107-83fd-9f7525d51e40",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7cbe3ac0-e43e-93b5-c230-45127196f082",
	"70410c38-f5e5-b107-83fd-9f7525d51e40",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7cbe3ac0-e43e-93b5-c230-45127196f082");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7cbe3ac0-e43e-93b5-c230-45127196f082",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7cbe3ac0-e43e-93b5-c230-45127196f082",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e98fe3e0-5c4b-b704-932c-5f94592e6eab",
	"70410c38-f5e5-b107-83fd-9f7525d51e40",
	3,
	10.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"e98fe3e0-5c4b-b704-932c-5f94592e6eab");
INSERT INTO DIM_GE
	VALUES (1194.000000,
	1760.000000,
	"e98fe3e0-5c4b-b704-932c-5f94592e6eab",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e98fe3e0-5c4b-b704-932c-5f94592e6eab",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("99dd7af4-4aac-5589-5bfd-5907ef41c8b3",
	"70410c38-f5e5-b107-83fd-9f7525d51e40",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"99dd7af4-4aac-5589-5bfd-5907ef41c8b3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"99dd7af4-4aac-5589-5bfd-5907ef41c8b3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("99dd7af4-4aac-5589-5bfd-5907ef41c8b3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("862ac7a4-6866-72bb-a55d-6023755306d2",
	"70410c38-f5e5-b107-83fd-9f7525d51e40",
	"00000000-0000-0000-0000-000000000000",
	"82a927d9-6ec4-6791-04dc-7731a42e9477",
	"f9af3fcf-b8b2-574c-a1cd-be96f086cb09");
INSERT INTO DIM_WAY
	VALUES ("82a927d9-6ec4-6791-04dc-7731a42e9477",
	1200.000000,
	1696.000000,
	"70410c38-f5e5-b107-83fd-9f7525d51e40",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("f9af3fcf-b8b2-574c-a1cd-be96f086cb09",
	1200.000000,
	1856.000000,
	"70410c38-f5e5-b107-83fd-9f7525d51e40",
	"00000000-0000-0000-0000-000000000000",
	"82a927d9-6ec4-6791-04dc-7731a42e9477");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"70410c38-f5e5-b107-83fd-9f7525d51e40",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("70410c38-f5e5-b107-83fd-9f7525d51e40",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("d4fcfe0c-2f9e-993e-01c2-a279e7a45b29",
	"f55e7f65-4e12-3aba-bd0c-ed137df8be5a",
	"70410c38-f5e5-b107-83fd-9f7525d51e40");
INSERT INTO GD_GE
	VALUES ("7023c7f9-9c42-b538-4052-d6854fb3e953",
	"aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R14');
INSERT INTO GD_CON
	VALUES ("7023c7f9-9c42-b538-4052-d6854fb3e953",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a2e38534-3176-0b1e-74fa-22f1ffcd3a6b",
	"7023c7f9-9c42-b538-4052-d6854fb3e953",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a2e38534-3176-0b1e-74fa-22f1ffcd3a6b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a2e38534-3176-0b1e-74fa-22f1ffcd3a6b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a2e38534-3176-0b1e-74fa-22f1ffcd3a6b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1480372d-64d4-d586-de77-22ab0db9551b",
	"7023c7f9-9c42-b538-4052-d6854fb3e953",
	3,
	21.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"1480372d-64d4-d586-de77-22ab0db9551b");
INSERT INTO DIM_GE
	VALUES (1109.000000,
	2098.000000,
	"1480372d-64d4-d586-de77-22ab0db9551b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1480372d-64d4-d586-de77-22ab0db9551b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("dc14b026-6c3b-609b-e5b5-73a1110b931a",
	"7023c7f9-9c42-b538-4052-d6854fb3e953",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"dc14b026-6c3b-609b-e5b5-73a1110b931a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"dc14b026-6c3b-609b-e5b5-73a1110b931a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dc14b026-6c3b-609b-e5b5-73a1110b931a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("3937b92f-e8f4-3f51-d562-e405f3f62458",
	"7023c7f9-9c42-b538-4052-d6854fb3e953",
	"00000000-0000-0000-0000-000000000000",
	"51df5da6-2fc3-669f-0f39-3c799a4132ea",
	"17bf0551-9c63-b61a-379c-9dfa6077b75d");
INSERT INTO DIM_WAY
	VALUES ("51df5da6-2fc3-669f-0f39-3c799a4132ea",
	1104.000000,
	2064.000000,
	"7023c7f9-9c42-b538-4052-d6854fb3e953",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("17bf0551-9c63-b61a-379c-9dfa6077b75d",
	1104.000000,
	2160.000000,
	"7023c7f9-9c42-b538-4052-d6854fb3e953",
	"00000000-0000-0000-0000-000000000000",
	"51df5da6-2fc3-669f-0f39-3c799a4132ea");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7023c7f9-9c42-b538-4052-d6854fb3e953",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7023c7f9-9c42-b538-4052-d6854fb3e953",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("329ca0ef-5330-03b9-ea4c-dc8cbefd8c78",
	"86ad5a62-b25d-c5d0-1a99-30bcee45672e",
	"7023c7f9-9c42-b538-4052-d6854fb3e953");
INSERT INTO DIM_DIA
	VALUES ("aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	'',
	0.433884,
	707.000000,
	1216.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	'Any Object',
	8,
	'AO',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	'i_parm_ret_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'LOG::LogFailure(message:"Operation AO::i_parm_ret_i should not have been translated.");
return param.i;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TPARM
	VALUES ("5e6cc7f2-3284-fb66-539e-59825320243f",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_NBATTR
	VALUES ("f2228e50-6bd1-9598-02ae-7f51defb49a8",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_BATTR
	VALUES ("f2228e50-6bd1-9598-02ae-7f51defb49a8",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ATTR
	VALUES ("f2228e50-6bd1-9598-02ae-7f51defb49a8",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	'ao_id',
	'',
	'',
	'ao_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_BATTR
	VALUES ("2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ATTR
	VALUES ("2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"f2228e50-6bd1-9598-02ae-7f51defb49a8",
	'b',
	'',
	'',
	'b',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("be200624-30d5-d348-9648-b696c180ea95",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_BATTR
	VALUES ("be200624-30d5-d348-9648-b696c180ea95",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ATTR
	VALUES ("be200624-30d5-d348-9648-b696c180ea95",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	'i',
	'',
	'',
	'i',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("76ace3b7-9333-cfa2-e7e7-3ca1a75c2ea9",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_BATTR
	VALUES ("76ace3b7-9333-cfa2-e7e7-3ca1a75c2ea9",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ATTR
	VALUES ("76ace3b7-9333-cfa2-e7e7-3ca1a75c2ea9",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"be200624-30d5-d348-9648-b696c180ea95",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("90b4ec41-7a43-5fa7-4576-b48c3e51e620",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_BATTR
	VALUES ("90b4ec41-7a43-5fa7-4576-b48c3e51e620",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ATTR
	VALUES ("90b4ec41-7a43-5fa7-4576-b48c3e51e620",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"76ace3b7-9333-cfa2-e7e7-3ca1a75c2ea9",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("f3716951-41eb-0058-f792-b6bb11cd041a",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_BATTR
	VALUES ("f3716951-41eb-0058-f792-b6bb11cd041a",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ATTR
	VALUES ("f3716951-41eb-0058-f792-b6bb11cd041a",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"90b4ec41-7a43-5fa7-4576-b48c3e51e620",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_OIDA
	VALUES ("f2228e50-6bd1-9598-02ae-7f51defb49a8",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	0,
	'ao_id');
INSERT INTO O_ID
	VALUES (1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ID
	VALUES (2,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO PE_PE
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	'Boolean Expression Test',
	15,
	'BET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("d35abe68-761c-4805-6622-ec58904bb650",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_BATTR
	VALUES ("d35abe68-761c-4805-6622-ec58904bb650",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_ATTR
	VALUES ("d35abe68-761c-4805-6622-ec58904bb650",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5731a408-b0d9-e43c-5a20-bcc9ce92a73e",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_BATTR
	VALUES ("5731a408-b0d9-e43c-5a20-bcc9ce92a73e",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_ATTR
	VALUES ("5731a408-b0d9-e43c-5a20-bcc9ce92a73e",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"d35abe68-761c-4805-6622-ec58904bb650",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("6a8eae6e-d574-7609-6008-2b15b1e1112b",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_BATTR
	VALUES ("6a8eae6e-d574-7609-6008-2b15b1e1112b",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_ATTR
	VALUES ("6a8eae6e-d574-7609-6008-2b15b1e1112b",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"5731a408-b0d9-e43c-5a20-bcc9ce92a73e",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_REF
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	0,
	"4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"ccf70a38-daf9-138f-229a-d539eead1ec6",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb",
	"b13d524e-75cf-e2b2-d0a5-2c7ea47ea340",
	"6677d4a6-76bd-34bb-d740-6dfa7f61ff49",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Other Boolean Expression Test',
	'bfalse',
	'R9');
INSERT INTO O_RATTR
	VALUES ("b13d524e-75cf-e2b2-d0a5-2c7ea47ea340",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("b13d524e-75cf-e2b2-d0a5-2c7ea47ea340",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"6a8eae6e-d574-7609-6008-2b15b1e1112b",
	'r9bfalse',
	'',
	'r9',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	0,
	"5cf88885-59d8-3195-ae35-135d1c796b97",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"ccf70a38-daf9-138f-229a-d539eead1ec6",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb",
	"b5fb9a6e-b745-06b2-4f85-99fb47c62331",
	"1abaa67a-6790-7d12-6bbd-6c896f90ecf0",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Other Boolean Expression Test',
	'btrue',
	'R9');
INSERT INTO O_RATTR
	VALUES ("b5fb9a6e-b745-06b2-4f85-99fb47c62331",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"5cf88885-59d8-3195-ae35-135d1c796b97",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("b5fb9a6e-b745-06b2-4f85-99fb47c62331",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"b13d524e-75cf-e2b2-d0a5-2c7ea47ea340",
	'r9btrue',
	'',
	'r9',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4cd6642b-7b1a-8cd2-f164-e7ab7d51d6f6",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_BATTR
	VALUES ("4cd6642b-7b1a-8cd2-f164-e7ab7d51d6f6",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_ATTR
	VALUES ("4cd6642b-7b1a-8cd2-f164-e7ab7d51d6f6",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"b5fb9a6e-b745-06b2-4f85-99fb47c62331",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_OIDA
	VALUES ("d35abe68-761c-4805-6622-ec58904bb650",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_ID
	VALUES (2,
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO SM_ISM
	VALUES ("583bc0ec-635f-eb06-012f-30479b2b98f2",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO SM_SM
	VALUES ("583bc0ec-635f-eb06-012f-30479b2b98f2",
	'',
	5);
INSERT INTO SM_MOORE
	VALUES ("583bc0ec-635f-eb06-012f-30479b2b98f2");
INSERT INTO SM_EVTDI
	VALUES ("36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"36bc36ec-860b-d595-4652-c35b8a6c0d66");
INSERT INTO SM_EVTDI
	VALUES ("339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("77a1ce5f-9a4d-adb1-584b-030c67832708",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c");
INSERT INTO SM_EVTDI
	VALUES ("9301500b-b43e-3be3-58ef-a86c45af48f0",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"77a1ce5f-9a4d-adb1-584b-030c67832708");
INSERT INTO SM_EVTDI
	VALUES ("d335290a-7204-0b63-db53-25d3f63fd8ea",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3");
INSERT INTO SM_LEVT
	VALUES ("b259479f-1956-e363-c395-911bb8c35cd3",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("b259479f-1956-e363-c395-911bb8c35cd3",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("b259479f-1956-e363-c395-911bb8c35cd3",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start and test',
	0,
	'',
	'BET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Start or test',
	0,
	'',
	'BET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("3aee7789-2566-d5ea-0a55-3334b0129fef",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("3aee7789-2566-d5ea-0a55-3334b0129fef",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("3aee7789-2566-d5ea-0a55-3334b0129fef",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Continue and test',
	0,
	'',
	'BET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Continue or test',
	0,
	'',
	'BET4',
	'');
INSERT INTO SM_STATE
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'And test 1a',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("3e85b013-5007-89e2-0969-5e66fc0e2395",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"19309339-d791-2728-6d34-a7ddba63dc2d");
INSERT INTO SM_AH
	VALUES ("3e85b013-5007-89e2-0969-5e66fc0e2395",
	"583bc0ec-635f-eb06-012f-30479b2b98f2");
INSERT INTO SM_ACT
	VALUES ("3e85b013-5007-89e2-0969-5e66fc0e2395",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	1,
	'LOG::LogInfo(message:"Starting and test") ;

//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    local existing
assign t1 = temp1 and temp1 ;
if ( t1 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t2 = temp1 and temp2 ;
if ( t2 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t3 = temp2 and temp1 ;
if ( t3 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t4 = temp2 and temp2 ;
if ( t4 == true )
  LOG::LogSuccess(message:" and local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( true )") ;
end if;
 
  // local existing    rcvd_evt
assign t5 = temp1 and rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 and rcvd_evt.ttrue ;
if ( t6 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t7 = temp2 and rcvd_evt.tfalse ;
if ( t7 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t8 = temp2 and rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 and false ;
if ( t9 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 and true ;
if ( t10 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t11 = temp2 and false ;
if ( t11 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t12 = temp2 and true ;
if ( t12 == true )
  LOG::LogSuccess(message:" and local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 and self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 and self.btrue ;
if ( t14 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t15 = temp2 and self.bfalse ;
if ( t15 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t16 = temp2 and self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" and local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 and self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 and self.r9btrue ;
if ( t18 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t19 = temp2 and self.r9bfalse ;
if ( t19 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = temp2 and self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of OBET;
assign t21 = temp1 and saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 and saf.btrue ;
if ( t22 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t23 = temp2 and saf.bfalse ;
if ( t23 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t24 = temp2 and saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of OBET;
for each smf in smfs
assign t25 = temp1 and smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 and smf.btrue ;
if ( t26 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t27 = temp2 and smf.bfalse ;
if ( t27 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t28 = temp2 and smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->OBET[R9];
assign t29 = temp1 and sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 and sor.btrue ;
if ( t30 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t31 = temp2 and sor.bfalse ;
if ( t31 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t32 = temp2 and sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->OBET[R10];
assign t33 = temp1 and sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 and sar.btrue ;
if ( t34 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t35 = temp2 and sar.bfalse ;
if ( t35 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t36 = temp2 and sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->OBET[R10];
for each smr in smrs
assign t37 = temp1 and smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 and smr.btrue ;
if ( t38 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t39 = temp2 and smr.bfalse ;
if ( t39 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t40 = temp2 and smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 and saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 and saf.r11btrue ;
if ( t42 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t43 = temp2 and saf.r11bfalse ;
if ( t43 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t44 = temp2 and saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 and smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 and smf.r11btrue ;
if ( t46 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t47 = temp2 and smf.r11bfalse ;
if ( t47 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t48 = temp2 and smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 and sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 and sor.r11btrue ;
if ( t50 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t51 = temp2 and sor.r11bfalse ;
if ( t51 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t52 = temp2 and sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 and sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 and sar.r11btrue ;
if ( t54 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t55 = temp2 and sar.r11bfalse ;
if ( t55 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t56 = temp2 and sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 and smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 and smr.r11btrue ;
if ( t58 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t59 = temp2 and smr.r11bfalse ;
if ( t59 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t60 = temp2 and smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse and temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue and temp1 ;
if ( t62 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t63 = rcvd_evt.tfalse and temp2 ;
if ( t63 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t64 = rcvd_evt.ttrue and temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse and rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue and rcvd_evt.tfalse ;
if ( t66 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t67 = rcvd_evt.tfalse and rcvd_evt.ttrue ;
if ( t67 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t68 = rcvd_evt.ttrue and rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse and false ;
if ( t69 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue and false ;
if ( t70 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t71 = rcvd_evt.tfalse and true ;
if ( t71 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t72 = rcvd_evt.ttrue and true ;
if ( t72 == true )
  LOG::LogSuccess(message:" and rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse and self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue and self.bfalse ;
if ( t74 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t75 = rcvd_evt.tfalse and self.btrue ;
if ( t75 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t76 = rcvd_evt.ttrue and self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse and self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue and self.r9bfalse ;
if ( t78 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t79 = rcvd_evt.tfalse and self.r9btrue ;
if ( t79 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t80 = rcvd_evt.ttrue and self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse and saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse and saf.btrue ;
if ( t82 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t83 = rcvd_evt.ttrue and saf.bfalse ;
if ( t83 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t84 = rcvd_evt.ttrue and saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse and smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse and smf.btrue ;
if ( t86 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t87 = rcvd_evt.ttrue and smf.bfalse ;
if ( t87 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t88 = rcvd_evt.ttrue and smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse and sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse and sor.btrue ;
if ( t90 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t91 = rcvd_evt.ttrue and sor.bfalse ;
if ( t91 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t92 = rcvd_evt.ttrue and sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse and sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse and sar.btrue ;
if ( t94 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t95 = rcvd_evt.ttrue and sar.bfalse ;
if ( t95 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t96 = rcvd_evt.ttrue and sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse and smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse and smr.btrue ;
if ( t98 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t99 = rcvd_evt.ttrue and smr.bfalse ;
if ( t99 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t100 = rcvd_evt.ttrue and smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse and saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse and saf.r11btrue ;
if ( t102 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t103 = rcvd_evt.ttrue and saf.r11bfalse ;
if ( t103 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t104 = rcvd_evt.ttrue and saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse and smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse and smf.r11btrue ;
if ( t106 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t107 = rcvd_evt.ttrue and smf.r11bfalse ;
if ( t107 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t108 = rcvd_evt.ttrue and smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse and sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse and sor.r11btrue ;
if ( t110 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t111 = rcvd_evt.ttrue and sor.r11bfalse ;
if ( t111 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t112 = rcvd_evt.ttrue and sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse and sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse and sar.r11btrue ;
if ( t114 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t115 = rcvd_evt.ttrue and sar.r11bfalse ;
if ( t115 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t116 = rcvd_evt.ttrue and sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse and smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse and smr.r11btrue ;
if ( t118 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t119 = rcvd_evt.ttrue and smr.r11bfalse ;
if ( t119 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t120 = rcvd_evt.ttrue and smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'And test 2',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"171c28d1-9e02-36a8-58a4-0818b61cc903");
INSERT INTO SM_AH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"583bc0ec-635f-eb06-012f-30479b2b98f2");
INSERT INTO SM_ACT
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	1,
	'//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse and temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue and temp1 ;
if ( t302 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t303 = saf.bfalse and temp2 ;
if ( t303 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t304 = saf.btrue and temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse and rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue and rcvd_evt.tfalse ;
if ( t306 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t307 = saf.bfalse and rcvd_evt.ttrue ;
if ( t307 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t308 = saf.btrue and rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse and false ;
if ( t309 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue and false ;
if ( t310 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t311 = saf.bfalse and true ;
if ( t311 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t312 = saf.btrue and true ;
if ( t312 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse and self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue and self.bfalse ;
if ( t314 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t315 = saf.bfalse and self.btrue ;
if ( t315 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t316 = saf.btrue and self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse and self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue and self.r9bfalse ;
if ( t318 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t319 = saf.bfalse and self.r9btrue ;
if ( t319 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t320 = saf.btrue and self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse and saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse and saf.btrue ;
if ( t322 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t323 = saf.btrue and saf.bfalse ;
if ( t323 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t324 = saf.btrue and saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse and smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse and smf.btrue ;
if ( t326 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t327 = saf.btrue and smf.bfalse ;
if ( t327 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t328 = saf.btrue and smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse and sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse and sor.btrue ;
if ( t330 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t331 = saf.btrue and sor.bfalse ;
if ( t331 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t332 = saf.btrue and sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse and sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse and sar.btrue ;
if ( t334 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t335 = saf.btrue and sar.bfalse ;
if ( t335 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t336 = saf.btrue and sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse and smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse and smr.btrue ;
if ( t338 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t339 = saf.btrue and smr.bfalse ;
if ( t339 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t340 = saf.btrue and smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse and saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse and saf.r11btrue ;
if ( t342 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t343 = saf.btrue and saf.r11bfalse ;
if ( t343 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t344 = saf.btrue and saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse and smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse and smf.r11btrue ;
if ( t346 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t347 = saf.btrue and smf.r11bfalse ;
if ( t347 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t348 = saf.btrue and smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse and sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse and sor.r11btrue ;
if ( t350 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t351 = saf.btrue and sor.r11bfalse ;
if ( t351 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t352 = saf.btrue and sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse and sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse and sar.r11btrue ;
if ( t354 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t355 = saf.btrue and sar.r11bfalse ;
if ( t355 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t356 = saf.btrue and sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse and smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse and smr.r11btrue ;
if ( t358 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t359 = saf.btrue and smr.r11bfalse ;
if ( t359 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t360 = saf.btrue and smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse and temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue and temp1 ;
if ( t602 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t603 = saf.r11bfalse and temp2 ;
if ( t603 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t604 = saf.r11btrue and temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse and rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue and rcvd_evt.tfalse ;
if ( t606 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t607 = saf.r11bfalse and rcvd_evt.ttrue ;
if ( t607 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t608 = saf.r11btrue and rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse and false ;
if ( t609 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue and false ;
if ( t610 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t611 = saf.r11bfalse and true ;
if ( t611 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t612 = saf.r11btrue and true ;
if ( t612 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse and self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue and self.bfalse ;
if ( t614 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t615 = saf.r11bfalse and self.btrue ;
if ( t615 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t616 = saf.r11btrue and self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse and self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue and self.r9bfalse ;
if ( t618 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t619 = saf.r11bfalse and self.r9btrue ;
if ( t619 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t620 = saf.r11btrue and self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse and saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse and saf.btrue ;
if ( t622 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t623 = saf.r11btrue and saf.bfalse ;
if ( t623 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t624 = saf.r11btrue and saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse and smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse and smf.btrue ;
if ( t626 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t627 = saf.r11btrue and smf.bfalse ;
if ( t627 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t628 = saf.r11btrue and smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse and sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse and sor.btrue ;
if ( t630 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t631 = saf.r11btrue and sor.bfalse ;
if ( t631 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t632 = saf.r11btrue and sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse and sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse and sar.btrue ;
if ( t634 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t635 = saf.r11btrue and sar.bfalse ;
if ( t635 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t636 = saf.r11btrue and sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse and smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse and smr.btrue ;
if ( t638 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t639 = saf.r11btrue and smr.bfalse ;
if ( t639 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t640 = saf.r11btrue and smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse and saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse and saf.r11btrue ;
if ( t642 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t643 = saf.r11btrue and saf.r11bfalse ;
if ( t643 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t644 = saf.r11btrue and saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse and smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse and smf.r11btrue ;
if ( t646 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t647 = saf.r11btrue and smf.r11bfalse ;
if ( t647 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t648 = saf.r11btrue and smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse and sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse and sor.r11btrue ;
if ( t650 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t651 = saf.r11btrue and sor.r11bfalse ;
if ( t651 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t652 = saf.r11btrue and sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse and sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse and sar.r11btrue ;
if ( t654 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t655 = saf.r11btrue and sar.r11bfalse ;
if ( t655 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t656 = saf.r11btrue and sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse and smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse and smr.r11btrue ;
if ( t658 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t659 = saf.r11btrue and smr.r11bfalse ;
if ( t659 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t660 = saf.r11btrue and smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed and test") ;

//generate event to commence next test
generate BET3:''Start or test''(tfalse:false, ttrue:true) to self;
 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1a',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"06bbc248-c7a1-6f90-527e-cb2216996743");
INSERT INTO SM_AH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"583bc0ec-635f-eb06-012f-30479b2b98f2");
INSERT INTO SM_ACT
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	1,
	'LOG::LogInfo(message:"Starting or test") ;

//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    local existing
assign t1 = temp1 or temp1 ;
if ( t1 == false )
  LOG::LogSuccess(message:" or local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( false )") ;
end if;
 
assign t2 = temp1 or temp2 ;
if ( t2 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
assign t3 = temp2 or temp1 ;
if ( t3 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
assign t4 = temp2 or temp2 ;
if ( t4 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
  // local existing    rcvd_evt
assign t5 = temp1 or rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 or rcvd_evt.ttrue ;
if ( t6 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t7 = temp2 or rcvd_evt.tfalse ;
if ( t7 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t8 = temp2 or rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 or false ;
if ( t9 == false )
  LOG::LogSuccess(message:" or local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 or true ;
if ( t10 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t11 = temp2 or false ;
if ( t11 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t12 = temp2 or true ;
if ( t12 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 or self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" or local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 or self.btrue ;
if ( t14 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t15 = temp2 or self.bfalse ;
if ( t15 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t16 = temp2 or self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 or self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 or self.r9btrue ;
if ( t18 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t19 = temp2 or self.r9bfalse ;
if ( t19 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t20 = temp2 or self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of OBET;
assign t21 = temp1 or saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 or saf.btrue ;
if ( t22 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t23 = temp2 or saf.bfalse ;
if ( t23 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t24 = temp2 or saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of OBET;
for each smf in smfs
assign t25 = temp1 or smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 or smf.btrue ;
if ( t26 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t27 = temp2 or smf.bfalse ;
if ( t27 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t28 = temp2 or smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->OBET[R9];
assign t29 = temp1 or sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 or sor.btrue ;
if ( t30 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t31 = temp2 or sor.bfalse ;
if ( t31 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t32 = temp2 or sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->OBET[R10];
assign t33 = temp1 or sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 or sar.btrue ;
if ( t34 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t35 = temp2 or sar.bfalse ;
if ( t35 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t36 = temp2 or sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->OBET[R10];
for each smr in smrs
assign t37 = temp1 or smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 or smr.btrue ;
if ( t38 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t39 = temp2 or smr.bfalse ;
if ( t39 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t40 = temp2 or smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 or saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 or saf.r11btrue ;
if ( t42 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t43 = temp2 or saf.r11bfalse ;
if ( t43 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t44 = temp2 or saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 or smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 or smf.r11btrue ;
if ( t46 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t47 = temp2 or smf.r11bfalse ;
if ( t47 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t48 = temp2 or smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 or sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 or sor.r11btrue ;
if ( t50 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t51 = temp2 or sor.r11bfalse ;
if ( t51 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t52 = temp2 or sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 or sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 or sar.r11btrue ;
if ( t54 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t55 = temp2 or sar.r11bfalse ;
if ( t55 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t56 = temp2 or sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 or smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 or smr.r11btrue ;
if ( t58 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t59 = temp2 or smr.r11bfalse ;
if ( t59 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t60 = temp2 or smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse or temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue or temp1 ;
if ( t62 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t63 = rcvd_evt.tfalse or temp2 ;
if ( t63 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t64 = rcvd_evt.ttrue or temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse or rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue or rcvd_evt.tfalse ;
if ( t66 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t67 = rcvd_evt.tfalse or rcvd_evt.ttrue ;
if ( t67 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t68 = rcvd_evt.ttrue or rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse or false ;
if ( t69 == false )
  LOG::LogSuccess(message:" or rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue or false ;
if ( t70 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t71 = rcvd_evt.tfalse or true ;
if ( t71 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t72 = rcvd_evt.ttrue or true ;
if ( t72 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse or self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue or self.bfalse ;
if ( t74 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t75 = rcvd_evt.tfalse or self.btrue ;
if ( t75 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t76 = rcvd_evt.ttrue or self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse or self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue or self.r9bfalse ;
if ( t78 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t79 = rcvd_evt.tfalse or self.r9btrue ;
if ( t79 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t80 = rcvd_evt.ttrue or self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse or saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse or saf.btrue ;
if ( t82 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t83 = rcvd_evt.ttrue or saf.bfalse ;
if ( t83 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t84 = rcvd_evt.ttrue or saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse or smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse or smf.btrue ;
if ( t86 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t87 = rcvd_evt.ttrue or smf.bfalse ;
if ( t87 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t88 = rcvd_evt.ttrue or smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse or sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse or sor.btrue ;
if ( t90 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t91 = rcvd_evt.ttrue or sor.bfalse ;
if ( t91 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t92 = rcvd_evt.ttrue or sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse or sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse or sar.btrue ;
if ( t94 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t95 = rcvd_evt.ttrue or sar.bfalse ;
if ( t95 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t96 = rcvd_evt.ttrue or sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse or smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse or smr.btrue ;
if ( t98 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t99 = rcvd_evt.ttrue or smr.bfalse ;
if ( t99 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t100 = rcvd_evt.ttrue or smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse or saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse or saf.r11btrue ;
if ( t102 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t103 = rcvd_evt.ttrue or saf.r11bfalse ;
if ( t103 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t104 = rcvd_evt.ttrue or saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse or smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse or smf.r11btrue ;
if ( t106 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t107 = rcvd_evt.ttrue or smf.r11bfalse ;
if ( t107 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t108 = rcvd_evt.ttrue or smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse or sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse or sor.r11btrue ;
if ( t110 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t111 = rcvd_evt.ttrue or sor.r11bfalse ;
if ( t111 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t112 = rcvd_evt.ttrue or sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse or sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse or sar.r11btrue ;
if ( t114 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t115 = rcvd_evt.ttrue or sar.r11bfalse ;
if ( t115 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t116 = rcvd_evt.ttrue or sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse or smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse or smr.r11btrue ;
if ( t118 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t119 = rcvd_evt.ttrue or smr.r11bfalse ;
if ( t119 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t120 = rcvd_evt.ttrue or smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET4:''Continue or test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'Or test 2',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49");
INSERT INTO SM_AH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"583bc0ec-635f-eb06-012f-30479b2b98f2");
INSERT INTO SM_ACT
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	1,
	'
//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse or temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue or temp1 ;
if ( t302 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t303 = saf.bfalse or temp2 ;
if ( t303 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t304 = saf.btrue or temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse or rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue or rcvd_evt.tfalse ;
if ( t306 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t307 = saf.bfalse or rcvd_evt.ttrue ;
if ( t307 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t308 = saf.btrue or rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse or false ;
if ( t309 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue or false ;
if ( t310 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t311 = saf.bfalse or true ;
if ( t311 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t312 = saf.btrue or true ;
if ( t312 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse or self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue or self.bfalse ;
if ( t314 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t315 = saf.bfalse or self.btrue ;
if ( t315 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t316 = saf.btrue or self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse or self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue or self.r9bfalse ;
if ( t318 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t319 = saf.bfalse or self.r9btrue ;
if ( t319 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t320 = saf.btrue or self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse or saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse or saf.btrue ;
if ( t322 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t323 = saf.btrue or saf.bfalse ;
if ( t323 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t324 = saf.btrue or saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse or smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse or smf.btrue ;
if ( t326 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t327 = saf.btrue or smf.bfalse ;
if ( t327 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t328 = saf.btrue or smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse or sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse or sor.btrue ;
if ( t330 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t331 = saf.btrue or sor.bfalse ;
if ( t331 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t332 = saf.btrue or sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse or sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse or sar.btrue ;
if ( t334 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t335 = saf.btrue or sar.bfalse ;
if ( t335 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t336 = saf.btrue or sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse or smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse or smr.btrue ;
if ( t338 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t339 = saf.btrue or smr.bfalse ;
if ( t339 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t340 = saf.btrue or smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse or saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse or saf.r11btrue ;
if ( t342 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t343 = saf.btrue or saf.r11bfalse ;
if ( t343 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t344 = saf.btrue or saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse or smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse or smf.r11btrue ;
if ( t346 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t347 = saf.btrue or smf.r11bfalse ;
if ( t347 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t348 = saf.btrue or smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse or sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse or sor.r11btrue ;
if ( t350 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t351 = saf.btrue or sor.r11bfalse ;
if ( t351 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t352 = saf.btrue or sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse or sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse or sar.r11btrue ;
if ( t354 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t355 = saf.btrue or sar.r11bfalse ;
if ( t355 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t356 = saf.btrue or sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse or smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse or smr.r11btrue ;
if ( t358 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t359 = saf.btrue or smr.r11bfalse ;
if ( t359 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t360 = saf.btrue or smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse or temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue or temp1 ;
if ( t602 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t603 = saf.r11bfalse or temp2 ;
if ( t603 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t604 = saf.r11btrue or temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse or rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue or rcvd_evt.tfalse ;
if ( t606 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t607 = saf.r11bfalse or rcvd_evt.ttrue ;
if ( t607 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t608 = saf.r11btrue or rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse or false ;
if ( t609 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue or false ;
if ( t610 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t611 = saf.r11bfalse or true ;
if ( t611 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t612 = saf.r11btrue or true ;
if ( t612 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse or self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue or self.bfalse ;
if ( t614 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t615 = saf.r11bfalse or self.btrue ;
if ( t615 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t616 = saf.r11btrue or self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse or self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue or self.r9bfalse ;
if ( t618 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t619 = saf.r11bfalse or self.r9btrue ;
if ( t619 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t620 = saf.r11btrue or self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse or saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse or saf.btrue ;
if ( t622 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t623 = saf.r11btrue or saf.bfalse ;
if ( t623 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t624 = saf.r11btrue or saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse or smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse or smf.btrue ;
if ( t626 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t627 = saf.r11btrue or smf.bfalse ;
if ( t627 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t628 = saf.r11btrue or smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse or sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse or sor.btrue ;
if ( t630 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t631 = saf.r11btrue or sor.bfalse ;
if ( t631 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t632 = saf.r11btrue or sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse or sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse or sar.btrue ;
if ( t634 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t635 = saf.r11btrue or sar.bfalse ;
if ( t635 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t636 = saf.r11btrue or sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse or smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse or smr.btrue ;
if ( t638 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t639 = saf.r11btrue or smr.bfalse ;
if ( t639 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t640 = saf.r11btrue or smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse or saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse or saf.r11btrue ;
if ( t642 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t643 = saf.r11btrue or saf.r11bfalse ;
if ( t643 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t644 = saf.r11btrue or saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse or smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse or smf.r11btrue ;
if ( t646 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t647 = saf.r11btrue or smf.r11bfalse ;
if ( t647 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t648 = saf.r11btrue or smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse or sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse or sor.r11btrue ;
if ( t650 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t651 = saf.r11btrue or sor.r11bfalse ;
if ( t651 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t652 = saf.r11btrue or sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse or sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse or sar.r11btrue ;
if ( t654 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t655 = saf.r11btrue or sar.r11bfalse ;
if ( t655 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t656 = saf.r11btrue or sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse or smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse or smr.r11btrue ;
if ( t658 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t659 = saf.r11btrue or smr.r11bfalse ;
if ( t659 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t660 = saf.r11btrue or smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed or test") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'And test 1b',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"57f36afb-7cf6-2a15-0757-d78daaf78509");
INSERT INTO SM_AH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"583bc0ec-635f-eb06-012f-30479b2b98f2");
INSERT INTO SM_ACT
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	1,
	'assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true and temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse and temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue and temp1 ;
if ( t182 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t183 = self.bfalse and temp2 ;
if ( t183 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t184 = self.btrue and temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" and self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse and rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue and rcvd_evt.tfalse ;
if ( t186 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t187 = self.bfalse and rcvd_evt.ttrue ;
if ( t187 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t188 = self.btrue and rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse and false ;
if ( t189 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue and false ;
if ( t190 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t191 = self.bfalse and true ;
if ( t191 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t192 = self.btrue and true ;
if ( t192 == true )
  LOG::LogSuccess(message:" and self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse and self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue and self.bfalse ;
if ( t194 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t195 = self.bfalse and self.btrue ;
if ( t195 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t196 = self.btrue and self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse and self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue and self.r9bfalse ;
if ( t198 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t199 = self.bfalse and self.r9btrue ;
if ( t199 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t200 = self.btrue and self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse and saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse and saf.btrue ;
if ( t202 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t203 = self.btrue and saf.bfalse ;
if ( t203 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t204 = self.btrue and saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse and smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse and smf.btrue ;
if ( t206 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t207 = self.btrue and smf.bfalse ;
if ( t207 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t208 = self.btrue and smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse and sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse and sor.btrue ;
if ( t210 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t211 = self.btrue and sor.bfalse ;
if ( t211 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t212 = self.btrue and sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse and sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse and sar.btrue ;
if ( t214 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t215 = self.btrue and sar.bfalse ;
if ( t215 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t216 = self.btrue and sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse and smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse and smr.btrue ;
if ( t218 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t219 = self.btrue and smr.bfalse ;
if ( t219 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t220 = self.btrue and smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse and saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse and saf.r11btrue ;
if ( t222 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t223 = self.btrue and saf.r11bfalse ;
if ( t223 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t224 = self.btrue and saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse and smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse and smf.r11btrue ;
if ( t226 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t227 = self.btrue and smf.r11bfalse ;
if ( t227 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t228 = self.btrue and smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse and sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse and sor.r11btrue ;
if ( t230 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t231 = self.btrue and sor.r11bfalse ;
if ( t231 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t232 = self.btrue and sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse and sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse and sar.r11btrue ;
if ( t234 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t235 = self.btrue and sar.r11bfalse ;
if ( t235 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t236 = self.btrue and sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse and smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse and smr.r11btrue ;
if ( t238 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t239 = self.btrue and smr.r11bfalse ;
if ( t239 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t240 = self.btrue and smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse and temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue and temp1 ;
if ( t242 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t243 = self.r9bfalse and temp2 ;
if ( t243 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t244 = self.r9btrue and temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse and rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue and rcvd_evt.tfalse ;
if ( t246 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t247 = self.r9bfalse and rcvd_evt.ttrue ;
if ( t247 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t248 = self.r9btrue and rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse and false ;
if ( t249 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue and false ;
if ( t250 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t251 = self.r9bfalse and true ;
if ( t251 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t252 = self.r9btrue and true ;
if ( t252 == true )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse and self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue and self.bfalse ;
if ( t254 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t255 = self.r9bfalse and self.btrue ;
if ( t255 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t256 = self.r9btrue and self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse and self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue and self.r9bfalse ;
if ( t258 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t259 = self.r9bfalse and self.r9btrue ;
if ( t259 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t260 = self.r9btrue and self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse and saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse and saf.btrue ;
if ( t262 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t263 = self.r9btrue and saf.bfalse ;
if ( t263 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t264 = self.r9btrue and saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse and smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse and smf.btrue ;
if ( t266 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t267 = self.r9btrue and smf.bfalse ;
if ( t267 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t268 = self.r9btrue and smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse and sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse and sor.btrue ;
if ( t270 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t271 = self.r9btrue and sor.bfalse ;
if ( t271 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t272 = self.r9btrue and sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse and sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse and sar.btrue ;
if ( t274 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t275 = self.r9btrue and sar.bfalse ;
if ( t275 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t276 = self.r9btrue and sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse and smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse and smr.btrue ;
if ( t278 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t279 = self.r9btrue and smr.bfalse ;
if ( t279 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t280 = self.r9btrue and smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse and saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse and saf.r11btrue ;
if ( t282 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t283 = self.r9btrue and saf.r11bfalse ;
if ( t283 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t284 = self.r9btrue and saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse and smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse and smf.r11btrue ;
if ( t286 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t287 = self.r9btrue and smf.r11bfalse ;
if ( t287 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t288 = self.r9btrue and smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse and sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse and sor.r11btrue ;
if ( t290 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t291 = self.r9btrue and sor.r11bfalse ;
if ( t291 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t292 = self.r9btrue and sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse and sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse and sar.r11btrue ;
if ( t294 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t295 = self.r9btrue and sar.r11bfalse ;
if ( t295 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t296 = self.r9btrue and sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse and smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse and smr.r11btrue ;
if ( t298 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t299 = self.r9btrue and smr.r11bfalse ;
if ( t299 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t300 = self.r9btrue and smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1b',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"989e680b-bc70-b1d8-985c-a034d0050e31");
INSERT INTO SM_AH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"583bc0ec-635f-eb06-012f-30479b2b98f2");
INSERT INTO SM_ACT
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	1,
	'// 1.3
// set my logging instance

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true or temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse or temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" or self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue or temp1 ;
if ( t182 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t183 = self.bfalse or temp2 ;
if ( t183 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t184 = self.btrue or temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse or rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue or rcvd_evt.tfalse ;
if ( t186 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t187 = self.bfalse or rcvd_evt.ttrue ;
if ( t187 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t188 = self.btrue or rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse or false ;
if ( t189 == false )
  LOG::LogSuccess(message:" or self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue or false ;
if ( t190 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t191 = self.bfalse or true ;
if ( t191 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t192 = self.btrue or true ;
if ( t192 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse or self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue or self.bfalse ;
if ( t194 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t195 = self.bfalse or self.btrue ;
if ( t195 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t196 = self.btrue or self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse or self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue or self.r9bfalse ;
if ( t198 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t199 = self.bfalse or self.r9btrue ;
if ( t199 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t200 = self.btrue or self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse or saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse or saf.btrue ;
if ( t202 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t203 = self.btrue or saf.bfalse ;
if ( t203 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t204 = self.btrue or saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse or smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse or smf.btrue ;
if ( t206 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t207 = self.btrue or smf.bfalse ;
if ( t207 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t208 = self.btrue or smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse or sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse or sor.btrue ;
if ( t210 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t211 = self.btrue or sor.bfalse ;
if ( t211 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t212 = self.btrue or sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse or sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse or sar.btrue ;
if ( t214 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t215 = self.btrue or sar.bfalse ;
if ( t215 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t216 = self.btrue or sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse or smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse or smr.btrue ;
if ( t218 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t219 = self.btrue or smr.bfalse ;
if ( t219 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t220 = self.btrue or smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse or saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse or saf.r11btrue ;
if ( t222 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t223 = self.btrue or saf.r11bfalse ;
if ( t223 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t224 = self.btrue or saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse or smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse or smf.r11btrue ;
if ( t226 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t227 = self.btrue or smf.r11bfalse ;
if ( t227 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t228 = self.btrue or smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse or sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse or sor.r11btrue ;
if ( t230 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t231 = self.btrue or sor.r11bfalse ;
if ( t231 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t232 = self.btrue or sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse or sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse or sar.r11btrue ;
if ( t234 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t235 = self.btrue or sar.r11bfalse ;
if ( t235 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t236 = self.btrue or sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse or smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse or smr.r11btrue ;
if ( t238 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t239 = self.btrue or smr.r11bfalse ;
if ( t239 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t240 = self.btrue or smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse or temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue or temp1 ;
if ( t242 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t243 = self.r9bfalse or temp2 ;
if ( t243 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t244 = self.r9btrue or temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse or rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue or rcvd_evt.tfalse ;
if ( t246 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t247 = self.r9bfalse or rcvd_evt.ttrue ;
if ( t247 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t248 = self.r9btrue or rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse or false ;
if ( t249 == false )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue or false ;
if ( t250 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t251 = self.r9bfalse or true ;
if ( t251 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t252 = self.r9btrue or true ;
if ( t252 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse or self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue or self.bfalse ;
if ( t254 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t255 = self.r9bfalse or self.btrue ;
if ( t255 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t256 = self.r9btrue or self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse or self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue or self.r9bfalse ;
if ( t258 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t259 = self.r9bfalse or self.r9btrue ;
if ( t259 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t260 = self.r9btrue or self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse or saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse or saf.btrue ;
if ( t262 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t263 = self.r9btrue or saf.bfalse ;
if ( t263 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t264 = self.r9btrue or saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse or smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse or smf.btrue ;
if ( t266 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t267 = self.r9btrue or smf.bfalse ;
if ( t267 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t268 = self.r9btrue or smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse or sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse or sor.btrue ;
if ( t270 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t271 = self.r9btrue or sor.bfalse ;
if ( t271 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t272 = self.r9btrue or sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse or sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse or sar.btrue ;
if ( t274 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t275 = self.r9btrue or sar.bfalse ;
if ( t275 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t276 = self.r9btrue or sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse or smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse or smr.btrue ;
if ( t278 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t279 = self.r9btrue or smr.bfalse ;
if ( t279 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t280 = self.r9btrue or smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse or saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse or saf.r11btrue ;
if ( t282 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t283 = self.r9btrue or saf.r11bfalse ;
if ( t283 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t284 = self.r9btrue or saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse or smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse or smf.r11btrue ;
if ( t286 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t287 = self.r9btrue or smf.r11bfalse ;
if ( t287 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t288 = self.r9btrue or smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse or sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse or sor.r11btrue ;
if ( t290 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t291 = self.r9btrue or sor.r11bfalse ;
if ( t291 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t292 = self.r9btrue or sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse or sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse or sar.r11btrue ;
if ( t294 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t295 = self.r9btrue or sar.r11bfalse ;
if ( t295 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t296 = self.r9btrue or sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse or smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse or smr.r11btrue ;
if ( t298 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t299 = self.r9btrue or smr.r11bfalse ;
if ( t299 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t300 = self.r9btrue or smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET4:''Continue or test''( ttrue: true, tfalse: false ) to self;


',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("f761e7eb-7543-dcc4-dbdd-eb56ff47a2de",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"19309339-d791-2728-6d34-a7ddba63dc2d",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"f761e7eb-7543-dcc4-dbdd-eb56ff47a2de");
INSERT INTO SM_AH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"583bc0ec-635f-eb06-012f-30479b2b98f2");
INSERT INTO SM_ACT
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("f761e7eb-7543-dcc4-dbdd-eb56ff47a2de",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"19309339-d791-2728-6d34-a7ddba63dc2d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"171c28d1-9e02-36a8-58a4-0818b61cc903",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14");
INSERT INTO SM_AH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"583bc0ec-635f-eb06-012f-30479b2b98f2");
INSERT INTO SM_ACT
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"06bbc248-c7a1-6f90-527e-cb2216996743",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("0e3485bf-605f-4586-56d5-85120b150c9e",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"57f36afb-7cf6-2a15-0757-d78daaf78509",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"0e3485bf-605f-4586-56d5-85120b150c9e");
INSERT INTO SM_AH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"583bc0ec-635f-eb06-012f-30479b2b98f2");
INSERT INTO SM_ACT
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("0e3485bf-605f-4586-56d5-85120b150c9e",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"171c28d1-9e02-36a8-58a4-0818b61cc903",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("a256916d-332b-8bb2-d4ff-eae907f0d71a",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"19309339-d791-2728-6d34-a7ddba63dc2d",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"a256916d-332b-8bb2-d4ff-eae907f0d71a");
INSERT INTO SM_AH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"583bc0ec-635f-eb06-012f-30479b2b98f2");
INSERT INTO SM_ACT
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("a256916d-332b-8bb2-d4ff-eae907f0d71a",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"57f36afb-7cf6-2a15-0757-d78daaf78509",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("650d8560-41cb-105b-9a25-bc5546ca0485",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"989e680b-bc70-b1d8-985c-a034d0050e31",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"650d8560-41cb-105b-9a25-bc5546ca0485");
INSERT INTO SM_AH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"583bc0ec-635f-eb06-012f-30479b2b98f2");
INSERT INTO SM_ACT
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("650d8560-41cb-105b-9a25-bc5546ca0485",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("54c573d1-aade-513b-dec9-05a9342535a9",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"06bbc248-c7a1-6f90-527e-cb2216996743",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"54c573d1-aade-513b-dec9-05a9342535a9");
INSERT INTO SM_AH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"583bc0ec-635f-eb06-012f-30479b2b98f2");
INSERT INTO SM_ACT
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("54c573d1-aade-513b-dec9-05a9342535a9",
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	"989e680b-bc70-b1d8-985c-a034d0050e31",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("ca0f5a78-a999-df17-56d6-4783717d8662",
	8,
	"583bc0ec-635f-eb06-012f-30479b2b98f2",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("2d8f26f0-c5ef-5328-63c8-bd31dd6da5e7",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"19309339-d791-2728-6d34-a7ddba63dc2d",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a');
INSERT INTO GD_SHP
	VALUES ("2d8f26f0-c5ef-5328-63c8-bd31dd6da5e7");
INSERT INTO GD_NCS
	VALUES ("2d8f26f0-c5ef-5328-63c8-bd31dd6da5e7");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"2d8f26f0-c5ef-5328-63c8-bd31dd6da5e7");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1280.000000,
	"2d8f26f0-c5ef-5328-63c8-bd31dd6da5e7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2d8f26f0-c5ef-5328-63c8-bd31dd6da5e7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("7d4968bd-17d5-b209-0110-7ac51a8a8217",
	2064.000000,
	1312.000000,
	"2d8f26f0-c5ef-5328-63c8-bd31dd6da5e7");
INSERT INTO DIM_CON
	VALUES ("4c1aa79f-0475-b402-6cff-215a4fea1340",
	1968.000000,
	1280.000000,
	"2d8f26f0-c5ef-5328-63c8-bd31dd6da5e7");
INSERT INTO DIM_CON
	VALUES ("faceb68a-0385-c0be-cb30-00922c14b29d",
	1968.000000,
	1376.000000,
	"2d8f26f0-c5ef-5328-63c8-bd31dd6da5e7");
INSERT INTO GD_GE
	VALUES ("efe1a904-1fd3-7f33-a6ab-c66874ce95c3",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"171c28d1-9e02-36a8-58a4-0818b61cc903",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 2');
INSERT INTO GD_SHP
	VALUES ("efe1a904-1fd3-7f33-a6ab-c66874ce95c3");
INSERT INTO GD_NCS
	VALUES ("efe1a904-1fd3-7f33-a6ab-c66874ce95c3");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"efe1a904-1fd3-7f33-a6ab-c66874ce95c3");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1680.000000,
	"efe1a904-1fd3-7f33-a6ab-c66874ce95c3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("efe1a904-1fd3-7f33-a6ab-c66874ce95c3",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c48c0b93-f622-4764-510f-c877495de02f",
	2064.000000,
	1712.000000,
	"efe1a904-1fd3-7f33-a6ab-c66874ce95c3");
INSERT INTO DIM_CON
	VALUES ("142c1adf-a7e4-f1e2-ddab-5e8efa2cee67",
	1968.000000,
	1680.000000,
	"efe1a904-1fd3-7f33-a6ab-c66874ce95c3");
INSERT INTO GD_GE
	VALUES ("c2406949-d025-a2a7-7743-8e6e15b17bbf",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"06bbc248-c7a1-6f90-527e-cb2216996743",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1a');
INSERT INTO GD_SHP
	VALUES ("c2406949-d025-a2a7-7743-8e6e15b17bbf");
INSERT INTO GD_NCS
	VALUES ("c2406949-d025-a2a7-7743-8e6e15b17bbf");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"c2406949-d025-a2a7-7743-8e6e15b17bbf");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1280.000000,
	"c2406949-d025-a2a7-7743-8e6e15b17bbf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c2406949-d025-a2a7-7743-8e6e15b17bbf",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("299fa8d0-9bef-ce4f-28ce-d7a72d494f25",
	2320.000000,
	1280.000000,
	"c2406949-d025-a2a7-7743-8e6e15b17bbf");
INSERT INTO DIM_CON
	VALUES ("a5db299d-8f9c-2836-ec56-d7b1243db41a",
	2320.000000,
	1376.000000,
	"c2406949-d025-a2a7-7743-8e6e15b17bbf");
INSERT INTO GD_GE
	VALUES ("68b7c351-c6cf-0ab2-129a-1a88a26612c2",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 2');
INSERT INTO GD_SHP
	VALUES ("68b7c351-c6cf-0ab2-129a-1a88a26612c2");
INSERT INTO GD_NCS
	VALUES ("68b7c351-c6cf-0ab2-129a-1a88a26612c2");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"68b7c351-c6cf-0ab2-129a-1a88a26612c2");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1680.000000,
	"68b7c351-c6cf-0ab2-129a-1a88a26612c2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("68b7c351-c6cf-0ab2-129a-1a88a26612c2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("0cd26bff-26d9-e286-d8b9-32d809b66a90",
	2320.000000,
	1680.000000,
	"68b7c351-c6cf-0ab2-129a-1a88a26612c2");
INSERT INTO GD_GE
	VALUES ("6f139ec6-a158-bd32-f3f2-e45e688e6de2",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"57f36afb-7cf6-2a15-0757-d78daaf78509",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1b');
INSERT INTO GD_SHP
	VALUES ("6f139ec6-a158-bd32-f3f2-e45e688e6de2");
INSERT INTO GD_NCS
	VALUES ("6f139ec6-a158-bd32-f3f2-e45e688e6de2");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"6f139ec6-a158-bd32-f3f2-e45e688e6de2");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1472.000000,
	"6f139ec6-a158-bd32-f3f2-e45e688e6de2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6f139ec6-a158-bd32-f3f2-e45e688e6de2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("8bdd074d-b3f1-dc82-7feb-28c36bccf565",
	1968.000000,
	1472.000000,
	"6f139ec6-a158-bd32-f3f2-e45e688e6de2");
INSERT INTO DIM_CON
	VALUES ("10fa79e1-1295-1174-be97-5cfc8bad1d3b",
	1968.000000,
	1568.000000,
	"6f139ec6-a158-bd32-f3f2-e45e688e6de2");
INSERT INTO GD_GE
	VALUES ("3e7ff521-d769-eea9-03da-35d59bd71f75",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"989e680b-bc70-b1d8-985c-a034d0050e31",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1b');
INSERT INTO GD_SHP
	VALUES ("3e7ff521-d769-eea9-03da-35d59bd71f75");
INSERT INTO GD_NCS
	VALUES ("3e7ff521-d769-eea9-03da-35d59bd71f75");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"3e7ff521-d769-eea9-03da-35d59bd71f75");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1472.000000,
	"3e7ff521-d769-eea9-03da-35d59bd71f75",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3e7ff521-d769-eea9-03da-35d59bd71f75",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("2761c57e-8d93-c98c-71ba-92f1bb23b9cb",
	2320.000000,
	1472.000000,
	"3e7ff521-d769-eea9-03da-35d59bd71f75");
INSERT INTO DIM_CON
	VALUES ("8654d0f8-5419-6ce0-5b9f-f2c2405901f9",
	2320.000000,
	1568.000000,
	"3e7ff521-d769-eea9-03da-35d59bd71f75");
INSERT INTO GD_GE
	VALUES ("ce02539e-2300-4897-ee1e-599dc1c3e904",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"f761e7eb-7543-dcc4-dbdd-eb56ff47a2de",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a::BET1: Start and test');
INSERT INTO GD_CON
	VALUES ("ce02539e-2300-4897-ee1e-599dc1c3e904",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("179fece8-fcfd-dadf-34fe-f328346eb996",
	"ce02539e-2300-4897-ee1e-599dc1c3e904",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"179fece8-fcfd-dadf-34fe-f328346eb996");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"179fece8-fcfd-dadf-34fe-f328346eb996",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("179fece8-fcfd-dadf-34fe-f328346eb996",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("eb7d1c7c-5e0f-028f-6c02-2d0354c8fbe8",
	"ce02539e-2300-4897-ee1e-599dc1c3e904",
	3,
	-77.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (235.000000,
	34.000000,
	"eb7d1c7c-5e0f-028f-6c02-2d0354c8fbe8");
INSERT INTO DIM_GE
	VALUES (1994.000000,
	1189.000000,
	"eb7d1c7c-5e0f-028f-6c02-2d0354c8fbe8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("eb7d1c7c-5e0f-028f-6c02-2d0354c8fbe8",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4a1f9799-ba7d-976d-bec5-ccdb320cf3f7",
	"ce02539e-2300-4897-ee1e-599dc1c3e904",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4a1f9799-ba7d-976d-bec5-ccdb320cf3f7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4a1f9799-ba7d-976d-bec5-ccdb320cf3f7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4a1f9799-ba7d-976d-bec5-ccdb320cf3f7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("fa23a5c0-398a-ba96-7fdb-a83bd639342c",
	"ce02539e-2300-4897-ee1e-599dc1c3e904",
	"00000000-0000-0000-0000-000000000000",
	"c28a98ca-ae82-46bc-8e26-0f9b480d1936",
	"75caa8b6-477d-665c-4a74-660d9e28fc64");
INSERT INTO GD_LS
	VALUES ("e4f48155-facc-dcac-0a48-bce8d78a88ef",
	"ce02539e-2300-4897-ee1e-599dc1c3e904",
	"fa23a5c0-398a-ba96-7fdb-a83bd639342c",
	"75caa8b6-477d-665c-4a74-660d9e28fc64",
	"4022b218-e2de-d695-89e1-94cdf835e6c0");
INSERT INTO GD_LS
	VALUES ("6bb25b5a-4a35-3758-0855-be042161a28e",
	"ce02539e-2300-4897-ee1e-599dc1c3e904",
	"e4f48155-facc-dcac-0a48-bce8d78a88ef",
	"4022b218-e2de-d695-89e1-94cdf835e6c0",
	"c36c00a5-a9bb-0b8e-bf2f-8a593ca83e5f");
INSERT INTO GD_LS
	VALUES ("9afbb7ff-e3ed-e057-c3e4-94277f7ba68a",
	"ce02539e-2300-4897-ee1e-599dc1c3e904",
	"6bb25b5a-4a35-3758-0855-be042161a28e",
	"c36c00a5-a9bb-0b8e-bf2f-8a593ca83e5f",
	"18a9614a-d7f9-6efb-4891-a5e71e87122e");
INSERT INTO DIM_WAY
	VALUES ("c28a98ca-ae82-46bc-8e26-0f9b480d1936",
	2064.000000,
	1312.000000,
	"ce02539e-2300-4897-ee1e-599dc1c3e904",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("75caa8b6-477d-665c-4a74-660d9e28fc64",
	2128.000000,
	1312.000000,
	"ce02539e-2300-4897-ee1e-599dc1c3e904",
	"00000000-0000-0000-0000-000000000000",
	"c28a98ca-ae82-46bc-8e26-0f9b480d1936");
INSERT INTO DIM_WAY
	VALUES ("4022b218-e2de-d695-89e1-94cdf835e6c0",
	2128.000000,
	1216.000000,
	"ce02539e-2300-4897-ee1e-599dc1c3e904",
	"00000000-0000-0000-0000-000000000000",
	"75caa8b6-477d-665c-4a74-660d9e28fc64");
INSERT INTO DIM_WAY
	VALUES ("c36c00a5-a9bb-0b8e-bf2f-8a593ca83e5f",
	1968.000000,
	1216.000000,
	"ce02539e-2300-4897-ee1e-599dc1c3e904",
	"00000000-0000-0000-0000-000000000000",
	"4022b218-e2de-d695-89e1-94cdf835e6c0");
INSERT INTO DIM_WAY
	VALUES ("18a9614a-d7f9-6efb-4891-a5e71e87122e",
	1968.000000,
	1280.000000,
	"ce02539e-2300-4897-ee1e-599dc1c3e904",
	"00000000-0000-0000-0000-000000000000",
	"c36c00a5-a9bb-0b8e-bf2f-8a593ca83e5f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ce02539e-2300-4897-ee1e-599dc1c3e904",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ce02539e-2300-4897-ee1e-599dc1c3e904",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("7d4968bd-17d5-b209-0110-7ac51a8a8217",
	"4c1aa79f-0475-b402-6cff-215a4fea1340",
	"ce02539e-2300-4897-ee1e-599dc1c3e904");
INSERT INTO GD_GE
	VALUES ("bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 2::BET3: Start or test');
INSERT INTO GD_CON
	VALUES ("bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9caabd9b-388d-534a-f47b-7a7034bbf856",
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9caabd9b-388d-534a-f47b-7a7034bbf856");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9caabd9b-388d-534a-f47b-7a7034bbf856",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9caabd9b-388d-534a-f47b-7a7034bbf856",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c96eea7e-d944-e89f-048e-39aaab310af2",
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	3,
	155.000000,
	-202.000000);
INSERT INTO DIM_ND
	VALUES (205.000000,
	41.000000,
	"c96eea7e-d944-e89f-048e-39aaab310af2");
INSERT INTO DIM_GE
	VALUES (2331.000000,
	1231.000000,
	"c96eea7e-d944-e89f-048e-39aaab310af2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c96eea7e-d944-e89f-048e-39aaab310af2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("214f3dc1-449d-e3ec-3c26-b166d5297143",
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"214f3dc1-449d-e3ec-3c26-b166d5297143");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"214f3dc1-449d-e3ec-3c26-b166d5297143",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("214f3dc1-449d-e3ec-3c26-b166d5297143",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("613af8ef-0db0-fdc7-5117-c6ceafe47ee2",
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	"00000000-0000-0000-0000-000000000000",
	"6dfc83dd-5de0-037c-b889-0a0837a23c15",
	"577c4281-669e-7db7-0865-4b8c0271057e");
INSERT INTO GD_LS
	VALUES ("3deae1c9-02de-21ed-752f-7d109c5da61c",
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	"613af8ef-0db0-fdc7-5117-c6ceafe47ee2",
	"577c4281-669e-7db7-0865-4b8c0271057e",
	"23dfc4ec-1ef8-6ea5-b963-bc3b71ce71c8");
INSERT INTO GD_LS
	VALUES ("3eaca266-b223-6fa7-ee68-086858136fb5",
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	"3deae1c9-02de-21ed-752f-7d109c5da61c",
	"23dfc4ec-1ef8-6ea5-b963-bc3b71ce71c8",
	"b5c5c149-cb1c-815f-befd-69060154607f");
INSERT INTO GD_LS
	VALUES ("f3b13bc8-59f2-e906-7094-4395aa611ea4",
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	"3eaca266-b223-6fa7-ee68-086858136fb5",
	"b5c5c149-cb1c-815f-befd-69060154607f",
	"fac03486-07ad-43ab-a6b1-7468b2c491ad");
INSERT INTO DIM_WAY
	VALUES ("6dfc83dd-5de0-037c-b889-0a0837a23c15",
	2064.000000,
	1712.000000,
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("577c4281-669e-7db7-0865-4b8c0271057e",
	2192.000000,
	1712.000000,
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	"00000000-0000-0000-0000-000000000000",
	"6dfc83dd-5de0-037c-b889-0a0837a23c15");
INSERT INTO DIM_WAY
	VALUES ("23dfc4ec-1ef8-6ea5-b963-bc3b71ce71c8",
	2192.000000,
	1232.000000,
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	"00000000-0000-0000-0000-000000000000",
	"577c4281-669e-7db7-0865-4b8c0271057e");
INSERT INTO DIM_WAY
	VALUES ("b5c5c149-cb1c-815f-befd-69060154607f",
	2320.000000,
	1232.000000,
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	"00000000-0000-0000-0000-000000000000",
	"23dfc4ec-1ef8-6ea5-b963-bc3b71ce71c8");
INSERT INTO DIM_WAY
	VALUES ("fac03486-07ad-43ab-a6b1-7468b2c491ad",
	2320.000000,
	1280.000000,
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	"00000000-0000-0000-0000-000000000000",
	"b5c5c149-cb1c-815f-befd-69060154607f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bb4de07c-f71b-dbe3-cb0c-90319b6a517f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("c48c0b93-f622-4764-510f-c877495de02f",
	"299fa8d0-9bef-ce4f-28ce-d7a72d494f25",
	"bb4de07c-f71b-dbe3-cb0c-90319b6a517f");
INSERT INTO GD_GE
	VALUES ("c6e782c1-e312-9998-114c-dfa553868924",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"a256916d-332b-8bb2-d4ff-eae907f0d71a",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a::BET2: Continue and test');
INSERT INTO GD_CON
	VALUES ("c6e782c1-e312-9998-114c-dfa553868924",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5bf3b9a3-64a4-e3d7-4455-69184b4b123b",
	"c6e782c1-e312-9998-114c-dfa553868924",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5bf3b9a3-64a4-e3d7-4455-69184b4b123b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5bf3b9a3-64a4-e3d7-4455-69184b4b123b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5bf3b9a3-64a4-e3d7-4455-69184b4b123b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("617b2964-58da-8fa2-7fc1-753ed7b9b282",
	"c6e782c1-e312-9998-114c-dfa553868924",
	3,
	-247.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (270.000000,
	40.000000,
	"617b2964-58da-8fa2-7fc1-753ed7b9b282");
INSERT INTO DIM_GE
	VALUES (1705.000000,
	1407.000000,
	"617b2964-58da-8fa2-7fc1-753ed7b9b282",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("617b2964-58da-8fa2-7fc1-753ed7b9b282",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6737833d-9e2d-32bc-eb2a-894a684e509a",
	"c6e782c1-e312-9998-114c-dfa553868924",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6737833d-9e2d-32bc-eb2a-894a684e509a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6737833d-9e2d-32bc-eb2a-894a684e509a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6737833d-9e2d-32bc-eb2a-894a684e509a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("3c239bbb-8e2a-ed04-b184-cea89a1955f1",
	"c6e782c1-e312-9998-114c-dfa553868924",
	"00000000-0000-0000-0000-000000000000",
	"1a986cb2-b0ab-3ebc-1780-686589e075e4",
	"107f16e3-4ae4-086b-225b-4c2d0b9e746d");
INSERT INTO DIM_WAY
	VALUES ("1a986cb2-b0ab-3ebc-1780-686589e075e4",
	1968.000000,
	1376.000000,
	"c6e782c1-e312-9998-114c-dfa553868924",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("107f16e3-4ae4-086b-225b-4c2d0b9e746d",
	1968.000000,
	1472.000000,
	"c6e782c1-e312-9998-114c-dfa553868924",
	"00000000-0000-0000-0000-000000000000",
	"1a986cb2-b0ab-3ebc-1780-686589e075e4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c6e782c1-e312-9998-114c-dfa553868924",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c6e782c1-e312-9998-114c-dfa553868924",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("faceb68a-0385-c0be-cb30-00922c14b29d",
	"8bdd074d-b3f1-dc82-7feb-28c36bccf565",
	"c6e782c1-e312-9998-114c-dfa553868924");
INSERT INTO GD_GE
	VALUES ("3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"0e3485bf-605f-4586-56d5-85120b150c9e",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1b::BET2: Continue and test');
INSERT INTO GD_CON
	VALUES ("3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("293c4481-cdce-8efb-53d4-919958add97d",
	"3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"293c4481-cdce-8efb-53d4-919958add97d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"293c4481-cdce-8efb-53d4-919958add97d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("293c4481-cdce-8efb-53d4-919958add97d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b8641910-1e7e-4db8-0834-614393304208",
	"3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	3,
	-257.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (279.000000,
	44.000000,
	"b8641910-1e7e-4db8-0834-614393304208");
INSERT INTO DIM_GE
	VALUES (1695.000000,
	1610.000000,
	"b8641910-1e7e-4db8-0834-614393304208",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b8641910-1e7e-4db8-0834-614393304208",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("08fc0cc4-9f07-a1ca-df9c-30156c789651",
	"3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"08fc0cc4-9f07-a1ca-df9c-30156c789651");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"08fc0cc4-9f07-a1ca-df9c-30156c789651",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("08fc0cc4-9f07-a1ca-df9c-30156c789651",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("115958d5-fc41-5c3b-4fb4-c4e10a05e549",
	"3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	"00000000-0000-0000-0000-000000000000",
	"8127da2f-f0f2-b57a-7796-a4d4cfc7f136",
	"7d85e0d3-2fcf-de14-ce21-7498565b9c9e");
INSERT INTO DIM_WAY
	VALUES ("8127da2f-f0f2-b57a-7796-a4d4cfc7f136",
	1968.000000,
	1568.000000,
	"3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("7d85e0d3-2fcf-de14-ce21-7498565b9c9e",
	1968.000000,
	1680.000000,
	"3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	"00000000-0000-0000-0000-000000000000",
	"8127da2f-f0f2-b57a-7796-a4d4cfc7f136");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3392bf2c-717e-c636-ba6c-d6d8d1ca0161",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("10fa79e1-1295-1174-be97-5cfc8bad1d3b",
	"142c1adf-a7e4-f1e2-ddab-5e8efa2cee67",
	"3392bf2c-717e-c636-ba6c-d6d8d1ca0161");
INSERT INTO GD_GE
	VALUES ("cf687e6a-5c77-8527-bf92-0d8115c7941b",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"54c573d1-aade-513b-dec9-05a9342535a9",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1a::BET4: Continue or test');
INSERT INTO GD_CON
	VALUES ("cf687e6a-5c77-8527-bf92-0d8115c7941b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b9232763-e4d6-92a8-6846-8f4aa40fac08",
	"cf687e6a-5c77-8527-bf92-0d8115c7941b",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b9232763-e4d6-92a8-6846-8f4aa40fac08");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b9232763-e4d6-92a8-6846-8f4aa40fac08",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b9232763-e4d6-92a8-6846-8f4aa40fac08",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8e998346-73f6-2123-12bc-156382656fe7",
	"cf687e6a-5c77-8527-bf92-0d8115c7941b",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (252.000000,
	49.000000,
	"8e998346-73f6-2123-12bc-156382656fe7");
INSERT INTO DIM_GE
	VALUES (2304.000000,
	1408.000000,
	"8e998346-73f6-2123-12bc-156382656fe7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8e998346-73f6-2123-12bc-156382656fe7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("477b969f-11b3-58d2-caa1-8f8af3768a03",
	"cf687e6a-5c77-8527-bf92-0d8115c7941b",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"477b969f-11b3-58d2-caa1-8f8af3768a03");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"477b969f-11b3-58d2-caa1-8f8af3768a03",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("477b969f-11b3-58d2-caa1-8f8af3768a03",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("b627aa8b-a0d0-42c2-6fda-dbb180ef24b9",
	"cf687e6a-5c77-8527-bf92-0d8115c7941b",
	"00000000-0000-0000-0000-000000000000",
	"4516c306-2456-95f8-6873-811bc4c7c335",
	"21f1423a-4579-c4d3-964b-f2b5687a90e6");
INSERT INTO DIM_WAY
	VALUES ("4516c306-2456-95f8-6873-811bc4c7c335",
	2320.000000,
	1376.000000,
	"cf687e6a-5c77-8527-bf92-0d8115c7941b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("21f1423a-4579-c4d3-964b-f2b5687a90e6",
	2320.000000,
	1472.000000,
	"cf687e6a-5c77-8527-bf92-0d8115c7941b",
	"00000000-0000-0000-0000-000000000000",
	"4516c306-2456-95f8-6873-811bc4c7c335");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cf687e6a-5c77-8527-bf92-0d8115c7941b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cf687e6a-5c77-8527-bf92-0d8115c7941b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a5db299d-8f9c-2836-ec56-d7b1243db41a",
	"2761c57e-8d93-c98c-71ba-92f1bb23b9cb",
	"cf687e6a-5c77-8527-bf92-0d8115c7941b");
INSERT INTO GD_GE
	VALUES ("3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	"ca0f5a78-a999-df17-56d6-4783717d8662",
	"650d8560-41cb-105b-9a25-bc5546ca0485",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1b::BET4: Continue or test');
INSERT INTO GD_CON
	VALUES ("3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("67a3f4d5-b3f3-4b7b-c6b6-d0401ba19129",
	"3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"67a3f4d5-b3f3-4b7b-c6b6-d0401ba19129");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"67a3f4d5-b3f3-4b7b-c6b6-d0401ba19129",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("67a3f4d5-b3f3-4b7b-c6b6-d0401ba19129",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f19798a9-2d31-ffb2-fd7a-6183bc0e92e0",
	"3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	3,
	9.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (241.000000,
	48.000000,
	"f19798a9-2d31-ffb2-fd7a-6183bc0e92e0");
INSERT INTO DIM_GE
	VALUES (2313.000000,
	1601.000000,
	"f19798a9-2d31-ffb2-fd7a-6183bc0e92e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f19798a9-2d31-ffb2-fd7a-6183bc0e92e0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cc0876ad-4016-6abe-8d76-f505fc1af8f1",
	"3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"cc0876ad-4016-6abe-8d76-f505fc1af8f1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cc0876ad-4016-6abe-8d76-f505fc1af8f1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cc0876ad-4016-6abe-8d76-f505fc1af8f1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("08911a5d-f183-cd36-0e34-3b67079b1264",
	"3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	"00000000-0000-0000-0000-000000000000",
	"b3828d25-e24b-133b-1c4e-7925974866f9",
	"bed07d06-618b-0255-62ec-f70b4a70be1a");
INSERT INTO DIM_WAY
	VALUES ("b3828d25-e24b-133b-1c4e-7925974866f9",
	2320.000000,
	1568.000000,
	"3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("bed07d06-618b-0255-62ec-f70b4a70be1a",
	2320.000000,
	1680.000000,
	"3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	"00000000-0000-0000-0000-000000000000",
	"b3828d25-e24b-133b-1c4e-7925974866f9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3a5deccb-e89d-2892-b7cc-a4adb8ea7db0",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("8654d0f8-5419-6ce0-5b9f-f2c2405901f9",
	"0cd26bff-26d9-e286-d8b9-32d809b66a90",
	"3a5deccb-e89d-2892-b7cc-a4adb8ea7db0");
INSERT INTO DIM_DIA
	VALUES ("ca0f5a78-a999-df17-56d6-4783717d8662",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("6529e378-ed05-186d-687c-2136905dcbf9",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("6529e378-ed05-186d-687c-2136905dcbf9",
	'Event Instance',
	21,
	'EV',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("b7f7b068-25f0-7f97-47b7-067b6080576e",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_BATTR
	VALUES ("b7f7b068-25f0-7f97-47b7-067b6080576e",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ATTR
	VALUES ("b7f7b068-25f0-7f97-47b7-067b6080576e",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("f64b8be7-7c94-1146-33c9-6b525c0b9014",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_BATTR
	VALUES ("f64b8be7-7c94-1146-33c9-6b525c0b9014",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ATTR
	VALUES ("f64b8be7-7c94-1146-33c9-6b525c0b9014",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	"b7f7b068-25f0-7f97-47b7-067b6080576e",
	'shutdown_count',
	'',
	'',
	'shutdown_count',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ee847cc0-be87-a5d1-6ef6-7123e865361f",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_BATTR
	VALUES ("ee847cc0-be87-a5d1-6ef6-7123e865361f",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ATTR
	VALUES ("ee847cc0-be87-a5d1-6ef6-7123e865361f",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	"f64b8be7-7c94-1146-33c9-6b525c0b9014",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_OIDA
	VALUES ("b7f7b068-25f0-7f97-47b7-067b6080576e",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ID
	VALUES (2,
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO SM_ISM
	VALUES ("c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO SM_SM
	VALUES ("c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	'',
	7);
INSERT INTO SM_MOORE
	VALUES ("c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_EVTDI
	VALUES ("a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	'message',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"7ff18bc9-dd83-a426-7399-3138989126a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_LEVT
	VALUES ("7ff18bc9-dd83-a426-7399-3138989126a6",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("7ff18bc9-dd83-a426-7399-3138989126a6",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("7ff18bc9-dd83-a426-7399-3138989126a6",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Event Instance',
	0,
	'',
	'EV1',
	'');
INSERT INTO SM_LEVT
	VALUES ("7985e41c-606c-12dd-f296-171a2171df48",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("7985e41c-606c-12dd-f296-171a2171df48",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("7985e41c-606c-12dd-f296-171a2171df48",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	2,
	'shutdown',
	0,
	'',
	'EV2',
	'');
INSERT INTO SM_STATE
	VALUES ("c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'dummy',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"7ff18bc9-dd83-a426-7399-3138989126a6",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"c80b28b8-bd2e-1dc4-5f02-28d889b2ea72");
INSERT INTO SM_AH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_ACT
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	1,
	'',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("02a1463d-a43e-ecc7-3993-a91501615408",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000",
	'shutdown',
	2,
	0);
INSERT INTO SM_SEME
	VALUES ("02a1463d-a43e-ecc7-3993-a91501615408",
	"7ff18bc9-dd83-a426-7399-3138989126a6",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("02a1463d-a43e-ecc7-3993-a91501615408",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"02a1463d-a43e-ecc7-3993-a91501615408");
INSERT INTO SM_AH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_ACT
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	1,
	'self.shutdown_count = self.shutdown_count - 1;

if ( self.shutdown_count == 0 )
  bridge ARCH::shutdown();
end if;',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("40da950f-092d-1954-f95d-150a1ea1275e",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"7ff18bc9-dd83-a426-7399-3138989126a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"40da950f-092d-1954-f95d-150a1ea1275e");
INSERT INTO SM_AH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_ACT
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("40da950f-092d-1954-f95d-150a1ea1275e",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("87d7123c-9ec5-c389-2fda-613f981c3404",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"02a1463d-a43e-ecc7-3993-a91501615408",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"87d7123c-9ec5-c389-2fda-613f981c3404");
INSERT INTO SM_AH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_ACT
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("87d7123c-9ec5-c389-2fda-613f981c3404",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"02a1463d-a43e-ecc7-3993-a91501615408",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("d050e693-f8f5-1446-254b-598c8cdb8c2a",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"02a1463d-a43e-ecc7-3993-a91501615408",
	"7ff18bc9-dd83-a426-7399-3138989126a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"d050e693-f8f5-1446-254b-598c8cdb8c2a");
INSERT INTO SM_AH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_ACT
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("d050e693-f8f5-1446-254b-598c8cdb8c2a",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("79786b0c-2583-a95c-3b50-3c627a6a2a28",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"79786b0c-2583-a95c-3b50-3c627a6a2a28");
INSERT INTO SM_AH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8");
INSERT INTO SM_ACT
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("79786b0c-2583-a95c-3b50-3c627a6a2a28",
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	"02a1463d-a43e-ecc7-3993-a91501615408",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("0acdc7f5-14ae-e7ec-1eac-e1c2a0510197",
	8,
	"c4673c73-ee8d-acd9-59e9-65fd2e8b0fd8",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("2ce2f4ab-c428-46cf-8b43-e46cd0c8e167",
	"0acdc7f5-14ae-e7ec-1eac-e1c2a0510197",
	"c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy');
INSERT INTO GD_SHP
	VALUES ("2ce2f4ab-c428-46cf-8b43-e46cd0c8e167");
INSERT INTO GD_NCS
	VALUES ("2ce2f4ab-c428-46cf-8b43-e46cd0c8e167");
INSERT INTO DIM_ND
	VALUES (288.000000,
	128.000000,
	"2ce2f4ab-c428-46cf-8b43-e46cd0c8e167");
INSERT INTO DIM_GE
	VALUES (1856.000000,
	1328.000000,
	"2ce2f4ab-c428-46cf-8b43-e46cd0c8e167",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2ce2f4ab-c428-46cf-8b43-e46cd0c8e167",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("e8601fb5-4054-8247-345b-778fa857c104",
	1888.000000,
	1328.000000,
	"2ce2f4ab-c428-46cf-8b43-e46cd0c8e167");
INSERT INTO DIM_CON
	VALUES ("28d03cf7-81ba-d216-1f55-555fe4865a70",
	2016.000000,
	1328.000000,
	"2ce2f4ab-c428-46cf-8b43-e46cd0c8e167");
INSERT INTO DIM_CON
	VALUES ("99f9ea7c-7eff-2ba1-0c1c-fbf846ec48c6",
	2144.000000,
	1408.000000,
	"2ce2f4ab-c428-46cf-8b43-e46cd0c8e167");
INSERT INTO DIM_CON
	VALUES ("8ecb79d6-12df-5a9b-929d-95c532692d30",
	1856.000000,
	1392.000000,
	"2ce2f4ab-c428-46cf-8b43-e46cd0c8e167");
INSERT INTO GD_GE
	VALUES ("4346965b-d91f-0e45-c402-408024ad6c13",
	"0acdc7f5-14ae-e7ec-1eac-e1c2a0510197",
	"02a1463d-a43e-ecc7-3993-a91501615408",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown');
INSERT INTO GD_SHP
	VALUES ("4346965b-d91f-0e45-c402-408024ad6c13");
INSERT INTO GD_NCS
	VALUES ("4346965b-d91f-0e45-c402-408024ad6c13");
INSERT INTO DIM_ND
	VALUES (288.000000,
	128.000000,
	"4346965b-d91f-0e45-c402-408024ad6c13");
INSERT INTO DIM_GE
	VALUES (1856.000000,
	1056.000000,
	"4346965b-d91f-0e45-c402-408024ad6c13",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4346965b-d91f-0e45-c402-408024ad6c13",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("858d1418-116c-3ff6-fcbd-239750a62b19",
	1920.000000,
	1056.000000,
	"4346965b-d91f-0e45-c402-408024ad6c13");
INSERT INTO DIM_CON
	VALUES ("19bafc69-6994-2ea0-50aa-48be53089d89",
	2096.000000,
	1056.000000,
	"4346965b-d91f-0e45-c402-408024ad6c13");
INSERT INTO DIM_CON
	VALUES ("0de59bc5-c207-445d-883d-0c63428f9d88",
	2144.000000,
	1120.000000,
	"4346965b-d91f-0e45-c402-408024ad6c13");
INSERT INTO DIM_CON
	VALUES ("3d28a1e4-1b5d-7c88-b08f-51a30129a2a7",
	1856.000000,
	1120.000000,
	"4346965b-d91f-0e45-c402-408024ad6c13");
INSERT INTO GD_GE
	VALUES ("b18798e4-47dc-9860-d810-a166d66f9bd3",
	"0acdc7f5-14ae-e7ec-1eac-e1c2a0510197",
	"40da950f-092d-1954-f95d-150a1ea1275e",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy::EV1: Event Instance');
INSERT INTO GD_CON
	VALUES ("b18798e4-47dc-9860-d810-a166d66f9bd3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7cde14ce-c29f-e9a9-ee12-92ceceb5239c",
	"b18798e4-47dc-9860-d810-a166d66f9bd3",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7cde14ce-c29f-e9a9-ee12-92ceceb5239c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7cde14ce-c29f-e9a9-ee12-92ceceb5239c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7cde14ce-c29f-e9a9-ee12-92ceceb5239c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d011bf31-109f-3f96-8340-ce0a48912908",
	"b18798e4-47dc-9860-d810-a166d66f9bd3",
	3,
	-7.000000,
	-28.000000);
INSERT INTO DIM_ND
	VALUES (284.000000,
	59.000000,
	"d011bf31-109f-3f96-8340-ce0a48912908");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1243.000000,
	"d011bf31-109f-3f96-8340-ce0a48912908",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d011bf31-109f-3f96-8340-ce0a48912908",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("270dd870-514a-f2ce-0787-2298fa0a469b",
	"b18798e4-47dc-9860-d810-a166d66f9bd3",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"270dd870-514a-f2ce-0787-2298fa0a469b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"270dd870-514a-f2ce-0787-2298fa0a469b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("270dd870-514a-f2ce-0787-2298fa0a469b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("8d248dd2-bb7a-8e7c-0f70-0609b567ef99",
	"b18798e4-47dc-9860-d810-a166d66f9bd3",
	"00000000-0000-0000-0000-000000000000",
	"f60f269c-462c-b3a9-2993-65997c72bcfc",
	"1a97d850-521b-9837-c293-38478fae3463");
INSERT INTO GD_LS
	VALUES ("659fb0c8-bddc-16b7-16e6-aa1d9e9b2024",
	"b18798e4-47dc-9860-d810-a166d66f9bd3",
	"8d248dd2-bb7a-8e7c-0f70-0609b567ef99",
	"1a97d850-521b-9837-c293-38478fae3463",
	"daf2d68a-0b85-b2fc-0205-c85142b804b8");
INSERT INTO GD_LS
	VALUES ("02f2ada1-0c37-c6db-88a3-7e1637960005",
	"b18798e4-47dc-9860-d810-a166d66f9bd3",
	"659fb0c8-bddc-16b7-16e6-aa1d9e9b2024",
	"daf2d68a-0b85-b2fc-0205-c85142b804b8",
	"2d7e2684-f145-932b-50f0-021ac63839f4");
INSERT INTO DIM_WAY
	VALUES ("f60f269c-462c-b3a9-2993-65997c72bcfc",
	1888.000000,
	1328.000000,
	"b18798e4-47dc-9860-d810-a166d66f9bd3",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("1a97d850-521b-9837-c293-38478fae3463",
	1888.000000,
	1296.000000,
	"b18798e4-47dc-9860-d810-a166d66f9bd3",
	"00000000-0000-0000-0000-000000000000",
	"f60f269c-462c-b3a9-2993-65997c72bcfc");
INSERT INTO DIM_WAY
	VALUES ("daf2d68a-0b85-b2fc-0205-c85142b804b8",
	2016.000000,
	1296.000000,
	"b18798e4-47dc-9860-d810-a166d66f9bd3",
	"00000000-0000-0000-0000-000000000000",
	"1a97d850-521b-9837-c293-38478fae3463");
INSERT INTO DIM_WAY
	VALUES ("2d7e2684-f145-932b-50f0-021ac63839f4",
	2016.000000,
	1328.000000,
	"b18798e4-47dc-9860-d810-a166d66f9bd3",
	"00000000-0000-0000-0000-000000000000",
	"daf2d68a-0b85-b2fc-0205-c85142b804b8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b18798e4-47dc-9860-d810-a166d66f9bd3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b18798e4-47dc-9860-d810-a166d66f9bd3",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e8601fb5-4054-8247-345b-778fa857c104",
	"28d03cf7-81ba-d216-1f55-555fe4865a70",
	"b18798e4-47dc-9860-d810-a166d66f9bd3");
INSERT INTO GD_GE
	VALUES ("d6b80e3e-52ef-48d0-b43d-7fa13465fe92",
	"0acdc7f5-14ae-e7ec-1eac-e1c2a0510197",
	"87d7123c-9ec5-c389-2fda-613f981c3404",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown::EV2: shutdown');
INSERT INTO GD_CON
	VALUES ("d6b80e3e-52ef-48d0-b43d-7fa13465fe92",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5b28e65e-5895-45ea-6276-9dafaa4d7b2c",
	"d6b80e3e-52ef-48d0-b43d-7fa13465fe92",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5b28e65e-5895-45ea-6276-9dafaa4d7b2c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5b28e65e-5895-45ea-6276-9dafaa4d7b2c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5b28e65e-5895-45ea-6276-9dafaa4d7b2c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8a1d9db5-ead7-833e-755b-4a7a7a72054f",
	"d6b80e3e-52ef-48d0-b43d-7fa13465fe92",
	3,
	0.000000,
	-29.000000);
INSERT INTO DIM_ND
	VALUES (144.000000,
	44.000000,
	"8a1d9db5-ead7-833e-755b-4a7a7a72054f");
INSERT INTO DIM_GE
	VALUES (1983.000000,
	954.000000,
	"8a1d9db5-ead7-833e-755b-4a7a7a72054f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8a1d9db5-ead7-833e-755b-4a7a7a72054f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("752e8047-3769-315f-793e-f91cc26411b3",
	"d6b80e3e-52ef-48d0-b43d-7fa13465fe92",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"752e8047-3769-315f-793e-f91cc26411b3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"752e8047-3769-315f-793e-f91cc26411b3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("752e8047-3769-315f-793e-f91cc26411b3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("02d380c9-f0bd-ca91-d10f-bdac843bc03f",
	"d6b80e3e-52ef-48d0-b43d-7fa13465fe92",
	"00000000-0000-0000-0000-000000000000",
	"99484a22-1116-e5b9-8c75-8a0c44f90d7b",
	"ad2e803a-730d-05f5-6093-886e970b7794");
INSERT INTO GD_LS
	VALUES ("c50bdca7-80c5-2a02-76cd-c22b22ec494d",
	"d6b80e3e-52ef-48d0-b43d-7fa13465fe92",
	"02d380c9-f0bd-ca91-d10f-bdac843bc03f",
	"ad2e803a-730d-05f5-6093-886e970b7794",
	"f9707bec-26d6-8343-77dd-7b4e3fdb4ba1");
INSERT INTO GD_LS
	VALUES ("985c68c0-5afd-ed88-351c-f362ed37fbd8",
	"d6b80e3e-52ef-48d0-b43d-7fa13465fe92",
	"c50bdca7-80c5-2a02-76cd-c22b22ec494d",
	"f9707bec-26d6-8343-77dd-7b4e3fdb4ba1",
	"1903b830-2058-cba0-8a8b-5e6fdcca915d");
INSERT INTO DIM_WAY
	VALUES ("99484a22-1116-e5b9-8c75-8a0c44f90d7b",
	1920.000000,
	1056.000000,
	"d6b80e3e-52ef-48d0-b43d-7fa13465fe92",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("ad2e803a-730d-05f5-6093-886e970b7794",
	1920.000000,
	1008.000000,
	"d6b80e3e-52ef-48d0-b43d-7fa13465fe92",
	"00000000-0000-0000-0000-000000000000",
	"99484a22-1116-e5b9-8c75-8a0c44f90d7b");
INSERT INTO DIM_WAY
	VALUES ("f9707bec-26d6-8343-77dd-7b4e3fdb4ba1",
	2096.000000,
	1008.000000,
	"d6b80e3e-52ef-48d0-b43d-7fa13465fe92",
	"00000000-0000-0000-0000-000000000000",
	"ad2e803a-730d-05f5-6093-886e970b7794");
INSERT INTO DIM_WAY
	VALUES ("1903b830-2058-cba0-8a8b-5e6fdcca915d",
	2096.000000,
	1056.000000,
	"d6b80e3e-52ef-48d0-b43d-7fa13465fe92",
	"00000000-0000-0000-0000-000000000000",
	"f9707bec-26d6-8343-77dd-7b4e3fdb4ba1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d6b80e3e-52ef-48d0-b43d-7fa13465fe92",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d6b80e3e-52ef-48d0-b43d-7fa13465fe92",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("858d1418-116c-3ff6-fcbd-239750a62b19",
	"19bafc69-6994-2ea0-50aa-48be53089d89",
	"d6b80e3e-52ef-48d0-b43d-7fa13465fe92");
INSERT INTO GD_GE
	VALUES ("17dee590-c5a4-590f-8a74-4ab8357d7440",
	"0acdc7f5-14ae-e7ec-1eac-e1c2a0510197",
	"79786b0c-2583-a95c-3b50-3c627a6a2a28",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy::EV2: shutdown');
INSERT INTO GD_CON
	VALUES ("17dee590-c5a4-590f-8a74-4ab8357d7440",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0d789a1f-c1ea-a7d3-9686-4d8b20309463",
	"17dee590-c5a4-590f-8a74-4ab8357d7440",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0d789a1f-c1ea-a7d3-9686-4d8b20309463");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0d789a1f-c1ea-a7d3-9686-4d8b20309463",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0d789a1f-c1ea-a7d3-9686-4d8b20309463",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("af501899-2eae-461d-589f-082c09364923",
	"17dee590-c5a4-590f-8a74-4ab8357d7440",
	3,
	23.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (134.000000,
	42.000000,
	"af501899-2eae-461d-589f-082c09364923");
INSERT INTO DIM_GE
	VALUES (2247.000000,
	1247.000000,
	"af501899-2eae-461d-589f-082c09364923",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("af501899-2eae-461d-589f-082c09364923",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7f0288de-a2d7-9fad-41c3-d1e2532aa716",
	"17dee590-c5a4-590f-8a74-4ab8357d7440",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7f0288de-a2d7-9fad-41c3-d1e2532aa716");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7f0288de-a2d7-9fad-41c3-d1e2532aa716",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7f0288de-a2d7-9fad-41c3-d1e2532aa716",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("72262f08-6ff1-ec14-ad8d-7c8b2e1864b9",
	"17dee590-c5a4-590f-8a74-4ab8357d7440",
	"00000000-0000-0000-0000-000000000000",
	"41e513f4-381f-d391-8a17-0c10ee5d7e13",
	"1cfa99bb-1c38-b75b-0b52-4eb5dc1ca412");
INSERT INTO GD_LS
	VALUES ("369f111c-e878-7e0f-8f4d-9151443ae0fb",
	"17dee590-c5a4-590f-8a74-4ab8357d7440",
	"72262f08-6ff1-ec14-ad8d-7c8b2e1864b9",
	"1cfa99bb-1c38-b75b-0b52-4eb5dc1ca412",
	"bb028112-2d83-33e7-4d75-3f9a64573827");
INSERT INTO GD_LS
	VALUES ("53123847-51ab-366e-717c-05d12d3ef992",
	"17dee590-c5a4-590f-8a74-4ab8357d7440",
	"369f111c-e878-7e0f-8f4d-9151443ae0fb",
	"bb028112-2d83-33e7-4d75-3f9a64573827",
	"8a6ebbf5-d2b5-37d0-18de-b1c7a11adceb");
INSERT INTO DIM_WAY
	VALUES ("41e513f4-381f-d391-8a17-0c10ee5d7e13",
	2144.000000,
	1408.000000,
	"17dee590-c5a4-590f-8a74-4ab8357d7440",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("1cfa99bb-1c38-b75b-0b52-4eb5dc1ca412",
	2240.000000,
	1408.000000,
	"17dee590-c5a4-590f-8a74-4ab8357d7440",
	"00000000-0000-0000-0000-000000000000",
	"41e513f4-381f-d391-8a17-0c10ee5d7e13");
INSERT INTO DIM_WAY
	VALUES ("bb028112-2d83-33e7-4d75-3f9a64573827",
	2240.000000,
	1120.000000,
	"17dee590-c5a4-590f-8a74-4ab8357d7440",
	"00000000-0000-0000-0000-000000000000",
	"1cfa99bb-1c38-b75b-0b52-4eb5dc1ca412");
INSERT INTO DIM_WAY
	VALUES ("8a6ebbf5-d2b5-37d0-18de-b1c7a11adceb",
	2144.000000,
	1120.000000,
	"17dee590-c5a4-590f-8a74-4ab8357d7440",
	"00000000-0000-0000-0000-000000000000",
	"bb028112-2d83-33e7-4d75-3f9a64573827");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"17dee590-c5a4-590f-8a74-4ab8357d7440",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("17dee590-c5a4-590f-8a74-4ab8357d7440",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("99f9ea7c-7eff-2ba1-0c1c-fbf846ec48c6",
	"0de59bc5-c207-445d-883d-0c63428f9d88",
	"17dee590-c5a4-590f-8a74-4ab8357d7440");
INSERT INTO GD_GE
	VALUES ("f0391faf-e3e6-ecbd-d65c-c5d405f00d3f",
	"0acdc7f5-14ae-e7ec-1eac-e1c2a0510197",
	"d050e693-f8f5-1446-254b-598c8cdb8c2a",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown::EV1: Event Instance');
INSERT INTO GD_CON
	VALUES ("f0391faf-e3e6-ecbd-d65c-c5d405f00d3f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7adb92c6-294b-0cd0-9432-c116312b4159",
	"f0391faf-e3e6-ecbd-d65c-c5d405f00d3f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7adb92c6-294b-0cd0-9432-c116312b4159");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7adb92c6-294b-0cd0-9432-c116312b4159",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7adb92c6-294b-0cd0-9432-c116312b4159",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("be99c961-b3d4-00d5-42cb-00f6a4c4e305",
	"f0391faf-e3e6-ecbd-d65c-c5d405f00d3f",
	3,
	18.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (136.000000,
	44.000000,
	"be99c961-b3d4-00d5-42cb-00f6a4c4e305");
INSERT INTO DIM_GE
	VALUES (1778.000000,
	1237.000000,
	"be99c961-b3d4-00d5-42cb-00f6a4c4e305",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("be99c961-b3d4-00d5-42cb-00f6a4c4e305",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("77c07bff-9474-e843-18f5-4c1e5989b266",
	"f0391faf-e3e6-ecbd-d65c-c5d405f00d3f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"77c07bff-9474-e843-18f5-4c1e5989b266");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"77c07bff-9474-e843-18f5-4c1e5989b266",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("77c07bff-9474-e843-18f5-4c1e5989b266",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("d53674c3-676f-23dc-59f1-90d990911d0b",
	"f0391faf-e3e6-ecbd-d65c-c5d405f00d3f",
	"00000000-0000-0000-0000-000000000000",
	"9025a19d-f3d4-eddb-c962-b987879b61f0",
	"37ea0655-1936-c37c-5043-a71cc500480a");
INSERT INTO GD_LS
	VALUES ("a0920df0-ee6a-0d06-32f8-cd1fab3f3f95",
	"f0391faf-e3e6-ecbd-d65c-c5d405f00d3f",
	"d53674c3-676f-23dc-59f1-90d990911d0b",
	"37ea0655-1936-c37c-5043-a71cc500480a",
	"eea5b9c2-fb02-29cc-2ef7-1aba74a39518");
INSERT INTO GD_LS
	VALUES ("7d1b13e7-17e1-c13d-a9ea-c8f87188764d",
	"f0391faf-e3e6-ecbd-d65c-c5d405f00d3f",
	"a0920df0-ee6a-0d06-32f8-cd1fab3f3f95",
	"eea5b9c2-fb02-29cc-2ef7-1aba74a39518",
	"e2a3042d-0849-3883-b251-e7f23a66e857");
INSERT INTO DIM_WAY
	VALUES ("9025a19d-f3d4-eddb-c962-b987879b61f0",
	1856.000000,
	1120.000000,
	"f0391faf-e3e6-ecbd-d65c-c5d405f00d3f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("37ea0655-1936-c37c-5043-a71cc500480a",
	1776.000000,
	1120.000000,
	"f0391faf-e3e6-ecbd-d65c-c5d405f00d3f",
	"00000000-0000-0000-0000-000000000000",
	"9025a19d-f3d4-eddb-c962-b987879b61f0");
INSERT INTO DIM_WAY
	VALUES ("eea5b9c2-fb02-29cc-2ef7-1aba74a39518",
	1776.000000,
	1392.000000,
	"f0391faf-e3e6-ecbd-d65c-c5d405f00d3f",
	"00000000-0000-0000-0000-000000000000",
	"37ea0655-1936-c37c-5043-a71cc500480a");
INSERT INTO DIM_WAY
	VALUES ("e2a3042d-0849-3883-b251-e7f23a66e857",
	1856.000000,
	1392.000000,
	"f0391faf-e3e6-ecbd-d65c-c5d405f00d3f",
	"00000000-0000-0000-0000-000000000000",
	"eea5b9c2-fb02-29cc-2ef7-1aba74a39518");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f0391faf-e3e6-ecbd-d65c-c5d405f00d3f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f0391faf-e3e6-ecbd-d65c-c5d405f00d3f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("3d28a1e4-1b5d-7c88-b08f-51a30129a2a7",
	"8ecb79d6-12df-5a9b-929d-95c532692d30",
	"f0391faf-e3e6-ecbd-d65c-c5d405f00d3f");
INSERT INTO DIM_DIA
	VALUES ("0acdc7f5-14ae-e7ec-1eac-e1c2a0510197",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	'Expression Test Object B',
	12,
	'ETOB',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"00000000-0000-0000-0000-000000000000",
	'etob_id',
	'',
	'',
	'etob_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1a564168-a2e9-41ae-d31c-8c10def2b395",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("1a564168-a2e9-41ae-d31c-8c10def2b395",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("1a564168-a2e9-41ae-d31c-8c10def2b395",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"bc9dbdb4-2492-1090-5bc2-0d289b206342",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"1a564168-a2e9-41ae-d31c-8c10def2b395",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"40bc5372-18e1-9d7a-9826-711ca7e3db47",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("076f5dab-39e1-6926-b521-ba06f0c790f6",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("076f5dab-39e1-6926-b521-ba06f0c790f6",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("076f5dab-39e1-6926-b521-ba06f0c790f6",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"4434b8c2-62cd-02e4-8271-e2ffa316c758",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a1177025-3929-3edb-7d0e-df9e89492a37",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("a1177025-3929-3edb-7d0e-df9e89492a37",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("a1177025-3929-3edb-7d0e-df9e89492a37",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"076f5dab-39e1-6926-b521-ba06f0c790f6",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("97cee472-2e50-7195-74b3-bb36d4da2a04",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("97cee472-2e50-7195-74b3-bb36d4da2a04",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("97cee472-2e50-7195-74b3-bb36d4da2a04",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"a1177025-3929-3edb-7d0e-df9e89492a37",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"97cee472-2e50-7195-74b3-bb36d4da2a04",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"b2e2ec8b-dea4-27ff-bf04-36a5ef39a581",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	"7695bbaf-5f4d-4f46-3a0d-4621d0da66b7",
	"b243aea3-7f76-54e6-9dcf-022365a6e156",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R8');
INSERT INTO O_RATTR
	VALUES ("7695bbaf-5f4d-4f46-3a0d-4621d0da66b7",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("7695bbaf-5f4d-4f46-3a0d-4621d0da66b7",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"24801b0c-27a4-11d2-8d50-aa1ada226943",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"f8ac741f-e81c-75fe-e6a7-721e86942af5",
	"894ef6cf-6024-ed13-cc94-85b694333c5b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'etoc_id',
	'R6');
INSERT INTO O_RATTR
	VALUES ("f8ac741f-e81c-75fe-e6a7-721e86942af5",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"24801b0c-27a4-11d2-8d50-aa1ada226943",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'etoc_id');
INSERT INTO O_ATTR
	VALUES ("f8ac741f-e81c-75fe-e6a7-721e86942af5",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"7695bbaf-5f4d-4f46-3a0d-4621d0da66b7",
	'etoc_id',
	'',
	'',
	'etoc_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"80fde00a-1975-1181-0799-19d319814ba2",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"d78af3a9-3b82-a0fd-47cb-fa24b6dcf6b9",
	"aa8548e2-470a-b46f-14f2-d59dbdb38ca2",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'btrue',
	'R6');
INSERT INTO O_RATTR
	VALUES ("d78af3a9-3b82-a0fd-47cb-fa24b6dcf6b9",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"80fde00a-1975-1181-0799-19d319814ba2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("d78af3a9-3b82-a0fd-47cb-fa24b6dcf6b9",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"f8ac741f-e81c-75fe-e6a7-721e86942af5",
	'r6btrue',
	'',
	'r6',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"4cfb4cd8-c904-1c1f-6dc1-03a00ca667c8",
	"951ad794-2873-d475-7cd7-c9e00e17e71d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'bfalse',
	'R6');
INSERT INTO O_RATTR
	VALUES ("4cfb4cd8-c904-1c1f-6dc1-03a00ca667c8",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("4cfb4cd8-c904-1c1f-6dc1-03a00ca667c8",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"d78af3a9-3b82-a0fd-47cb-fa24b6dcf6b9",
	'r6bfalse',
	'',
	'r6',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"11d0b125-877e-7584-80f0-85bcac5e64a7",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"5fa613f1-f692-0bb9-f3a6-cd5b467e292c",
	"4d506659-eff5-a9b8-70b1-8ef421843fc1",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'r',
	'R6');
INSERT INTO O_RATTR
	VALUES ("5fa613f1-f692-0bb9-f3a6-cd5b467e292c",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"11d0b125-877e-7584-80f0-85bcac5e64a7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'r');
INSERT INTO O_ATTR
	VALUES ("5fa613f1-f692-0bb9-f3a6-cd5b467e292c",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"4cfb4cd8-c904-1c1f-6dc1-03a00ca667c8",
	'r6r',
	'',
	'r6',
	'r',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"e2168d1b-0db5-7ec5-a761-3383b9b2203b",
	"ad8e527f-7f8a-b1d3-17a2-a8ece2a813be",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	's',
	'R6');
INSERT INTO O_RATTR
	VALUES ("e2168d1b-0db5-7ec5-a761-3383b9b2203b",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	's');
INSERT INTO O_ATTR
	VALUES ("e2168d1b-0db5-7ec5-a761-3383b9b2203b",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"5fa613f1-f692-0bb9-f3a6-cd5b467e292c",
	'r6s',
	'',
	'r6',
	's',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	"5b26dfa4-7f92-b09b-2dc0-59c0d0870334",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'u',
	'R6');
INSERT INTO O_RATTR
	VALUES ("3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'u');
INSERT INTO O_ATTR
	VALUES ("3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"e2168d1b-0db5-7ec5-a761-3383b9b2203b",
	'r6u',
	'',
	'r6',
	'u',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"0d8ef56e-409f-8cc2-531f-316abac975cc",
	"989cd201-f183-fd27-1734-0db7efb14e23",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'd',
	'R6');
INSERT INTO O_RATTR
	VALUES ("0d8ef56e-409f-8cc2-531f-316abac975cc",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'd');
INSERT INTO O_ATTR
	VALUES ("0d8ef56e-409f-8cc2-531f-316abac975cc",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	'r6d',
	'',
	'r6',
	'd',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"11b3b33a-863f-0583-331c-066d47b7e24d",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	"ceb9e9a9-0bd6-56a8-01d7-f6f2f29488cb",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	't',
	'R6');
INSERT INTO O_RATTR
	VALUES ("45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"11b3b33a-863f-0583-331c-066d47b7e24d",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	't');
INSERT INTO O_ATTR
	VALUES ("45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"0d8ef56e-409f-8cc2-531f-316abac975cc",
	'r6t',
	'',
	'r6',
	't',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"50fc1111-665c-8a1b-06da-c6289edcd78a",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"878ce09b-f153-84b6-4a68-4a11addd43dd",
	"8fee6254-b6ab-a206-a6ba-2f8dbb47ce1b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'tim',
	'R6');
INSERT INTO O_RATTR
	VALUES ("878ce09b-f153-84b6-4a68-4a11addd43dd",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"50fc1111-665c-8a1b-06da-c6289edcd78a",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'tim');
INSERT INTO O_ATTR
	VALUES ("878ce09b-f153-84b6-4a68-4a11addd43dd",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	'r6tim',
	'',
	'r6',
	'tim',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"4953388e-55f5-ecd5-7d4e-dd164baf3ed8",
	"11819529-d2ee-1362-b74f-48748c1ca662",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'ev',
	'R6');
INSERT INTO O_RATTR
	VALUES ("4953388e-55f5-ecd5-7d4e-dd164baf3ed8",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'ev');
INSERT INTO O_ATTR
	VALUES ("4953388e-55f5-ecd5-7d4e-dd164baf3ed8",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"878ce09b-f153-84b6-4a68-4a11addd43dd",
	'r6ev',
	'',
	'r6',
	'ev',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_OIDA
	VALUES ("47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'ev');
INSERT INTO O_OIDA
	VALUES ("4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'u');
INSERT INTO O_OIDA
	VALUES ("350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("076f5dab-39e1-6926-b521-ba06f0c790f6",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'd');
INSERT INTO O_OIDA
	VALUES ("97cee472-2e50-7195-74b3-bb36d4da2a04",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'tim');
INSERT INTO O_OIDA
	VALUES ("a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'etob_id');
INSERT INTO O_OIDA
	VALUES ("a1177025-3929-3edb-7d0e-df9e89492a37",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	't');
INSERT INTO O_OIDA
	VALUES ("1a564168-a2e9-41ae-d31c-8c10def2b395",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'r');
INSERT INTO O_OIDA
	VALUES ("bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	's');
INSERT INTO O_ID
	VALUES (1,
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ID
	VALUES (2,
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO PE_PE
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	'Expression Test Object C',
	13,
	'ETOC',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("24801b0c-27a4-11d2-8d50-aa1ada226943",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("24801b0c-27a4-11d2-8d50-aa1ada226943",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("24801b0c-27a4-11d2-8d50-aa1ada226943",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"00000000-0000-0000-0000-000000000000",
	'etoc_id',
	'',
	'',
	'etoc_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"24801b0c-27a4-11d2-8d50-aa1ada226943",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"80fde00a-1975-1181-0799-19d319814ba2",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"11d0b125-877e-7584-80f0-85bcac5e64a7",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"fc4a3564-c576-99ad-d738-ce2e134dc98e",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("50fc1111-665c-8a1b-06da-c6289edcd78a",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("50fc1111-665c-8a1b-06da-c6289edcd78a",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("50fc1111-665c-8a1b-06da-c6289edcd78a",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"11b3b33a-863f-0583-331c-066d47b7e24d",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"50fc1111-665c-8a1b-06da-c6289edcd78a",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_OIDA
	VALUES ("3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	's');
INSERT INTO O_OIDA
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'ev');
INSERT INTO O_OIDA
	VALUES ("f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'd');
INSERT INTO O_OIDA
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'u');
INSERT INTO O_OIDA
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	't');
INSERT INTO O_OIDA
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'r');
INSERT INTO O_OIDA
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("50fc1111-665c-8a1b-06da-c6289edcd78a",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'tim');
INSERT INTO O_OIDA
	VALUES ("1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("24801b0c-27a4-11d2-8d50-aa1ada226943",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'etoc_id');
INSERT INTO O_ID
	VALUES (1,
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ID
	VALUES (2,
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO PE_PE
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'Expression Test',
	3,
	'ET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("2c4dfa33-317a-2057-4799-ca233db1e10a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'no_parm_ret_void',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'LOG::LogFailure(message:"Operation ET::no_parm_ret_void should not have been translated.");
',
	1,
	'',
	"bd0d89e0-a4f6-1cf8-6797-98220022bdef",
	0);
INSERT INTO O_TFR
	VALUES ("6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'i_parm_ret_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'LOG::LogFailure(message:"Operation ET::i_parm_ret_i should not have been translated.");
return param.i;',
	1,
	'',
	"3c55c927-841a-b2ef-2e4f-65509835d7e6",
	0);
INSERT INTO O_TPARM
	VALUES ("92851ea0-e968-8852-3977-05c80e689712",
	"6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("fec823f3-30b7-8aec-c9b7-169afcf2e052",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'r_parm_ret_r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'LOG::LogFailure(message:"Operation ET::r_parm_ret_r should not have been translated.");
return param.r;',
	1,
	'',
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	0);
INSERT INTO O_TPARM
	VALUES ("9e1cd40a-6950-f6c2-74a8-fc8a5f710081",
	"fec823f3-30b7-8aec-c9b7-169afcf2e052",
	'r',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("5bf95f81-bb7c-8400-6836-f1339f7c917e",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'b_parm_ret_b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'LOG::LogFailure(message:"Operation ET::b_parm_ret_b should not have been translated.");
return param.b;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TPARM
	VALUES ("21f9c83c-5d29-cdd6-3825-1696153c01bb",
	"5bf95f81-bb7c-8400-6836-f1339f7c917e",
	'b',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("e46687fc-d696-59c0-16bf-f541d57a57d1",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	's_parm_ret_s',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'LOG::LogFailure(message:"Operation ET::s_parm_ret_s should not have been translated.");
return param.s;',
	1,
	'',
	"fec823f3-30b7-8aec-c9b7-169afcf2e052",
	0);
INSERT INTO O_TPARM
	VALUES ("b9095bd1-c52b-bad3-aad2-3e64d425eb1e",
	"e46687fc-d696-59c0-16bf-f541d57a57d1",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("fddb96c4-ae5e-78b8-2e0e-a128df260b0a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'u_parm_ret_u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'LOG::LogFailure(message:"Operation ET::u_parm_ret_u should not have been translated.");
return param.u;',
	1,
	'',
	"1532eced-0f36-6463-4a58-51234289a64d",
	0);
INSERT INTO O_TPARM
	VALUES ("879d19f9-1ecd-9004-d179-1280d2b32a6e",
	"fddb96c4-ae5e-78b8-2e0e-a128df260b0a",
	'u',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("3c55c927-841a-b2ef-2e4f-65509835d7e6",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'd_parm_ret_d',
	'',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'LOG::LogFailure(message:"Operation ET::d_parm_ret_d should not have been translated.");
return param.d;',
	1,
	'',
	"5bf95f81-bb7c-8400-6836-f1339f7c917e",
	0);
INSERT INTO O_TPARM
	VALUES ("ba1f9437-707c-21dc-b0af-6152d8103224",
	"3c55c927-841a-b2ef-2e4f-65509835d7e6",
	'd',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("1532eced-0f36-6463-4a58-51234289a64d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	't_parm_ret_t',
	'',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'LOG::LogFailure(message:"Operation ET::t_parm_ret_t should not have been translated.");
return param.t;',
	1,
	'',
	"e46687fc-d696-59c0-16bf-f541d57a57d1",
	0);
INSERT INTO O_TPARM
	VALUES ("0e284941-c030-3774-95ef-053390cb4782",
	"1532eced-0f36-6463-4a58-51234289a64d",
	't',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("bd0d89e0-a4f6-1cf8-6797-98220022bdef",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'i_parm_ret_void',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'LOG::LogFailure(message:"Operation ET::i_parm_ret_void should not have been translated.");',
	1,
	'',
	"6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5",
	0);
INSERT INTO O_TPARM
	VALUES ("d09381b0-4a7b-4fd2-4f14-f812e97311db",
	"bd0d89e0-a4f6-1cf8-6797-98220022bdef",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'waitOneSec',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'',
	1,
	'',
	"fddb96c4-ae5e-78b8-2e0e-a128df260b0a",
	0);
INSERT INTO O_NBATTR
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"00000000-0000-0000-0000-000000000000",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("71ec8e80-08af-8589-0172-cbee963c83a1",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("71ec8e80-08af-8589-0172-cbee963c83a1",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("71ec8e80-08af-8589-0172-cbee963c83a1",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"ade5b96d-7039-736d-26dd-570b8389401d",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5473ca42-ff3d-8921-d889-e9a18871ede3",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("5473ca42-ff3d-8921-d889-e9a18871ede3",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("5473ca42-ff3d-8921-d889-e9a18871ede3",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"71ec8e80-08af-8589-0172-cbee963c83a1",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("15799752-721b-413b-9fed-b6332ef07f8f",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("15799752-721b-413b-9fed-b6332ef07f8f",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("15799752-721b-413b-9fed-b6332ef07f8f",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"5473ca42-ff3d-8921-d889-e9a18871ede3",
	'i',
	'',
	'',
	'i',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("041bdb4d-d371-40fe-11de-ac9a36aa975d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("041bdb4d-d371-40fe-11de-ac9a36aa975d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("041bdb4d-d371-40fe-11de-ac9a36aa975d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"15799752-721b-413b-9fed-b6332ef07f8f",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("6a88fca5-3e6e-6dae-9650-e58b6b4911d8",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("6a88fca5-3e6e-6dae-9650-e58b6b4911d8",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("6a88fca5-3e6e-6dae-9650-e58b6b4911d8",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"041bdb4d-d371-40fe-11de-ac9a36aa975d",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("74f77bac-5723-b9b4-f191-874a62d7a110",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("74f77bac-5723-b9b4-f191-874a62d7a110",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("74f77bac-5723-b9b4-f191-874a62d7a110",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"6a88fca5-3e6e-6dae-9650-e58b6b4911d8",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bf144f14-8ae8-1ec0-968f-c96132ad729a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("bf144f14-8ae8-1ec0-968f-c96132ad729a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("bf144f14-8ae8-1ec0-968f-c96132ad729a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"74f77bac-5723-b9b4-f191-874a62d7a110",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3c47b51e-6e76-735e-6087-17d6e4698fc4",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("3c47b51e-6e76-735e-6087-17d6e4698fc4",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("3c47b51e-6e76-735e-6087-17d6e4698fc4",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"bf144f14-8ae8-1ec0-968f-c96132ad729a",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("acc6975a-0c4a-aaff-99ec-0fbf102ba84c",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("acc6975a-0c4a-aaff-99ec-0fbf102ba84c",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("acc6975a-0c4a-aaff-99ec-0fbf102ba84c",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"3c47b51e-6e76-735e-6087-17d6e4698fc4",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ce0e773a-bec8-c5c0-441a-91f9c02e0d78",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("ce0e773a-bec8-c5c0-441a-91f9c02e0d78",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("ce0e773a-bec8-c5c0-441a-91f9c02e0d78",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"acc6975a-0c4a-aaff-99ec-0fbf102ba84c",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("fead1f11-9dcf-0a41-a2f5-acf1fd55c7f7",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("fead1f11-9dcf-0a41-a2f5-acf1fd55c7f7",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("fead1f11-9dcf-0a41-a2f5-acf1fd55c7f7",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"ce0e773a-bec8-c5c0-441a-91f9c02e0d78",
	'log_id',
	'',
	'',
	'log_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("d3929d8d-bce9-a55a-e726-71f8ecf997f4",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("d3929d8d-bce9-a55a-e726-71f8ecf997f4",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("d3929d8d-bce9-a55a-e726-71f8ecf997f4",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"fead1f11-9dcf-0a41-a2f5-acf1fd55c7f7",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("7c27111b-5601-8905-ba68-bebcb5c02057",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("7c27111b-5601-8905-ba68-bebcb5c02057",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("7c27111b-5601-8905-ba68-bebcb5c02057",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"d3929d8d-bce9-a55a-e726-71f8ecf997f4",
	'my_b',
	'',
	'',
	'my_b',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("eb93b9eb-78d5-6781-dce1-5b4fa26d1b8a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("eb93b9eb-78d5-6781-dce1-5b4fa26d1b8a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("eb93b9eb-78d5-6781-dce1-5b4fa26d1b8a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"7c27111b-5601-8905-ba68-bebcb5c02057",
	'my_i',
	'',
	'',
	'my_i',
	0,
	"4c39b4f9-523d-8cc3-5126-d0bde9640322",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4e9575cf-d6f9-66da-bb31-8b5eb7fb8a00",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("4e9575cf-d6f9-66da-bb31-8b5eb7fb8a00",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("4e9575cf-d6f9-66da-bb31-8b5eb7fb8a00",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"eb93b9eb-78d5-6781-dce1-5b4fa26d1b8a",
	'my_r',
	'',
	'',
	'my_r',
	0,
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("11c5b691-9923-5730-b39c-d2efc2a60069",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("11c5b691-9923-5730-b39c-d2efc2a60069",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("11c5b691-9923-5730-b39c-d2efc2a60069",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"4e9575cf-d6f9-66da-bb31-8b5eb7fb8a00",
	'my_s',
	'',
	'',
	'my_s',
	0,
	"ce87aa8d-1bb4-01ea-0916-96321b55867c",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("80785ddb-c1bf-72f4-caf0-6069104575c7",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("80785ddb-c1bf-72f4-caf0-6069104575c7",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("80785ddb-c1bf-72f4-caf0-6069104575c7",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"11c5b691-9923-5730-b39c-d2efc2a60069",
	'my_u',
	'',
	'',
	'my_u',
	0,
	"bc4d8a5f-8892-bff5-cf51-68bad811491a",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"28111606-8112-c6c3-8492-598c7d3de4a6",
	"3753592a-8926-f5c0-8141-f5aab60b273a",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'etob_id',
	'R1');
INSERT INTO O_RATTR
	VALUES ("28111606-8112-c6c3-8492-598c7d3de4a6",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'etob_id');
INSERT INTO O_ATTR
	VALUES ("28111606-8112-c6c3-8492-598c7d3de4a6",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"80785ddb-c1bf-72f4-caf0-6069104575c7",
	'etob_id',
	'',
	'',
	'etob_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"ce920c66-93c6-5e2e-9802-e3be3c671874",
	"adc56b61-419d-f174-634f-8845bff6308d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'btrue',
	'R1');
INSERT INTO O_RATTR
	VALUES ("ce920c66-93c6-5e2e-9802-e3be3c671874",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("ce920c66-93c6-5e2e-9802-e3be3c671874",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"28111606-8112-c6c3-8492-598c7d3de4a6",
	'r1btrue',
	'',
	'r1',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"9d00ecc3-a01a-4bd2-6126-02609e61d8ca",
	"1646c2b6-e1b8-2ff6-804d-2816d4def61f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'bfalse',
	'R1');
INSERT INTO O_RATTR
	VALUES ("9d00ecc3-a01a-4bd2-6126-02609e61d8ca",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("9d00ecc3-a01a-4bd2-6126-02609e61d8ca",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"ce920c66-93c6-5e2e-9802-e3be3c671874",
	'r1bfalse',
	'',
	'r1',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"1a564168-a2e9-41ae-d31c-8c10def2b395",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"a09bf289-ccd2-e9bf-d8a3-b058257466dc",
	"5e7b239b-59a8-8274-3c8a-7abe276e36c6",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'r',
	'R1');
INSERT INTO O_RATTR
	VALUES ("a09bf289-ccd2-e9bf-d8a3-b058257466dc",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"1a564168-a2e9-41ae-d31c-8c10def2b395",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'r');
INSERT INTO O_ATTR
	VALUES ("a09bf289-ccd2-e9bf-d8a3-b058257466dc",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"9d00ecc3-a01a-4bd2-6126-02609e61d8ca",
	'r1r',
	'',
	'r1',
	'r',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"87ea4870-c492-cdc0-e932-66dba42f6abd",
	"7bdb5dde-4d1f-9322-83f1-d4aef5ce28fc",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	's',
	'R1');
INSERT INTO O_RATTR
	VALUES ("87ea4870-c492-cdc0-e932-66dba42f6abd",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	's');
INSERT INTO O_ATTR
	VALUES ("87ea4870-c492-cdc0-e932-66dba42f6abd",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"a09bf289-ccd2-e9bf-d8a3-b058257466dc",
	'r1s',
	'',
	'r1',
	's',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"2b5de8a5-ad3c-d612-49ae-b4ebc064fdd5",
	"0a567d5d-743b-86df-7f36-8d47c97145b4",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'u',
	'R1');
INSERT INTO O_RATTR
	VALUES ("2b5de8a5-ad3c-d612-49ae-b4ebc064fdd5",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'u');
INSERT INTO O_ATTR
	VALUES ("2b5de8a5-ad3c-d612-49ae-b4ebc064fdd5",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"87ea4870-c492-cdc0-e932-66dba42f6abd",
	'r1u',
	'',
	'r1',
	'u',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"076f5dab-39e1-6926-b521-ba06f0c790f6",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"4d509b29-2b37-068b-6f48-01edbb921d02",
	"955f9dc3-6792-d471-00ec-91b38ae7fb69",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'd',
	'R1');
INSERT INTO O_RATTR
	VALUES ("4d509b29-2b37-068b-6f48-01edbb921d02",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"076f5dab-39e1-6926-b521-ba06f0c790f6",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'd');
INSERT INTO O_ATTR
	VALUES ("4d509b29-2b37-068b-6f48-01edbb921d02",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"2b5de8a5-ad3c-d612-49ae-b4ebc064fdd5",
	'r1d',
	'',
	'r1',
	'd',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"a1177025-3929-3edb-7d0e-df9e89492a37",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"3c64d10e-3f58-5dfb-cff3-b51bd0915110",
	"4ed0e08d-602b-f2d5-2f05-b795e0fe4d69",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	't',
	'R1');
INSERT INTO O_RATTR
	VALUES ("3c64d10e-3f58-5dfb-cff3-b51bd0915110",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"a1177025-3929-3edb-7d0e-df9e89492a37",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	't');
INSERT INTO O_ATTR
	VALUES ("3c64d10e-3f58-5dfb-cff3-b51bd0915110",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"4d509b29-2b37-068b-6f48-01edbb921d02",
	'r1t',
	'',
	'r1',
	't',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"97cee472-2e50-7195-74b3-bb36d4da2a04",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"19f8371a-e772-62ae-b3f9-de22f89c722c",
	"0cf5ecb2-9f89-da33-bb16-ce0693261674",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'tim',
	'R1');
INSERT INTO O_RATTR
	VALUES ("19f8371a-e772-62ae-b3f9-de22f89c722c",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"97cee472-2e50-7195-74b3-bb36d4da2a04",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'tim');
INSERT INTO O_ATTR
	VALUES ("19f8371a-e772-62ae-b3f9-de22f89c722c",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"3c64d10e-3f58-5dfb-cff3-b51bd0915110",
	'r1tim',
	'',
	'r1',
	'tim',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"22c96144-8305-abca-b854-591cdee5564f",
	"6367115e-8d6d-a5bb-91e9-beb7a37cff4f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'ev',
	'R1');
INSERT INTO O_RATTR
	VALUES ("22c96144-8305-abca-b854-591cdee5564f",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'ev');
INSERT INTO O_ATTR
	VALUES ("22c96144-8305-abca-b854-591cdee5564f",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"19f8371a-e772-62ae-b3f9-de22f89c722c",
	'r1ev',
	'',
	'r1',
	'ev',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_OIDA
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	'et_id');
INSERT INTO O_ID
	VALUES (1,
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ID
	VALUES (2,
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO SM_ISM
	VALUES ("358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO SM_SM
	VALUES ("358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'',
	4);
INSERT INTO SM_MOORE
	VALUES ("358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_EVTDI
	VALUES ("56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"fdcd6a24-3dcf-1a4d-44c8-e9aafa15c86c");
INSERT INTO SM_EVTDI
	VALUES ("4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67");
INSERT INTO SM_EVTDI
	VALUES ("1a0b32df-a648-2dc4-be32-c924c59b332c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	's',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82");
INSERT INTO SM_EVTDI
	VALUES ("44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"3600367e-0add-f558-0191-3db7429b77fc");
INSERT INTO SM_EVTDI
	VALUES ("aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'my_b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("ce156462-1465-51f4-1a56-0e636e83effe",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'my_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7");
INSERT INTO SM_EVTDI
	VALUES ("a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'my_r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"ce156462-1465-51f4-1a56-0e636e83effe");
INSERT INTO SM_EVTDI
	VALUES ("adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'my_s',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06");
INSERT INTO SM_EVTDI
	VALUES ("98844fd4-7709-19a8-4164-61b84988e3ac",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'my_u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7");
INSERT INTO SM_EVTDI
	VALUES ("aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"1a0b32df-a648-2dc4-be32-c924c59b332c");
INSERT INTO SM_EVTDI
	VALUES ("3600367e-0add-f558-0191-3db7429b77fc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726");
INSERT INTO SM_EVTDI
	VALUES ("285ab600-087c-6767-ab4a-a92f5f89988a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'tint1',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("7a133f52-371a-6d89-995f-845ec5c9c51f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'tint2',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"285ab600-087c-6767-ab4a-a92f5f89988a");
INSERT INTO SM_EVTDI
	VALUES ("3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'treal1',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"7a133f52-371a-6d89-995f-845ec5c9c51f");
INSERT INTO SM_EVTDI
	VALUES ("ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'treal2',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037");
INSERT INTO SM_EVTDI
	VALUES ("c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'd',
	'',
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'ts',
	'',
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"417f5810-e42c-e0e2-fb4b-3cec12ff8438");
INSERT INTO SM_EVTDI
	VALUES ("417f5810-e42c-e0e2-fb4b-3cec12ff8438",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'tim',
	'',
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7");
INSERT INTO SM_EVTDI
	VALUES ("fdcd6a24-3dcf-1a4d-44c8-e9aafa15c86c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'ev',
	'',
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c");
INSERT INTO SM_EVTDI
	VALUES ("668a418f-509c-95d6-adf3-7a0b0b85f32c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"2a6fe068-9d45-bf33-593f-7dda41f692f2");
INSERT INTO SM_EVTDI
	VALUES ("2a6fe068-9d45-bf33-593f-7dda41f692f2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("19262542-efee-dfa5-f1ee-ae8a2ee50029",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"668a418f-509c-95d6-adf3-7a0b0b85f32c");
INSERT INTO SM_EVTDI
	VALUES ("dbbeb42d-8264-dc7d-5893-21789a4ff469",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	's',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"19262542-efee-dfa5-f1ee-ae8a2ee50029");
INSERT INTO SM_EVTDI
	VALUES ("d69d931a-ab14-b19a-8822-8d44b2ddd977",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"dbbeb42d-8264-dc7d-5893-21789a4ff469");
INSERT INTO SM_EVTDI
	VALUES ("2cfec34e-d69c-8772-2456-19b12b85f5e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("f935da26-6602-ad1d-c751-1840ea176c62",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("614ad6d5-cf9f-c16d-a510-f699f72fd5d3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("82c8451b-c97e-5266-a12a-4a2dea331cb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"2cfec34e-d69c-8772-2456-19b12b85f5e0");
INSERT INTO SM_EVTDI
	VALUES ("deb936a4-b007-8c1e-5aea-f8ebf80e0661",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"f935da26-6602-ad1d-c751-1840ea176c62");
INSERT INTO SM_EVTDI
	VALUES ("f8060b52-33ff-f2ff-a3c2-5f336a27192b",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"614ad6d5-cf9f-c16d-a510-f699f72fd5d3");
INSERT INTO SM_LEVT
	VALUES ("6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start Expression Test',
	0,
	'',
	'ET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Run F3 Binary Ops',
	0,
	'',
	'ET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Run F15 Values',
	0,
	'',
	'ET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Run F16 Transformers',
	0,
	'',
	'ET4',
	'');
INSERT INTO SM_LEVT
	VALUES ("b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	5,
	'Run F17 Timestamp and F18 Date Operators',
	0,
	'',
	'ET5',
	'');
INSERT INTO SM_LEVT
	VALUES ("f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	6,
	'Run F1 and F2 for User Defined Types',
	0,
	'',
	'ET6',
	'');
INSERT INTO SM_LEVT
	VALUES ("55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	7,
	'Run F3 through F14 for User Defined Types',
	0,
	'',
	'ET7',
	'');
INSERT INTO SM_LEVT
	VALUES ("81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	8,
	'Run F15 for User Defined Types',
	0,
	'',
	'ET8',
	'');
INSERT INTO SM_LEVT
	VALUES ("91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	9,
	'Shut Down',
	0,
	'',
	'ET9',
	'');
INSERT INTO SM_LEVT
	VALUES ("1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	10,
	'Start not_empty test',
	0,
	'',
	'ET10',
	'');
INSERT INTO SM_LEVT
	VALUES ("707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	11,
	'Start cardinality test',
	0,
	'',
	'ET11',
	'');
INSERT INTO SM_LEVT
	VALUES ("05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	12,
	'Start empty test',
	0,
	'',
	'ET12',
	'');
INSERT INTO SM_LEVT
	VALUES ("cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	13,
	'Start not test',
	0,
	'',
	'ET13',
	'');
INSERT INTO SM_LEVT
	VALUES ("5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	14,
	'Start subtract test',
	0,
	'',
	'ET14',
	'');
INSERT INTO SM_LEVT
	VALUES ("87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	15,
	'Start assign test',
	0,
	'',
	'ET15',
	'');
INSERT INTO SM_LEVT
	VALUES ("b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	16,
	'Start and test',
	0,
	'',
	'ET16',
	'');
INSERT INTO SM_LEVT
	VALUES ("7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	17,
	'Start or test',
	0,
	'',
	'ET17',
	'');
INSERT INTO SM_STATE
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'Starting Expression Test F1 and F2',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"b06514dd-3680-9909-6d9c-d215d09740e5");
INSERT INTO SM_AH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	1,
	'LOG::LogInfo(message:"Starting Expression Test F1 and F2") ;

//BEGIN EX.F.1
//check defaults

if (self.bfalse != FALSE)
  LOG::LogFailure(message:"EX.F.1: b default") ;
else
  LOG::LogSuccess(message:"EX.F.1: b default") ;
end if;

if (self.i != 0)
  LOG::LogFailure(message:"EX.F.1: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1: i default") ; 
end if;

//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.1: r default") real;

if (self.s != "")
  LOG::LogFailure(message:"EX.F.1: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1: s default") ;
end if;

//END EX.F.1

//BEGIN EX.F.2
//check integer assign

assign self.i = 10;
if (self.i == 10)
  LOG::LogSuccess(message:"EX.F.2: self.i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.i assign") ;  
end if;

//check real assign
assign self.r = 3.14;
//generate LOGREAL1:''Log Real''(r:3.14,message:"EX.F.2: r assigned to") real;
//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.2: r assigned is") real;

//check bool assign
assign self.bfalse = TRUE;
if (self.bfalse == TRUE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;
assign self.bfalse = FALSE;
if (self.bfalse == FALSE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;

//check string assign
assign self.s = "String";
if (self.s == "String")
  LOG::LogSuccess(message:"EX.F.2: self.s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.s assign") ;  
end if;

LOG::LogInfo(message:"Finished Expression Test F1 and F2") ;

//generate event to commence Operations test
generate ET13:''Start not test''(tfalse:FALSE, ttrue:TRUE) to self;',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'Run F3 through F14 Binary Operations',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"9842cf40-2a8c-cb2b-673b-e159c7987edd");
INSERT INTO SM_AH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	1,
	'
LOG::LogInfo(message:"Running F3 through F14 Binary Operations") ;

//BEGIN EX.F.3
// boolean and, or, ==, and !=

//and
assign b1 = TRUE;
assign b2 = FALSE;
if (b1 and b2)
  LOG::LogFailure(message:"EX.F.3 boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean and") ;
end if;

// or
if (b1 or b2)
  LOG::LogSuccess(message:"EX.F.3 boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean or") ;
end if;

//==
if (b1 == b2)
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
end if;

//!=
if (b1 != b2)
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
end if;
//END EX.F.3

//BEGIN EX.F.4
// integer + - * / %

// +
assign i1 = 5;
assign i2 = -6;
assign i3 = i1 + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4 integer +") ;
else
  LOG::LogFailure(message:"EX.F.4 integer +") ;
end if;
//- 
assign i4 = i1 - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4 integer -") ;
else
  LOG::LogFailure(message:"EX.F.4 integer -") ;
end if;
// *
assign i5 = i1*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4 integer *") ;
else
  LOG::LogFailure(message:"EX.F.4 integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/i1;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4 integer /") ;
else
  LOG::LogFailure(message:"EX.F.4 integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%i1;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4 integer %") ;
else
  LOG::LogFailure(message:"EX.F.4 integer %") ;
end if;
//END EX.F.4

//BEGIN EX.F.5
// integer  < <= == != >= >

assign j1 = 12;
assign j2 = 6;
assign j3 = 6;
// <
if (j2 < j1)
  LOG::LogSuccess(message:"EX.F.5 integer <") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <") ;
end if;
// <=
if (j2 <= j3)
  LOG::LogSuccess(message:"EX.F.5 integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <=") ;
end if;
//==
if (j2 == j3)
  LOG::LogSuccess(message:"EX.F.5 integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5 integer ==") ;
end if;
//!=
if (j2 != j1)
  LOG::LogSuccess(message:"EX.F.5 integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer !=") ;
end if;
//>=
if (j1 >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >=") ;
end if;
//>
if (j1 > j2)
  LOG::LogSuccess(message:"EX.F.5 integer >") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >") ;
end if;
//END EX.F.5

//BEGIN EX.F.6
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = i1 + r1;
LOG::LogReal(r:r3,message:"EX.F.6 int real + : r should be -1.0") ;

//- 
assign r4 = i1 - r1;
LOG::LogReal(r:r4,message:"EX.F.6 int real - : r should be 11.0") ;

// *
assign r5 = i1*r1;
LOG::LogReal(r:r5,message:"EX.F.6 int real * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = i10/r2;
LOG::LogReal(r:r6,message:"EX.F.6 int real / : r should be 2.0") ;

//END EX.F.6

//BEGIN EX.F.7
//  < <= == != >= > int as left operand, real as right, and bool result

assign k1 = 12;
assign s1 = 6.0;
assign s2 = 12.0;
assign k2 = 6;

// <
if (k2 < s2)
  LOG::LogSuccess(message:"EX.F.7 int real <") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <") ;
end if;

// <=
if (k2 <= s1)
  LOG::LogSuccess(message:"EX.F.7 int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <=") ;
end if;

//==
if (k2 == s1)
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
end if;

//!=
if (k1 != s1)
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
end if;

//>=
if (k1 >= s1)
  LOG::LogSuccess(message:"EX.F.7 int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (k1 > s1)
  LOG::LogSuccess(message:"EX.F.7 int real >") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >") ;
end if;
//END EX.F.7

//BEGIN EX.F.8
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = r1 + i1;
LOG::LogReal(r:r3,message:"EX.F.8 real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - i1;
LOG::LogReal(r:r4,message:"EX.F.8 real int - : r should be -11.0") ;

// *
assign r5 = r1*i1;
LOG::LogReal(r:r5,message:"EX.F.8 real int * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = r2/i10;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8

//BEGIN EX.F.9
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign k1 = 6;
assign k2 = 12;
assign s2 = 6.0;

// <
if (s2 < k2)
  LOG::LogSuccess(message:"EX.F.9 real int <") ;
else
  LOG::LogFailure(message:"EX.F.9 real int <") ;
end if;

// <=
if (s1 <= k2)
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
end if;

//==
if (s2 == k1)
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
end if;

//!=
if (s1 != k1)
  LOG::LogSuccess(message:"EX.F.9 real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int !=") ;
end if;

//>=
if (s1 >= k1)
  LOG::LogSuccess(message:"EX.F.9 real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >=") ;
end if;

//>
if (s1 > k1)
  LOG::LogSuccess(message:"EX.F.9 real int >") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >") ;
end if;

//END EX.F.9

//BEGIN EX.F.10
// real + - * / 

// +
assign r1 = 5.0;
assign r2 = -6.0;
assign r3 = r1 + r2;
LOG::LogReal(r:r3,message:"EX.F.10 real real + : r should be -1.0") ;

//- 
assign r4 = r1 - r2;
LOG::LogReal(r:r4,message:"EX.F.10 real real - : r should be 11.0") ;

// *
assign r5 = r1*r2;
LOG::LogReal(r:r5,message:"EX.F.10 real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/r1;
LOG::LogReal(r:r7,message:"EX.F.10 real real / : r should be 2.0") ;

//END EX.F.10


//BEGIN EX.F.11
// real  < <= == != >= >

assign r1 = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
// <
if (r2 < r1)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11 real <") ;
end if;
// <=
if (r2 <= r1)
  LOG::LogSuccess(message:"EX.F.11 real <=") ;
else
  LOG::LogFailure(message:"EX.F.11 real <=") ;
end if;
//==
if (r2 == r3)
  LOG::LogInfo(message:"EX.F.11 real ==") ;
else
  LOG::LogInfo(message:"EX.F.11 real ==") ;
end if;
//!=
if (r2 != r1)
  LOG::LogSuccess(message:"EX.F.11 real !=") ;
else
  LOG::LogFailure(message:"EX.F.11 real !=") ;
end if;
//>=
if (r1 >= r2)
  LOG::LogSuccess(message:"EX.F.11 real >=") ;
else
  LOG::LogFailure(message:"EX.F.11 real >=") ;
end if;
//>
if (r1 > r2)
  LOG::LogSuccess(message:"EX.F.11 real >") ;
else
  LOG::LogFailure(message:"EX.F.11 real >") ;
end if;
//END EX.F.11

//BEGIN EX.F.12
// string string +
assign str1 = "Hello";
assign str2 = "World";
assign str3 = str1+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12 string +") ;
else
  LOG::LogFailure(message:"EX.F.12 string +") ;
end if;
//END EX.F.12

//BEGIN EX.F.13
//string < <= == != >= >
assign str1 = "a";
assign str2 = "b";
assign str3 = "b";
// <
if (str1 < str2)
  LOG::LogSuccess(message:"EX.F.13 string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (str2 <= str3)
  LOG::LogSuccess(message:"EX.F.13 string <=") ;
else
  LOG::LogFailure(message:"EX.F.13 string <=") ;
end if;
// ==
if (str3 == str2)
  LOG::LogSuccess(message:"EX.F.13 string ==") ;
else
  LOG::LogFailure(message:"EX.F.13 string ==") ;
end if;
// !=
if (str3 != str1)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13 string !=") ;
end if;
// >=
if (str3 >= str1)
  LOG::LogSuccess(message:"EX.F.13 string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str3 > str1)
  LOG::LogSuccess(message:"EX.F.13 string >") ;
else
  LOG::LogFailure(message:"EX.F.13 string >") ;
end if;
if (str3 < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13 string < quoted") ;
end if;
//END EX.F.13

//BEGIN EX.F.14
// unique_id == !=
assign u = self.et_id;
if (u == self.et_id)
  LOG::LogSuccess(message:"EX.F.14 unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14 unique ==") ;
end if;

select any oi from instances of OI;
if (self.u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14 unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14 unique !=") ;
end if;
//END EX.F.14

LOG::LogInfo(message:"Finished F3 through F14 Binary Operations") ;

generate ET3:''Run F15 Values''(b:TRUE) to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'Run F15 values',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"66de3709-f47f-7936-40fb-b0d8e7303340");
INSERT INTO SM_AH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	1,
	'// Test all of the data items.
// Data items can be literals, object attributes, received event data items, 
// and transient variables.

LOG::LogInfo(message:"Running F15 values") ;

// Literals and Transient

assign str1 = "Hello";
if (str1 == "Hello")
  LOG::LogSuccess(message:"EX.F.15 left transient, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left transient, right literal") ;
end if;

if ("Hello" == str1)
  LOG::LogSuccess(message:"EX.F.15 left literal, right transient") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right transient") ;
end if;

// Object Attributes

assign self.i = 23;
if (self.i  == 23)
  LOG::LogSuccess(message:"EX.F.15 left self.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left self.attr, right literal") ;
end if;

if (23== self.i)
  LOG::LogSuccess(message:"EX.F.15 left literal, right self.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right self.attr") ;
end if;

create object instance ao of AO;
assign ao.b = FALSE;
if (ao.b == FALSE)
  LOG::LogSuccess(message:"EX.F.15 left other.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;
if (FALSE == ao.b)
  LOG::LogSuccess(message:"EX.F.15 left literal, right other.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right other.attr") ;
end if;

// Received Event 
if (rcvd_evt.b == TRUE)
  LOG::LogSuccess(message:"EX.F.15 left rcvd_evt.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;

if (TRUE == rcvd_evt.b )
  LOG::LogSuccess(message:"EX.F.15  left literal, right rcvd_evt.attr") ;
else 
 LOG::LogFailure(message:"EX.F.15  left literal, right rcvd_evt.attr") ; 
end if;

// Use id attr as an rval
assign this_id = self.et_id;

// use ref attr as an rval
create object instance my_etob of ETOB;
assign my_etob.etob_id = 2;
relate self to my_etob across R1;
assign my_etob_id = self.etob_id * 100;

// use transient from select as an rval
create object instance of ETOB;
select many etobs from instances of ETOB;
for each e_etob in etobs
  assign my_etob = e_etob;
end for;


LOG::LogInfo(message:"Finished F15 values") ;

assign self.i=42;
assign self.r=3.14;
assign self.bfalse=TRUE;
assign self.s="Hello";
generate ET4:''Run F16 Transformers''(i:self.i, r:self.r, b:self.bfalse,s:self.s,u:self.u) to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'Run F16 Transformers',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e");
INSERT INTO SM_AH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	1,
	'
LOG::LogInfo(message:"Running F16 Transformers") ;

// assign predetermined return values.  These will be the values that the coded 
// transforms use as return vals.

assign i_parm_ret_i_val = 42;
assign self.i = i_parm_ret_i_val;
assign r_parm_ret_r_val = 3.14;
assign b_parm_ret_b_val = TRUE;
assign s_parm_ret_s_val = "Hello";
assign u_parm_ret_u_val = rcvd_evt.u; //self.et_id
 
create object instance ao of AO;
assign ao.b = TRUE;

// no_parm_ret_void 
transform ET::no_parm_ret_void();

// i_parm_ret_void
transform ET::i_parm_ret_void(i:self.i);

// i_parm_ret_i
// use sefl.attr as parameter
transform i1 =  ET::i_parm_ret_i(i:self.i);
if (i1 == i_parm_ret_i_val )
  LOG::LogSuccess(message:"EX.F.16 i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 i_parm_ret_i") ;
end if;

// r_parm_ret_r
// use transient as parameter
assign r1 = 3.14;
transform r2 =  ET::r_parm_ret_r(r:r1);
LOG::LogReal(r:r2,message:"EX.F.16: r_parm_ret_r - r should be 3.14");

// b_parm_ret_b
// use attr of other object as parameter
transform b1 =  ET::b_parm_ret_b(b:ao.b);
if (b1 == b_parm_ret_b_val )
  LOG::LogSuccess(message:"EX.F.16 b_parm_ret_b") ;
else 
  LOG::LogFailure(message:"EX.F.16 b_parm_ret_b") ;
end if;

// s_parm_ret_s
// use literal as parm
transform s1 =  ET::s_parm_ret_s(s:"Hello");
if (s1 == s_parm_ret_s_val )
  LOG::LogSuccess(message:"EX.F.16 s_parm_ret_s") ;
else 
  LOG::LogFailure(message:"EX.F.16 s_parm_ret_s") ;
end if;

// u_parm_ret_u
// use received event as parm
transform u1 =  ET::u_parm_ret_u(u:rcvd_evt.u);
if (u1 == u_parm_ret_u_val )
  LOG::LogSuccess(message:"EX.F.16 u_parm_ret_u") ;
else 
  LOG::LogFailure(message:"EX.F.16 u_parm_ret_u") ;
end if;

// d_parm_ret_d

bridge d1 = TIM::create_date(second:30,minute:56,hour:19,day:3,month:1,year:1966);
LOG::LogDate(d:d1,message:"EX.F.16 d_parm_ret_d - d initial value");

bridge t1 = TIM::current_clock();
LOG::LogTime(t:t1,message:"EX.F.16 t_parm_ret_t - t initial value");


transform d2 = ET::d_parm_ret_d(d:d1);
LOG::LogDate(d:d2,message:"EX.F.16 d_parm_ret_d - d ret value");

// t_parm_ret_t

transform t2 = ET::t_parm_ret_t(t:t1);
LOG::LogTime(t:t2,message:"EX.F.16 t_parm_ret_t - t ret value");

// run a simple transform of another object
transform i3 = AO::i_parm_ret_i(i:24);

if (i3 == 24 )
  LOG::LogSuccess(message:"EX.F.16 other obj i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 other obj i_parm_ret_i") ;
end if;

LOG::LogInfo(message:"Finished F16 Transformers") ;

generate ET5:''Run F17 Timestamp and F18 Date Operators''() to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'Shutting Down',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"7bf5a895-ffcd-88e9-2765-12b53ca642d2");
INSERT INTO SM_AH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	1,
	'LOG::LogInfo(message:"a1test_exconfig Expression Test Complete") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'Runnning F17 Timestamp and F18 Date Operators',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"ffc4c4e4-39fe-1812-0376-186008fa5df8");
INSERT INTO SM_AH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	1,
	'
// BEGIN EX.F.17

bridge t1 = TIM::current_clock();

LOG::LogInfo(message:"Starting EX.F.17 and EX.F.18 Test") ;

assign t3 = t1;

transform ET::waitOneSec();
bridge t2 = TIM::current_clock();

if (t1== t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp == timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp == timestamp") ;
end if;

if (t1!= t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp != timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp != timestamp") ;
end if;

if (t1<  t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp < timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp < timestamp") ;
end if;

if (t1<= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp <= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp <= timestamp") ;
end if;

if (t2 > t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp > timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp > timestamp") ;
end if;

if (t1>= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp >= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp >= timestamp") ;
end if;

// END EX.F.17

// BEGIN EX.F.18

LOG::LogInfo(message:"Starting EX.F.18 Testing Date operators") ;


bridge d1 = TIM::current_date();
assign d4 = d1;
bridge d2 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1910);
bridge d3 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1911);

if (d1== d4)
  LOG::LogSuccess(message:"EX.F.18: date == date") ;
else
  LOG::LogFailure(message:"EX.F.18: date == date") ;
end if;

if (d2 != d3)
  LOG::LogSuccess(message:"EX.F.18: date != date") ;
else
  LOG::LogFailure(message:"EX.F.18: date != date") ;
end if;

if (d3<  d1)
  LOG::LogSuccess(message:"EX.F.18: date < date") ;
else
  LOG::LogFailure(message:"EX.F.18: date < date") ;
end if;

if (d1<= d4)
  LOG::LogSuccess(message:"EX.F.18: date <= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date <= date") ;
end if;

if (d1> d2)
  LOG::LogSuccess(message:"EX.F.18: date > date") ;
else
  LOG::LogFailure(message:"EX.F.18: date > date") ;
end if;

if (d1>= d4)
  LOG::LogSuccess(message:"EX.F.18: date >= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date >= date") ;
end if;

LOG::LogInfo(message:"Test EX.F.17 and EX.F.18 complete") ;
generate ET6:''Run F1 and F2 for User Defined Types''() to self;',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'Running F1 and F2 for User Defined Types',
	7,
	0);
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"44d39b91-1d9d-73f9-217a-91556104673f");
INSERT INTO SM_AH
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	1,
	'
LOG::LogInfo(message:"Expression Test F1 and F2 for User Defined Types") ;

//BEGIN EX.F.1_UDT
//check defaults

if (self.my_b != FALSE)
  LOG::LogFailure(message:"EX.F.1_UDT: my_b default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: my_b default") ;
end if;

if (self.my_i != 0)
  LOG::LogFailure(message:"EX.F.1_UDT: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1_UDT: i default") ; 
end if;
LOG::LogReal(r:self.r,message:"EX.F.1_UDT: r default");

if (self.my_s != "")
  LOG::LogFailure(message:"EX.F.1_UDT: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: s default") ;
end if;

//END EX.F.1_UDT

//BEGIN EX.F.2_UDT
//check integer assign

assign self.my_i = 10;
if (self.my_i == 10)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_i assign") ;  
end if;

//check real assign
assign self.my_r = 3.14;
LOG::LogReal(r:3.14,message:"EX.F.2_UDT: my_r assigned to") ;
LOG::LogReal(r:self.my_r,message:"EX.F.2_UDT: my_r assigned is");

//check bool assign
assign self.my_b = TRUE;
if (self.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_b assign") ;  
end if;

//check string assign
assign self.my_s = "String";
if (self.my_s == "String")
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_s assign") ;  
end if;

// check unary not
assign self.my_b = FALSE;
if (not self.my_b)
  LOG::LogSuccess(message:"EX.F.2_UDT: unary not") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: unary not") ;  
end if;  

LOG::LogInfo(message:"Finished F1 and F2 for User Defined Types") ;


//generate event to commence Binary Operations test
generate ET7:''Run F3 through F14 for User Defined Types''() to self;',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'Running F3 through F14 for User Defined Types',
	8,
	0);
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"a6d095bc-384d-5c44-e5c9-f26c6982921e");
INSERT INTO SM_AH
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	1,
	'LOG::LogInfo(message:"Running F3 through F14 for User Defined Types") ;

//BEGIN EX.F.3_UDT
// boolean and, or, ==, and !=

//and
assign self.my_b = TRUE;
assign b2 = FALSE;
if (self.my_b and b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean and") ;
end if;

// or
if (self.my_b or b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean or") ;
end if;

//==
if (self.my_b == b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
end if;

//!=
if (self.my_b != b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
end if;
//END EX.F.3_UDT

//BEGIN EX.F.4_UDT
// integer + - * / %

// +
assign self.my_i = 5;
assign i2 = -6;
assign i3 = self.my_i + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4_UDT integer +") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer +") ;
end if;
//- 
assign i4 = self.my_i - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4_UDT integer -") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer -") ;
end if;
// *
assign i5 = self.my_i*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4_UDT integer *") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/self.my_i;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4_UDT integer /") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%self.my_i;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4_UDT integer %") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer %") ;
end if;
//END EX.F.4_UDT

//BEGIN EX.F.5_UDT
// integer  < <= == != >= >

assign self.my_i = 12;
assign j2 = 6;
assign j3 = 12;
// <
if (j2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <") ;
end if;
// <=
if (j2 <= self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <=") ;
end if;
//==
if (self.my_i == j3)
  LOG::LogSuccess(message:"EX.F.5_UDT integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer ==") ;
end if;
//!=
if (j2 != self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer !=") ;
end if;
//>=
if (self.my_i >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >=") ;
end if;
//>
if (self.my_i > j2)
  LOG::LogSuccess(message:"EX.F.5_UDT integer >") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >") ;
end if;
//END EX.F.5_UDT

//BEGIN EX.F.6_UDT
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = self.my_i + r1;
LOG::LogReal(r:r3,message:"EX.F.6_UDT int real + : r should be -1.0") ;

//- 
assign r4 = self.my_i - r1;
LOG::LogReal(r:r4,message:"EX.F.6_UDT int real - : r should be 11.0") ;

// *
assign r5 = self.my_i*r1;
LOG::LogReal(r:r5,message:"EX.F.6_UDT int real * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = self.my_i/r2;
LOG::LogReal(r:r6,message:"EX.F.6_UDT int real / : r should be 2.0") ;

//END EX.F.6_UDT

//BEGIN EX.F.7_UDT
//  < <= == != >= > int as left operand, real as right, and bool result

assign s1 = 6.0;
assign s2 = 12.0;
assign self.my_i = 6;

// <
if (self.my_i < s2)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <") ;
end if;

// <=
if (self.my_i <= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <=") ;
end if;

//==
if (self.my_i == s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
end if;

assign self.my_i=12;
//!=
if (self.my_i != s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
end if;

//>=
if (self.my_i >= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (self.my_i > s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real >") ;
end if;
//END EX.F.7_UDT

//BEGIN EX.F.8_UDT
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = r1 + self.my_i;
LOG::LogReal(r:r3,message:"EX.F.8_UDT real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - self.my_i;
LOG::LogReal(r:r4,message:"EX.F.8_UDT real int - : r should be -11.0") ;

// *
assign r5 = r1*self.my_i;
LOG::LogReal(r:r5,message:"EX.F.8_UDT real int * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = r2/self.my_i;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8_UDT

//BEGIN EX.F.9_UDT
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign self.my_i = 12;
assign s2 = 6.0;

// <
if (s2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int <") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int <") ;
end if;

// <=
if (s1 <= self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
end if;

assign self.my_i = 6;

//==
if (s2 == self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
end if;

//!=
if (s1 != self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int !=") ;
end if;

//>=
if (s1 >= self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >=") ;
end if;

//>
if (s1 > self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >") ;
end if;

//END EX.F.9_UDT

//BEGIN EX.F.10_UDT
// real + - * / 

// +
assign self.my_r = 5.0;
assign r2 = -6.0;
assign r3 = self.my_r + r2;
LOG::LogReal(r:r3,message:"EX.F.10_UDT real real + : r should be -1.0") ;

//- 
assign r4 = self.my_r - r2;
LOG::LogReal(r:r4,message:"EX.F.10_UDT real real - : r should be 11.0") ;

// *
assign r5 = self.my_r*r2;
LOG::LogReal(r:r5,message:"EX.F.10_UDT real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/self.my_r;
LOG::LogReal(r:r7,message:"EX.F.10_UDT real real / : r should be 2.0") ;

//END EX.F.10_UDT


//BEGIN EX.F.11_UDT
// real  < <= == != >= >

assign self.my_r = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
assign r4=12.0;
// <
if (r2 < self.my_r)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <") ;
end if;
// <=
if (r2 <= self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real <=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <=") ;
end if;
//==
if (self.my_r == r4)
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
else
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
end if;
//!=
if (r2 != self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real !=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real !=") ;
end if;
//>=
if (self.my_r >= r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >=") ;
end if;
//>
if (self.my_r > r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >") ;
end if;
//END EX.F.11_UDT

//BEGIN EX.F.12_UDT
// string string +
assign self.my_s = "Hello";
assign str2 = "World";
assign str3 = self.my_s+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12_UDT string +") ;
else
  LOG::LogFailure(message:"EX.F.12_UDT string +") ;
end if;
//END EX.F.12_UDT

//BEGIN EX.F.13_UDT
//string < <= == != >= >
assign self.my_s = "a";
assign str2 = "b";
assign str3 = "a";
// <
if (self.my_s < str2)
  LOG::LogSuccess(message:"EX.F.13_UDT string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (self.my_s <= str3)
  LOG::LogSuccess(message:"EX.F.13_UDT string <=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string <=") ;
end if;
// ==
if (str3 == self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string ==") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string ==") ;
end if;
// !=
if (str2 != self.my_s)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string !=") ;
end if;
// >=
if (str2 >= self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str2 > self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string >") ;
end if;
if (self.my_s < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string < quoted") ;
end if;
//END EX.F.13_UDT

//BEGIN EX.F.14_UDT
// unique_id == !=
assign self.my_u = self.u;
if (self.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.14_UDT unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique ==") ;
end if;

select any oi from instances of OI;
if (self.my_u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14_UDT unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique !=") ;
end if;
//END EX.F.14_UDT

LOG::LogInfo(message:"Finished F3 through F14 for User Defined Types") ;

generate ET8:''Run F15 for User Defined Types''(my_b:TRUE,my_i:42,my_r:3.14,my_s:"Hello",my_u:self.u) to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'Running F15 for User Defined Types',
	9,
	0);
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"62732e5d-28b5-9f07-a940-5d67dd36859f");
INSERT INTO SM_AH
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	1,
	'LOG::LogInfo(message:"Running F15 for User Defined Types") ;

// Received Event 
if (rcvd_evt.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_b") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_b") ;
end if;

if (rcvd_evt.my_i == 42)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_i") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_i") ;
end if;

LOG::LogReal(message:"EX.F.15_UDT rcvd_evt.attr r",r:rcvd_evt.my_r) ; 

if (rcvd_evt.my_s == "Hello")
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_s") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_s") ;
end if;

if (rcvd_evt.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_u") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_u") ;
end if;

generate ET9:''Shut Down''() to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'Testing empty operator',
	10,
	0);
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"53509702-0f88-6160-ffe2-15f189bfedc8");
INSERT INTO SM_AH
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	1,
	'LOG::LogInfo(message:"Starting Expression Test empty operator") ;

//empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = empty saf0;
if (t1 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (true)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = empty saf1;
if (t2 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (false)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = empty smf0;
if (t3 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (true)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = empty smf1;
if ( t4 == FALSE )
  LOG::LogSuccess(message:"EX.F.2: empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (false)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = empty sar0;
if (t5 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (true)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = empty sar1;
if (t6 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (false)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = empty sor0;
if (t7 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = empty sor1;
if (t8 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = empty smr0;
if (t9 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = empty smr1;
if (t10 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

//generate event to commence next test
generate ET10:''Start not_empty test''() to self;',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'Testing not_empty operator',
	11,
	0);
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"f8088057-232b-66fb-0061-33e178e05cfc");
INSERT INTO SM_AH
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not_empty operator") ;

//not_empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = not_empty saf0;
if (t1 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (false)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = not_empty saf1;
if (t2 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (true)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = not_empty smf0;
if (t3 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (false)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = not_empty smf1;
if ( t4 == TRUE )
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (true)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = not_empty sar0;
if (t5 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (false)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = not_empty sar1;
if (t6 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (true)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = not_empty sor0;
if (t7 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = not_empty sor1;
if (t8 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = not_empty smr0;
if (t9 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = not_empty smr1;
if (t10 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

//generate event to commence next test
generate ET11:''Start cardinality test''() to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'Testing cardinality operator',
	12,
	0);
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"cb78c7eb-12ed-04c2-1946-bbde5bdb763a");
INSERT INTO SM_AH
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	1,
	'LOG::LogInfo(message:"Starting Expression Test cardinality operator") ;

// cardinality operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = cardinality saf0;
if (t1 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (0)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = cardinality saf1;
if (t2 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (1)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = cardinality smf0;
if (t3 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (0)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = cardinality smf1;
if ( t4 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (2)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = cardinality sar0;
if (t5 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (0)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = cardinality sar1;
if (t6 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (1)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = cardinality sor0;
if (t7 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = cardinality sor1;
if (t8 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (1)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = cardinality smr0;
if (t9 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = cardinality smr1;
if (t10 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (2)") ;  
end if;

// generate event to commence next test
generate ET14:''Start subtract test''( tint1:17, tint2:13, treal1:2.781828, treal2:11.2) to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'Testing not operator',
	13,
	0);
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("010e5b79-68d0-bcb1-520c-f74108fb87da",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"0322e5dd-e05f-6d21-2ac2-12a4cfca51e2");
INSERT INTO SM_AH
	VALUES ("010e5b79-68d0-bcb1-520c-f74108fb87da",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("010e5b79-68d0-bcb1-520c-f74108fb87da",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not operator") ;

//not operation
  // local existing 
assign tfalse = false;
assign ttrue = true;
assign t1 = not tfalse;
if (t1 == TRUE)
  LOG::LogSuccess(message:"not local existing (true)") ;  
else
  LOG::LogFailure(message:"not local existing (true)") ;  
end if;

assign t2 = not ttrue;
if (t2 == FALSE)
  LOG::LogSuccess(message:"not local existing (false)") ;
else
  LOG::LogFailure(message:"not local existing (false)") ;
end if;

  // rcvd_evt
assign t3 = not rcvd_evt.tfalse;
if (t3 == TRUE)
  LOG::LogSuccess(message:"not rcvd_evt (true)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (true)") ;
end if;  
 
assign t4 = not rcvd_evt.ttrue;
if (t4 == FALSE)
  LOG::LogSuccess(message:"not rcvd_evt (false)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (false)") ;
end if;
 
  // constant 
assign t5 = not FALSE;
if (t5 == TRUE)
  LOG::LogSuccess(message:"not constant (true)") ;
else
  LOG::LogFailure(message:"not constant (true)") ;
end if;  
 
assign t6 = not TRUE;
if (t6 == FALSE)
  LOG::LogSuccess(message:"not constant (false)") ;
else
  LOG::LogFailure(message:"not constant (false)") ;
end if;
 
  // self.attribute
assign t7 = not self.bfalse;
if (t7 == TRUE)
  LOG::LogSuccess(message:"not self.attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.attribute (true)") ;
end if; 
 
assign t8 = not self.btrue;
if (t8 == FALSE)
  LOG::LogSuccess(message:"not self.attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.attribute (false)") ;
end if;
 
  // self.referential attribute
assign t9 = not self.r1bfalse;
if (t9 == TRUE)
  LOG::LogSuccess(message:"not self.referential attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (true)") ;
end if; 
 
assign t10 = not self.r1btrue;
if (t10 == FALSE)
  LOG::LogSuccess(message:"not self.referential attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (false)") ;
end if;

  // other.attribute (saf)
select any saf1 from instances of ETOB;
assign t11 = not saf1.bfalse;
if (t11 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (true)") ;
end if;
 
assign t12 = not saf1.btrue;
if (t12 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (false)") ;
end if;
 
  // other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  assign t13 = not smf.bfalse;
  if (t13 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (true)") ;
  end if;
 
  assign t14 = not smf.btrue;
  if (t14 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (false)") ;
  end if;
end for;
 
  // other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t15 = not sar1.bfalse;
if (t15 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (true)") ;
end if;
 
assign t16 = not sar1.btrue;
if (t16 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (false)") ;
end if;

  // other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t17 = not sor1.bfalse;
if (t17 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (true)") ;
end if;
 
assign t18 = not sor1.btrue;
if (t18 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (false)") ;
end if;


  // other.attribute (smr)
select many smr1 from instances of ETOB;
for each smr in smr1
  assign t19 = not smr.bfalse;
  if (t19 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (true)") ;
  end if;
 
  assign t20 = not smr.btrue;
  if (t20 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (false)") ;
  end if;
end for;

  // other.referential attribute (saf)
assign t21 = not saf1.r6bfalse;
if (t21 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (true)") ;
end if;
 
assign t22 = not saf1.r6btrue;
if (t22 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (false)") ;
end if;
 
  // other.referential attribute (smf)
for each smf in smf1
  assign t23 = not smf.r6bfalse;
  if (t23 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (true)") ;
  end if;
 
  assign t24 = not smf.r6btrue;
  if (t24 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (false)") ;
  end if;
end for;

  // other.referential attribute (sar)
assign t25 = not sar1.r6bfalse;
if (t25 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (true)") ;
end if;
 
assign t26 = not sar1.r6btrue;
if (t26 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (false)") ;
end if;

  // other.referential attribute (sor)
assign t27 = not sor1.r6bfalse;
if (t27 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (true)") ;
end if;
 
assign t28 = not sor1.r6btrue;
if (t28 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (false)") ;
end if;

  // other.referential attribute (smr)
for each smr in smr1
  assign t29 = not smr.r6bfalse;
  if (t29 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (true)") ;
  end if;
 
  assign t30 = not smr.r6btrue;
  if (t30 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (false)") ;
  end if;
end for;

 
LOG::LogInfo(message:"Finished Expression Test not operator") ;

//generate event to commence next test
generate ET12:''Start empty test''() to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'Testing subtraction operator',
	14,
	0);
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("20d4cebb-d756-0fca-c8ee-b55a7a981de4",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"34f33f82-96ae-a337-98df-f59d249b65ed");
INSERT INTO SM_AH
	VALUES ("20d4cebb-d756-0fca-c8ee-b55a7a981de4",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("20d4cebb-d756-0fca-c8ee-b55a7a981de4",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	1,
	'LOG::LogInfo(message:"Starting subtract test") ;
select any event_instance from instances of EV;
//subtraction (-) operation
// perform each test combination with the following types:
     // integer integer
     // integer real
     // real integer
     // real real

  // local existing    local existing
assign temp1 = 13;
assign temp2 = 7;
assign temp3 = 2.4;
assign temp4 = 23.7;
assign t1 = temp1 - temp2 ;
if ( t1 == 6 )
  LOG::LogSuccess(message:" subtract local_existing local_existing ( 6 )") ;
else
  LOG::LogFailure(message:" subtract local_existing local_existing ( 6 )") ;
end if;
 
assign t2 = temp1 - temp3 ;
LOG::LogReal(r: t2 , message:" subtract local_existing local_existing ( 10.6 )") ;
 
assign t3 = temp3 - temp2 ;
LOG::LogReal(r: t3 , message:" subtract local_existing local_existing ( -4.6 )") ;
 
assign t4 = temp4 - temp3 ;
LOG::LogReal(r: t4 , message:" subtract local_existing local_existing ( 21.3 )") ;
 
  // local existing    rcvd_evt
// assume
// rcvd_evt.tint1 = 17
// rcvd_evt.treal1 = 2.781828
assign t5 = temp1 - rcvd_evt.tint1 ;
if ( t5 == -4 )
  LOG::LogSuccess(message:" subtract local_existing rcvd_evt ( -4 )") ;
else
  LOG::LogFailure(message:" subtract local_existing rcvd_evt ( -4 )") ;
end if;
 
assign t6 = temp1 - rcvd_evt.treal1 ;
LOG::LogReal(r: t6 , message:" subtract local_existing rcvd_evt ( 10.218172 )") ;
 
assign t7 = temp3 - rcvd_evt.tint1 ;
LOG::LogReal(r: t7 , message:" subtract local_existing rcvd_evt ( -14.6 )") ;
 
assign t8 = temp4 - rcvd_evt.treal1 ;
LOG::LogReal(r: t8 , message:" subtract local_existing rcvd_evt ( 20.918172 )") ;
 
  // local existing    constant
assign t9 = temp1 - 3 ;
if ( t9 == 10 )
  LOG::LogSuccess(message:" subtract local_existing constant ( 10 )") ;
else
  LOG::LogFailure(message:" subtract local_existing constant ( 10 )") ;
end if;
 
assign t10 = temp1 - 3.14 ;
LOG::LogReal(r: t10 , message:" subtract local_existing constant ( 9.86 )") ;
 
assign t11 = temp3 - 5.6 ;
LOG::LogReal(r: t11 , message:" subtract local_existing constant ( -3.2 )") ;
 
assign t12 = temp4 - 16.9 ;
LOG::LogReal(r: t12 , message:" subtract local_existing constant ( 6.8 )") ;
 
  // local existing    self.attribute
// assume self.i = 10
// assume self.r = 3.14
assign t13 = temp1 - self.i ;
if ( t13 == 3 )
  LOG::LogSuccess(message:" subtract local_existing self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.attribute ( 3 )") ;
end if;
 
assign t14 = temp1 - self.r ;
LOG::LogReal(r: t14 , message:" subtract local_existing self.attribute ( 9.86 )") ;
 
assign t15 = temp3 - self.i ;
LOG::LogReal(r: t15 , message:" subtract local_existing self.attribute ( -7.6 )") ;
 
assign t16 = temp4 - self.r ;
LOG::LogReal(r: t16 , message:" subtract local_existing self.attribute ( 20.56 )") ;
 
  // local existing    self.referential attribute
assign t17 = temp1 - self.etob_id ;
if ( t17 == 11 )
  LOG::LogSuccess(message:" subtract local_existing self.referential_attribute ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.referential_attribute ( 11 )") ;
end if;
 
assign t18 = temp1 - self.r1r ;
LOG::LogReal(r: t18 , message:" subtract local_existing self.referential_attribute ( 10.8282 )") ;
 
assign t19 = temp3 - self.etob_id ;
LOG::LogReal(r: t19 , message:" subtract local_existing self.referential_attribute ( 0.4 )") ;
 
assign t20 = temp4 - self.r1r ;
LOG::LogReal(r: t20 , message:" subtract local_existing self.referential_attribute ( 21.5282 )") ;
 
  // local existing    other.attribute (saf)
select any saf1 from instances of ETOB;
assign t21 = temp1 - saf1.etob_id ;
if ( t21 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
end if;
 
assign t22 = temp1 - saf1.r ;
LOG::LogReal(r: t22 , message:" subtract local_existing other.attribute(saf) ( 10.8282 )") ;
 
assign t23 = temp3 - saf1.etob_id ;
LOG::LogReal(r: t23 , message:" subtract local_existing other.attribute(saf) ( 0.4 )") ;
 
assign t24 = temp4 - saf1.r ;
LOG::LogReal(r: t24 , message:" subtract local_existing other.attribute(saf) ( 21.5282 )") ;
 
  // local existing    other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t25 = temp1 - smf.etob_id ;
if ( t25 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
end if;
 
assign t26 = temp1 - smf.r ;
LOG::LogReal(r: t26 , message:" subtract local_existing other.attribute(smf) ( 10.8282 )") ;
 
assign t27 = temp3 - smf.etob_id ;
LOG::LogReal(r: t27 , message:" subtract local_existing other.attribute(smf) ( 0.4 )") ;
 
assign t28 = temp4 - smf.r ;
LOG::LogReal(r: t28 , message:" subtract local_existing other.attribute(smf) ( 21.5282 )") ;
 
  // only do this once
  end if;
end for;
  // local existing    other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t29 = temp1 - sor1.etob_id ;
if ( t29 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
end if;
 
assign t30 = temp1 - sor1.r ;
LOG::LogReal(r: t30 , message:" subtract local_existing other.attribute(sor) ( 10.8282 )") ;
 
assign t31 = temp3 - sor1.etob_id ;
LOG::LogReal(r: t31 , message:" subtract local_existing other.attribute(sor) ( 0.4 )") ;
 
assign t32 = temp4 - sor1.r ;
LOG::LogReal(r: t32 , message:" subtract local_existing other.attribute(sor) ( 21.5282 )") ;
 
  // local existing    other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t33 = temp1 - sar1.etob_id ;
if ( t33 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
end if;
 
assign t34 = temp1 - sar1.r ;
LOG::LogReal(r: t34 , message:" subtract local_existing other.attribute(sar) ( 10.8282 )") ;
 
assign t35 = temp3 - sar1.etob_id ;
LOG::LogReal(r: t35 , message:" subtract local_existing other.attribute(sar) ( 0.4 )") ;
 
assign t36 = temp4 - sar1.r ;
LOG::LogReal(r: t36 , message:" subtract local_existing other.attribute(sar) ( 21.5282 )") ;
 
  // local existing    other.attribute (smr)
select many smr1 related by self->ETOB[R8];
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t37 = temp1 - smr.etob_id ;
if ( t37 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
end if;
 
assign t38 = temp1 - smr.r ;
LOG::LogReal(r: t38 , message:" subtract local_existing other.attribute(smr) ( 10.8282 )") ;
 
assign t39 = temp3 - smr.etob_id ;
LOG::LogReal(r: t39 , message:" subtract local_existing other.attribute(smr) ( 0.4 )") ;
 
assign t40 = temp4 - smr.r ;
LOG::LogReal(r: t40 , message:" subtract local_existing other.attribute(smr) ( 21.5282 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 - saf1.etoc_id ;
if ( t41 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
end if;
 
assign t42 = temp1 - saf1.r6r ;
LOG::LogReal(r: t42 , message:" subtract local_existing other.referential_attribute(saf) ( 1.689 )") ;
 
assign t43 = temp3 - saf1.etoc_id ;
LOG::LogReal(r: t43 , message:" subtract local_existing other.referential_attribute(saf) ( -1.6 )") ;
 
assign t44 = temp4 - saf1.r6r ;
LOG::LogReal(r: t44 , message:" subtract local_existing other.referential_attribute(saf) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smf)
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t45 = temp1 - smf.etoc_id ;
if ( t45 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
end if;
 
assign t46 = temp1 - smf.r6r ;
LOG::LogReal(r: t46 , message:" subtract local_existing other.referential_attribute(smf) ( 1.689 )") ;
 
assign t47 = temp3 - smf.etoc_id ;
LOG::LogReal(r: t47 , message:" subtract local_existing other.referential_attribute(smf) ( -1.6 )") ;
 
assign t48 = temp4 - smf.r6r ;
LOG::LogReal(r: t48 , message:" subtract local_existing other.referential_attribute(smf) ( 12.389 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 - sor1.etoc_id ;
if ( t49 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
end if;
 
assign t50 = temp1 - sor1.r6r ;
LOG::LogReal(r: t50 , message:" subtract local_existing other.referential_attribute(sor) ( 1.689 )") ;
 
assign t51 = temp3 - sor1.etoc_id ;
LOG::LogReal(r: t51 , message:" subtract local_existing other.referential_attribute(sor) ( -1.6 )") ;
 
assign t52 = temp4 - sor1.r6r ;
LOG::LogReal(r: t52 , message:" subtract local_existing other.referential_attribute(sor) ( 12.389 )") ;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 - sar1.etoc_id ;
if ( t53 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
end if;
 
assign t54 = temp1 - sar1.r6r ;
LOG::LogReal(r: t54 , message:" subtract local_existing other.referential_attribute(sar) ( 1.689 )") ;
 
assign t55 = temp3 - sar1.etoc_id ;
LOG::LogReal(r: t55 , message:" subtract local_existing other.referential_attribute(sar) ( -1.6 )") ;
 
assign t56 = temp4 - sar1.r6r ;
LOG::LogReal(r: t56 , message:" subtract local_existing other.referential_attribute(sar) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smr)
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t57 = temp1 - smr.etoc_id ;
if ( t57 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
end if;
 
assign t58 = temp1 - smr.r6r ;
LOG::LogReal(r: t58 , message:" subtract local_existing other.referential_attribute(smr) ( 1.689 )") ;
 
assign t59 = temp3 - smr.etoc_id ;
LOG::LogReal(r: t59 , message:" subtract local_existing other.referential_attribute(smr) ( -1.6 )") ;
 
assign t60 = temp4 - smr.r6r ;
LOG::LogReal(r: t60 , message:" subtract local_existing other.referential_attribute(smr) ( 12.389 )") ;
 
  end if;
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tint1 - temp1 ;
if ( t61 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt local_existing ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt local_existing ( 4 )") ;
end if;
 
assign t62 = rcvd_evt.tint1 - temp3 ;
LOG::LogReal(r: t62 , message:" subtract rcvd_evt local_existing ( 14.6 )") ;
 
assign t63 = rcvd_evt.treal1 - temp1 ;
LOG::LogReal(r: t63 , message:" subtract rcvd_evt local_existing ( -10.218172 )") ;
 
assign t64 = rcvd_evt.treal1 - temp3 ;
LOG::LogReal(r: t64 , message:" subtract rcvd_evt local_existing ( 0.381828 )") ;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tint1 - rcvd_evt.tint2 ;
if ( t65 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
end if;
 
assign t66 = rcvd_evt.tint1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t66 , message:" subtract rcvd_evt rcvd_evt ( 5.8 )") ;
 
assign t67 = rcvd_evt.treal1 - rcvd_evt.tint2 ;
LOG::LogReal(r: t67 , message:" subtract rcvd_evt rcvd_evt ( -10.218172 )") ;
 
assign t68 = rcvd_evt.treal1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t68 , message:" subtract rcvd_evt rcvd_evt ( -8.418172 )") ;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tint1 - 1 ;
if ( t69 == 16 )
  LOG::LogSuccess(message:" subtract rcvd_evt constant ( 16 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt constant ( 16 )") ;
end if;
 
assign t70 = rcvd_evt.tint1 - 1.0 ;
LOG::LogReal(r: t70 , message:" subtract rcvd_evt constant ( 16.0 )") ;
 
assign t71 = rcvd_evt.treal1 - 1 ;
LOG::LogReal(r: t71 , message:" subtract rcvd_evt constant ( 1.781828 )") ;
 
assign t72 = rcvd_evt.treal1 - 0.5 ;
LOG::LogReal(r: t72 , message:" subtract rcvd_evt constant ( 2.281828 )") ;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tint1 - self.i ;
if ( t73 == 7 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.attribute ( 7 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.attribute ( 7 )") ;
end if;
 
assign t74 = rcvd_evt.tint1 - self.r ;
LOG::LogReal(r: t74 , message:" subtract rcvd_evt self.attribute ( 13.86 )") ;
 
assign t75 = rcvd_evt.treal1 - self.i ;
LOG::LogReal(r: t75 , message:" subtract rcvd_evt self.attribute ( -7.218172 )") ;
 
assign t76 = rcvd_evt.treal1 - self.r ;
LOG::LogReal(r: t76 , message:" subtract rcvd_evt self.attribute ( -0.358172 )") ;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tint1 - self.etob_id ;
if ( t77 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
end if;
 
assign t78 = rcvd_evt.tint1 - self.r1r ;
LOG::LogReal(r: t78 , message:" subtract rcvd_evt self.referential_attribute ( 14.8282 )") ;
 
assign t79 = rcvd_evt.treal1 - self.etob_id ;
LOG::LogReal(r: t79 , message:" subtract rcvd_evt self.referential_attribute ( 0.781828 )") ;
 
assign t80 = rcvd_evt.treal1 - self.r1r ;
LOG::LogReal(r: t80 , message:" subtract rcvd_evt self.referential_attribute ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tint1 - saf1.etob_id ;
if ( t81 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
end if;
 
assign t82 = rcvd_evt.tint1 - saf1.r ;
LOG::LogReal(r: t82 , message:" subtract rcvd_evt other.attribute(saf) ( 14.8282 )") ;
 
assign t83 = rcvd_evt.treal1 - saf1.etob_id ;
LOG::LogReal(r: t83 , message:" subtract rcvd_evt other.attribute(saf) ( 0.781828 )") ;
 
assign t84 = rcvd_evt.treal1 - saf1.r ;
LOG::LogReal(r: t84 , message:" subtract rcvd_evt other.attribute(saf) ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (smf)
  // rcvd_evt    other.attribute (sor)
  // rcvd_evt    other.attribute (sar)
  // rcvd_evt    other.attribute (smr)
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tint1 - saf1.etoc_id ;
if ( t101 == 13 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
  // rcvd_evt    other.referential attribute (sor)
  // rcvd_evt    other.referential attribute (sar)
  // rcvd_evt    other.referential attribute (smr)
  // constant    local existing
assign t121 = 27 - temp1 ;
if ( t121 == 14 )
  LOG::LogSuccess(message:" subtract constant local_existing ( 14 )") ;
else
  LOG::LogFailure(message:" subtract constant local_existing ( 14 )") ;
end if;
 
  // constant    rcvd_evt
assign t126 = 27 - rcvd_evt.treal2 ;
LOG::LogReal(r: t126 , message:" subtract constant rcvd_evt ( 15.8 )") ;
 
  // constant    constant
assign t131 = 14.3 - 5 ;
LOG::LogReal(r: t131 , message:" subtract constant constant ( 9.3 )") ;
 
  // constant    self.attribute
assign t136 = 14.3 - self.r ;
LOG::LogReal(r: t136 , message:" subtract constant self.attribute ( 11.16 )") ;
 
  // constant    self.referential attribute
assign t137 = 27 - self.etob_id ;
if ( t137 == 25 )
  LOG::LogSuccess(message:" subtract constant self.referential_attribute ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant self.referential_attribute ( 25 )") ;
end if;
 
  // constant    other.attribute (saf)
assign t141 = 27 - saf1.etob_id ;
if ( t141 == 25 )
  LOG::LogSuccess(message:" subtract constant other.attribute(saf) ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant other.attribute(saf) ( 25 )") ;
end if;
 
  // constant    other.attribute (smf)
  // constant    other.attribute (sor)
  // constant    other.attribute (sar)
  // constant    other.attribute (smr)
  // constant    other.referential attribute (saf)
assign t161 = 27 - saf1.etoc_id ;
if ( t161 == 23 )
  LOG::LogSuccess(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
else
  LOG::LogFailure(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
end if;
 
  // constant    other.referential attribute (smf)
  // constant    other.referential attribute (sor)
  // constant    other.referential attribute (sar)
  // constant    other.referential attribute (smr)
  // self.attribute    local existing
assign t181 = self.i - temp1 ;
if ( t181 == -3 )
  LOG::LogSuccess(message:" subtract self.attribute local_existing ( -3 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute local_existing ( -3 )") ;
end if;
 
  // self.attribute    rcvd_evt
assign t186 = self.i - rcvd_evt.treal2 ;
LOG::LogReal(r: t186 , message:" subtract self.attribute rcvd_evt ( -1.2 )") ;
 
  // self.attribute    constant
assign t191 = self.r - 2 ;
LOG::LogReal(r: t191 , message:" subtract self.attribute constant ( 1.14 )") ;
 
  // self.attribute    self.attribute
assign t196 = self.i - self.r ;
LOG::LogReal(r: t196 , message:" subtract self.attribute self.attribute ( 6.86 )") ;
 
  // self.attribute    self.referential attribute
assign t197 = self.i - self.etob_id ;
if ( t197 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.i - saf1.etob_id ;
if ( t201 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (smf)
  // self.attribute    other.attribute (sor)
  // self.attribute    other.attribute (sar)
  // self.attribute    other.attribute (smr)
  // self.attribute    other.referential attribute (saf)
assign t221 = self.i - saf1.etoc_id ;
if ( t221 == 6 )
  LOG::LogSuccess(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
  // self.attribute    other.referential attribute (sor)
  // self.attribute    other.referential attribute (sar)
  // self.attribute    other.referential attribute (smr)
  // self.referential attribute    local existing
assign t241 = self.etob_id - temp1 ;
if ( t241 == -11 )
  LOG::LogSuccess(message:" subtract self.referential_attribute local_existing ( -11 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute local_existing ( -11 )") ;
end if;
 
  // self.referential attribute    rcvd_evt
assign t246 = self.etob_id - rcvd_evt.treal2 ;
LOG::LogReal(r: t246 , message:" subtract self.referential_attribute rcvd_evt ( -9.2 )") ;
 
  // self.referential attribute    constant
assign t251 = self.r1r - 2 ;
LOG::LogReal(r: t251 , message:" subtract self.referential_attribute constant ( 0.1718 )") ;
 
  // self.referential attribute    self.attribute
assign t256 = self.r1r - self.r ;
LOG::LogReal(r: t256 , message:" subtract self.referential_attribute self.attribute ( -0.9682 )") ;
 
  // self.referential attribute    self.referential attribute
assign t258 = self.etob_id - self.r1r ;
LOG::LogReal(r: t258 , message:" subtract self.referential_attribute self.referential_attribute ( -0.1718 )") ;
 
  // self.referential attribute    other.attribute (saf)
assign t261 = self.etob_id - saf1.etob_id ;
if ( t261 == 0 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
end if;
 
  // self.referential attribute    other.attribute (smf)
  // self.referential attribute    other.attribute (sor)
  // self.referential attribute    other.attribute (sar)
  // self.referential attribute    other.attribute (smr)
  // self.referential attribute    other.referential attribute (saf)
assign t281 = self.etob_id - saf1.etoc_id ;
if ( t281 == -2 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
end if;
 
  // self.referential attribute    other.referential attribute (smf)
  // self.referential attribute    other.referential attribute (sor)
  // self.referential attribute    other.referential attribute (sar)
  // self.referential attribute    other.referential attribute (smr)
  // other.attribute (saf)    local existing
  // other.attribute (saf)    rcvd_evt
  // other.attribute (saf)    constant
  // other.attribute (saf)    self.attribute
  // other.attribute (saf)    self.referential attribute
  // other.attribute (saf)    other.attribute (saf)
  // other.attribute (saf)    other.attribute (smf)
  // other.attribute (saf)    other.attribute (sor)
  // other.attribute (saf)    other.attribute (sar)
  // other.attribute (saf)    other.attribute (smr)
  // other.attribute (saf)    other.referential attribute (saf)
  // other.attribute (saf)    other.referential attribute (smf)
  // other.attribute (saf)    other.referential attribute (sor)
  // other.attribute (saf)    other.referential attribute (sar)
  // other.attribute (saf)    other.referential attribute (smr)
  // other.attribute (smf)    local existing
  // other.attribute (smf)    rcvd_evt
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    rcvd_evt
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    rcvd_evt
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    rcvd_evt
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
  // other.referential attribute (saf)    rcvd_evt
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    rcvd_evt
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    rcvd_evt
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    rcvd_evt
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    rcvd_evt
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed subtract test") ;

//generate event to commence next test
bridge d = TIM::current_date();
bridge ts = TIM::current_clock();
create event instance evinst of EV1:''Event Instance''(message:"timer event 1.2")  to event_instance;
bridge tim = TIM::timer_start ( microseconds:1000000, event_inst:evinst);
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: d, ts: ts, tim:tim, ev:evinst) to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'Testing assign',
	15,
	0);
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("41f79c56-f056-3986-d3df-03d4ffc4da45",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6");
INSERT INTO SM_AH
	VALUES ("41f79c56-f056-3986-d3df-03d4ffc4da45",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("41f79c56-f056-3986-d3df-03d4ffc4da45",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	1,
	'LOG::LogInfo(message:"Starting assign test") ;
select any event_instance from instances of EV;
// Assign operation

  // boolean
assign t1 = true;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_initial constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( true )") ;
end if;
 
assign t2 = false;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_initial constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( false )") ;
end if;
 
  // integer
assign t3 = 5;
if ( t3 == 5 )
  LOG::LogSuccess(message:"assign local_initial constant ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( 5 )") ;
end if;
 
  // real
assign t4 = 16.98;
LOG::LogInfo( message:"assign local_initial constant ( 16.98 )") ;
 
  // string
assign t5 = "hissy";
if ( t5 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial constant ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( hissy )") ;
end if;

  // boolean
assign t6 = t1;
if ( t6 == true )
  LOG::LogSuccess(message:"assign local_initial local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( true )") ;
end if;
 
assign t7 = t2;
if ( t7 == false )
  LOG::LogSuccess(message:"assign local_initial local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( false )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 5 )
  LOG::LogSuccess(message:"assign local_initial local_existing ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( 5 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_initial local_existing ( 16.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial local_existing ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( hissy )") ;
end if;

// unique_id
assign temp_unique_id = self.u;
assign t11 = temp_unique_id;
if ( t11 == self.u )
  LOG::LogSuccess(message:"assign local_initial local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( self.u )") ;
end if;
 
  // date
bridge temp_date = TIM::create_date(second:30, minute:56, hour:19, day:3, month:1, year:1966);
assign t12 = temp_date;
LOG::LogDate(d:t12, message:"assign local_initial local_existing ( 3/1/1996 19:56:30 )");

  // timestamp
bridge temp_timestamp = TIM::current_clock();
assign t13 = temp_timestamp;
LOG::LogTime(t:t13, message:"assign local_initial local_existing ( )");

  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event")to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t14 = temp_timer;
if ( t14 == temp_timer )
  LOG::LogSuccess(message:"assign local_initial local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t15 = ev_inst1;
LOG::LogInfo( message:"assign local_initial local_existing ( LOG1(timer event) )") ;

  // inst_ref<Object>
select any none from instances of NOI;
assign t16 = none;
if ( t16 == none )
  LOG::LogSuccess(message:"assign local_initial local_existing ( none )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( none )") ;
end if;
 
select any inst from instances of OI;
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_initial local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( inst )") ;
end if;

// This is a special test case to verify that usage of 
// local variables of type inst_ref<Object> generate code
// without any error messages.  See the bp issue 659. 
assign t17b = self;
relate t17 to t17b across R3;
unrelate t17b from t17 across R3;

  // boolean
assign t19 = rcvd_evt.ttrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( true )") ;
end if;
 
assign t20 = rcvd_evt.tfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( false )") ;
end if;
 
  // integer
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( fit )") ;
end if;

  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst<Event>
assign t28 = rcvd_evt.ev;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( LOG1(timer event) )") ;

  // boolean
assign t29 = self.bfalse;
if ( t29 == false )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( false )") ;
end if;
 
assign t30 = self.btrue;
if ( t30 == true )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( true )") ;
end if;
 
  // integer
assign t31 = self.i;
if ( t31 == 10 )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( 10 )") ;
end if;
 
  // real
assign t32 = self.r;
LOG::LogInfo( message:"assign local_initial self.attribute ( 3.14 )") ;
 
  // string
assign t33 = self.s;
if ( t33 == "String" )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( String )") ;
end if;

  // unique_id
assign t34 = self.u;
if ( t34 == self.u )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.u )") ;
end if;
 
  // date
bridge self.d = TIM::create_date(second:31, minute:51, hour:18, day:4, month:4, year:1970);
assign t35 = self.d;
LOG::LogDate(d:t35, message:"assign local_initial self.attribute ( 4/4/1970 18:51:31 )");

  // timestamp
assign t36a = self.t;
LOG::LogTime(t:t36a, message:"assign local_initial self.attribute ( 0 )");
bridge self.t = TIM::current_clock();
assign t36b = self.t;
LOG::LogTime(t:t36b, message:"assign local_initial self.attribute ( current_time )") ;

  // inst_ref<Timer>
create event instance temp_ev of EV1:''Event Instance''(message:"timer event") to event_instance;
assign self.ev = temp_ev;
bridge self.tim = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t37 = self.tim;
if ( t37 == self.tim )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t38 = self.ev;
LOG::LogInfo( message:"assign local_initial self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t39 = self.r1btrue;
if ( t39 == true )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( true )") ;
end if;
 
assign t40 = self.r1bfalse;
if ( t40 == false )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( false )") ;
end if;
 
  // integer
assign t41 = self.etob_id;
if ( t41 == 2 )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t42 = self.r1r;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t43 = self.r1s;
if ( t43 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t44 = self.r1u;
if ( t44 == self.r1u )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t45 = self.r1d;
LOG::LogDate(d:t45, message:"assign local_initial self.referential_attribute ( 8/9/1991 13:07:17 )");

  // timestamp
assign t46 = self.r1t;
LOG::LogTime(t:t46, message:"assign local_initial self.referential_attribute ( 0 )");

  // inst_ref<Timer>
assign t47 = self.r1tim;
if ( t47 == self.r1tim )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t48 = self.r1ev;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( LOG1(timer event) )") ;

select any saf from instances of ETOB;
  // boolean
assign t49 = saf.btrue;
if ( t49 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( true )") ;
end if;
 
assign t50 = saf.bfalse;
if ( t50 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign t51 = saf.etob_id;
if ( t51 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t52 = saf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t53 = saf.s;
if ( t53 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t54 = saf.u;
if ( t54 == saf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t55 = saf.d;
LOG::LogDate(d:t55, message:"assign local_initial other.attribute(saf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t56 = saf.t;
LOG::LogTime(t:t56, message:"assign local_initial other.attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t57 = saf.tim;
if ( t57 == saf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t58 = saf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( LOG1(timer event) )") ;

select many smfs from instances of ETOB;
for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t59 = smf.btrue;
if ( t59 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( true )") ;
end if;
 
assign t60 = smf.bfalse;
if ( t60 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t61 = smf.etob_id;
if ( t61 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t62 = smf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t63 = smf.s;
if ( t63 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t64 = smf.u;
if ( t64 == smf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t65 = smf.d;
LOG::LogDate(d:t65, message:"assign local_initial other.attribute(smf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t66 = smf.t;
LOG::LogTime(t:t66, message:"assign local_initial other.attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t67 = smf.tim;
if ( t67 == smf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign t68 = smf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( LOG1(timer event) )") ;

  end if;
end for;

select one sor related by self->ETOB[R1];
  // boolean
assign t69 = sor.btrue;
if ( t69 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( true )") ;
end if;
 
assign t70 = sor.bfalse;
if ( t70 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( false )") ;
end if;
 
  // integer
assign t71 = sor.etob_id;
if ( t71 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( 2 )") ;
end if;
 
  // real
assign t72 = sor.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( 2.1718 )") ;
 
  // string
assign t73 = sor.s;
if ( t73 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
end if;
  // unique_id
assign t74 = sor.u;
if ( t74 == sor.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
end if;
 
  // date
assign t75 = sor.d;
LOG::LogDate(d:t75, message:"assign local_initial other.attribute(sor) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t76 = sor.t;
LOG::LogTime(t:t76, message:"assign local_initial other.attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t77 = sor.tim;
if ( t77 == sor.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
end if;
 
  // inst<Event>
assign t78 = sor.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( LOG1(timer event) )") ;

select any sar related by self->ETOB[R8];
  // boolean
assign t79 = sar.btrue;
if ( t79 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( true )") ;
end if;
 
assign t80 = sar.bfalse;
if ( t80 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( false )") ;
end if;
 
  // integer
assign t81 = sar.etob_id;
if ( t81 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( 2 )") ;
end if;
 
  // real
assign t82 = sar.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( 2.1718 )") ;
 
  // string
assign t83 = sar.s;
if ( t83 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
end if;
  // unique_id
assign t84 = sar.u;
if ( t84 == sar.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
end if;
 
  // date
assign t85 = sar.d;
LOG::LogDate(d:t85, message:"assign local_initial other.attribute(sar) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t86 = sar.t;
LOG::LogTime(t:t86, message:"assign local_initial other.attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t87 = sar.tim;
if ( t87 == sar.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
end if;
 
  // inst<Event>
assign t88 = sar.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( LOG1(timer event) )") ;

select many smrs related by self->ETOB[R8];
for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t89 = smr.btrue;
if ( t89 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( true )") ;
end if;
 
assign t90 = smr.bfalse;
if ( t90 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( false )") ;
end if;
 
  // integer
assign t91 = smr.etob_id;
if ( t91 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( 2 )") ;
end if;
 
  // real
assign t92 = smr.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( 2.1718 )") ;
 
  // string
assign t93 = smr.s;
if ( t93 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
end if;
  // unique_id
assign t94 = smr.u;
if ( t94 == smr.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
end if;
 
  // date
assign t95 = smr.d;
LOG::LogDate(d:t95, message:"assign local_initial other.attribute(smr) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t96 = smr.t;
LOG::LogTime(t:t96, message:"assign local_initial other.attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t97 = smr.tim;
if ( t97 == smr.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
end if;
 
  // inst<Event>
assign t98 = smr.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t99 = saf.r6btrue;
if ( t99 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
end if;
 
assign t100 = saf.r6bfalse;
if ( t100 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
end if;
 
  // integer
assign t101 = saf.etoc_id;
if ( t101 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
end if;
 
  // real
assign t102 = saf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( 11.311 )") ;
 
  // string
assign t103 = saf.r6s;
if ( t103 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
end if;
  // unique_id
assign t104 = saf.r6u;
if ( t104 == saf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
end if;
 
  // date
assign t105 = saf.r6d;
LOG::LogDate(d:t105, message:"assign local_initial other.referential_attribute(saf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t106 = saf.r6t;
LOG::LogTime(t:t106, message:"assign local_initial other.referential_attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t107 = saf.r6tim;
if ( t107 == saf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
end if;
 
  // inst<Event>
assign t108 = saf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if (smf.etob_id == 2)
  // boolean
assign t119 = smf.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( true )") ;
end if;
 
assign t110 = smf.r6bfalse;
if ( t110 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( false )") ;
end if;
 
  // integer
assign t111 = smf.etoc_id;
if ( t111 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( 4 )") ;
end if;
 
  // real
assign t112 = smf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute ( 11.311 )") ;
 
  // string
assign t113 = smf.r6s;
if ( t113 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
end if;
  // unique_id
assign t114 = smf.r6u;
if ( t114 == smf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
end if;
 
  // date
assign t115 = smf.r6d;
LOG::LogDate(d:t115, message:"assign local_initial other.referential_attribute(smf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t116 = smf.r6t;
LOG::LogTime(t:t116, message:"assign local_initial other.referential_attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t117 = smf.r6tim;
if ( t117 == smf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
end if;
 
  // inst<Event>
assign t118 = smf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smf) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t119 = sor.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
end if;
 
assign t120 = sor.r6bfalse;
if ( t120 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
end if;
 
  // integer
assign t121 = sor.etoc_id;
if ( t121 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
end if;
 
  // real
assign t122 = sor.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( 11.311 )") ;
 
  // string
assign t123 = sor.r6s;
if ( t123 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
end if;
  // unique_id
assign t124 = sor.r6u;
if ( t124 == sor.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
end if;
 
  // date
assign t125 = sor.r6d;
LOG::LogDate(d:t125, message:"assign local_initial other.referential_attribute(sor) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t126 = sor.r6t;
LOG::LogTime(t:t126, message:"assign local_initial other.referential_attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t127 = sor.r6tim;
if ( t127 == sor.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
end if;
 
  // inst<Event>
assign t128 = sor.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( LOG1(timer event) )") ;

  // boolean
assign t129 = sar.r6btrue;
if ( t129 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
end if;
 
assign t130 = sar.r6bfalse;
if ( t130 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
end if;
 
  // integer
assign t131 = sar.etoc_id;
if ( t131 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
end if;
 
  // real
assign t132 = sar.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( 11.311 )") ;
 
  // string
assign t133 = sar.r6s;
if ( t133 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
end if;
  // unique_id
assign t134 = sar.r6u;
if ( t134 == sar.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
end if;
 
  // date
assign t135 = sar.r6d;
LOG::LogDate(d:t135, message:"assign local_initial other.referential_attribute(sar) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t136 = sar.r6t;
LOG::LogTime(t:t136, message:"assign local_initial other.referential_attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t137 = sar.r6tim;
if ( t137 == sar.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
end if;
 
  // inst<Event>
assign t138 = sar.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( LOG1(timer event) )") ;

for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t139 = smr.r6btrue;
if ( t139 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
end if;
 
assign t140 = smr.r6bfalse;
if ( t140 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
end if;
 
  // integer
assign t141 = smr.etoc_id;
if ( t141 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
end if;
 
  // real
assign t142 = smr.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( 11.311 )") ;
 
  // string
assign t143 = smr.r6s;
if ( t143 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
end if;
  // unique_id
assign t144 = smr.r6u;
if ( t144 == smr.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
end if;
 
  // date
assign t145 = smr.r6d;
LOG::LogDate(d:t145, message:"assign local_initial other.referential_attribute(smr) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t146 = smr.r6t;
LOG::LogTime(t:t146, message:"assign local_initial other.referential_attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t147 = smr.r6tim;
if ( t147 == smr.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
end if;
 
  // inst<Event>
assign t148 = smr.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;


  // boolean
assign t1 = false;
if ( t1 == false )
  LOG::LogSuccess(message:"assign local_existing constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( false )") ;
end if;
 
assign t2 = true;
if ( t2 == true )
  LOG::LogSuccess(message:"assign local_existing constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( true )") ;
end if;
 
  // integer
assign t3 = 7;
if ( t3 == 7 )
  LOG::LogSuccess(message:"assign local_existing constant ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( 7 )") ;
end if;
 
  // real
assign t4 = 96.98;
LOG::LogInfo( message:"assign local_existing constant ( 96.98 )") ;
 
  // string
assign t5 = "fussy";
if ( t5 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing constant ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( fussy )") ;
end if;

  // boolean
assign t2 = t7;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( false )") ;
end if;
 
assign t1 = t6;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( true )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 7 )
  LOG::LogSuccess(message:"assign local_existing local_existing ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( 7 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_existing local_existing ( 96.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing local_existing ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( fussy )") ;
end if;

  // unique_id
assign t24 = t11;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( self.u )") ;
end if;
 
  // date
assign t25 = t12;
if ( t25 == temp_date )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_date )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_date )") ;
end if;
 
  // timestamp
assign t26 = t13;
if ( t26 == temp_timestamp )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timestamp )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timestamp )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = t14;
if ( t27 == temp_timer )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t28 = t15;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( LOG1(timer event) )");

  // inst_ref<Object>
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_existing local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( inst )") ;
end if;
 

  // boolean
assign t19 = rcvd_evt.tfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( false )") ;
end if;
 
assign t20 = rcvd_evt.ttrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( true )") ;
end if;
 
  // integer
assign t21 = 0;
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = 0.0;
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = "";
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( fit )") ;
end if;
 
  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // boolean
assign t19 = self.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( true )") ;
end if;
 
assign t20 = self.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( false )") ;
end if;
 
  // integer
assign t21 = self.i;
if ( t21 == 10 )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( 10 )") ;
end if;
 
  // real
assign t22 = self.r;
LOG::LogInfo( message:"assign local_existing self.attribute ( 3.14 )") ;
 
  // string
assign t23 = self.s;
if ( t23 == "String" )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( String )") ;
end if;
  // unique_id
assign t24 = self.u;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.u )") ;
end if;
 
  // date
assign t25 = self.d;
if ( t25 == self.d )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign t26 = self.t;
if ( t26 == self.t )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.tim;
if ( t27 == self.tim )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.ev;
LOG::LogInfo( message:"assign local_existing self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t19 = self.r1bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = self.r1btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( true )") ;
end if;
 
  // integer
assign t21 = self.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t22 = self.r1r;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t23 = self.r1s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t24 = self.r1u;
if ( t24 == self.r1u )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t25 = self.r1d;
if ( t25 == self.r1d )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign t26 = self.r1t;
if ( t26 == self.r1t )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.r1tim;
if ( t27 == self.r1tim )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.r1ev;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( LOG1(timer event) )") ;

// lval = local existing rval = other.attribute (saf)
  // boolean
assign t19 = saf.bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t20 = saf.btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign t21 = saf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t22 = saf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t23 = saf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = saf.u;
if ( t24 == saf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t25 = saf.d;
if ( t25 == saf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign t26 = saf.t;
if ( t26 == saf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = saf.tim;
if ( t27 == saf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t28 = saf.ev;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t19 = smf.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t20 = smf.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t21 = smf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t22 = smf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t23 = smf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = smf.u;
if ( t24 == smf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t25 = smf.d;
if ( t25 == smf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign t26 = smf.t;
if ( t26 == smf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = smf.tim;
if ( t27 == smf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
end if;
 
  end if;
end for;

//generate event to continue test
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: rcvd_evt.d, ts: rcvd_evt.ts, tim:rcvd_evt.tim, ev:rcvd_evt.ev) to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'Additional assign tests',
	17,
	0);
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("ceb67e61-7e47-925b-4f46-37bb66861e62",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"81374f42-af06-0e04-abb9-f6643a9eaa65");
INSERT INTO SM_AH
	VALUES ("ceb67e61-7e47-925b-4f46-37bb66861e62",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("ceb67e61-7e47-925b-4f46-37bb66861e62",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	1,
	'select any event_instance from instances of EV;
  // boolean
assign self.btrue = false;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( false )") ;
end if;
 
assign self.btrue = true;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( true )") ;
end if;
 
  // integer
assign self.i = -17;
if ( self.i == -17 )
  LOG::LogSuccess(message:"assign self.attribute constant ( -17 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( -17 )") ;
end if;
 
assign self.i = 15;
if ( self.i == 15 )
  LOG::LogSuccess(message:"assign self.attribute constant ( 15 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( 15 )") ;
end if;

  // real
assign self.r = 387.32;
if ( ((self.r - 387.32 ) < .1) OR ((387.32 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute constant ( 387.21 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant (387.21 )") ;
end if;

  // string
assign self.s = "test 1029";
if ( self.s == "test 1029" )
  LOG::LogSuccess(message:"assign self.attribute constant ( test 1029 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( test 1029 )") ;
end if;

  // boolean
assign t20 = false;
assign self.btrue = t20;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( false )") ;
end if;

assign t19 = true; 
assign self.btrue = t19;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( true )") ;
end if;
 
  // integer
assign t21 = 2;
assign self.i = t21;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( 2 )") ;
end if;
 
  // real
assign t22 = 2.1718;
assign self.r = t22;
if ( ((self.r - 2.1718) < .1) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 real )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 real )") ;
end if;

  // string
assign t23 = "etob1 string";
assign self.s = t23;
if ( self.s == "etob1 string" )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 string )") ;
end if;

  // unique_id
assign save_u = self.u;
assign t24 = rcvd_evt.u;
assign self.u = t24;
if ( self.u == rcvd_evt.u )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
assign self.d = t25;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
assign self.t = t26;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event") to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign self.tim = temp_timer;
if ( self.tim == temp_timer )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign self.ev = ev_inst1;
LOG::LogInfo(message:"assign self.attribute local_existing ( LOG1(timer event) )");

  // boolean
assign self.btrue = rcvd_evt.tfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( false )") ;
end if;
 
assign self.btrue = rcvd_evt.ttrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( true )") ;
end if;
 
  // integer
assign self.i = rcvd_evt.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11 )") ;
end if;
 
  // real
assign self.r = rcvd_evt.r;
if ( ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
assign self.r = rcvd_evt.i;
if ( self.r == 11.0 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign self.s = rcvd_evt.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( fit )") ; 
end if; 
 
  // unique_id   
assign self.u = rcvd_evt.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( save_u )") ;
end if;
 
  // date
assign self.d = rcvd_evt.d;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp 
assign self.t = rcvd_evt.ts;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = rcvd_evt.tim;
if ( self.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = rcvd_evt.ev;
LOG::LogInfo(message:"assign self.attribute rcvd_evt ( LOG1(timer event) )") ; 
 

  // boolean
assign self.btrue = self.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( false )") ;
end if;
 
assign self.btrue = true;
assign self.bfalse = self.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( true )") ;
end if;
 
assign self.bfalse = false;

  // integer
assign self.i = self.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( 11 )") ;
end if;
 
  // real
assign self.r = self.r;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r )") ; 
end if; 
 
assign self.r = self.i;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r i)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r i)") ; 
end if; 
 
  // string
assign self.s = self.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( fit )") ; 
end if; 
 
  // unique_id
assign self.u = self.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( save_u )") ;
end if;
 
  // date
assign self.d = self.d;
if ( self.d == self.d )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign self.t = self.t;
if ( self.t == self.t )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.tim;
if ( self.tim == self.tim )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.ev;
LOG::LogInfo( message:"assign self.attribute self.attribute ( LOG1(timer event) )") ; 

  // boolean
assign self.btrue = self.r1bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
assign self.btrue = self.r1btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
  // integer
assign self.i = self.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign self.r = self.r1r;
if ( (( self.r - 2.1718) < .1 ) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
assign self.r = self.etob_id;
if ( (( self.r - 2.0) < .1 ) OR ((2.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
  // string
assign self.s = self.r1s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute self.referential attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.referential attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = self.r1u;
if ( self.u == self.r1u )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign self.d = self.r1d;
if ( self.d == self.r1d )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign self.t = self.r1t;
if ( self.t == self.r1t )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.r1tim;
if ( self.tim == self.r1tim )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.r1ev;
LOG::LogInfo(message:"assign self.attribute self.referential attribute ( LOG1(timer event) )") ; 


  // boolean
select any saf from instances of ETOB;
assign self.btrue = saf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign self.btrue = saf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign self.i = saf.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign self.r = saf.r;
if (  ((self.r -2.1718) < .1) OR (( 2.1718 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
end if;
 
assign self.r = saf.etob_id;
if (  ((self.r -2.0) < .1) OR (( 2.0 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.etob_id; )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) (assign self.r = saf.etob_id; )") ;
end if;
 
  // string
assign self.s = saf.s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute saf.attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute saf.attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = saf.u;
if ( self.u == saf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign self.d = saf.d;
if ( self.d == saf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign self.t = saf.t;
if ( self.t == saf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = saf.tim;
if ( self.tim == saf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = saf.ev;
LOG::LogInfo(message:"assign self.attribute saf.attribute ( LOG1(timer event) )") ; 

  // boolean
select many smfs from instances of ETOB;
for each smf in smfs
assign self.btrue = smf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign self.btrue = smf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign self.i = smf.etob_id;
if ( self.i == smf.etob_id )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign self.r = smf.r;
if ( ((self.r - smf.r ) < .1) OR ((smf.r - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
end if;
 
assign self.r = smf.etob_id;
if ( ((self.r - smf.etob_id ) < .1) OR ((smf.etob_id - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) (assign self.r = smf.etob_id )") ;
end if;
 
  // string
assign self.s = smf.s; 
if ( self.s == smf.s ) 
  LOG::LogSuccess(message:"assign self.attribute smf.attribute  etob1 string") ;
else 
  LOG::LogFailure(message:"assign self.attribute smf.attribute ( etob1 string)") ; 
end if; 
  // unique_id
assign self.u = smf.u;
if ( self.u == smf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign self.d = smf.d;
if ( self.d == smf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign self.t = smf.t;
if ( self.t == smf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = smf.tim;
if ( self.tim == smf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign self.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;

  // boolean
assign saf.btrue = false;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
assign saf.btrue = true;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = true;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = false;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
  // integer
assign saf.etob_id = 435;
if ( saf.etob_id == 435 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 435 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 435 )") ;
end if;
 
  // real
assign saf.r = 12;
if ( saf.r == 12 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 12 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 12 )") ;
end if;
 
assign saf.r = 17.6;
LOG::LogInfo(message:"assign other.attribute(saf) constant ( 17.6 )");
 
  // string
assign saf.s = "test 222";
if ( saf.s == "test 222" )
  LOG::LogSuccess(message:"assign other.attribute constant ( test 222 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute constant ( test 222 )") ; 
end if;

  // boolean
assign temp10 = true;
assign temp11 = false;
assign saf.btrue = temp11;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
assign saf.btrue = temp10;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp10;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp11;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
  // integer
assign temp12 = 31;
assign saf.etob_id = temp12;
if ( saf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( 31 )") ;
end if;
 
  // real
assign temp13 = 9.874;
assign saf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 31.0 )") ;
 
assign saf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 9.874 )") ;
 
  // string
assign temp14 = "test 333";
assign saf.s = temp14;
if ( saf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute local_existing ( test 333 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute local_existing ( test 333 )") ; 
end if;

  // date
assign saf.d = t25;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = t26;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = temp_timer;
if ( saf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign saf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute local_existing ( LOG1(timer event) )") to event_instance; 
  // boolean
assign saf.btrue = rcvd_evt.tfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign saf.btrue = rcvd_evt.ttrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign saf.etob_id = rcvd_evt.i;
if ( saf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign saf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(saf) rcvd_evt ( 12.34 )") ;
 
assign saf.r = rcvd_evt.i;
if ( saf.r == 11.0 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign saf.s = rcvd_evt.s;
if ( saf.s == "fit" )
  LOG::LogSuccess(message:"assign saf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign saf.attribute rcvd_evt ( fit )") ;
end if;
 
  // date
assign saf.d = rcvd_evt.d;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = rcvd_evt.ts;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = rcvd_evt.tim;
if ( saf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign saf.btrue = self.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = self.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign saf.bfalse = false;

  // integer
assign saf.etob_id = self.i;
if ( saf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
end if;
 
  // real
assign saf.r = self.r;
LOG::LogInfo(message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
assign saf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
  // string
assign saf.s = self.s;
if ( saf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.attribute ( etob2 string )") ;
end if;

  // date
assign saf.d = self.d;
if ( saf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign saf.t = self.t;
if ( saf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.tim;
if ( saf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = self.r1bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign saf.btrue = self.r1btrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1bfalse;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
  // integer
assign saf.etob_id = self.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign saf.r = self.r1r;
LOG::LogInfo(message:"assign other.attribute(saf) self.referential_attribute ( 2.1718 )") ;
 
assign saf.r = self.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) self.referential_attribute ( 2.0 )") ;
 
  // string
assign saf.s = self.r1s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = self.r1d;
if ( saf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign saf.t = self.r1t;
if ( saf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.r1tim;
if ( saf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.referential attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = saf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign saf.bfalse = saf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
assign saf.bfalse = false; 
 
  // integer
assign saf.etob_id = saf.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign saf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
assign saf.r = saf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = saf.s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = saf.d;
if ( saf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign saf.t = saf.t;
if ( saf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = saf.tim;
if ( saf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute saf.attribute ( LOG1(timer event)") to event_instance; 

  // boolean
for each smf in smfs
assign saf.btrue = smf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = smf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign saf.bfalse = false;
 
  // integer
assign saf.etob_id = smf.etob_id;
if ( saf.etob_id == smf.etob_id )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign saf.r = smf.r;
LOG::LogInfo(message:"assign other.attribute(saf) other.attribute(smf) ( smf.r )") ;
 
assign saf.r = smf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
 
  // string
assign saf.s = smf.s;
if ( saf.s == smf.s )
  LOG::LogSuccess(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = smf.d;
if ( saf.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign saf.t = smf.t;
if ( saf.t == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = smf.tim;
if ( saf.tim == smf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;


for each smf in smfs
  // boolean
assign smf.btrue = false;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
assign smf.btrue = true;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = true;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = false;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
  // integer
assign smf.etob_id = 29;
if ( smf.etob_id == 29 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 29 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 29 )") ;
end if;
 
  // real
assign smf.r = 12;
if ( smf.r == 12.0 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 12.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 12.0 )") ;
end if;
 
assign smf.r = 17.5;
if ( smf.r == 17.5 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 17.5 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 17.5 )") ;
end if;
 
  // string
assign smf.s = "test 444";
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 444 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 444 )") ;
end if;


  // boolean
assign smf.btrue = temp11;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
assign smf.btrue = temp10;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp10;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp11;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
  // integer
assign smf.etob_id = temp12;
if ( smf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( 31 )") ;
end if;
 
  // real
assign smf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 31.0 )") ;
 
assign smf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 9.874 )") ;
 
  // string
assign smf.s = temp14;
if ( smf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 333 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 333 )") ;
end if;

  // date
assign smf.d = t25;
if ( rcvd_evt.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = t26;
if ( rcvd_evt.ts == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = temp_timer;
if ( smf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign smf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute(smf) local_existing ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = rcvd_evt.tfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
end if;
 
assign smf.btrue = rcvd_evt.ttrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign smf.etob_id = rcvd_evt.i;
if ( smf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign smf.r = rcvd_evt.i;
LOG::LogInfo(message:"assign other.attribute(smf) rcvd_evt ( 11.0 )") ;
 
assign smf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(smf) rcvd_evt ( 12.34 )") ;
 
  // string
assign smf.s = rcvd_evt.s;
if ( smf.s == "fit" )
  LOG::LogSuccess(message:"assign smf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign smf.attribute rcvd_evt ( fit )") ;
end if;

  // date
assign smf.d = rcvd_evt.d;
if ( smf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = rcvd_evt.ts;
if ( smf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = rcvd_evt.tim;
if ( smf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = self.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( false )") ;
end if;
 
assign smf.btrue = self.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.i;
if ( smf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
end if;
 
  // real
assign smf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
assign smf.r = self.r;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
  // string
assign smf.s = self.s;
if ( smf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.attribute ( etob2 string )") ;
end if;
 
  // date
assign smf.d = self.d;
if ( smf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign smf.t = self.t;
if ( smf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.tim;
if ( smf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign smf.btrue = self.r1bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
end if;
 
assign smf.btrue = self.r1btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign smf.r = self.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) self.referential_attribute ( 2.0 )") ;
 
assign smf.r = self.r1r;
LOG::LogInfo( message:"assign other.attribute(smf) self.referential_attribute ( 2.1718 )") ;
 
  // string
assign smf.s = self.r1s;
if ( smf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
end if;
 
  // date
assign smf.d = self.r1d;
if ( smf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign smf.t = self.r1t;
if ( smf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.r1tim;
if ( smf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.referentialattribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = saf.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign smf.btrue = saf.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign smf.etob_id = saf.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign smf.r = saf.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
assign smf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = "test 444";
assign smf.s = saf.s;
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign smf.attribute saf.attribute ( test 444 )") ;
else
  LOG::LogFailure(message:"assign smf.attribute saf.attribute ( test 444 )") ;
end if;
 
  // date
assign smf.d = saf.d;
if ( smf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign smf.t = saf.t;
if ( smf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = saf.tim;
if ( smf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute saf.attribute ( LOG1(timer event) )") to event_instance; 

end for;

LOG::LogInfo(message:"Completed assign test") ;
 
//generate event to commence next test
generate ET16:''Start and test''(tfalse:false, ttrue: true) to self;

',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("fd31caa6-e766-7e79-f89d-6f233c353852",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("716a76e5-aeaa-29d8-4fcf-1d977816bda0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"fd31caa6-e766-7e79-f89d-6f233c353852");
INSERT INTO SM_AH
	VALUES ("716a76e5-aeaa-29d8-4fcf-1d977816bda0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("716a76e5-aeaa-29d8-4fcf-1d977816bda0",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("fd31caa6-e766-7e79-f89d-6f233c353852",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"66de3709-f47f-7936-40fb-b0d8e7303340",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("3f8bf9ce-83b8-e625-b6be-03ca73a5014a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"66de3709-f47f-7936-40fb-b0d8e7303340",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("c7bfa5ad-ef47-cc7f-eec9-dc3c5dd57874",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"3f8bf9ce-83b8-e625-b6be-03ca73a5014a");
INSERT INTO SM_AH
	VALUES ("c7bfa5ad-ef47-cc7f-eec9-dc3c5dd57874",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("c7bfa5ad-ef47-cc7f-eec9-dc3c5dd57874",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("3f8bf9ce-83b8-e625-b6be-03ca73a5014a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("a3e25bf1-7639-e01a-cde7-3fbe241a8af4",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("1d9a6f3f-0827-44f6-a6b8-3e7249b151c6",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"a3e25bf1-7639-e01a-cde7-3fbe241a8af4");
INSERT INTO SM_AH
	VALUES ("1d9a6f3f-0827-44f6-a6b8-3e7249b151c6",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("1d9a6f3f-0827-44f6-a6b8-3e7249b151c6",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("a3e25bf1-7639-e01a-cde7-3fbe241a8af4",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("73641449-6e50-c4dc-893d-b010d8f1d724",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("24ffb703-af64-b9b0-c79a-9b6accaa39a7",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"73641449-6e50-c4dc-893d-b010d8f1d724");
INSERT INTO SM_AH
	VALUES ("24ffb703-af64-b9b0-c79a-9b6accaa39a7",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("24ffb703-af64-b9b0-c79a-9b6accaa39a7",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("73641449-6e50-c4dc-893d-b010d8f1d724",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"44d39b91-1d9d-73f9-217a-91556104673f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("2edc4743-d19f-ed9c-55ae-ca54affc866d",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"44d39b91-1d9d-73f9-217a-91556104673f",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("5c3055ee-1c30-e9e3-b914-cf0352326988",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"2edc4743-d19f-ed9c-55ae-ca54affc866d");
INSERT INTO SM_AH
	VALUES ("5c3055ee-1c30-e9e3-b914-cf0352326988",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("5c3055ee-1c30-e9e3-b914-cf0352326988",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("2edc4743-d19f-ed9c-55ae-ca54affc866d",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("58982c68-0b67-fb2a-d66b-84b6496fe03a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("5f3ff6f2-0242-4e0d-ad7c-59dcdcd857a4",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"58982c68-0b67-fb2a-d66b-84b6496fe03a");
INSERT INTO SM_AH
	VALUES ("5f3ff6f2-0242-4e0d-ad7c-59dcdcd857a4",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("5f3ff6f2-0242-4e0d-ad7c-59dcdcd857a4",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("58982c68-0b67-fb2a-d66b-84b6496fe03a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"62732e5d-28b5-9f07-a940-5d67dd36859f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("cdc6e879-7296-1184-cfe3-eff922b12e41",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"62732e5d-28b5-9f07-a940-5d67dd36859f",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("20142d37-134c-bdfb-f2c6-e3f6e8598b02",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"cdc6e879-7296-1184-cfe3-eff922b12e41");
INSERT INTO SM_AH
	VALUES ("20142d37-134c-bdfb-f2c6-e3f6e8598b02",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("20142d37-134c-bdfb-f2c6-e3f6e8598b02",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("cdc6e879-7296-1184-cfe3-eff922b12e41",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("4e680752-57da-475b-d8c4-11963be191ba",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"53509702-0f88-6160-ffe2-15f189bfedc8",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("cc0fd1d9-9894-0762-a44d-440e19c7e63a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"4e680752-57da-475b-d8c4-11963be191ba");
INSERT INTO SM_AH
	VALUES ("cc0fd1d9-9894-0762-a44d-440e19c7e63a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("cc0fd1d9-9894-0762-a44d-440e19c7e63a",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("4e680752-57da-475b-d8c4-11963be191ba",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"f8088057-232b-66fb-0061-33e178e05cfc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("34a5e6e0-847a-50f3-ef23-f85efff5bdcf",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"f8088057-232b-66fb-0061-33e178e05cfc",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("76d3f073-a52e-64d9-2108-b4b47b5c87c6",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"34a5e6e0-847a-50f3-ef23-f85efff5bdcf");
INSERT INTO SM_AH
	VALUES ("76d3f073-a52e-64d9-2108-b4b47b5c87c6",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("76d3f073-a52e-64d9-2108-b4b47b5c87c6",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("34a5e6e0-847a-50f3-ef23-f85efff5bdcf",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("cf95098f-4252-ba65-3456-c9b4a1343e0f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"b06514dd-3680-9909-6d9c-d215d09740e5",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("34ed32b5-0d6c-c9a5-5b70-d7c47444037c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"cf95098f-4252-ba65-3456-c9b4a1343e0f");
INSERT INTO SM_AH
	VALUES ("34ed32b5-0d6c-c9a5-5b70-d7c47444037c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("34ed32b5-0d6c-c9a5-5b70-d7c47444037c",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("cf95098f-4252-ba65-3456-c9b4a1343e0f",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"b06514dd-3680-9909-6d9c-d215d09740e5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("9fa007f1-541d-0bc4-3c0f-4aa0d489a4a2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("b5e36aaa-9c14-2fa1-cbb5-c1fc20fd97aa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"9fa007f1-541d-0bc4-3c0f-4aa0d489a4a2");
INSERT INTO SM_AH
	VALUES ("b5e36aaa-9c14-2fa1-cbb5-c1fc20fd97aa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("b5e36aaa-9c14-2fa1-cbb5-c1fc20fd97aa",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("9fa007f1-541d-0bc4-3c0f-4aa0d489a4a2",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"53509702-0f88-6160-ffe2-15f189bfedc8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("cdd13c86-54db-7f68-6857-5ca99f29f6ba",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"b06514dd-3680-9909-6d9c-d215d09740e5",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("7298ca08-c752-b4f5-783a-781f30def751",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"cdd13c86-54db-7f68-6857-5ca99f29f6ba");
INSERT INTO SM_AH
	VALUES ("7298ca08-c752-b4f5-783a-781f30def751",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("7298ca08-c752-b4f5-783a-781f30def751",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("cdd13c86-54db-7f68-6857-5ca99f29f6ba",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("ff6f1b48-36d8-488e-f7ea-8a35c8743cbe",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("8e773efa-5d35-5992-a44e-a0c53cc39d49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"ff6f1b48-36d8-488e-f7ea-8a35c8743cbe");
INSERT INTO SM_AH
	VALUES ("8e773efa-5d35-5992-a44e-a0c53cc39d49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("8e773efa-5d35-5992-a44e-a0c53cc39d49",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("ff6f1b48-36d8-488e-f7ea-8a35c8743cbe",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"34f33f82-96ae-a337-98df-f59d249b65ed",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("784504ea-ab07-1eac-c5e9-37e4a4b84356",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"34f33f82-96ae-a337-98df-f59d249b65ed",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("4328c9b8-fd96-e041-aad5-e78ec6f213c5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"784504ea-ab07-1eac-c5e9-37e4a4b84356");
INSERT INTO SM_AH
	VALUES ("4328c9b8-fd96-e041-aad5-e78ec6f213c5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("4328c9b8-fd96-e041-aad5-e78ec6f213c5",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("784504ea-ab07-1eac-c5e9-37e4a4b84356",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("262cf679-02e3-a7ce-b418-7f8e0211e719",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("7e01616f-ebc4-cb85-ab6d-c8342ff79def",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"262cf679-02e3-a7ce-b418-7f8e0211e719");
INSERT INTO SM_AH
	VALUES ("7e01616f-ebc4-cb85-ab6d-c8342ff79def",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("7e01616f-ebc4-cb85-ab6d-c8342ff79def",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("262cf679-02e3-a7ce-b418-7f8e0211e719",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"81374f42-af06-0e04-abb9-f6643a9eaa65",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("7d77c1bc-3502-17f9-db93-6a04522cbc13",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"81374f42-af06-0e04-abb9-f6643a9eaa65",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("dd48e27b-e094-b967-6ccf-cc713004a759",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"7d77c1bc-3502-17f9-db93-6a04522cbc13");
INSERT INTO SM_AH
	VALUES ("dd48e27b-e094-b967-6ccf-cc713004a759",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d");
INSERT INTO SM_ACT
	VALUES ("dd48e27b-e094-b967-6ccf-cc713004a759",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("7d77c1bc-3502-17f9-db93-6a04522cbc13",
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	"9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	8,
	"358eceb0-fc17-950c-df9f-19b53cc4c34d",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("02ea4e93-34f2-2df5-6f28-3b5425040f5f",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"b06514dd-3680-9909-6d9c-d215d09740e5",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2');
INSERT INTO GD_SHP
	VALUES ("02ea4e93-34f2-2df5-6f28-3b5425040f5f");
INSERT INTO GD_NCS
	VALUES ("02ea4e93-34f2-2df5-6f28-3b5425040f5f");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"02ea4e93-34f2-2df5-6f28-3b5425040f5f");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1360.000000,
	"02ea4e93-34f2-2df5-6f28-3b5425040f5f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("02ea4e93-34f2-2df5-6f28-3b5425040f5f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("9878a3be-8266-7909-54fb-bc1ac9d04a37",
	752.000000,
	1408.000000,
	"02ea4e93-34f2-2df5-6f28-3b5425040f5f");
INSERT INTO DIM_CON
	VALUES ("a051dcfa-10f3-cbe6-6fd7-ad59b5c72fc9",
	784.000000,
	1360.000000,
	"02ea4e93-34f2-2df5-6f28-3b5425040f5f");
INSERT INTO DIM_CON
	VALUES ("efa63970-f66e-ad0f-1218-909301a5f75d",
	928.000000,
	1456.000000,
	"02ea4e93-34f2-2df5-6f28-3b5425040f5f");
INSERT INTO GD_GE
	VALUES ("03319ae2-342d-b976-670b-5da01bad18a7",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"9842cf40-2a8c-cb2b-673b-e159c7987edd",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations');
INSERT INTO GD_SHP
	VALUES ("03319ae2-342d-b976-670b-5da01bad18a7");
INSERT INTO GD_NCS
	VALUES ("03319ae2-342d-b976-670b-5da01bad18a7");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"03319ae2-342d-b976-670b-5da01bad18a7");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1520.000000,
	"03319ae2-342d-b976-670b-5da01bad18a7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("03319ae2-342d-b976-670b-5da01bad18a7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("b09a66ce-eb45-a894-51ac-f071378f173c",
	2128.000000,
	1616.000000,
	"03319ae2-342d-b976-670b-5da01bad18a7");
INSERT INTO DIM_CON
	VALUES ("1dc43bdb-4fd4-ac6b-967a-bb906b3c29a1",
	1712.000000,
	1568.000000,
	"03319ae2-342d-b976-670b-5da01bad18a7");
INSERT INTO GD_GE
	VALUES ("142af015-cf3c-1e1c-f8b0-cd487fcb4ac9",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"66de3709-f47f-7936-40fb-b0d8e7303340",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F15 values');
INSERT INTO GD_SHP
	VALUES ("142af015-cf3c-1e1c-f8b0-cd487fcb4ac9");
INSERT INTO GD_NCS
	VALUES ("142af015-cf3c-1e1c-f8b0-cd487fcb4ac9");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"142af015-cf3c-1e1c-f8b0-cd487fcb4ac9");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1696.000000,
	"142af015-cf3c-1e1c-f8b0-cd487fcb4ac9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("142af015-cf3c-1e1c-f8b0-cd487fcb4ac9",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("1c769c44-00b3-c64b-62bd-76ed704cc578",
	2128.000000,
	1760.000000,
	"142af015-cf3c-1e1c-f8b0-cd487fcb4ac9");
INSERT INTO DIM_CON
	VALUES ("bd7b3a6d-0dcb-576a-9d9f-8370a46ee88e",
	2128.000000,
	1792.000000,
	"142af015-cf3c-1e1c-f8b0-cd487fcb4ac9");
INSERT INTO GD_GE
	VALUES ("dbd6a55f-1997-3f16-4c57-1eba1d21bd4f",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers');
INSERT INTO GD_SHP
	VALUES ("dbd6a55f-1997-3f16-4c57-1eba1d21bd4f");
INSERT INTO GD_NCS
	VALUES ("dbd6a55f-1997-3f16-4c57-1eba1d21bd4f");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"dbd6a55f-1997-3f16-4c57-1eba1d21bd4f");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1872.000000,
	"dbd6a55f-1997-3f16-4c57-1eba1d21bd4f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dbd6a55f-1997-3f16-4c57-1eba1d21bd4f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("936009c8-9eca-9720-c69a-51851af31c07",
	2128.000000,
	1920.000000,
	"dbd6a55f-1997-3f16-4c57-1eba1d21bd4f");
INSERT INTO DIM_CON
	VALUES ("599be0f8-a1ef-db82-9931-3991cc4aca47",
	2128.000000,
	1952.000000,
	"dbd6a55f-1997-3f16-4c57-1eba1d21bd4f");
INSERT INTO GD_GE
	VALUES ("2a611193-39a7-bfd1-06b5-489dd1124651",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Shutting Down');
INSERT INTO GD_SHP
	VALUES ("2a611193-39a7-bfd1-06b5-489dd1124651");
INSERT INTO GD_NCS
	VALUES ("2a611193-39a7-bfd1-06b5-489dd1124651");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"2a611193-39a7-bfd1-06b5-489dd1124651");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1536.000000,
	"2a611193-39a7-bfd1-06b5-489dd1124651",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2a611193-39a7-bfd1-06b5-489dd1124651",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("fee97219-9bb8-fa92-00bd-da8495f82676",
	2592.000000,
	1632.000000,
	"2a611193-39a7-bfd1-06b5-489dd1124651");
INSERT INTO GD_GE
	VALUES ("d3e56e01-9b59-dafc-a5cd-c40d0e539bbe",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"ffc4c4e4-39fe-1812-0376-186008fa5df8",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators');
INSERT INTO GD_SHP
	VALUES ("d3e56e01-9b59-dafc-a5cd-c40d0e539bbe");
INSERT INTO GD_NCS
	VALUES ("d3e56e01-9b59-dafc-a5cd-c40d0e539bbe");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"d3e56e01-9b59-dafc-a5cd-c40d0e539bbe");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	2016.000000,
	"d3e56e01-9b59-dafc-a5cd-c40d0e539bbe",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d3e56e01-9b59-dafc-a5cd-c40d0e539bbe",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("e9f7d35c-b2ae-a9ba-789c-695bed784525",
	2128.000000,
	2048.000000,
	"d3e56e01-9b59-dafc-a5cd-c40d0e539bbe");
INSERT INTO DIM_CON
	VALUES ("2ae4b577-2136-a2a2-0ccd-50c4393a67f8",
	2128.000000,
	2080.000000,
	"d3e56e01-9b59-dafc-a5cd-c40d0e539bbe");
INSERT INTO GD_GE
	VALUES ("e83e809c-9d9a-62e8-47a1-a76fc8f03b95",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"44d39b91-1d9d-73f9-217a-91556104673f",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("e83e809c-9d9a-62e8-47a1-a76fc8f03b95");
INSERT INTO GD_NCS
	VALUES ("e83e809c-9d9a-62e8-47a1-a76fc8f03b95");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"e83e809c-9d9a-62e8-47a1-a76fc8f03b95");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	2016.000000,
	"e83e809c-9d9a-62e8-47a1-a76fc8f03b95",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e83e809c-9d9a-62e8-47a1-a76fc8f03b95",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("ba6fe7b6-f9d0-d294-f70d-bda5a1f2b4d5",
	2400.000000,
	2080.000000,
	"e83e809c-9d9a-62e8-47a1-a76fc8f03b95");
INSERT INTO DIM_CON
	VALUES ("e7e22cad-ba21-df36-520e-c95b3db61389",
	2608.000000,
	2016.000000,
	"e83e809c-9d9a-62e8-47a1-a76fc8f03b95");
INSERT INTO GD_GE
	VALUES ("d820617d-429e-1c9d-505f-fac289ab0974",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"a6d095bc-384d-5c44-e5c9-f26c6982921e",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("d820617d-429e-1c9d-505f-fac289ab0974");
INSERT INTO GD_NCS
	VALUES ("d820617d-429e-1c9d-505f-fac289ab0974");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"d820617d-429e-1c9d-505f-fac289ab0974");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1872.000000,
	"d820617d-429e-1c9d-505f-fac289ab0974",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d820617d-429e-1c9d-505f-fac289ab0974",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("4abb52ce-21d4-a278-dfe8-14cbba7ed8d3",
	2608.000000,
	1968.000000,
	"d820617d-429e-1c9d-505f-fac289ab0974");
INSERT INTO DIM_CON
	VALUES ("571bb0b2-5984-7f7f-f616-985226a04514",
	2608.000000,
	1872.000000,
	"d820617d-429e-1c9d-505f-fac289ab0974");
INSERT INTO GD_GE
	VALUES ("63bfc764-6fb2-11f3-5075-68e71a48a2c8",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"62732e5d-28b5-9f07-a940-5d67dd36859f",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("63bfc764-6fb2-11f3-5075-68e71a48a2c8");
INSERT INTO GD_NCS
	VALUES ("63bfc764-6fb2-11f3-5075-68e71a48a2c8");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"63bfc764-6fb2-11f3-5075-68e71a48a2c8");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1712.000000,
	"63bfc764-6fb2-11f3-5075-68e71a48a2c8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("63bfc764-6fb2-11f3-5075-68e71a48a2c8",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("2c8a62c1-1263-d59a-15c3-ff775e653efc",
	2608.000000,
	1808.000000,
	"63bfc764-6fb2-11f3-5075-68e71a48a2c8");
INSERT INTO DIM_CON
	VALUES ("201c296e-485d-da8e-5951-abb0343badc1",
	2592.000000,
	1712.000000,
	"63bfc764-6fb2-11f3-5075-68e71a48a2c8");
INSERT INTO GD_GE
	VALUES ("43bd1e34-320b-ef70-26c3-0b27e3dfa3ca",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"53509702-0f88-6160-ffe2-15f189bfedc8",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing empty operator');
INSERT INTO GD_SHP
	VALUES ("43bd1e34-320b-ef70-26c3-0b27e3dfa3ca");
INSERT INTO GD_NCS
	VALUES ("43bd1e34-320b-ef70-26c3-0b27e3dfa3ca");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"43bd1e34-320b-ef70-26c3-0b27e3dfa3ca");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1680.000000,
	"43bd1e34-320b-ef70-26c3-0b27e3dfa3ca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("43bd1e34-320b-ef70-26c3-0b27e3dfa3ca",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c3293ac3-30f4-7e23-b188-5a0f9a33e871",
	928.000000,
	1776.000000,
	"43bd1e34-320b-ef70-26c3-0b27e3dfa3ca");
INSERT INTO DIM_CON
	VALUES ("08c8674f-9f93-f4e9-d40a-6dc89537e3ca",
	928.000000,
	1680.000000,
	"43bd1e34-320b-ef70-26c3-0b27e3dfa3ca");
INSERT INTO GD_GE
	VALUES ("34fbf9fe-8ccf-3e74-bd94-9c9d16f0030a",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"f8088057-232b-66fb-0061-33e178e05cfc",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator');
INSERT INTO GD_SHP
	VALUES ("34fbf9fe-8ccf-3e74-bd94-9c9d16f0030a");
INSERT INTO GD_NCS
	VALUES ("34fbf9fe-8ccf-3e74-bd94-9c9d16f0030a");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"34fbf9fe-8ccf-3e74-bd94-9c9d16f0030a");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1840.000000,
	"34fbf9fe-8ccf-3e74-bd94-9c9d16f0030a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("34fbf9fe-8ccf-3e74-bd94-9c9d16f0030a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("62037fdd-c42f-1674-f51d-5170e9c59d9e",
	928.000000,
	1840.000000,
	"34fbf9fe-8ccf-3e74-bd94-9c9d16f0030a");
INSERT INTO DIM_CON
	VALUES ("2e85bc54-9d2e-cb31-e843-2b684697281e",
	928.000000,
	1936.000000,
	"34fbf9fe-8ccf-3e74-bd94-9c9d16f0030a");
INSERT INTO GD_GE
	VALUES ("3d08eaa4-506a-8cce-886b-c11eafc22683",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator');
INSERT INTO GD_SHP
	VALUES ("3d08eaa4-506a-8cce-886b-c11eafc22683");
INSERT INTO GD_NCS
	VALUES ("3d08eaa4-506a-8cce-886b-c11eafc22683");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"3d08eaa4-506a-8cce-886b-c11eafc22683");
INSERT INTO DIM_GE
	VALUES (752.000000,
	2016.000000,
	"3d08eaa4-506a-8cce-886b-c11eafc22683",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3d08eaa4-506a-8cce-886b-c11eafc22683",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c6ee5505-ff05-e597-4da8-a96d334056fa",
	928.000000,
	2016.000000,
	"3d08eaa4-506a-8cce-886b-c11eafc22683");
INSERT INTO DIM_CON
	VALUES ("733301ab-c967-b343-ac41-48c37884fe79",
	1072.000000,
	2080.000000,
	"3d08eaa4-506a-8cce-886b-c11eafc22683");
INSERT INTO GD_GE
	VALUES ("91beae3c-fa40-61b9-e7ff-a1e2a0f1757a",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not operator');
INSERT INTO GD_SHP
	VALUES ("91beae3c-fa40-61b9-e7ff-a1e2a0f1757a");
INSERT INTO GD_NCS
	VALUES ("91beae3c-fa40-61b9-e7ff-a1e2a0f1757a");
INSERT INTO DIM_ND
	VALUES (320.000000,
	80.000000,
	"91beae3c-fa40-61b9-e7ff-a1e2a0f1757a");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1536.000000,
	"91beae3c-fa40-61b9-e7ff-a1e2a0f1757a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("91beae3c-fa40-61b9-e7ff-a1e2a0f1757a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("1411764e-4e7b-6b68-9c85-9db8c45907b3",
	928.000000,
	1616.000000,
	"91beae3c-fa40-61b9-e7ff-a1e2a0f1757a");
INSERT INTO DIM_CON
	VALUES ("7447030e-f67e-3698-55db-32edac7f81a0",
	928.000000,
	1536.000000,
	"91beae3c-fa40-61b9-e7ff-a1e2a0f1757a");
INSERT INTO GD_GE
	VALUES ("9c9470f8-6c5f-cc27-b563-6d4226f5b389",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"34f33f82-96ae-a337-98df-f59d249b65ed",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator');
INSERT INTO GD_SHP
	VALUES ("9c9470f8-6c5f-cc27-b563-6d4226f5b389");
INSERT INTO GD_NCS
	VALUES ("9c9470f8-6c5f-cc27-b563-6d4226f5b389");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"9c9470f8-6c5f-cc27-b563-6d4226f5b389");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1360.000000,
	"9c9470f8-6c5f-cc27-b563-6d4226f5b389",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9c9470f8-6c5f-cc27-b563-6d4226f5b389",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("92cdc9ff-e39c-5934-16f7-9afa8670e150",
	1280.000000,
	1376.000000,
	"9c9470f8-6c5f-cc27-b563-6d4226f5b389");
INSERT INTO DIM_CON
	VALUES ("b906f96d-cf60-215f-e23d-fbcce8b9d135",
	1424.000000,
	1456.000000,
	"9c9470f8-6c5f-cc27-b563-6d4226f5b389");
INSERT INTO GD_GE
	VALUES ("eaf2ebc0-cdf0-023d-1f93-45e563b50553",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing assign');
INSERT INTO GD_SHP
	VALUES ("eaf2ebc0-cdf0-023d-1f93-45e563b50553");
INSERT INTO GD_NCS
	VALUES ("eaf2ebc0-cdf0-023d-1f93-45e563b50553");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"eaf2ebc0-cdf0-023d-1f93-45e563b50553");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1520.000000,
	"eaf2ebc0-cdf0-023d-1f93-45e563b50553",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("eaf2ebc0-cdf0-023d-1f93-45e563b50553",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("1a201332-8e33-3f16-6c63-8add1b3e6df4",
	1424.000000,
	1520.000000,
	"eaf2ebc0-cdf0-023d-1f93-45e563b50553");
INSERT INTO DIM_CON
	VALUES ("5464e623-c51f-46ba-584a-b0826d42b82e",
	1456.000000,
	1616.000000,
	"eaf2ebc0-cdf0-023d-1f93-45e563b50553");
INSERT INTO GD_GE
	VALUES ("3c7bfb56-2ba6-2a62-6926-923fa90a0278",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"81374f42-af06-0e04-abb9-f6643a9eaa65",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Additional assign tests');
INSERT INTO GD_SHP
	VALUES ("3c7bfb56-2ba6-2a62-6926-923fa90a0278");
INSERT INTO GD_NCS
	VALUES ("3c7bfb56-2ba6-2a62-6926-923fa90a0278");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"3c7bfb56-2ba6-2a62-6926-923fa90a0278");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1680.000000,
	"3c7bfb56-2ba6-2a62-6926-923fa90a0278",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3c7bfb56-2ba6-2a62-6926-923fa90a0278",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("92f83875-4a0f-4d09-e1e9-05aa737e6592",
	1456.000000,
	1680.000000,
	"3c7bfb56-2ba6-2a62-6926-923fa90a0278");
INSERT INTO DIM_CON
	VALUES ("a24f6cbf-0b02-6f93-6120-ad9575eb8fc0",
	1600.000000,
	1728.000000,
	"3c7bfb56-2ba6-2a62-6926-923fa90a0278");
INSERT INTO GD_GE
	VALUES ("b13a30e9-ed7e-8c63-7672-105d6eb83ec0",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"fd31caa6-e766-7e79-f89d-6f233c353852",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations::ET3: Run F15 Values');
INSERT INTO GD_CON
	VALUES ("b13a30e9-ed7e-8c63-7672-105d6eb83ec0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a6a38a39-ae53-4157-251b-dde73274067f",
	"b13a30e9-ed7e-8c63-7672-105d6eb83ec0",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a6a38a39-ae53-4157-251b-dde73274067f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a6a38a39-ae53-4157-251b-dde73274067f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a6a38a39-ae53-4157-251b-dde73274067f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7c4556db-4039-e67e-b95e-57691c06f6ba",
	"b13a30e9-ed7e-8c63-7672-105d6eb83ec0",
	3,
	16.000000,
	2.000000);
INSERT INTO DIM_ND
	VALUES (204.000000,
	44.000000,
	"7c4556db-4039-e67e-b95e-57691c06f6ba");
INSERT INTO DIM_GE
	VALUES (2176.000000,
	1675.000000,
	"7c4556db-4039-e67e-b95e-57691c06f6ba",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7c4556db-4039-e67e-b95e-57691c06f6ba",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("455a845f-1370-cdfa-da8a-2ba8cea44251",
	"b13a30e9-ed7e-8c63-7672-105d6eb83ec0",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"455a845f-1370-cdfa-da8a-2ba8cea44251");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"455a845f-1370-cdfa-da8a-2ba8cea44251",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("455a845f-1370-cdfa-da8a-2ba8cea44251",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("79bf8e4d-1a6e-bab7-937b-9a62ab777aad",
	"b13a30e9-ed7e-8c63-7672-105d6eb83ec0",
	"00000000-0000-0000-0000-000000000000",
	"7671de15-e99a-5868-39d7-de70aaa9cc96",
	"12371b97-b406-eeb8-1d95-1f6a15065ec7");
INSERT INTO GD_LS
	VALUES ("bdce03e2-83df-c645-36ae-9f1449bcea90",
	"b13a30e9-ed7e-8c63-7672-105d6eb83ec0",
	"79bf8e4d-1a6e-bab7-937b-9a62ab777aad",
	"12371b97-b406-eeb8-1d95-1f6a15065ec7",
	"10e7a715-3813-f762-8711-7a2d6435d4da");
INSERT INTO GD_LS
	VALUES ("68224be3-a11a-1776-8803-a0600b17dbea",
	"b13a30e9-ed7e-8c63-7672-105d6eb83ec0",
	"bdce03e2-83df-c645-36ae-9f1449bcea90",
	"10e7a715-3813-f762-8711-7a2d6435d4da",
	"e9987261-2b65-868f-191d-dce391f19a8e");
INSERT INTO DIM_WAY
	VALUES ("7671de15-e99a-5868-39d7-de70aaa9cc96",
	2128.000000,
	1616.000000,
	"b13a30e9-ed7e-8c63-7672-105d6eb83ec0",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("12371b97-b406-eeb8-1d95-1f6a15065ec7",
	2176.000000,
	1616.000000,
	"b13a30e9-ed7e-8c63-7672-105d6eb83ec0",
	"00000000-0000-0000-0000-000000000000",
	"7671de15-e99a-5868-39d7-de70aaa9cc96");
INSERT INTO DIM_WAY
	VALUES ("10e7a715-3813-f762-8711-7a2d6435d4da",
	2176.000000,
	1760.000000,
	"b13a30e9-ed7e-8c63-7672-105d6eb83ec0",
	"00000000-0000-0000-0000-000000000000",
	"12371b97-b406-eeb8-1d95-1f6a15065ec7");
INSERT INTO DIM_WAY
	VALUES ("e9987261-2b65-868f-191d-dce391f19a8e",
	2128.000000,
	1760.000000,
	"b13a30e9-ed7e-8c63-7672-105d6eb83ec0",
	"00000000-0000-0000-0000-000000000000",
	"10e7a715-3813-f762-8711-7a2d6435d4da");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b13a30e9-ed7e-8c63-7672-105d6eb83ec0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b13a30e9-ed7e-8c63-7672-105d6eb83ec0",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b09a66ce-eb45-a894-51ac-f071378f173c",
	"1c769c44-00b3-c64b-62bd-76ed704cc578",
	"b13a30e9-ed7e-8c63-7672-105d6eb83ec0");
INSERT INTO GD_GE
	VALUES ("13ac9efd-387e-3507-fc78-b1117c03d5cf",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"3f8bf9ce-83b8-e625-b6be-03ca73a5014a",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F15 values::ET4: Run F16 Transformers');
INSERT INTO GD_CON
	VALUES ("13ac9efd-387e-3507-fc78-b1117c03d5cf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("77742885-d504-2790-8fec-12163d70a7a5",
	"13ac9efd-387e-3507-fc78-b1117c03d5cf",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"77742885-d504-2790-8fec-12163d70a7a5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"77742885-d504-2790-8fec-12163d70a7a5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("77742885-d504-2790-8fec-12163d70a7a5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("48125337-637e-3a04-d1e0-0a3c22e406ad",
	"13ac9efd-387e-3507-fc78-b1117c03d5cf",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (227.000000,
	53.000000,
	"48125337-637e-3a04-d1e0-0a3c22e406ad");
INSERT INTO DIM_GE
	VALUES (2160.000000,
	1840.000000,
	"48125337-637e-3a04-d1e0-0a3c22e406ad",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("48125337-637e-3a04-d1e0-0a3c22e406ad",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cfa64a42-f1ec-2cf9-e261-4dfecec505d2",
	"13ac9efd-387e-3507-fc78-b1117c03d5cf",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"cfa64a42-f1ec-2cf9-e261-4dfecec505d2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cfa64a42-f1ec-2cf9-e261-4dfecec505d2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cfa64a42-f1ec-2cf9-e261-4dfecec505d2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("43165e65-892c-f50a-61d4-76a85ed933af",
	"13ac9efd-387e-3507-fc78-b1117c03d5cf",
	"00000000-0000-0000-0000-000000000000",
	"8568e56e-56de-6a33-53c5-697934e32d6b",
	"928901e8-c8a9-b5bc-527e-fb6a84ff9d0f");
INSERT INTO GD_LS
	VALUES ("61d75536-3a6e-5360-5929-c6af5b9e1503",
	"13ac9efd-387e-3507-fc78-b1117c03d5cf",
	"43165e65-892c-f50a-61d4-76a85ed933af",
	"928901e8-c8a9-b5bc-527e-fb6a84ff9d0f",
	"2fca1208-b857-3e63-562d-b30a2dfd804a");
INSERT INTO GD_LS
	VALUES ("25b92b78-7def-5d29-5bd2-d50ba3cd9d6f",
	"13ac9efd-387e-3507-fc78-b1117c03d5cf",
	"61d75536-3a6e-5360-5929-c6af5b9e1503",
	"2fca1208-b857-3e63-562d-b30a2dfd804a",
	"b73ae68d-f709-c73f-f045-aed2dc47c67d");
INSERT INTO DIM_WAY
	VALUES ("8568e56e-56de-6a33-53c5-697934e32d6b",
	2128.000000,
	1792.000000,
	"13ac9efd-387e-3507-fc78-b1117c03d5cf",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("928901e8-c8a9-b5bc-527e-fb6a84ff9d0f",
	2176.000000,
	1792.000000,
	"13ac9efd-387e-3507-fc78-b1117c03d5cf",
	"00000000-0000-0000-0000-000000000000",
	"8568e56e-56de-6a33-53c5-697934e32d6b");
INSERT INTO DIM_WAY
	VALUES ("2fca1208-b857-3e63-562d-b30a2dfd804a",
	2176.000000,
	1920.000000,
	"13ac9efd-387e-3507-fc78-b1117c03d5cf",
	"00000000-0000-0000-0000-000000000000",
	"928901e8-c8a9-b5bc-527e-fb6a84ff9d0f");
INSERT INTO DIM_WAY
	VALUES ("b73ae68d-f709-c73f-f045-aed2dc47c67d",
	2128.000000,
	1920.000000,
	"13ac9efd-387e-3507-fc78-b1117c03d5cf",
	"00000000-0000-0000-0000-000000000000",
	"2fca1208-b857-3e63-562d-b30a2dfd804a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"13ac9efd-387e-3507-fc78-b1117c03d5cf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("13ac9efd-387e-3507-fc78-b1117c03d5cf",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("bd7b3a6d-0dcb-576a-9d9f-8370a46ee88e",
	"936009c8-9eca-9720-c69a-51851af31c07",
	"13ac9efd-387e-3507-fc78-b1117c03d5cf");
INSERT INTO GD_GE
	VALUES ("adf30557-aad4-718e-9b76-bd2d0f595cbd",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"a3e25bf1-7639-e01a-cde7-3fbe241a8af4",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers::ET5: Run F17 Timestamp and F18 Date Operators');
INSERT INTO GD_CON
	VALUES ("adf30557-aad4-718e-9b76-bd2d0f595cbd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("df3c4931-61f0-aadd-8186-378bab6f5d16",
	"adf30557-aad4-718e-9b76-bd2d0f595cbd",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"df3c4931-61f0-aadd-8186-378bab6f5d16");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"df3c4931-61f0-aadd-8186-378bab6f5d16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("df3c4931-61f0-aadd-8186-378bab6f5d16",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d4147514-f5eb-6508-1088-71f0b34edc86",
	"adf30557-aad4-718e-9b76-bd2d0f595cbd",
	3,
	22.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (212.000000,
	60.000000,
	"d4147514-f5eb-6508-1088-71f0b34edc86");
INSERT INTO DIM_GE
	VALUES (2182.000000,
	1984.000000,
	"d4147514-f5eb-6508-1088-71f0b34edc86",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d4147514-f5eb-6508-1088-71f0b34edc86",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2fe01f1d-8728-8c78-dbf9-0475b64287e5",
	"adf30557-aad4-718e-9b76-bd2d0f595cbd",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"2fe01f1d-8728-8c78-dbf9-0475b64287e5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2fe01f1d-8728-8c78-dbf9-0475b64287e5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2fe01f1d-8728-8c78-dbf9-0475b64287e5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("14d617d3-050e-27fc-c8ee-b16603a5d98e",
	"adf30557-aad4-718e-9b76-bd2d0f595cbd",
	"00000000-0000-0000-0000-000000000000",
	"d4040b25-2d16-d265-e491-e1672f4cc152",
	"57359216-9f67-9a0a-c9a6-7c1ecbef4d1b");
INSERT INTO GD_LS
	VALUES ("e18d9ca1-6f6b-9fe0-a900-b73933033519",
	"adf30557-aad4-718e-9b76-bd2d0f595cbd",
	"14d617d3-050e-27fc-c8ee-b16603a5d98e",
	"57359216-9f67-9a0a-c9a6-7c1ecbef4d1b",
	"0fe323d5-3d49-90cd-cc7a-d8e526a07297");
INSERT INTO GD_LS
	VALUES ("2278e903-1bc7-8e5f-2d7e-6c2a11ed1ba4",
	"adf30557-aad4-718e-9b76-bd2d0f595cbd",
	"e18d9ca1-6f6b-9fe0-a900-b73933033519",
	"0fe323d5-3d49-90cd-cc7a-d8e526a07297",
	"fb2fe5f6-ca28-7f6a-d035-3c1de04f0e15");
INSERT INTO DIM_WAY
	VALUES ("d4040b25-2d16-d265-e491-e1672f4cc152",
	2128.000000,
	1952.000000,
	"adf30557-aad4-718e-9b76-bd2d0f595cbd",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("57359216-9f67-9a0a-c9a6-7c1ecbef4d1b",
	2176.000000,
	1952.000000,
	"adf30557-aad4-718e-9b76-bd2d0f595cbd",
	"00000000-0000-0000-0000-000000000000",
	"d4040b25-2d16-d265-e491-e1672f4cc152");
INSERT INTO DIM_WAY
	VALUES ("0fe323d5-3d49-90cd-cc7a-d8e526a07297",
	2176.000000,
	2048.000000,
	"adf30557-aad4-718e-9b76-bd2d0f595cbd",
	"00000000-0000-0000-0000-000000000000",
	"57359216-9f67-9a0a-c9a6-7c1ecbef4d1b");
INSERT INTO DIM_WAY
	VALUES ("fb2fe5f6-ca28-7f6a-d035-3c1de04f0e15",
	2128.000000,
	2048.000000,
	"adf30557-aad4-718e-9b76-bd2d0f595cbd",
	"00000000-0000-0000-0000-000000000000",
	"0fe323d5-3d49-90cd-cc7a-d8e526a07297");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"adf30557-aad4-718e-9b76-bd2d0f595cbd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("adf30557-aad4-718e-9b76-bd2d0f595cbd",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("599be0f8-a1ef-db82-9931-3991cc4aca47",
	"e9f7d35c-b2ae-a9ba-789c-695bed784525",
	"adf30557-aad4-718e-9b76-bd2d0f595cbd");
INSERT INTO GD_GE
	VALUES ("3d30eb6f-93e9-c68f-85b2-3851faf41a18",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"73641449-6e50-c4dc-893d-b010d8f1d724",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators::ET6: Run F1 and F2 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("3d30eb6f-93e9-c68f-85b2-3851faf41a18",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4fd54c75-f502-0846-9ef0-333f104fe1de",
	"3d30eb6f-93e9-c68f-85b2-3851faf41a18",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4fd54c75-f502-0846-9ef0-333f104fe1de");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4fd54c75-f502-0846-9ef0-333f104fe1de",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4fd54c75-f502-0846-9ef0-333f104fe1de",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("948e457a-2c6c-5f32-dd91-ddcb66c0f094",
	"3d30eb6f-93e9-c68f-85b2-3851faf41a18",
	3,
	-62.000000,
	22.000000);
INSERT INTO DIM_ND
	VALUES (186.000000,
	64.000000,
	"948e457a-2c6c-5f32-dd91-ddcb66c0f094");
INSERT INTO DIM_GE
	VALUES (2177.000000,
	2077.000000,
	"948e457a-2c6c-5f32-dd91-ddcb66c0f094",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("948e457a-2c6c-5f32-dd91-ddcb66c0f094",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d190d9a7-44e2-9026-a520-7eddc2e5cc98",
	"3d30eb6f-93e9-c68f-85b2-3851faf41a18",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d190d9a7-44e2-9026-a520-7eddc2e5cc98");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d190d9a7-44e2-9026-a520-7eddc2e5cc98",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d190d9a7-44e2-9026-a520-7eddc2e5cc98",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("ceb31dfd-f747-04fe-5adc-5b726ceae0d6",
	"3d30eb6f-93e9-c68f-85b2-3851faf41a18",
	"00000000-0000-0000-0000-000000000000",
	"58572e8e-8864-b1d9-156d-13ca49bd0137",
	"c23535ad-2c25-fbb1-c091-511a9ff0daef");
INSERT INTO DIM_WAY
	VALUES ("58572e8e-8864-b1d9-156d-13ca49bd0137",
	2128.000000,
	2080.000000,
	"3d30eb6f-93e9-c68f-85b2-3851faf41a18",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c23535ad-2c25-fbb1-c091-511a9ff0daef",
	2400.000000,
	2080.000000,
	"3d30eb6f-93e9-c68f-85b2-3851faf41a18",
	"00000000-0000-0000-0000-000000000000",
	"58572e8e-8864-b1d9-156d-13ca49bd0137");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3d30eb6f-93e9-c68f-85b2-3851faf41a18",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3d30eb6f-93e9-c68f-85b2-3851faf41a18",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("2ae4b577-2136-a2a2-0ccd-50c4393a67f8",
	"ba6fe7b6-f9d0-d294-f70d-bda5a1f2b4d5",
	"3d30eb6f-93e9-c68f-85b2-3851faf41a18");
INSERT INTO GD_GE
	VALUES ("54283ae1-dcbb-a381-2cac-70ecdadee1e6",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"2edc4743-d19f-ed9c-55ae-ca54affc866d",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types::ET7: Run F3 through F14 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("54283ae1-dcbb-a381-2cac-70ecdadee1e6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ed0330e2-63bb-2dff-9fbf-edb91c308eb0",
	"54283ae1-dcbb-a381-2cac-70ecdadee1e6",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ed0330e2-63bb-2dff-9fbf-edb91c308eb0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ed0330e2-63bb-2dff-9fbf-edb91c308eb0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ed0330e2-63bb-2dff-9fbf-edb91c308eb0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9aa25e6c-5594-0790-e685-9fbd9e908df6",
	"54283ae1-dcbb-a381-2cac-70ecdadee1e6",
	3,
	40.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (247.000000,
	49.000000,
	"9aa25e6c-5594-0790-e685-9fbd9e908df6");
INSERT INTO DIM_GE
	VALUES (2632.000000,
	1975.000000,
	"9aa25e6c-5594-0790-e685-9fbd9e908df6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9aa25e6c-5594-0790-e685-9fbd9e908df6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("825e6983-fcc7-f32b-f5d8-2a2dca9c7023",
	"54283ae1-dcbb-a381-2cac-70ecdadee1e6",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"825e6983-fcc7-f32b-f5d8-2a2dca9c7023");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"825e6983-fcc7-f32b-f5d8-2a2dca9c7023",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("825e6983-fcc7-f32b-f5d8-2a2dca9c7023",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("62fabf75-d12e-b724-d534-f299ae593855",
	"54283ae1-dcbb-a381-2cac-70ecdadee1e6",
	"00000000-0000-0000-0000-000000000000",
	"4d05e2d6-7cfc-7c37-27af-7b0665be6471",
	"e2950012-d614-2402-b66b-8d21b42b1888");
INSERT INTO DIM_WAY
	VALUES ("4d05e2d6-7cfc-7c37-27af-7b0665be6471",
	2608.000000,
	2016.000000,
	"54283ae1-dcbb-a381-2cac-70ecdadee1e6",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("e2950012-d614-2402-b66b-8d21b42b1888",
	2608.000000,
	1968.000000,
	"54283ae1-dcbb-a381-2cac-70ecdadee1e6",
	"00000000-0000-0000-0000-000000000000",
	"4d05e2d6-7cfc-7c37-27af-7b0665be6471");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"54283ae1-dcbb-a381-2cac-70ecdadee1e6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("54283ae1-dcbb-a381-2cac-70ecdadee1e6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e7e22cad-ba21-df36-520e-c95b3db61389",
	"4abb52ce-21d4-a278-dfe8-14cbba7ed8d3",
	"54283ae1-dcbb-a381-2cac-70ecdadee1e6");
INSERT INTO GD_GE
	VALUES ("8cf7e2a1-b4c3-b4fd-066a-39276dd9f0a6",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"58982c68-0b67-fb2a-d66b-84b6496fe03a",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types::ET8: Run F15 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("8cf7e2a1-b4c3-b4fd-066a-39276dd9f0a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4e352fe0-acba-d973-2692-8acdf7b6f317",
	"8cf7e2a1-b4c3-b4fd-066a-39276dd9f0a6",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4e352fe0-acba-d973-2692-8acdf7b6f317");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4e352fe0-acba-d973-2692-8acdf7b6f317",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4e352fe0-acba-d973-2692-8acdf7b6f317",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("80c7e94c-4c3b-53b6-810c-c60ea08793d6",
	"8cf7e2a1-b4c3-b4fd-066a-39276dd9f0a6",
	3,
	34.000000,
	-5.000000);
INSERT INTO DIM_ND
	VALUES (228.000000,
	45.000000,
	"80c7e94c-4c3b-53b6-810c-c60ea08793d6");
INSERT INTO DIM_GE
	VALUES (2626.000000,
	1820.000000,
	"80c7e94c-4c3b-53b6-810c-c60ea08793d6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("80c7e94c-4c3b-53b6-810c-c60ea08793d6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ef6953ad-f2e6-f8ff-cfa5-38c0d858ffef",
	"8cf7e2a1-b4c3-b4fd-066a-39276dd9f0a6",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ef6953ad-f2e6-f8ff-cfa5-38c0d858ffef");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ef6953ad-f2e6-f8ff-cfa5-38c0d858ffef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ef6953ad-f2e6-f8ff-cfa5-38c0d858ffef",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("39a0f1fe-02fb-cc27-0617-99df26e6b068",
	"8cf7e2a1-b4c3-b4fd-066a-39276dd9f0a6",
	"00000000-0000-0000-0000-000000000000",
	"5d9f611f-d2d0-6bbb-d0d0-0d68126da610",
	"5470ed30-3458-27d2-28f9-790ed12ff821");
INSERT INTO DIM_WAY
	VALUES ("5d9f611f-d2d0-6bbb-d0d0-0d68126da610",
	2608.000000,
	1872.000000,
	"8cf7e2a1-b4c3-b4fd-066a-39276dd9f0a6",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("5470ed30-3458-27d2-28f9-790ed12ff821",
	2608.000000,
	1808.000000,
	"8cf7e2a1-b4c3-b4fd-066a-39276dd9f0a6",
	"00000000-0000-0000-0000-000000000000",
	"5d9f611f-d2d0-6bbb-d0d0-0d68126da610");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8cf7e2a1-b4c3-b4fd-066a-39276dd9f0a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8cf7e2a1-b4c3-b4fd-066a-39276dd9f0a6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("571bb0b2-5984-7f7f-f616-985226a04514",
	"2c8a62c1-1263-d59a-15c3-ff775e653efc",
	"8cf7e2a1-b4c3-b4fd-066a-39276dd9f0a6");
INSERT INTO GD_GE
	VALUES ("fd343066-31f4-5612-ebbf-47519c2c8e81",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"cdc6e879-7296-1184-cfe3-eff922b12e41",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types::ET9: Shut Down');
INSERT INTO GD_CON
	VALUES ("fd343066-31f4-5612-ebbf-47519c2c8e81",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("50061aad-4129-67c6-3ae7-4f6e93746c21",
	"fd343066-31f4-5612-ebbf-47519c2c8e81",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"50061aad-4129-67c6-3ae7-4f6e93746c21");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"50061aad-4129-67c6-3ae7-4f6e93746c21",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("50061aad-4129-67c6-3ae7-4f6e93746c21",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	"fd343066-31f4-5612-ebbf-47519c2c8e81",
	3,
	-5.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (274.000000,
	52.000000,
	"c29a29c7-d18b-9d69-4a2c-63284ffaa109");
INSERT INTO DIM_GE
	VALUES (2571.000000,
	1649.000000,
	"c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c29a29c7-d18b-9d69-4a2c-63284ffaa109",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5b40e6fc-d4c1-5c15-8482-8c06e676700e",
	"fd343066-31f4-5612-ebbf-47519c2c8e81",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5b40e6fc-d4c1-5c15-8482-8c06e676700e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5b40e6fc-d4c1-5c15-8482-8c06e676700e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5b40e6fc-d4c1-5c15-8482-8c06e676700e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("e633d4ca-7091-5142-eada-b98385994feb",
	"fd343066-31f4-5612-ebbf-47519c2c8e81",
	"00000000-0000-0000-0000-000000000000",
	"5da61356-552f-9e29-47df-e7e5a591304d",
	"87653efc-6941-9e2f-a4b4-e6d37c41ac97");
INSERT INTO DIM_WAY
	VALUES ("5da61356-552f-9e29-47df-e7e5a591304d",
	2592.000000,
	1712.000000,
	"fd343066-31f4-5612-ebbf-47519c2c8e81",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("87653efc-6941-9e2f-a4b4-e6d37c41ac97",
	2592.000000,
	1632.000000,
	"fd343066-31f4-5612-ebbf-47519c2c8e81",
	"00000000-0000-0000-0000-000000000000",
	"5da61356-552f-9e29-47df-e7e5a591304d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fd343066-31f4-5612-ebbf-47519c2c8e81",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fd343066-31f4-5612-ebbf-47519c2c8e81",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("201c296e-485d-da8e-5951-abb0343badc1",
	"fee97219-9bb8-fa92-00bd-da8495f82676",
	"fd343066-31f4-5612-ebbf-47519c2c8e81");
INSERT INTO GD_GE
	VALUES ("660bcee0-9ae0-c9ca-609f-2a822a9edc2f",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"4e680752-57da-475b-d8c4-11963be191ba",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing empty operator::ET10: Start not_empty test');
INSERT INTO GD_CON
	VALUES ("660bcee0-9ae0-c9ca-609f-2a822a9edc2f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0f1329f4-8ca9-c716-31ca-9b862ab0ed46",
	"660bcee0-9ae0-c9ca-609f-2a822a9edc2f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0f1329f4-8ca9-c716-31ca-9b862ab0ed46");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0f1329f4-8ca9-c716-31ca-9b862ab0ed46",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0f1329f4-8ca9-c716-31ca-9b862ab0ed46",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2c65c305-f856-caf7-c72c-137b997f9f98",
	"660bcee0-9ae0-c9ca-609f-2a822a9edc2f",
	3,
	-170.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (199.000000,
	37.000000,
	"2c65c305-f856-caf7-c72c-137b997f9f98");
INSERT INTO DIM_GE
	VALUES (742.000000,
	1794.000000,
	"2c65c305-f856-caf7-c72c-137b997f9f98",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2c65c305-f856-caf7-c72c-137b997f9f98",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e59d247f-9fa9-12d7-92e0-d1e30c46f3a1",
	"660bcee0-9ae0-c9ca-609f-2a822a9edc2f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e59d247f-9fa9-12d7-92e0-d1e30c46f3a1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e59d247f-9fa9-12d7-92e0-d1e30c46f3a1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e59d247f-9fa9-12d7-92e0-d1e30c46f3a1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("ac9af336-3484-9677-05fc-f40511b49e7e",
	"660bcee0-9ae0-c9ca-609f-2a822a9edc2f",
	"00000000-0000-0000-0000-000000000000",
	"fa36c161-3d04-7659-c926-c9afec32b80d",
	"efac1e86-25b5-ae49-7129-35167aed6a09");
INSERT INTO DIM_WAY
	VALUES ("fa36c161-3d04-7659-c926-c9afec32b80d",
	928.000000,
	1776.000000,
	"660bcee0-9ae0-c9ca-609f-2a822a9edc2f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("efac1e86-25b5-ae49-7129-35167aed6a09",
	928.000000,
	1840.000000,
	"660bcee0-9ae0-c9ca-609f-2a822a9edc2f",
	"00000000-0000-0000-0000-000000000000",
	"fa36c161-3d04-7659-c926-c9afec32b80d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"660bcee0-9ae0-c9ca-609f-2a822a9edc2f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("660bcee0-9ae0-c9ca-609f-2a822a9edc2f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("c3293ac3-30f4-7e23-b188-5a0f9a33e871",
	"62037fdd-c42f-1674-f51d-5170e9c59d9e",
	"660bcee0-9ae0-c9ca-609f-2a822a9edc2f");
INSERT INTO GD_GE
	VALUES ("415f27b5-0df3-d9f1-66d7-6e5eeba91537",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"34a5e6e0-847a-50f3-ef23-f85efff5bdcf",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator::ET11: Start cardinality test');
INSERT INTO GD_CON
	VALUES ("415f27b5-0df3-d9f1-66d7-6e5eeba91537",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("706253eb-f137-a5f1-3d23-c0d706bfdf8d",
	"415f27b5-0df3-d9f1-66d7-6e5eeba91537",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"706253eb-f137-a5f1-3d23-c0d706bfdf8d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"706253eb-f137-a5f1-3d23-c0d706bfdf8d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("706253eb-f137-a5f1-3d23-c0d706bfdf8d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("93e75d9f-5389-f049-4aa4-bcf18e746f48",
	"415f27b5-0df3-d9f1-66d7-6e5eeba91537",
	3,
	-163.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (169.000000,
	36.000000,
	"93e75d9f-5389-f049-4aa4-bcf18e746f48");
INSERT INTO DIM_GE
	VALUES (749.000000,
	1961.000000,
	"93e75d9f-5389-f049-4aa4-bcf18e746f48",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("93e75d9f-5389-f049-4aa4-bcf18e746f48",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("241e3e78-fd1d-0f07-f33a-d3525c4b797b",
	"415f27b5-0df3-d9f1-66d7-6e5eeba91537",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"241e3e78-fd1d-0f07-f33a-d3525c4b797b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"241e3e78-fd1d-0f07-f33a-d3525c4b797b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("241e3e78-fd1d-0f07-f33a-d3525c4b797b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("9b541927-4b64-f0e1-f970-af01a8cc34e4",
	"415f27b5-0df3-d9f1-66d7-6e5eeba91537",
	"00000000-0000-0000-0000-000000000000",
	"76d10a5a-490b-5f57-015d-c2c9394d6fa9",
	"f3fb82ad-fab3-79bf-5dbf-9b077cb63690");
INSERT INTO DIM_WAY
	VALUES ("76d10a5a-490b-5f57-015d-c2c9394d6fa9",
	928.000000,
	1936.000000,
	"415f27b5-0df3-d9f1-66d7-6e5eeba91537",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("f3fb82ad-fab3-79bf-5dbf-9b077cb63690",
	928.000000,
	2016.000000,
	"415f27b5-0df3-d9f1-66d7-6e5eeba91537",
	"00000000-0000-0000-0000-000000000000",
	"76d10a5a-490b-5f57-015d-c2c9394d6fa9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"415f27b5-0df3-d9f1-66d7-6e5eeba91537",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("415f27b5-0df3-d9f1-66d7-6e5eeba91537",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("2e85bc54-9d2e-cb31-e843-2b684697281e",
	"c6ee5505-ff05-e597-4da8-a96d334056fa",
	"415f27b5-0df3-d9f1-66d7-6e5eeba91537");
INSERT INTO GD_GE
	VALUES ("297abbd9-0b45-049a-446a-6e18044ac8d9",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"cf95098f-4252-ba65-3456-c9b4a1343e0f",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET1: Start Expression Test');
INSERT INTO GD_CON
	VALUES ("297abbd9-0b45-049a-446a-6e18044ac8d9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e8f64f3b-f6fb-c6bc-e3c2-98462398b1a4",
	"297abbd9-0b45-049a-446a-6e18044ac8d9",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e8f64f3b-f6fb-c6bc-e3c2-98462398b1a4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e8f64f3b-f6fb-c6bc-e3c2-98462398b1a4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e8f64f3b-f6fb-c6bc-e3c2-98462398b1a4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("dbae4ca3-e993-86ef-e13e-41b3bc3e2189",
	"297abbd9-0b45-049a-446a-6e18044ac8d9",
	3,
	-38.000000,
	-24.000000);
INSERT INTO DIM_ND
	VALUES (161.000000,
	35.000000,
	"dbae4ca3-e993-86ef-e13e-41b3bc3e2189");
INSERT INTO DIM_GE
	VALUES (681.000000,
	1279.000000,
	"dbae4ca3-e993-86ef-e13e-41b3bc3e2189",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dbae4ca3-e993-86ef-e13e-41b3bc3e2189",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cd6af984-20ac-3810-9e56-2a06ee5eaa01",
	"297abbd9-0b45-049a-446a-6e18044ac8d9",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"cd6af984-20ac-3810-9e56-2a06ee5eaa01");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cd6af984-20ac-3810-9e56-2a06ee5eaa01",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cd6af984-20ac-3810-9e56-2a06ee5eaa01",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("612140f3-dc7b-3474-5009-e8735eb7ccae",
	"297abbd9-0b45-049a-446a-6e18044ac8d9",
	"00000000-0000-0000-0000-000000000000",
	"b1e6513a-b442-8775-8220-fdeb6be4cc44",
	"a9b189f0-d19d-08bd-936a-c175b31462c8");
INSERT INTO GD_LS
	VALUES ("6d8d2bc5-9a35-58fb-5e2b-1c2f68d2b312",
	"297abbd9-0b45-049a-446a-6e18044ac8d9",
	"612140f3-dc7b-3474-5009-e8735eb7ccae",
	"a9b189f0-d19d-08bd-936a-c175b31462c8",
	"7a04ed76-b266-c03f-2716-8d8fcd65a5f4");
INSERT INTO GD_LS
	VALUES ("71d1d666-ad54-5deb-1cc8-9924f62340cf",
	"297abbd9-0b45-049a-446a-6e18044ac8d9",
	"6d8d2bc5-9a35-58fb-5e2b-1c2f68d2b312",
	"7a04ed76-b266-c03f-2716-8d8fcd65a5f4",
	"5efbb9d4-4c1d-7c59-dbc6-af3ba7a0b9ad");
INSERT INTO GD_LS
	VALUES ("6cf90629-629b-6679-56ea-d7cb73ee0c7a",
	"297abbd9-0b45-049a-446a-6e18044ac8d9",
	"71d1d666-ad54-5deb-1cc8-9924f62340cf",
	"5efbb9d4-4c1d-7c59-dbc6-af3ba7a0b9ad",
	"16c865e5-0bc7-d67c-7ad2-564d67f7a302");
INSERT INTO DIM_WAY
	VALUES ("b1e6513a-b442-8775-8220-fdeb6be4cc44",
	752.000000,
	1408.000000,
	"297abbd9-0b45-049a-446a-6e18044ac8d9",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a9b189f0-d19d-08bd-936a-c175b31462c8",
	624.000000,
	1408.000000,
	"297abbd9-0b45-049a-446a-6e18044ac8d9",
	"00000000-0000-0000-0000-000000000000",
	"b1e6513a-b442-8775-8220-fdeb6be4cc44");
INSERT INTO DIM_WAY
	VALUES ("7a04ed76-b266-c03f-2716-8d8fcd65a5f4",
	624.000000,
	1328.000000,
	"297abbd9-0b45-049a-446a-6e18044ac8d9",
	"00000000-0000-0000-0000-000000000000",
	"a9b189f0-d19d-08bd-936a-c175b31462c8");
INSERT INTO DIM_WAY
	VALUES ("5efbb9d4-4c1d-7c59-dbc6-af3ba7a0b9ad",
	784.000000,
	1328.000000,
	"297abbd9-0b45-049a-446a-6e18044ac8d9",
	"00000000-0000-0000-0000-000000000000",
	"7a04ed76-b266-c03f-2716-8d8fcd65a5f4");
INSERT INTO DIM_WAY
	VALUES ("16c865e5-0bc7-d67c-7ad2-564d67f7a302",
	784.000000,
	1360.000000,
	"297abbd9-0b45-049a-446a-6e18044ac8d9",
	"00000000-0000-0000-0000-000000000000",
	"5efbb9d4-4c1d-7c59-dbc6-af3ba7a0b9ad");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"297abbd9-0b45-049a-446a-6e18044ac8d9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("297abbd9-0b45-049a-446a-6e18044ac8d9",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("9878a3be-8266-7909-54fb-bc1ac9d04a37",
	"a051dcfa-10f3-cbe6-6fd7-ad59b5c72fc9",
	"297abbd9-0b45-049a-446a-6e18044ac8d9");
INSERT INTO GD_GE
	VALUES ("41e74fe7-9537-a710-47c7-e26d778d4a3d",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"9fa007f1-541d-0bc4-3c0f-4aa0d489a4a2",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not operator::ET12: Start empty test');
INSERT INTO GD_CON
	VALUES ("41e74fe7-9537-a710-47c7-e26d778d4a3d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("11862057-7a8e-47f3-44fc-84828ec88cce",
	"41e74fe7-9537-a710-47c7-e26d778d4a3d",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"11862057-7a8e-47f3-44fc-84828ec88cce");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"11862057-7a8e-47f3-44fc-84828ec88cce",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("11862057-7a8e-47f3-44fc-84828ec88cce",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9111c24a-6c88-dc5a-34ce-b14e75c390dd",
	"41e74fe7-9537-a710-47c7-e26d778d4a3d",
	3,
	-159.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (189.000000,
	36.000000,
	"9111c24a-6c88-dc5a-34ce-b14e75c390dd");
INSERT INTO DIM_GE
	VALUES (753.000000,
	1632.000000,
	"9111c24a-6c88-dc5a-34ce-b14e75c390dd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9111c24a-6c88-dc5a-34ce-b14e75c390dd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("317d1bbb-164b-fea7-0eae-c7b321758411",
	"41e74fe7-9537-a710-47c7-e26d778d4a3d",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"317d1bbb-164b-fea7-0eae-c7b321758411");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"317d1bbb-164b-fea7-0eae-c7b321758411",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("317d1bbb-164b-fea7-0eae-c7b321758411",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("50d71e53-8d73-be9d-c58d-87044ca0b42a",
	"41e74fe7-9537-a710-47c7-e26d778d4a3d",
	"00000000-0000-0000-0000-000000000000",
	"11df28f9-1db0-9565-d329-8ea513feb1bf",
	"3ca9d8b3-894b-b567-3166-249cf1b1f770");
INSERT INTO DIM_WAY
	VALUES ("11df28f9-1db0-9565-d329-8ea513feb1bf",
	928.000000,
	1616.000000,
	"41e74fe7-9537-a710-47c7-e26d778d4a3d",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("3ca9d8b3-894b-b567-3166-249cf1b1f770",
	928.000000,
	1680.000000,
	"41e74fe7-9537-a710-47c7-e26d778d4a3d",
	"00000000-0000-0000-0000-000000000000",
	"11df28f9-1db0-9565-d329-8ea513feb1bf");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"41e74fe7-9537-a710-47c7-e26d778d4a3d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("41e74fe7-9537-a710-47c7-e26d778d4a3d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("1411764e-4e7b-6b68-9c85-9db8c45907b3",
	"08c8674f-9f93-f4e9-d40a-6dc89537e3ca",
	"41e74fe7-9537-a710-47c7-e26d778d4a3d");
INSERT INTO GD_GE
	VALUES ("a2ac026c-e9c5-3e22-c8d0-e4584d4d1801",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"cdd13c86-54db-7f68-6857-5ca99f29f6ba",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET13: Start not test');
INSERT INTO GD_CON
	VALUES ("a2ac026c-e9c5-3e22-c8d0-e4584d4d1801",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("417fd69a-2cb2-dd36-2539-b18ba65d96f1",
	"a2ac026c-e9c5-3e22-c8d0-e4584d4d1801",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"417fd69a-2cb2-dd36-2539-b18ba65d96f1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"417fd69a-2cb2-dd36-2539-b18ba65d96f1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("417fd69a-2cb2-dd36-2539-b18ba65d96f1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e21e76e8-2057-b1c7-c170-faca380ceef5",
	"a2ac026c-e9c5-3e22-c8d0-e4584d4d1801",
	3,
	-220.000000,
	-6.000000);
INSERT INTO DIM_ND
	VALUES (226.000000,
	40.000000,
	"e21e76e8-2057-b1c7-c170-faca380ceef5");
INSERT INTO DIM_GE
	VALUES (692.000000,
	1475.000000,
	"e21e76e8-2057-b1c7-c170-faca380ceef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e21e76e8-2057-b1c7-c170-faca380ceef5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6ec973f9-0aae-cd05-a528-d473eca57bd6",
	"a2ac026c-e9c5-3e22-c8d0-e4584d4d1801",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6ec973f9-0aae-cd05-a528-d473eca57bd6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6ec973f9-0aae-cd05-a528-d473eca57bd6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6ec973f9-0aae-cd05-a528-d473eca57bd6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("8eb395f5-9be8-7cdb-6477-60b861cb0649",
	"a2ac026c-e9c5-3e22-c8d0-e4584d4d1801",
	"00000000-0000-0000-0000-000000000000",
	"48a6fca6-968f-2828-5ff2-814537099057",
	"1a5b91f1-5eb5-d566-7a36-850c6d9daa5b");
INSERT INTO DIM_WAY
	VALUES ("48a6fca6-968f-2828-5ff2-814537099057",
	928.000000,
	1456.000000,
	"a2ac026c-e9c5-3e22-c8d0-e4584d4d1801",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("1a5b91f1-5eb5-d566-7a36-850c6d9daa5b",
	928.000000,
	1536.000000,
	"a2ac026c-e9c5-3e22-c8d0-e4584d4d1801",
	"00000000-0000-0000-0000-000000000000",
	"48a6fca6-968f-2828-5ff2-814537099057");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a2ac026c-e9c5-3e22-c8d0-e4584d4d1801",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a2ac026c-e9c5-3e22-c8d0-e4584d4d1801",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("efa63970-f66e-ad0f-1218-909301a5f75d",
	"7447030e-f67e-3698-55db-32edac7f81a0",
	"a2ac026c-e9c5-3e22-c8d0-e4584d4d1801");
INSERT INTO GD_GE
	VALUES ("97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"ff6f1b48-36d8-488e-f7ea-8a35c8743cbe",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator::ET14: Start subtract test');
INSERT INTO GD_CON
	VALUES ("97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("269f9284-0b56-1d68-67ac-a700d916bd92",
	"97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"269f9284-0b56-1d68-67ac-a700d916bd92");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"269f9284-0b56-1d68-67ac-a700d916bd92",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("269f9284-0b56-1d68-67ac-a700d916bd92",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("caeaf7c1-3958-3c89-12ca-7d3c88c66791",
	"97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01",
	3,
	-54.000000,
	-372.000000);
INSERT INTO DIM_ND
	VALUES (233.000000,
	39.000000,
	"caeaf7c1-3958-3c89-12ca-7d3c88c66791");
INSERT INTO DIM_GE
	VALUES (1098.000000,
	1333.000000,
	"caeaf7c1-3958-3c89-12ca-7d3c88c66791",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("caeaf7c1-3958-3c89-12ca-7d3c88c66791",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("db947c14-24d1-60ff-5871-3e7790d4d3ee",
	"97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"db947c14-24d1-60ff-5871-3e7790d4d3ee");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"db947c14-24d1-60ff-5871-3e7790d4d3ee",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("db947c14-24d1-60ff-5871-3e7790d4d3ee",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2b4a05ac-9831-97d8-0cc8-3ee062ba4ee7",
	"97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01",
	"00000000-0000-0000-0000-000000000000",
	"e071f86c-532a-2b20-6ff8-9fc7a55fe55f",
	"3acb94d1-fca8-71a7-cbff-3177a5c4ef3c");
INSERT INTO GD_LS
	VALUES ("2725b05b-bcf1-c063-4842-831c2cfa7c0e",
	"97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01",
	"2b4a05ac-9831-97d8-0cc8-3ee062ba4ee7",
	"3acb94d1-fca8-71a7-cbff-3177a5c4ef3c",
	"0b8bc06f-dcbf-0f3b-4810-54ab15b7d938");
INSERT INTO GD_LS
	VALUES ("59f6b045-65a1-2e45-0b41-17c14daeee7b",
	"97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01",
	"2725b05b-bcf1-c063-4842-831c2cfa7c0e",
	"0b8bc06f-dcbf-0f3b-4810-54ab15b7d938",
	"50ef3114-2747-069a-e744-a19f31e34897");
INSERT INTO DIM_WAY
	VALUES ("e071f86c-532a-2b20-6ff8-9fc7a55fe55f",
	1072.000000,
	2080.000000,
	"97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("3acb94d1-fca8-71a7-cbff-3177a5c4ef3c",
	1168.000000,
	2080.000000,
	"97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01",
	"00000000-0000-0000-0000-000000000000",
	"e071f86c-532a-2b20-6ff8-9fc7a55fe55f");
INSERT INTO DIM_WAY
	VALUES ("0b8bc06f-dcbf-0f3b-4810-54ab15b7d938",
	1168.000000,
	1376.000000,
	"97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01",
	"00000000-0000-0000-0000-000000000000",
	"3acb94d1-fca8-71a7-cbff-3177a5c4ef3c");
INSERT INTO DIM_WAY
	VALUES ("50ef3114-2747-069a-e744-a19f31e34897",
	1280.000000,
	1376.000000,
	"97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01",
	"00000000-0000-0000-0000-000000000000",
	"0b8bc06f-dcbf-0f3b-4810-54ab15b7d938");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("733301ab-c967-b343-ac41-48c37884fe79",
	"92cdc9ff-e39c-5934-16f7-9afa8670e150",
	"97e993de-49bd-b7cc-ae9d-dcdd7d6ddf01");
INSERT INTO GD_GE
	VALUES ("f9e15034-377d-39d0-8b3b-ef5db77cc107",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"784504ea-ab07-1eac-c5e9-37e4a4b84356",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("f9e15034-377d-39d0-8b3b-ef5db77cc107",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cec60f05-65bf-42e9-e89c-9013fe0fa91e",
	"f9e15034-377d-39d0-8b3b-ef5db77cc107",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"cec60f05-65bf-42e9-e89c-9013fe0fa91e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cec60f05-65bf-42e9-e89c-9013fe0fa91e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cec60f05-65bf-42e9-e89c-9013fe0fa91e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("47a9b9c7-267e-aaf3-c134-0c06ff67a6a9",
	"f9e15034-377d-39d0-8b3b-ef5db77cc107",
	3,
	-210.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (220.000000,
	34.000000,
	"47a9b9c7-267e-aaf3-c134-0c06ff67a6a9");
INSERT INTO DIM_GE
	VALUES (1198.000000,
	1469.000000,
	"47a9b9c7-267e-aaf3-c134-0c06ff67a6a9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("47a9b9c7-267e-aaf3-c134-0c06ff67a6a9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5e3f779a-327d-de6b-b85d-c8f9263a8d96",
	"f9e15034-377d-39d0-8b3b-ef5db77cc107",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5e3f779a-327d-de6b-b85d-c8f9263a8d96");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5e3f779a-327d-de6b-b85d-c8f9263a8d96",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5e3f779a-327d-de6b-b85d-c8f9263a8d96",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2839dd50-bda9-c967-1ebb-731592cc69c2",
	"f9e15034-377d-39d0-8b3b-ef5db77cc107",
	"00000000-0000-0000-0000-000000000000",
	"93df0664-2c25-c27a-2db8-1c4ea8bc1e68",
	"ceb4cfad-ff87-1d82-b0e4-129d0434ab60");
INSERT INTO DIM_WAY
	VALUES ("93df0664-2c25-c27a-2db8-1c4ea8bc1e68",
	1424.000000,
	1456.000000,
	"f9e15034-377d-39d0-8b3b-ef5db77cc107",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("ceb4cfad-ff87-1d82-b0e4-129d0434ab60",
	1424.000000,
	1520.000000,
	"f9e15034-377d-39d0-8b3b-ef5db77cc107",
	"00000000-0000-0000-0000-000000000000",
	"93df0664-2c25-c27a-2db8-1c4ea8bc1e68");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f9e15034-377d-39d0-8b3b-ef5db77cc107",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f9e15034-377d-39d0-8b3b-ef5db77cc107",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b906f96d-cf60-215f-e23d-fbcce8b9d135",
	"1a201332-8e33-3f16-6c63-8add1b3e6df4",
	"f9e15034-377d-39d0-8b3b-ef5db77cc107");
INSERT INTO GD_GE
	VALUES ("7f2c380c-8996-8c3d-cf94-807617f1eba6",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"262cf679-02e3-a7ce-b418-7f8e0211e719",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing assign::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("7f2c380c-8996-8c3d-cf94-807617f1eba6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1ff79555-795f-90d8-15a9-bf4a7fc99408",
	"7f2c380c-8996-8c3d-cf94-807617f1eba6",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1ff79555-795f-90d8-15a9-bf4a7fc99408");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1ff79555-795f-90d8-15a9-bf4a7fc99408",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1ff79555-795f-90d8-15a9-bf4a7fc99408",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("280e025a-fdf4-2ea1-9c41-bfac6f4e77e2",
	"7f2c380c-8996-8c3d-cf94-807617f1eba6",
	3,
	-246.000000,
	-3.000000);
INSERT INTO DIM_ND
	VALUES (263.000000,
	34.000000,
	"280e025a-fdf4-2ea1-9c41-bfac6f4e77e2");
INSERT INTO DIM_GE
	VALUES (1194.000000,
	1630.000000,
	"280e025a-fdf4-2ea1-9c41-bfac6f4e77e2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("280e025a-fdf4-2ea1-9c41-bfac6f4e77e2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b0a7728b-e48c-aac0-17ff-ec993015b7fa",
	"7f2c380c-8996-8c3d-cf94-807617f1eba6",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b0a7728b-e48c-aac0-17ff-ec993015b7fa");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b0a7728b-e48c-aac0-17ff-ec993015b7fa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b0a7728b-e48c-aac0-17ff-ec993015b7fa",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("20cc23cb-dc58-a20a-8c09-6238ffd96857",
	"7f2c380c-8996-8c3d-cf94-807617f1eba6",
	"00000000-0000-0000-0000-000000000000",
	"3dd8eef2-c1d0-8a9c-da45-4316106b58c3",
	"a4eca4c2-65ea-0a37-a511-f7059ee10dd5");
INSERT INTO DIM_WAY
	VALUES ("3dd8eef2-c1d0-8a9c-da45-4316106b58c3",
	1456.000000,
	1616.000000,
	"7f2c380c-8996-8c3d-cf94-807617f1eba6",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a4eca4c2-65ea-0a37-a511-f7059ee10dd5",
	1456.000000,
	1680.000000,
	"7f2c380c-8996-8c3d-cf94-807617f1eba6",
	"00000000-0000-0000-0000-000000000000",
	"3dd8eef2-c1d0-8a9c-da45-4316106b58c3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7f2c380c-8996-8c3d-cf94-807617f1eba6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7f2c380c-8996-8c3d-cf94-807617f1eba6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("5464e623-c51f-46ba-584a-b0826d42b82e",
	"92f83875-4a0f-4d09-e1e9-05aa737e6592",
	"7f2c380c-8996-8c3d-cf94-807617f1eba6");
INSERT INTO GD_GE
	VALUES ("29b46e67-7cb7-fe3e-bced-97988a822570",
	"ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"7d77c1bc-3502-17f9-db93-6a04522cbc13",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Additional assign tests::ET16: Start and test');
INSERT INTO GD_CON
	VALUES ("29b46e67-7cb7-fe3e-bced-97988a822570",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6ef33ae7-e6e2-5e7b-6536-ebd493c10b5b",
	"29b46e67-7cb7-fe3e-bced-97988a822570",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6ef33ae7-e6e2-5e7b-6536-ebd493c10b5b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6ef33ae7-e6e2-5e7b-6536-ebd493c10b5b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6ef33ae7-e6e2-5e7b-6536-ebd493c10b5b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e213ff4f-61f3-8a1d-3b5b-b1f585dc17ed",
	"29b46e67-7cb7-fe3e-bced-97988a822570",
	3,
	22.000000,
	16.000000);
INSERT INTO DIM_ND
	VALUES (187.000000,
	35.000000,
	"e213ff4f-61f3-8a1d-3b5b-b1f585dc17ed");
INSERT INTO DIM_GE
	VALUES (1654.000000,
	1641.000000,
	"e213ff4f-61f3-8a1d-3b5b-b1f585dc17ed",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e213ff4f-61f3-8a1d-3b5b-b1f585dc17ed",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f3d3d9a5-e268-f679-68c3-c665a84fa5d5",
	"29b46e67-7cb7-fe3e-bced-97988a822570",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f3d3d9a5-e268-f679-68c3-c665a84fa5d5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f3d3d9a5-e268-f679-68c3-c665a84fa5d5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f3d3d9a5-e268-f679-68c3-c665a84fa5d5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("35ae7550-4939-3ce4-d8bc-b0850187ac01",
	"29b46e67-7cb7-fe3e-bced-97988a822570",
	"00000000-0000-0000-0000-000000000000",
	"7f730a7f-c73e-4ae1-5af5-671cc99d32f5",
	"91dbf9fa-d53b-8532-d22c-e9bf71391036");
INSERT INTO GD_LS
	VALUES ("b0609da8-4634-d404-a01b-90cdb7914533",
	"29b46e67-7cb7-fe3e-bced-97988a822570",
	"35ae7550-4939-3ce4-d8bc-b0850187ac01",
	"91dbf9fa-d53b-8532-d22c-e9bf71391036",
	"75aefc8d-f9da-06c9-ea7f-21c63ca638fe");
INSERT INTO GD_LS
	VALUES ("65be6c4f-3b09-0700-1515-660fbb2ef3dc",
	"29b46e67-7cb7-fe3e-bced-97988a822570",
	"b0609da8-4634-d404-a01b-90cdb7914533",
	"75aefc8d-f9da-06c9-ea7f-21c63ca638fe",
	"3ab0b9d2-84fa-d395-d242-1d2e456498ed");
INSERT INTO DIM_WAY
	VALUES ("7f730a7f-c73e-4ae1-5af5-671cc99d32f5",
	1600.000000,
	1728.000000,
	"29b46e67-7cb7-fe3e-bced-97988a822570",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("91dbf9fa-d53b-8532-d22c-e9bf71391036",
	1648.000000,
	1728.000000,
	"29b46e67-7cb7-fe3e-bced-97988a822570",
	"00000000-0000-0000-0000-000000000000",
	"7f730a7f-c73e-4ae1-5af5-671cc99d32f5");
INSERT INTO DIM_WAY
	VALUES ("75aefc8d-f9da-06c9-ea7f-21c63ca638fe",
	1648.000000,
	1568.000000,
	"29b46e67-7cb7-fe3e-bced-97988a822570",
	"00000000-0000-0000-0000-000000000000",
	"91dbf9fa-d53b-8532-d22c-e9bf71391036");
INSERT INTO DIM_WAY
	VALUES ("3ab0b9d2-84fa-d395-d242-1d2e456498ed",
	1712.000000,
	1568.000000,
	"29b46e67-7cb7-fe3e-bced-97988a822570",
	"00000000-0000-0000-0000-000000000000",
	"75aefc8d-f9da-06c9-ea7f-21c63ca638fe");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"29b46e67-7cb7-fe3e-bced-97988a822570",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("29b46e67-7cb7-fe3e-bced-97988a822570",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a24f6cbf-0b02-6f93-6120-ad9575eb8fc0",
	"1dc43bdb-4fd4-ac6b-967a-bb906b3c29a1",
	"29b46e67-7cb7-fe3e-bced-97988a822570");
INSERT INTO DIM_DIA
	VALUES ("ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	'Many Instances',
	7,
	'MI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("4a3279f8-a91f-56ff-eda9-af36e35c2279",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_BATTR
	VALUES ("4a3279f8-a91f-56ff-eda9-af36e35c2279",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_ATTR
	VALUES ("4a3279f8-a91f-56ff-eda9-af36e35c2279",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"00000000-0000-0000-0000-000000000000",
	'mi_id',
	'',
	'',
	'mi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	"3fada4f9-1878-6dd7-1906-5914adad93cc",
	"bd201d9f-9c61-13d7-45a4-6d424fce92da",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R4');
INSERT INTO O_RATTR
	VALUES ("3fada4f9-1878-6dd7-1906-5914adad93cc",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("3fada4f9-1878-6dd7-1906-5914adad93cc",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"4a3279f8-a91f-56ff-eda9-af36e35c2279",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_OIDA
	VALUES ("4a3279f8-a91f-56ff-eda9-af36e35c2279",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	0,
	'mi_id');
INSERT INTO O_ID
	VALUES (1,
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_ID
	VALUES (2,
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO PE_PE
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	'No Instances',
	5,
	'NOI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("f5f57f5e-d91e-e8e2-1864-b49204340583",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed");
INSERT INTO O_BATTR
	VALUES ("f5f57f5e-d91e-e8e2-1864-b49204340583",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed");
INSERT INTO O_ATTR
	VALUES ("f5f57f5e-d91e-e8e2-1864-b49204340583",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"00000000-0000-0000-0000-000000000000",
	'noi_id',
	'',
	'',
	'noi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	"5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	"bf73a6b3-0f53-09cc-e95f-9595e1214551",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R2');
INSERT INTO O_RATTR
	VALUES ("5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"f5f57f5e-d91e-e8e2-1864-b49204340583",
	'r2et_id',
	'',
	'r2',
	'et_id',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	"b7979066-d39c-7d74-2a9c-fe70783adc4d",
	"144d12fb-7e88-d1fb-53aa-424716231706",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R5');
INSERT INTO O_RATTR
	VALUES ("b7979066-d39c-7d74-2a9c-fe70783adc4d",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("b7979066-d39c-7d74-2a9c-fe70783adc4d",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	'r5et_id',
	'',
	'r5',
	'et_id',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"89bd3ddc-220e-59d9-128d-384c8758d6ed");
INSERT INTO O_OIDA
	VALUES ("f5f57f5e-d91e-e8e2-1864-b49204340583",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	0,
	'noi_id');
INSERT INTO O_ID
	VALUES (1,
	"89bd3ddc-220e-59d9-128d-384c8758d6ed");
INSERT INTO O_ID
	VALUES (2,
	"89bd3ddc-220e-59d9-128d-384c8758d6ed");
INSERT INTO PE_PE
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	'One Instance',
	6,
	'OI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_BATTR
	VALUES ("5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_ATTR
	VALUES ("5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"00000000-0000-0000-0000-000000000000",
	'oi_id',
	'',
	'',
	'oi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	"d5561ac6-abf8-eae6-cc8c-5770b39b5332",
	"a03c3f93-7906-d9ec-c231-9da2ea71de99",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R3');
INSERT INTO O_RATTR
	VALUES ("d5561ac6-abf8-eae6-cc8c-5770b39b5332",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("d5561ac6-abf8-eae6-cc8c-5770b39b5332",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_OIDA
	VALUES ("5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	'oi_id');
INSERT INTO O_ID
	VALUES (1,
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_ID
	VALUES (2,
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO PE_PE
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	'Other Boolean Expression Test',
	16,
	'OBET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO O_BATTR
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO O_ATTR
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"00000000-0000-0000-0000-000000000000",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5cf88885-59d8-3195-ae35-135d1c796b97",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO O_BATTR
	VALUES ("5cf88885-59d8-3195-ae35-135d1c796b97",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO O_ATTR
	VALUES ("5cf88885-59d8-3195-ae35-135d1c796b97",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_REF
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	0,
	"d35abe68-761c-4805-6622-ec58904bb650",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"8718f67e-1427-6471-bb23-360a7ff64490",
	"53ecd13f-5a18-e009-f37e-4d00cc943a99",
	"ac41f78c-bf20-3716-942e-d02f0d05f339",
	"6f9cac5f-d145-2003-3c68-d84bc896ad7f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Boolean Expression Test',
	'id',
	'R10');
INSERT INTO O_RATTR
	VALUES ("ac41f78c-bf20-3716-942e-d02f0d05f339",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"d35abe68-761c-4805-6622-ec58904bb650",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	1,
	'id');
INSERT INTO O_ATTR
	VALUES ("ac41f78c-bf20-3716-942e-d02f0d05f339",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"5cf88885-59d8-3195-ae35-135d1c796b97",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"6281fd6a-984d-f963-d287-24c4b8696965",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"d6b7451d-2f26-5d8f-7ceb-911d25c59960",
	"b15c758a-e852-d3b7-368c-45b43b3e1826",
	"d904a561-2f2a-08fc-c059-479eb1e72fe1",
	"c9a07dee-437c-ad45-d4da-33b893d485c8",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Third Boolean Expression Test',
	'btrue',
	'R11');
INSERT INTO O_RATTR
	VALUES ("d904a561-2f2a-08fc-c059-479eb1e72fe1",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"6281fd6a-984d-f963-d287-24c4b8696965",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("d904a561-2f2a-08fc-c059-479eb1e72fe1",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"ac41f78c-bf20-3716-942e-d02f0d05f339",
	'r11btrue',
	'',
	'r11',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"d6b7451d-2f26-5d8f-7ceb-911d25c59960",
	"b15c758a-e852-d3b7-368c-45b43b3e1826",
	"546af508-6644-720b-b9b9-0c2296469456",
	"2ccd5696-7ac7-25f4-5be6-b71dfc46c6e3",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Third Boolean Expression Test',
	'bfalse',
	'R11');
INSERT INTO O_RATTR
	VALUES ("546af508-6644-720b-b9b9-0c2296469456",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("546af508-6644-720b-b9b9-0c2296469456",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"d904a561-2f2a-08fc-c059-479eb1e72fe1",
	'r11bfalse',
	'',
	'r11',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO O_OIDA
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("5cf88885-59d8-3195-ae35-135d1c796b97",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	0,
	'btrue');
INSERT INTO O_ID
	VALUES (1,
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO O_ID
	VALUES (2,
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO PE_PE
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	'Third Boolean Expression Test',
	17,
	'TBET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("6281fd6a-984d-f963-d287-24c4b8696965",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_BATTR
	VALUES ("6281fd6a-984d-f963-d287-24c4b8696965",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ATTR
	VALUES ("6281fd6a-984d-f963-d287-24c4b8696965",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"00000000-0000-0000-0000-000000000000",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_BATTR
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ATTR
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"6281fd6a-984d-f963-d287-24c4b8696965",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_OIDA
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("6281fd6a-984d-f963-d287-24c4b8696965",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	'btrue');
INSERT INTO O_ID
	VALUES (1,
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ID
	VALUES (2,
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO PE_PE
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	'User Boolean Test',
	18,
	'UBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("359b56d2-80e5-9014-e822-7a8143d26491",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_BATTR
	VALUES ("359b56d2-80e5-9014-e822-7a8143d26491",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_ATTR
	VALUES ("359b56d2-80e5-9014-e822-7a8143d26491",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("db15a1f3-97b7-8e2e-310f-24660457e73d",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_BATTR
	VALUES ("db15a1f3-97b7-8e2e-310f-24660457e73d",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_ATTR
	VALUES ("db15a1f3-97b7-8e2e-310f-24660457e73d",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"359b56d2-80e5-9014-e822-7a8143d26491",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("18167654-c3d7-dcb9-eb04-63978bd2964c",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_BATTR
	VALUES ("18167654-c3d7-dcb9-eb04-63978bd2964c",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_ATTR
	VALUES ("18167654-c3d7-dcb9-eb04-63978bd2964c",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"db15a1f3-97b7-8e2e-310f-24660457e73d",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_REF
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"12e4e6ff-22c0-1870-1168-57551556f0ac",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	"973dbe08-33fa-a285-2845-2c8684a3fb11",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Other Boolean Test',
	'bfalse',
	'R12');
INSERT INTO O_RATTR
	VALUES ("517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"18167654-c3d7-dcb9-eb04-63978bd2964c",
	'r9bfalse',
	'',
	'r9',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"12e4e6ff-22c0-1870-1168-57551556f0ac",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"0302a6ef-07ab-c2dc-cd44-8aa4ee370951",
	"e0c89490-70ea-71e1-db27-031f50b642d4",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Other Boolean Test',
	'btrue',
	'R12');
INSERT INTO O_RATTR
	VALUES ("0302a6ef-07ab-c2dc-cd44-8aa4ee370951",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("0302a6ef-07ab-c2dc-cd44-8aa4ee370951",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	'r9btrue',
	'',
	'r9',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_BATTR
	VALUES ("e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_ATTR
	VALUES ("e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"0302a6ef-07ab-c2dc-cd44-8aa4ee370951",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_OIDA
	VALUES ("359b56d2-80e5-9014-e822-7a8143d26491",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_ID
	VALUES (2,
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO SM_ISM
	VALUES ("5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO SM_SM
	VALUES ("5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	'',
	6);
INSERT INTO SM_MOORE
	VALUES ("5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_EVTDI
	VALUES ("dc941269-2256-0660-884e-7d5a2f582d1d",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	'tfalse',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("ed46ca60-d19a-efb1-e730-129a702d308e",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	'ttrue',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"dc941269-2256-0660-884e-7d5a2f582d1d");
INSERT INTO SM_EVTDI
	VALUES ("74eb5380-80d0-f6c3-a4b5-7ca5ddb7054a",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	'tfalse',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("2e822a91-20bb-2eff-0b72-bff89b8d78d9",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	'tfalse',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("61b30634-6c3f-48f3-adec-67ff83b6c9e0",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	'tfalse',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("c7f0d3f0-e3f2-f62c-2753-92973dcb24d6",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	'ttrue',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"74eb5380-80d0-f6c3-a4b5-7ca5ddb7054a");
INSERT INTO SM_EVTDI
	VALUES ("7ada4c8c-fe54-8082-acfd-5deb709f4dc1",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	'ttrue',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"2e822a91-20bb-2eff-0b72-bff89b8d78d9");
INSERT INTO SM_EVTDI
	VALUES ("51673811-f9dc-1523-9ec1-8acc34c29def",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	'ttrue',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"61b30634-6c3f-48f3-adec-67ff83b6c9e0");
INSERT INTO SM_LEVT
	VALUES ("38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start and test',
	0,
	'',
	'UBT1',
	'');
INSERT INTO SM_LEVT
	VALUES ("c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Continue and test',
	0,
	'',
	'UBT2',
	'');
INSERT INTO SM_LEVT
	VALUES ("aa75aff3-40b8-c218-1567-bee8e6661517",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("aa75aff3-40b8-c218-1567-bee8e6661517",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("aa75aff3-40b8-c218-1567-bee8e6661517",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Start or test',
	0,
	'',
	'UBT3',
	'');
INSERT INTO SM_LEVT
	VALUES ("81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Continue or test',
	0,
	'',
	'UBT4',
	'');
INSERT INTO SM_STATE
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'And test 1a',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("2f0f85e9-2700-5245-0dc6-e43cb8c107df",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"fe2c1d5c-e9aa-19d9-5397-ebe748f5c546");
INSERT INTO SM_AH
	VALUES ("2f0f85e9-2700-5245-0dc6-e43cb8c107df",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_ACT
	VALUES ("2f0f85e9-2700-5245-0dc6-e43cb8c107df",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	1,
	'LOG::LogInfo(message:"Starting and (user-defined type) test") ;

//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    rcvd_evt
assign t5 = temp1 and rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 and rcvd_evt.ttrue ;
if ( t6 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t7 = temp2 and rcvd_evt.tfalse ;
if ( t7 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t8 = temp2 and rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 and self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 and self.btrue ;
if ( t14 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t15 = temp2 and self.bfalse ;
if ( t15 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t16 = temp2 and self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" and local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 and self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 and self.r9btrue ;
if ( t18 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t19 = temp2 and self.r9bfalse ;
if ( t19 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = temp2 and self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of UOBT;
assign t21 = temp1 and saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 and saf.btrue ;
if ( t22 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t23 = temp2 and saf.bfalse ;
if ( t23 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t24 = temp2 and saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of UOBT;
for each smf in smfs
assign t25 = temp1 and smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 and smf.btrue ;
if ( t26 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t27 = temp2 and smf.bfalse ;
if ( t27 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t28 = temp2 and smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->UOBT[R12];
assign t29 = temp1 and sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 and sor.btrue ;
if ( t30 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t31 = temp2 and sor.bfalse ;
if ( t31 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t32 = temp2 and sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->UOBT[R13];
assign t33 = temp1 and sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 and sar.btrue ;
if ( t34 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t35 = temp2 and sar.bfalse ;
if ( t35 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t36 = temp2 and sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->UOBT[R13];
for each smr in smrs
assign t37 = temp1 and smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 and smr.btrue ;
if ( t38 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t39 = temp2 and smr.bfalse ;
if ( t39 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t40 = temp2 and smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 and saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 and saf.r11btrue ;
if ( t42 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t43 = temp2 and saf.r11bfalse ;
if ( t43 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t44 = temp2 and saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 and smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 and smf.r11btrue ;
if ( t46 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t47 = temp2 and smf.r11bfalse ;
if ( t47 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t48 = temp2 and smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 and sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 and sor.r11btrue ;
if ( t50 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t51 = temp2 and sor.r11bfalse ;
if ( t51 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t52 = temp2 and sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 and sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 and sar.r11btrue ;
if ( t54 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t55 = temp2 and sar.r11bfalse ;
if ( t55 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t56 = temp2 and sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 and smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 and smr.r11btrue ;
if ( t58 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t59 = temp2 and smr.r11bfalse ;
if ( t59 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t60 = temp2 and smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse and temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue and temp1 ;
if ( t62 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t63 = rcvd_evt.tfalse and temp2 ;
if ( t63 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t64 = rcvd_evt.ttrue and temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse and rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue and rcvd_evt.tfalse ;
if ( t66 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t67 = rcvd_evt.tfalse and rcvd_evt.ttrue ;
if ( t67 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t68 = rcvd_evt.ttrue and rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse and false ;
if ( t69 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue and false ;
if ( t70 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t71 = rcvd_evt.tfalse and true ;
if ( t71 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t72 = rcvd_evt.ttrue and true ;
if ( t72 == true )
  LOG::LogSuccess(message:" and rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse and self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue and self.bfalse ;
if ( t74 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t75 = rcvd_evt.tfalse and self.btrue ;
if ( t75 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t76 = rcvd_evt.ttrue and self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse and self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue and self.r9bfalse ;
if ( t78 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t79 = rcvd_evt.tfalse and self.r9btrue ;
if ( t79 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t80 = rcvd_evt.ttrue and self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse and saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse and saf.btrue ;
if ( t82 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t83 = rcvd_evt.ttrue and saf.bfalse ;
if ( t83 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t84 = rcvd_evt.ttrue and saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse and smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse and smf.btrue ;
if ( t86 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t87 = rcvd_evt.ttrue and smf.bfalse ;
if ( t87 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t88 = rcvd_evt.ttrue and smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse and sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse and sor.btrue ;
if ( t90 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t91 = rcvd_evt.ttrue and sor.bfalse ;
if ( t91 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t92 = rcvd_evt.ttrue and sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse and sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse and sar.btrue ;
if ( t94 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t95 = rcvd_evt.ttrue and sar.bfalse ;
if ( t95 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t96 = rcvd_evt.ttrue and sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse and smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse and smr.btrue ;
if ( t98 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t99 = rcvd_evt.ttrue and smr.bfalse ;
if ( t99 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t100 = rcvd_evt.ttrue and smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse and saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse and saf.r11btrue ;
if ( t102 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t103 = rcvd_evt.ttrue and saf.r11bfalse ;
if ( t103 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t104 = rcvd_evt.ttrue and saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse and smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse and smf.r11btrue ;
if ( t106 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t107 = rcvd_evt.ttrue and smf.r11bfalse ;
if ( t107 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t108 = rcvd_evt.ttrue and smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse and sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse and sor.r11btrue ;
if ( t110 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t111 = rcvd_evt.ttrue and sor.r11bfalse ;
if ( t111 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t112 = rcvd_evt.ttrue and sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse and sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse and sar.r11btrue ;
if ( t114 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t115 = rcvd_evt.ttrue and sar.r11bfalse ;
if ( t115 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t116 = rcvd_evt.ttrue and sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse and smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse and smr.r11btrue ;
if ( t118 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t119 = rcvd_evt.ttrue and smr.r11bfalse ;
if ( t119 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t120 = rcvd_evt.ttrue and smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'And test 1b',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("a94ca778-b6a6-c284-0609-e388eb673d25",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"369250b7-b070-e2c7-a88f-fd29caeee7b7");
INSERT INTO SM_AH
	VALUES ("a94ca778-b6a6-c284-0609-e388eb673d25",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_ACT
	VALUES ("a94ca778-b6a6-c284-0609-e388eb673d25",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	1,
	'assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true and temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse and temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue and temp1 ;
if ( t182 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t183 = self.bfalse and temp2 ;
if ( t183 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t184 = self.btrue and temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" and self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse and rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue and rcvd_evt.tfalse ;
if ( t186 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t187 = self.bfalse and rcvd_evt.ttrue ;
if ( t187 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t188 = self.btrue and rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse and false ;
if ( t189 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue and false ;
if ( t190 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t191 = self.bfalse and true ;
if ( t191 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t192 = self.btrue and true ;
if ( t192 == true )
  LOG::LogSuccess(message:" and self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse and self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue and self.bfalse ;
if ( t194 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t195 = self.bfalse and self.btrue ;
if ( t195 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t196 = self.btrue and self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse and self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue and self.r9bfalse ;
if ( t198 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t199 = self.bfalse and self.r9btrue ;
if ( t199 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t200 = self.btrue and self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse and saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse and saf.btrue ;
if ( t202 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t203 = self.btrue and saf.bfalse ;
if ( t203 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t204 = self.btrue and saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse and smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse and smf.btrue ;
if ( t206 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t207 = self.btrue and smf.bfalse ;
if ( t207 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t208 = self.btrue and smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse and sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse and sor.btrue ;
if ( t210 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t211 = self.btrue and sor.bfalse ;
if ( t211 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t212 = self.btrue and sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse and sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse and sar.btrue ;
if ( t214 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t215 = self.btrue and sar.bfalse ;
if ( t215 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t216 = self.btrue and sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse and smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse and smr.btrue ;
if ( t218 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t219 = self.btrue and smr.bfalse ;
if ( t219 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t220 = self.btrue and smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse and saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse and saf.r11btrue ;
if ( t222 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t223 = self.btrue and saf.r11bfalse ;
if ( t223 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t224 = self.btrue and saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse and smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse and smf.r11btrue ;
if ( t226 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t227 = self.btrue and smf.r11bfalse ;
if ( t227 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t228 = self.btrue and smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse and sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse and sor.r11btrue ;
if ( t230 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t231 = self.btrue and sor.r11bfalse ;
if ( t231 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t232 = self.btrue and sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse and sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse and sar.r11btrue ;
if ( t234 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t235 = self.btrue and sar.r11bfalse ;
if ( t235 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t236 = self.btrue and sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse and smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse and smr.r11btrue ;
if ( t238 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t239 = self.btrue and smr.r11bfalse ;
if ( t239 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t240 = self.btrue and smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse and temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue and temp1 ;
if ( t242 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t243 = self.r9bfalse and temp2 ;
if ( t243 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t244 = self.r9btrue and temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse and rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue and rcvd_evt.tfalse ;
if ( t246 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t247 = self.r9bfalse and rcvd_evt.ttrue ;
if ( t247 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t248 = self.r9btrue and rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse and false ;
if ( t249 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue and false ;
if ( t250 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t251 = self.r9bfalse and true ;
if ( t251 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t252 = self.r9btrue and true ;
if ( t252 == true )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse and self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue and self.bfalse ;
if ( t254 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t255 = self.r9bfalse and self.btrue ;
if ( t255 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t256 = self.r9btrue and self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse and self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue and self.r9bfalse ;
if ( t258 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t259 = self.r9bfalse and self.r9btrue ;
if ( t259 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t260 = self.r9btrue and self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse and saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse and saf.btrue ;
if ( t262 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t263 = self.r9btrue and saf.bfalse ;
if ( t263 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t264 = self.r9btrue and saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse and smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse and smf.btrue ;
if ( t266 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t267 = self.r9btrue and smf.bfalse ;
if ( t267 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t268 = self.r9btrue and smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse and sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse and sor.btrue ;
if ( t270 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t271 = self.r9btrue and sor.bfalse ;
if ( t271 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t272 = self.r9btrue and sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse and sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse and sar.btrue ;
if ( t274 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t275 = self.r9btrue and sar.bfalse ;
if ( t275 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t276 = self.r9btrue and sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse and smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse and smr.btrue ;
if ( t278 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t279 = self.r9btrue and smr.bfalse ;
if ( t279 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t280 = self.r9btrue and smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse and saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse and saf.r11btrue ;
if ( t282 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t283 = self.r9btrue and saf.r11bfalse ;
if ( t283 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t284 = self.r9btrue and saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse and smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse and smf.r11btrue ;
if ( t286 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t287 = self.r9btrue and smf.r11bfalse ;
if ( t287 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t288 = self.r9btrue and smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse and sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse and sor.r11btrue ;
if ( t290 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t291 = self.r9btrue and sor.r11bfalse ;
if ( t291 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t292 = self.r9btrue and sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse and sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse and sar.r11btrue ;
if ( t294 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t295 = self.r9btrue and sar.r11bfalse ;
if ( t295 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t296 = self.r9btrue and sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse and smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse and smr.r11btrue ;
if ( t298 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t299 = self.r9btrue and smr.r11bfalse ;
if ( t299 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t300 = self.r9btrue and smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'And test 2',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("3f3193ac-6c0f-4e97-0c37-ffa659ffcf27",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"111fd4f6-f9af-ca6c-0f36-c9cac085d0a4");
INSERT INTO SM_AH
	VALUES ("3f3193ac-6c0f-4e97-0c37-ffa659ffcf27",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_ACT
	VALUES ("3f3193ac-6c0f-4e97-0c37-ffa659ffcf27",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	1,
	'//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse and temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue and temp1 ;
if ( t302 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t303 = saf.bfalse and temp2 ;
if ( t303 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t304 = saf.btrue and temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse and rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue and rcvd_evt.tfalse ;
if ( t306 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t307 = saf.bfalse and rcvd_evt.ttrue ;
if ( t307 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t308 = saf.btrue and rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse and false ;
if ( t309 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue and false ;
if ( t310 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t311 = saf.bfalse and true ;
if ( t311 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t312 = saf.btrue and true ;
if ( t312 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse and self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue and self.bfalse ;
if ( t314 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t315 = saf.bfalse and self.btrue ;
if ( t315 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t316 = saf.btrue and self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse and self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue and self.r9bfalse ;
if ( t318 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t319 = saf.bfalse and self.r9btrue ;
if ( t319 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t320 = saf.btrue and self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse and saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse and saf.btrue ;
if ( t322 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t323 = saf.btrue and saf.bfalse ;
if ( t323 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t324 = saf.btrue and saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse and smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse and smf.btrue ;
if ( t326 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t327 = saf.btrue and smf.bfalse ;
if ( t327 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t328 = saf.btrue and smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse and sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse and sor.btrue ;
if ( t330 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t331 = saf.btrue and sor.bfalse ;
if ( t331 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t332 = saf.btrue and sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse and sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse and sar.btrue ;
if ( t334 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t335 = saf.btrue and sar.bfalse ;
if ( t335 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t336 = saf.btrue and sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse and smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse and smr.btrue ;
if ( t338 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t339 = saf.btrue and smr.bfalse ;
if ( t339 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t340 = saf.btrue and smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse and saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse and saf.r11btrue ;
if ( t342 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t343 = saf.btrue and saf.r11bfalse ;
if ( t343 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t344 = saf.btrue and saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse and smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse and smf.r11btrue ;
if ( t346 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t347 = saf.btrue and smf.r11bfalse ;
if ( t347 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t348 = saf.btrue and smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse and sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse and sor.r11btrue ;
if ( t350 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t351 = saf.btrue and sor.r11bfalse ;
if ( t351 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t352 = saf.btrue and sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse and sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse and sar.r11btrue ;
if ( t354 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t355 = saf.btrue and sar.r11bfalse ;
if ( t355 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t356 = saf.btrue and sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse and smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse and smr.r11btrue ;
if ( t358 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t359 = saf.btrue and smr.r11bfalse ;
if ( t359 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t360 = saf.btrue and smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse and temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue and temp1 ;
if ( t602 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t603 = saf.r11bfalse and temp2 ;
if ( t603 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t604 = saf.r11btrue and temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse and rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue and rcvd_evt.tfalse ;
if ( t606 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t607 = saf.r11bfalse and rcvd_evt.ttrue ;
if ( t607 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t608 = saf.r11btrue and rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse and false ;
if ( t609 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue and false ;
if ( t610 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t611 = saf.r11bfalse and true ;
if ( t611 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t612 = saf.r11btrue and true ;
if ( t612 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse and self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue and self.bfalse ;
if ( t614 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t615 = saf.r11bfalse and self.btrue ;
if ( t615 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t616 = saf.r11btrue and self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse and self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue and self.r9bfalse ;
if ( t618 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t619 = saf.r11bfalse and self.r9btrue ;
if ( t619 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t620 = saf.r11btrue and self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse and saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse and saf.btrue ;
if ( t622 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t623 = saf.r11btrue and saf.bfalse ;
if ( t623 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t624 = saf.r11btrue and saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse and smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse and smf.btrue ;
if ( t626 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t627 = saf.r11btrue and smf.bfalse ;
if ( t627 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t628 = saf.r11btrue and smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse and sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse and sor.btrue ;
if ( t630 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t631 = saf.r11btrue and sor.bfalse ;
if ( t631 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t632 = saf.r11btrue and sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse and sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse and sar.btrue ;
if ( t634 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t635 = saf.r11btrue and sar.bfalse ;
if ( t635 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t636 = saf.r11btrue and sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse and smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse and smr.btrue ;
if ( t638 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t639 = saf.r11btrue and smr.bfalse ;
if ( t639 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t640 = saf.r11btrue and smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse and saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse and saf.r11btrue ;
if ( t642 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t643 = saf.r11btrue and saf.r11bfalse ;
if ( t643 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t644 = saf.r11btrue and saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse and smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse and smf.r11btrue ;
if ( t646 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t647 = saf.r11btrue and smf.r11bfalse ;
if ( t647 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t648 = saf.r11btrue and smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse and sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse and sor.r11btrue ;
if ( t650 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t651 = saf.r11btrue and sor.r11bfalse ;
if ( t651 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t652 = saf.r11btrue and sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse and sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse and sar.r11btrue ;
if ( t654 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t655 = saf.r11btrue and sar.r11bfalse ;
if ( t655 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t656 = saf.r11btrue and sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse and smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse and smr.r11btrue ;
if ( t658 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t659 = saf.r11btrue and smr.r11bfalse ;
if ( t659 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t660 = saf.r11btrue and smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed and (user-defined type) test") ;

//generate event to commence next test
generate UBT3:''Start or test''(tfalse:false, ttrue:true) to self;
 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1a',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("fc6ed29c-5ba8-0dde-8730-78f7f73a14bf",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e");
INSERT INTO SM_AH
	VALUES ("fc6ed29c-5ba8-0dde-8730-78f7f73a14bf",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_ACT
	VALUES ("fc6ed29c-5ba8-0dde-8730-78f7f73a14bf",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	1,
	'LOG::LogInfo(message:"Starting or (user-defined type) test") ;

//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    rcvd_evt
assign t5 = temp1 or rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 or rcvd_evt.ttrue ;
if ( t6 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t7 = temp2 or rcvd_evt.tfalse ;
if ( t7 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t8 = temp2 or rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 or false ;
if ( t9 == false )
  LOG::LogSuccess(message:" or local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 or true ;
if ( t10 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t11 = temp2 or false ;
if ( t11 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t12 = temp2 or true ;
if ( t12 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 or self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" or local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 or self.btrue ;
if ( t14 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t15 = temp2 or self.bfalse ;
if ( t15 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t16 = temp2 or self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 or self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 or self.r9btrue ;
if ( t18 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t19 = temp2 or self.r9bfalse ;
if ( t19 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t20 = temp2 or self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of UOBT;
assign t21 = temp1 or saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 or saf.btrue ;
if ( t22 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t23 = temp2 or saf.bfalse ;
if ( t23 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t24 = temp2 or saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of UOBT;
for each smf in smfs
assign t25 = temp1 or smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 or smf.btrue ;
if ( t26 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t27 = temp2 or smf.bfalse ;
if ( t27 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t28 = temp2 or smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->UOBT[R12];
assign t29 = temp1 or sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 or sor.btrue ;
if ( t30 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t31 = temp2 or sor.bfalse ;
if ( t31 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t32 = temp2 or sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->UOBT[R13];
assign t33 = temp1 or sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 or sar.btrue ;
if ( t34 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t35 = temp2 or sar.bfalse ;
if ( t35 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t36 = temp2 or sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->UOBT[R13];
for each smr in smrs
assign t37 = temp1 or smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 or smr.btrue ;
if ( t38 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t39 = temp2 or smr.bfalse ;
if ( t39 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t40 = temp2 or smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 or saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 or saf.r11btrue ;
if ( t42 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t43 = temp2 or saf.r11bfalse ;
if ( t43 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t44 = temp2 or saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 or smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 or smf.r11btrue ;
if ( t46 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t47 = temp2 or smf.r11bfalse ;
if ( t47 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t48 = temp2 or smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 or sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 or sor.r11btrue ;
if ( t50 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t51 = temp2 or sor.r11bfalse ;
if ( t51 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t52 = temp2 or sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 or sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 or sar.r11btrue ;
if ( t54 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t55 = temp2 or sar.r11bfalse ;
if ( t55 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t56 = temp2 or sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 or smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 or smr.r11btrue ;
if ( t58 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t59 = temp2 or smr.r11bfalse ;
if ( t59 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t60 = temp2 or smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse or temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue or temp1 ;
if ( t62 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t63 = rcvd_evt.tfalse or temp2 ;
if ( t63 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t64 = rcvd_evt.ttrue or temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse or rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue or rcvd_evt.tfalse ;
if ( t66 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t67 = rcvd_evt.tfalse or rcvd_evt.ttrue ;
if ( t67 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t68 = rcvd_evt.ttrue or rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse or false ;
if ( t69 == false )
  LOG::LogSuccess(message:" or rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue or false ;
if ( t70 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t71 = rcvd_evt.tfalse or true ;
if ( t71 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t72 = rcvd_evt.ttrue or true ;
if ( t72 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse or self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue or self.bfalse ;
if ( t74 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t75 = rcvd_evt.tfalse or self.btrue ;
if ( t75 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t76 = rcvd_evt.ttrue or self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse or self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue or self.r9bfalse ;
if ( t78 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t79 = rcvd_evt.tfalse or self.r9btrue ;
if ( t79 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t80 = rcvd_evt.ttrue or self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse or saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse or saf.btrue ;
if ( t82 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t83 = rcvd_evt.ttrue or saf.bfalse ;
if ( t83 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t84 = rcvd_evt.ttrue or saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse or smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse or smf.btrue ;
if ( t86 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t87 = rcvd_evt.ttrue or smf.bfalse ;
if ( t87 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t88 = rcvd_evt.ttrue or smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse or sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse or sor.btrue ;
if ( t90 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t91 = rcvd_evt.ttrue or sor.bfalse ;
if ( t91 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t92 = rcvd_evt.ttrue or sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse or sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse or sar.btrue ;
if ( t94 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t95 = rcvd_evt.ttrue or sar.bfalse ;
if ( t95 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t96 = rcvd_evt.ttrue or sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse or smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse or smr.btrue ;
if ( t98 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t99 = rcvd_evt.ttrue or smr.bfalse ;
if ( t99 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t100 = rcvd_evt.ttrue or smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse or saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse or saf.r11btrue ;
if ( t102 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t103 = rcvd_evt.ttrue or saf.r11bfalse ;
if ( t103 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t104 = rcvd_evt.ttrue or saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse or smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse or smf.r11btrue ;
if ( t106 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t107 = rcvd_evt.ttrue or smf.r11bfalse ;
if ( t107 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t108 = rcvd_evt.ttrue or smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse or sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse or sor.r11btrue ;
if ( t110 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t111 = rcvd_evt.ttrue or sor.r11bfalse ;
if ( t111 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t112 = rcvd_evt.ttrue or sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse or sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse or sar.r11btrue ;
if ( t114 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t115 = rcvd_evt.ttrue or sar.r11bfalse ;
if ( t115 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t116 = rcvd_evt.ttrue or sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse or smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse or smr.r11btrue ;
if ( t118 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t119 = rcvd_evt.ttrue or smr.r11bfalse ;
if ( t119 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t120 = rcvd_evt.ttrue or smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT4:''Continue or test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1b',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("88afca6b-8a78-fe8f-4514-9f3c1a15b772",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"7bdc584a-4f77-8dab-8456-4def4dd6e6d9");
INSERT INTO SM_AH
	VALUES ("88afca6b-8a78-fe8f-4514-9f3c1a15b772",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_ACT
	VALUES ("88afca6b-8a78-fe8f-4514-9f3c1a15b772",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	1,
	'
assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true or temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse or temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" or self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue or temp1 ;
if ( t182 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t183 = self.bfalse or temp2 ;
if ( t183 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t184 = self.btrue or temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse or rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue or rcvd_evt.tfalse ;
if ( t186 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t187 = self.bfalse or rcvd_evt.ttrue ;
if ( t187 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t188 = self.btrue or rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse or false ;
if ( t189 == false )
  LOG::LogSuccess(message:" or self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue or false ;
if ( t190 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t191 = self.bfalse or true ;
if ( t191 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t192 = self.btrue or true ;
if ( t192 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse or self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue or self.bfalse ;
if ( t194 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t195 = self.bfalse or self.btrue ;
if ( t195 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t196 = self.btrue or self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse or self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue or self.r9bfalse ;
if ( t198 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t199 = self.bfalse or self.r9btrue ;
if ( t199 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t200 = self.btrue or self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse or saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse or saf.btrue ;
if ( t202 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t203 = self.btrue or saf.bfalse ;
if ( t203 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t204 = self.btrue or saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse or smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse or smf.btrue ;
if ( t206 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t207 = self.btrue or smf.bfalse ;
if ( t207 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t208 = self.btrue or smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse or sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse or sor.btrue ;
if ( t210 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t211 = self.btrue or sor.bfalse ;
if ( t211 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t212 = self.btrue or sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse or sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse or sar.btrue ;
if ( t214 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t215 = self.btrue or sar.bfalse ;
if ( t215 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t216 = self.btrue or sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse or smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse or smr.btrue ;
if ( t218 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t219 = self.btrue or smr.bfalse ;
if ( t219 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t220 = self.btrue or smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse or saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse or saf.r11btrue ;
if ( t222 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t223 = self.btrue or saf.r11bfalse ;
if ( t223 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t224 = self.btrue or saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse or smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse or smf.r11btrue ;
if ( t226 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t227 = self.btrue or smf.r11bfalse ;
if ( t227 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t228 = self.btrue or smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse or sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse or sor.r11btrue ;
if ( t230 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t231 = self.btrue or sor.r11bfalse ;
if ( t231 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t232 = self.btrue or sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse or sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse or sar.r11btrue ;
if ( t234 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t235 = self.btrue or sar.r11bfalse ;
if ( t235 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t236 = self.btrue or sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse or smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse or smr.r11btrue ;
if ( t238 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t239 = self.btrue or smr.r11bfalse ;
if ( t239 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t240 = self.btrue or smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse or temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue or temp1 ;
if ( t242 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t243 = self.r9bfalse or temp2 ;
if ( t243 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t244 = self.r9btrue or temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse or rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue or rcvd_evt.tfalse ;
if ( t246 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t247 = self.r9bfalse or rcvd_evt.ttrue ;
if ( t247 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t248 = self.r9btrue or rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse or false ;
if ( t249 == false )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue or false ;
if ( t250 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t251 = self.r9bfalse or true ;
if ( t251 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t252 = self.r9btrue or true ;
if ( t252 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse or self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue or self.bfalse ;
if ( t254 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t255 = self.r9bfalse or self.btrue ;
if ( t255 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t256 = self.r9btrue or self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse or self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue or self.r9bfalse ;
if ( t258 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t259 = self.r9bfalse or self.r9btrue ;
if ( t259 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t260 = self.r9btrue or self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse or saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse or saf.btrue ;
if ( t262 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t263 = self.r9btrue or saf.bfalse ;
if ( t263 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t264 = self.r9btrue or saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse or smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse or smf.btrue ;
if ( t266 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t267 = self.r9btrue or smf.bfalse ;
if ( t267 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t268 = self.r9btrue or smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse or sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse or sor.btrue ;
if ( t270 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t271 = self.r9btrue or sor.bfalse ;
if ( t271 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t272 = self.r9btrue or sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse or sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse or sar.btrue ;
if ( t274 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t275 = self.r9btrue or sar.bfalse ;
if ( t275 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t276 = self.r9btrue or sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse or smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse or smr.btrue ;
if ( t278 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t279 = self.r9btrue or smr.bfalse ;
if ( t279 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t280 = self.r9btrue or smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse or saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse or saf.r11btrue ;
if ( t282 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t283 = self.r9btrue or saf.r11bfalse ;
if ( t283 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t284 = self.r9btrue or saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse or smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse or smf.r11btrue ;
if ( t286 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t287 = self.r9btrue or smf.r11bfalse ;
if ( t287 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t288 = self.r9btrue or smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse or sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse or sor.r11btrue ;
if ( t290 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t291 = self.r9btrue or sor.r11bfalse ;
if ( t291 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t292 = self.r9btrue or sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse or sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse or sar.r11btrue ;
if ( t294 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t295 = self.r9btrue or sar.r11bfalse ;
if ( t295 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t296 = self.r9btrue or sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse or smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse or smr.r11btrue ;
if ( t298 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t299 = self.r9btrue or smr.r11bfalse ;
if ( t299 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t300 = self.r9btrue or smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT4:''Continue or test''( ttrue: true, tfalse: false ) to self;


',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'Or test 2',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("bbe32523-9872-e4eb-93d5-89b4c2d02554",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"b99fcff7-7910-98b4-13b4-48497fa24a4a");
INSERT INTO SM_AH
	VALUES ("bbe32523-9872-e4eb-93d5-89b4c2d02554",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_ACT
	VALUES ("bbe32523-9872-e4eb-93d5-89b4c2d02554",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	1,
	'//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse or temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue or temp1 ;
if ( t302 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t303 = saf.bfalse or temp2 ;
if ( t303 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t304 = saf.btrue or temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse or rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue or rcvd_evt.tfalse ;
if ( t306 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t307 = saf.bfalse or rcvd_evt.ttrue ;
if ( t307 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t308 = saf.btrue or rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse or false ;
if ( t309 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue or false ;
if ( t310 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t311 = saf.bfalse or true ;
if ( t311 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t312 = saf.btrue or true ;
if ( t312 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse or self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue or self.bfalse ;
if ( t314 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t315 = saf.bfalse or self.btrue ;
if ( t315 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t316 = saf.btrue or self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse or self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue or self.r9bfalse ;
if ( t318 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t319 = saf.bfalse or self.r9btrue ;
if ( t319 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t320 = saf.btrue or self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse or saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse or saf.btrue ;
if ( t322 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t323 = saf.btrue or saf.bfalse ;
if ( t323 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t324 = saf.btrue or saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse or smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse or smf.btrue ;
if ( t326 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t327 = saf.btrue or smf.bfalse ;
if ( t327 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t328 = saf.btrue or smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse or sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse or sor.btrue ;
if ( t330 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t331 = saf.btrue or sor.bfalse ;
if ( t331 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t332 = saf.btrue or sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse or sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse or sar.btrue ;
if ( t334 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t335 = saf.btrue or sar.bfalse ;
if ( t335 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t336 = saf.btrue or sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse or smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse or smr.btrue ;
if ( t338 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t339 = saf.btrue or smr.bfalse ;
if ( t339 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t340 = saf.btrue or smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse or saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse or saf.r11btrue ;
if ( t342 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t343 = saf.btrue or saf.r11bfalse ;
if ( t343 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t344 = saf.btrue or saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse or smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse or smf.r11btrue ;
if ( t346 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t347 = saf.btrue or smf.r11bfalse ;
if ( t347 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t348 = saf.btrue or smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse or sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse or sor.r11btrue ;
if ( t350 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t351 = saf.btrue or sor.r11bfalse ;
if ( t351 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t352 = saf.btrue or sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse or sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse or sar.r11btrue ;
if ( t354 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t355 = saf.btrue or sar.r11bfalse ;
if ( t355 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t356 = saf.btrue or sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse or smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse or smr.r11btrue ;
if ( t358 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t359 = saf.btrue or smr.r11bfalse ;
if ( t359 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t360 = saf.btrue or smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse or temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue or temp1 ;
if ( t602 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t603 = saf.r11bfalse or temp2 ;
if ( t603 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t604 = saf.r11btrue or temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse or rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue or rcvd_evt.tfalse ;
if ( t606 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t607 = saf.r11bfalse or rcvd_evt.ttrue ;
if ( t607 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t608 = saf.r11btrue or rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse or false ;
if ( t609 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue or false ;
if ( t610 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t611 = saf.r11bfalse or true ;
if ( t611 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t612 = saf.r11btrue or true ;
if ( t612 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse or self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue or self.bfalse ;
if ( t614 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t615 = saf.r11bfalse or self.btrue ;
if ( t615 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t616 = saf.r11btrue or self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse or self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue or self.r9bfalse ;
if ( t618 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t619 = saf.r11bfalse or self.r9btrue ;
if ( t619 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t620 = saf.r11btrue or self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse or saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse or saf.btrue ;
if ( t622 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t623 = saf.r11btrue or saf.bfalse ;
if ( t623 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t624 = saf.r11btrue or saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse or smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse or smf.btrue ;
if ( t626 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t627 = saf.r11btrue or smf.bfalse ;
if ( t627 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t628 = saf.r11btrue or smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse or sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse or sor.btrue ;
if ( t630 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t631 = saf.r11btrue or sor.bfalse ;
if ( t631 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t632 = saf.r11btrue or sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse or sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse or sar.btrue ;
if ( t634 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t635 = saf.r11btrue or sar.bfalse ;
if ( t635 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t636 = saf.r11btrue or sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse or smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse or smr.btrue ;
if ( t638 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t639 = saf.r11btrue or smr.bfalse ;
if ( t639 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t640 = saf.r11btrue or smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse or saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse or saf.r11btrue ;
if ( t642 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t643 = saf.r11btrue or saf.r11bfalse ;
if ( t643 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t644 = saf.r11btrue or saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse or smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse or smf.r11btrue ;
if ( t646 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t647 = saf.r11btrue or smf.r11bfalse ;
if ( t647 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t648 = saf.r11btrue or smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse or sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse or sor.r11btrue ;
if ( t650 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t651 = saf.r11btrue or sor.r11bfalse ;
if ( t651 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t652 = saf.r11btrue or sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse or sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse or sar.r11btrue ;
if ( t654 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t655 = saf.r11btrue or sar.r11bfalse ;
if ( t655 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t656 = saf.r11btrue or sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse or smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse or smr.r11btrue ;
if ( t658 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t659 = saf.r11btrue or smr.r11bfalse ;
if ( t659 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t660 = saf.r11btrue or smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed or (user-defined type) test") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
 
 

',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("8d3d1fba-de33-a5f4-13c7-ca1fbe6e5091",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("c7f5303c-3c3e-2b8c-d390-28c85f70b013",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"8d3d1fba-de33-a5f4-13c7-ca1fbe6e5091");
INSERT INTO SM_AH
	VALUES ("c7f5303c-3c3e-2b8c-d390-28c85f70b013",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_ACT
	VALUES ("c7f5303c-3c3e-2b8c-d390-28c85f70b013",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("8d3d1fba-de33-a5f4-13c7-ca1fbe6e5091",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("0d33209d-819b-d9d4-c071-879715aa4ad5",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("79c2ce6b-ba68-b91f-a28e-089df8daa0e7",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"0d33209d-819b-d9d4-c071-879715aa4ad5");
INSERT INTO SM_AH
	VALUES ("79c2ce6b-ba68-b91f-a28e-089df8daa0e7",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_ACT
	VALUES ("79c2ce6b-ba68-b91f-a28e-089df8daa0e7",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("0d33209d-819b-d9d4-c071-879715aa4ad5",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("074f9794-c854-36f8-7fbe-953d45cd09da",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("3c8cf23b-0510-eb6e-a642-ac3e73928b75",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"074f9794-c854-36f8-7fbe-953d45cd09da");
INSERT INTO SM_AH
	VALUES ("3c8cf23b-0510-eb6e-a642-ac3e73928b75",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_ACT
	VALUES ("3c8cf23b-0510-eb6e-a642-ac3e73928b75",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("074f9794-c854-36f8-7fbe-953d45cd09da",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("ddc29b70-eecb-11e9-eb31-a98dd7dfef2d",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("666fff98-7a9f-75fb-7705-0dffaafcae4b",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"ddc29b70-eecb-11e9-eb31-a98dd7dfef2d");
INSERT INTO SM_AH
	VALUES ("666fff98-7a9f-75fb-7705-0dffaafcae4b",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_ACT
	VALUES ("666fff98-7a9f-75fb-7705-0dffaafcae4b",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("ddc29b70-eecb-11e9-eb31-a98dd7dfef2d",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("a29fdda1-5cd2-d79e-2a19-8384dff593e4",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("c5b34c36-a9b2-9a32-45ae-03a1cee07e82",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"a29fdda1-5cd2-d79e-2a19-8384dff593e4");
INSERT INTO SM_AH
	VALUES ("c5b34c36-a9b2-9a32-45ae-03a1cee07e82",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_ACT
	VALUES ("c5b34c36-a9b2-9a32-45ae-03a1cee07e82",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("a29fdda1-5cd2-d79e-2a19-8384dff593e4",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("9a4d225a-f77a-10c1-490a-4b9ecd091fb6",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("6216018b-e5df-ec9d-2d04-2abbcc1ddb9e",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"9a4d225a-f77a-10c1-490a-4b9ecd091fb6");
INSERT INTO SM_AH
	VALUES ("6216018b-e5df-ec9d-2d04-2abbcc1ddb9e",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5");
INSERT INTO SM_ACT
	VALUES ("6216018b-e5df-ec9d-2d04-2abbcc1ddb9e",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("9a4d225a-f77a-10c1-490a-4b9ecd091fb6",
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	"b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("8eab82da-0d06-df01-df8f-3ed3ddc91835",
	8,
	"5e3350ae-f5f9-7935-7b65-f39100af8ef5",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("51cc8dfb-b7a7-b003-5305-3bfd37fcadf8",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a');
INSERT INTO GD_SHP
	VALUES ("51cc8dfb-b7a7-b003-5305-3bfd37fcadf8");
INSERT INTO GD_NCS
	VALUES ("51cc8dfb-b7a7-b003-5305-3bfd37fcadf8");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"51cc8dfb-b7a7-b003-5305-3bfd37fcadf8");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1264.000000,
	"51cc8dfb-b7a7-b003-5305-3bfd37fcadf8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("51cc8dfb-b7a7-b003-5305-3bfd37fcadf8",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("6b2fd219-d81f-9710-8732-2d7de11d6304",
	1872.000000,
	1296.000000,
	"51cc8dfb-b7a7-b003-5305-3bfd37fcadf8");
INSERT INTO DIM_CON
	VALUES ("84e04458-b87c-a413-28d6-0842e5a6c0ca",
	1824.000000,
	1264.000000,
	"51cc8dfb-b7a7-b003-5305-3bfd37fcadf8");
INSERT INTO DIM_CON
	VALUES ("d34a8fd0-9211-040b-0561-9870903c36ee",
	1792.000000,
	1344.000000,
	"51cc8dfb-b7a7-b003-5305-3bfd37fcadf8");
INSERT INTO GD_GE
	VALUES ("7344faf6-a459-9df4-2097-d65b73230dce",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"369250b7-b070-e2c7-a88f-fd29caeee7b7",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1b');
INSERT INTO GD_SHP
	VALUES ("7344faf6-a459-9df4-2097-d65b73230dce");
INSERT INTO GD_NCS
	VALUES ("7344faf6-a459-9df4-2097-d65b73230dce");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"7344faf6-a459-9df4-2097-d65b73230dce");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1456.000000,
	"7344faf6-a459-9df4-2097-d65b73230dce",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7344faf6-a459-9df4-2097-d65b73230dce",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("4ba85157-cf5f-9b26-a37d-b5d72993497a",
	1792.000000,
	1456.000000,
	"7344faf6-a459-9df4-2097-d65b73230dce");
INSERT INTO DIM_CON
	VALUES ("5c5272e7-4432-cad8-a82d-d07c628ce183",
	1792.000000,
	1536.000000,
	"7344faf6-a459-9df4-2097-d65b73230dce");
INSERT INTO GD_GE
	VALUES ("5e7546ab-ad50-8c1c-7a2c-689f11406d64",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 2');
INSERT INTO GD_SHP
	VALUES ("5e7546ab-ad50-8c1c-7a2c-689f11406d64");
INSERT INTO GD_NCS
	VALUES ("5e7546ab-ad50-8c1c-7a2c-689f11406d64");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"5e7546ab-ad50-8c1c-7a2c-689f11406d64");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1648.000000,
	"5e7546ab-ad50-8c1c-7a2c-689f11406d64",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5e7546ab-ad50-8c1c-7a2c-689f11406d64",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("21176cc7-0ded-dcd6-6262-1ec3c049d929",
	1792.000000,
	1648.000000,
	"5e7546ab-ad50-8c1c-7a2c-689f11406d64");
INSERT INTO DIM_CON
	VALUES ("8cf77c42-5394-8d76-58eb-fa3a15a6bb58",
	1872.000000,
	1696.000000,
	"5e7546ab-ad50-8c1c-7a2c-689f11406d64");
INSERT INTO GD_GE
	VALUES ("514129c6-4a43-542b-780a-dd795002d26d",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1a');
INSERT INTO GD_SHP
	VALUES ("514129c6-4a43-542b-780a-dd795002d26d");
INSERT INTO GD_NCS
	VALUES ("514129c6-4a43-542b-780a-dd795002d26d");
INSERT INTO DIM_ND
	VALUES (128.000000,
	64.000000,
	"514129c6-4a43-542b-780a-dd795002d26d");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1296.000000,
	"514129c6-4a43-542b-780a-dd795002d26d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("514129c6-4a43-542b-780a-dd795002d26d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("10c08d68-cba9-d26c-1601-1b47c050757b",
	2096.000000,
	1360.000000,
	"514129c6-4a43-542b-780a-dd795002d26d");
INSERT INTO DIM_CON
	VALUES ("f6506742-f685-a8b9-2bdf-46b27b9363ca",
	2096.000000,
	1296.000000,
	"514129c6-4a43-542b-780a-dd795002d26d");
INSERT INTO GD_GE
	VALUES ("3f60c648-80e0-1b94-1505-86feabdd337c",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1b');
INSERT INTO GD_SHP
	VALUES ("3f60c648-80e0-1b94-1505-86feabdd337c");
INSERT INTO GD_NCS
	VALUES ("3f60c648-80e0-1b94-1505-86feabdd337c");
INSERT INTO DIM_ND
	VALUES (128.000000,
	80.000000,
	"3f60c648-80e0-1b94-1505-86feabdd337c");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1456.000000,
	"3f60c648-80e0-1b94-1505-86feabdd337c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3f60c648-80e0-1b94-1505-86feabdd337c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("f7fd8c56-135b-0b11-0905-250d54335cb8",
	2096.000000,
	1456.000000,
	"3f60c648-80e0-1b94-1505-86feabdd337c");
INSERT INTO DIM_CON
	VALUES ("a8b650bd-e038-e965-dd53-8a47bcf18fc7",
	2096.000000,
	1536.000000,
	"3f60c648-80e0-1b94-1505-86feabdd337c");
INSERT INTO GD_GE
	VALUES ("f3667aa4-d111-2978-b8a2-34845d1aaad1",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"b99fcff7-7910-98b4-13b4-48497fa24a4a",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 2');
INSERT INTO GD_SHP
	VALUES ("f3667aa4-d111-2978-b8a2-34845d1aaad1");
INSERT INTO GD_NCS
	VALUES ("f3667aa4-d111-2978-b8a2-34845d1aaad1");
INSERT INTO DIM_ND
	VALUES (128.000000,
	80.000000,
	"f3667aa4-d111-2978-b8a2-34845d1aaad1");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1648.000000,
	"f3667aa4-d111-2978-b8a2-34845d1aaad1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f3667aa4-d111-2978-b8a2-34845d1aaad1",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("ca6396a8-76b3-3d49-9830-04fc2fe09dd2",
	2096.000000,
	1648.000000,
	"f3667aa4-d111-2978-b8a2-34845d1aaad1");
INSERT INTO GD_GE
	VALUES ("b086e9ea-a537-4927-083c-5cf5f26646d4",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"8d3d1fba-de33-a5f4-13c7-ca1fbe6e5091",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a::UBT1: Start and test');
INSERT INTO GD_CON
	VALUES ("b086e9ea-a537-4927-083c-5cf5f26646d4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9dd18c29-9a36-087f-96aa-579b864090d6",
	"b086e9ea-a537-4927-083c-5cf5f26646d4",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9dd18c29-9a36-087f-96aa-579b864090d6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9dd18c29-9a36-087f-96aa-579b864090d6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9dd18c29-9a36-087f-96aa-579b864090d6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("979bcac5-c929-76ac-7b18-d2090f6fca01",
	"b086e9ea-a537-4927-083c-5cf5f26646d4",
	3,
	-66.000000,
	-5.000000);
INSERT INTO DIM_ND
	VALUES (252.000000,
	41.000000,
	"979bcac5-c929-76ac-7b18-d2090f6fca01");
INSERT INTO DIM_GE
	VALUES (1821.000000,
	1186.000000,
	"979bcac5-c929-76ac-7b18-d2090f6fca01",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("979bcac5-c929-76ac-7b18-d2090f6fca01",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("68c095ed-608b-34da-fc8d-f5412d32691d",
	"b086e9ea-a537-4927-083c-5cf5f26646d4",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"68c095ed-608b-34da-fc8d-f5412d32691d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"68c095ed-608b-34da-fc8d-f5412d32691d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("68c095ed-608b-34da-fc8d-f5412d32691d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("aaedd0d0-4db0-7c8f-9cfa-acdada5210d0",
	"b086e9ea-a537-4927-083c-5cf5f26646d4",
	"00000000-0000-0000-0000-000000000000",
	"35172b1e-10f8-dcca-d1cf-9f3a157410fb",
	"e72809df-2b14-a461-3dfb-89a2dcdf316c");
INSERT INTO GD_LS
	VALUES ("5bca0c2b-5963-99d9-0204-37f2e74ff565",
	"b086e9ea-a537-4927-083c-5cf5f26646d4",
	"aaedd0d0-4db0-7c8f-9cfa-acdada5210d0",
	"e72809df-2b14-a461-3dfb-89a2dcdf316c",
	"cdbaf05f-0694-983b-44a6-a6a5f65ac65a");
INSERT INTO GD_LS
	VALUES ("ffdc0ae7-cc68-923d-255a-40910637ee42",
	"b086e9ea-a537-4927-083c-5cf5f26646d4",
	"5bca0c2b-5963-99d9-0204-37f2e74ff565",
	"cdbaf05f-0694-983b-44a6-a6a5f65ac65a",
	"28d47b71-6cd4-91df-b217-e953bc6c368a");
INSERT INTO GD_LS
	VALUES ("5320c974-79d4-9094-4283-3b00427f2a6f",
	"b086e9ea-a537-4927-083c-5cf5f26646d4",
	"ffdc0ae7-cc68-923d-255a-40910637ee42",
	"28d47b71-6cd4-91df-b217-e953bc6c368a",
	"6f42aa8d-2e23-872b-29d6-dcdf69e0b736");
INSERT INTO DIM_WAY
	VALUES ("35172b1e-10f8-dcca-d1cf-9f3a157410fb",
	1872.000000,
	1296.000000,
	"b086e9ea-a537-4927-083c-5cf5f26646d4",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("e72809df-2b14-a461-3dfb-89a2dcdf316c",
	1920.000000,
	1296.000000,
	"b086e9ea-a537-4927-083c-5cf5f26646d4",
	"00000000-0000-0000-0000-000000000000",
	"35172b1e-10f8-dcca-d1cf-9f3a157410fb");
INSERT INTO DIM_WAY
	VALUES ("cdbaf05f-0694-983b-44a6-a6a5f65ac65a",
	1920.000000,
	1216.000000,
	"b086e9ea-a537-4927-083c-5cf5f26646d4",
	"00000000-0000-0000-0000-000000000000",
	"e72809df-2b14-a461-3dfb-89a2dcdf316c");
INSERT INTO DIM_WAY
	VALUES ("28d47b71-6cd4-91df-b217-e953bc6c368a",
	1824.000000,
	1216.000000,
	"b086e9ea-a537-4927-083c-5cf5f26646d4",
	"00000000-0000-0000-0000-000000000000",
	"cdbaf05f-0694-983b-44a6-a6a5f65ac65a");
INSERT INTO DIM_WAY
	VALUES ("6f42aa8d-2e23-872b-29d6-dcdf69e0b736",
	1824.000000,
	1264.000000,
	"b086e9ea-a537-4927-083c-5cf5f26646d4",
	"00000000-0000-0000-0000-000000000000",
	"28d47b71-6cd4-91df-b217-e953bc6c368a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b086e9ea-a537-4927-083c-5cf5f26646d4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b086e9ea-a537-4927-083c-5cf5f26646d4",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("6b2fd219-d81f-9710-8732-2d7de11d6304",
	"84e04458-b87c-a413-28d6-0842e5a6c0ca",
	"b086e9ea-a537-4927-083c-5cf5f26646d4");
INSERT INTO GD_GE
	VALUES ("c20c8c82-a549-e6aa-4380-384a5d117f1b",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"074f9794-c854-36f8-7fbe-953d45cd09da",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a::UBT2: Continue and test');
INSERT INTO GD_CON
	VALUES ("c20c8c82-a549-e6aa-4380-384a5d117f1b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f33b29b1-fd18-a6ae-1a25-d87f7a0ec90a",
	"c20c8c82-a549-e6aa-4380-384a5d117f1b",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f33b29b1-fd18-a6ae-1a25-d87f7a0ec90a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f33b29b1-fd18-a6ae-1a25-d87f7a0ec90a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f33b29b1-fd18-a6ae-1a25-d87f7a0ec90a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a53975b8-f2b9-bb08-a25c-ed8b44beebd1",
	"c20c8c82-a549-e6aa-4380-384a5d117f1b",
	3,
	-231.000000,
	4.000000);
INSERT INTO DIM_ND
	VALUES (248.000000,
	37.000000,
	"a53975b8-f2b9-bb08-a25c-ed8b44beebd1");
INSERT INTO DIM_GE
	VALUES (1545.000000,
	1389.000000,
	"a53975b8-f2b9-bb08-a25c-ed8b44beebd1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a53975b8-f2b9-bb08-a25c-ed8b44beebd1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9d4f1548-0c93-1f3e-1512-c72cc211c313",
	"c20c8c82-a549-e6aa-4380-384a5d117f1b",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9d4f1548-0c93-1f3e-1512-c72cc211c313");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9d4f1548-0c93-1f3e-1512-c72cc211c313",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9d4f1548-0c93-1f3e-1512-c72cc211c313",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("a0d67ed6-8c21-bb2f-6059-660e5999be18",
	"c20c8c82-a549-e6aa-4380-384a5d117f1b",
	"00000000-0000-0000-0000-000000000000",
	"c5882930-880e-20cf-0e7d-881d6617fc91",
	"c2623948-d7cd-cd44-5187-04be744f500b");
INSERT INTO DIM_WAY
	VALUES ("c5882930-880e-20cf-0e7d-881d6617fc91",
	1792.000000,
	1344.000000,
	"c20c8c82-a549-e6aa-4380-384a5d117f1b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c2623948-d7cd-cd44-5187-04be744f500b",
	1792.000000,
	1456.000000,
	"c20c8c82-a549-e6aa-4380-384a5d117f1b",
	"00000000-0000-0000-0000-000000000000",
	"c5882930-880e-20cf-0e7d-881d6617fc91");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c20c8c82-a549-e6aa-4380-384a5d117f1b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c20c8c82-a549-e6aa-4380-384a5d117f1b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("d34a8fd0-9211-040b-0561-9870903c36ee",
	"4ba85157-cf5f-9b26-a37d-b5d72993497a",
	"c20c8c82-a549-e6aa-4380-384a5d117f1b");
INSERT INTO GD_GE
	VALUES ("7239632a-b562-e8e4-2fca-c8baa4176484",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"ddc29b70-eecb-11e9-eb31-a98dd7dfef2d",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1b::UBT2: Continue and test');
INSERT INTO GD_CON
	VALUES ("7239632a-b562-e8e4-2fca-c8baa4176484",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a7413a9b-6520-eb0b-00af-535a6e05ec28",
	"7239632a-b562-e8e4-2fca-c8baa4176484",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a7413a9b-6520-eb0b-00af-535a6e05ec28");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a7413a9b-6520-eb0b-00af-535a6e05ec28",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a7413a9b-6520-eb0b-00af-535a6e05ec28",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c683b7ac-e29e-eb08-a1ac-7667d5109705",
	"7239632a-b562-e8e4-2fca-c8baa4176484",
	3,
	-212.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (226.000000,
	44.000000,
	"c683b7ac-e29e-eb08-a1ac-7667d5109705");
INSERT INTO DIM_GE
	VALUES (1564.000000,
	1575.000000,
	"c683b7ac-e29e-eb08-a1ac-7667d5109705",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c683b7ac-e29e-eb08-a1ac-7667d5109705",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cd296659-39e4-7f25-ecc0-85c671b6fc03",
	"7239632a-b562-e8e4-2fca-c8baa4176484",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"cd296659-39e4-7f25-ecc0-85c671b6fc03");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cd296659-39e4-7f25-ecc0-85c671b6fc03",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cd296659-39e4-7f25-ecc0-85c671b6fc03",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("3245b744-649d-41b6-7822-540e01590e09",
	"7239632a-b562-e8e4-2fca-c8baa4176484",
	"00000000-0000-0000-0000-000000000000",
	"d80272d6-799f-192b-a5b5-5bfb17670ade",
	"7f555884-0acb-7381-a376-e4322c8739d8");
INSERT INTO DIM_WAY
	VALUES ("d80272d6-799f-192b-a5b5-5bfb17670ade",
	1792.000000,
	1536.000000,
	"7239632a-b562-e8e4-2fca-c8baa4176484",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("7f555884-0acb-7381-a376-e4322c8739d8",
	1792.000000,
	1648.000000,
	"7239632a-b562-e8e4-2fca-c8baa4176484",
	"00000000-0000-0000-0000-000000000000",
	"d80272d6-799f-192b-a5b5-5bfb17670ade");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7239632a-b562-e8e4-2fca-c8baa4176484",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7239632a-b562-e8e4-2fca-c8baa4176484",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("5c5272e7-4432-cad8-a82d-d07c628ce183",
	"21176cc7-0ded-dcd6-6262-1ec3c049d929",
	"7239632a-b562-e8e4-2fca-c8baa4176484");
INSERT INTO GD_GE
	VALUES ("6c37d629-b338-7f16-56a4-2aed21f9a674",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"a29fdda1-5cd2-d79e-2a19-8384dff593e4",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1a::UBT4: Continue or test');
INSERT INTO GD_CON
	VALUES ("6c37d629-b338-7f16-56a4-2aed21f9a674",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4f464aec-a575-0b14-38d0-7144b2c3bf12",
	"6c37d629-b338-7f16-56a4-2aed21f9a674",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4f464aec-a575-0b14-38d0-7144b2c3bf12");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4f464aec-a575-0b14-38d0-7144b2c3bf12",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4f464aec-a575-0b14-38d0-7144b2c3bf12",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d7e6575f-7e22-9a60-9f19-f0346d0193a1",
	"6c37d629-b338-7f16-56a4-2aed21f9a674",
	3,
	-13.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (274.000000,
	38.000000,
	"d7e6575f-7e22-9a60-9f19-f0346d0193a1");
INSERT INTO DIM_GE
	VALUES (2067.000000,
	1394.000000,
	"d7e6575f-7e22-9a60-9f19-f0346d0193a1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d7e6575f-7e22-9a60-9f19-f0346d0193a1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c65fd680-4d73-bbcc-770a-acebe6c68439",
	"6c37d629-b338-7f16-56a4-2aed21f9a674",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c65fd680-4d73-bbcc-770a-acebe6c68439");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c65fd680-4d73-bbcc-770a-acebe6c68439",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c65fd680-4d73-bbcc-770a-acebe6c68439",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("ba6d8fe8-b5ce-a41f-bb10-eb55230054dc",
	"6c37d629-b338-7f16-56a4-2aed21f9a674",
	"00000000-0000-0000-0000-000000000000",
	"7d0bc676-8e30-6738-6919-c8743471ae39",
	"b1488ba2-4530-c2a1-55a6-f02814b8b040");
INSERT INTO DIM_WAY
	VALUES ("7d0bc676-8e30-6738-6919-c8743471ae39",
	2096.000000,
	1360.000000,
	"6c37d629-b338-7f16-56a4-2aed21f9a674",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("b1488ba2-4530-c2a1-55a6-f02814b8b040",
	2096.000000,
	1456.000000,
	"6c37d629-b338-7f16-56a4-2aed21f9a674",
	"00000000-0000-0000-0000-000000000000",
	"7d0bc676-8e30-6738-6919-c8743471ae39");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6c37d629-b338-7f16-56a4-2aed21f9a674",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6c37d629-b338-7f16-56a4-2aed21f9a674",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("10c08d68-cba9-d26c-1601-1b47c050757b",
	"f7fd8c56-135b-0b11-0905-250d54335cb8",
	"6c37d629-b338-7f16-56a4-2aed21f9a674");
INSERT INTO GD_GE
	VALUES ("3cc53b7c-42d2-8e6b-02b1-d61320ceec16",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"9a4d225a-f77a-10c1-490a-4b9ecd091fb6",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1b::UBT4: Continue or test');
INSERT INTO GD_CON
	VALUES ("3cc53b7c-42d2-8e6b-02b1-d61320ceec16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5357c77e-336e-a452-0527-116138f30bea",
	"3cc53b7c-42d2-8e6b-02b1-d61320ceec16",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5357c77e-336e-a452-0527-116138f30bea");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5357c77e-336e-a452-0527-116138f30bea",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5357c77e-336e-a452-0527-116138f30bea",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5ab9d6e1-8766-9159-a969-0d66cc94932c",
	"3cc53b7c-42d2-8e6b-02b1-d61320ceec16",
	3,
	-15.000000,
	7.000000);
INSERT INTO DIM_ND
	VALUES (272.000000,
	41.000000,
	"5ab9d6e1-8766-9159-a969-0d66cc94932c");
INSERT INTO DIM_GE
	VALUES (2065.000000,
	1584.000000,
	"5ab9d6e1-8766-9159-a969-0d66cc94932c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5ab9d6e1-8766-9159-a969-0d66cc94932c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0f24dc09-f738-d1ea-25b6-71bd0a931dd9",
	"3cc53b7c-42d2-8e6b-02b1-d61320ceec16",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0f24dc09-f738-d1ea-25b6-71bd0a931dd9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0f24dc09-f738-d1ea-25b6-71bd0a931dd9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0f24dc09-f738-d1ea-25b6-71bd0a931dd9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("fd3f2023-6b1a-03bc-36b4-a7075d81700a",
	"3cc53b7c-42d2-8e6b-02b1-d61320ceec16",
	"00000000-0000-0000-0000-000000000000",
	"50acf800-3489-a223-b4cc-8697659e93cd",
	"09e7c2f1-7cd0-d825-cdc7-58f8963c3342");
INSERT INTO DIM_WAY
	VALUES ("50acf800-3489-a223-b4cc-8697659e93cd",
	2096.000000,
	1536.000000,
	"3cc53b7c-42d2-8e6b-02b1-d61320ceec16",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("09e7c2f1-7cd0-d825-cdc7-58f8963c3342",
	2096.000000,
	1648.000000,
	"3cc53b7c-42d2-8e6b-02b1-d61320ceec16",
	"00000000-0000-0000-0000-000000000000",
	"50acf800-3489-a223-b4cc-8697659e93cd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3cc53b7c-42d2-8e6b-02b1-d61320ceec16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3cc53b7c-42d2-8e6b-02b1-d61320ceec16",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a8b650bd-e038-e965-dd53-8a47bcf18fc7",
	"ca6396a8-76b3-3d49-9830-04fc2fe09dd2",
	"3cc53b7c-42d2-8e6b-02b1-d61320ceec16");
INSERT INTO GD_GE
	VALUES ("e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"0d33209d-819b-d9d4-c071-879715aa4ad5",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 2::UBT3: Start or test');
INSERT INTO GD_CON
	VALUES ("e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6ffdf38a-f739-ebe2-9d79-1c44d9f56c29",
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6ffdf38a-f739-ebe2-9d79-1c44d9f56c29");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6ffdf38a-f739-ebe2-9d79-1c44d9f56c29",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6ffdf38a-f739-ebe2-9d79-1c44d9f56c29",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("08258c40-544c-0ab3-3b93-58c75dda90bd",
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	3,
	105.000000,
	-196.000000);
INSERT INTO DIM_ND
	VALUES (235.000000,
	45.000000,
	"08258c40-544c-0ab3-3b93-58c75dda90bd");
INSERT INTO DIM_GE
	VALUES (2057.000000,
	1221.000000,
	"08258c40-544c-0ab3-3b93-58c75dda90bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("08258c40-544c-0ab3-3b93-58c75dda90bd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f15c8923-e8a3-5686-effc-4aca406fc525",
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f15c8923-e8a3-5686-effc-4aca406fc525");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f15c8923-e8a3-5686-effc-4aca406fc525",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f15c8923-e8a3-5686-effc-4aca406fc525",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("17fc6797-a49f-4ec6-4e88-43676f88cc63",
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"00000000-0000-0000-0000-000000000000",
	"5d748baf-d147-adc9-0cc3-dbbfd721e534",
	"2662724c-abf7-4436-c0db-bc6063846415");
INSERT INTO GD_LS
	VALUES ("0e7b6f41-ae7e-dd0b-1f64-5f4a987a0f55",
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"17fc6797-a49f-4ec6-4e88-43676f88cc63",
	"2662724c-abf7-4436-c0db-bc6063846415",
	"0ad58e82-e1a9-305d-e54c-8e405e80b7e3");
INSERT INTO GD_LS
	VALUES ("05234d4a-0035-485d-a982-a014ec3e103f",
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"0e7b6f41-ae7e-dd0b-1f64-5f4a987a0f55",
	"0ad58e82-e1a9-305d-e54c-8e405e80b7e3",
	"d4aecce4-aa86-85a9-cbc1-007cfc156622");
INSERT INTO GD_LS
	VALUES ("02bef75e-5de4-36ba-d351-bb203c517097",
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"05234d4a-0035-485d-a982-a014ec3e103f",
	"d4aecce4-aa86-85a9-cbc1-007cfc156622",
	"d3c03aa3-db1c-2342-f2bc-f5ef46fd9bed");
INSERT INTO DIM_WAY
	VALUES ("5d748baf-d147-adc9-0cc3-dbbfd721e534",
	1872.000000,
	1696.000000,
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("2662724c-abf7-4436-c0db-bc6063846415",
	1968.000000,
	1696.000000,
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"00000000-0000-0000-0000-000000000000",
	"5d748baf-d147-adc9-0cc3-dbbfd721e534");
INSERT INTO DIM_WAY
	VALUES ("0ad58e82-e1a9-305d-e54c-8e405e80b7e3",
	1968.000000,
	1248.000000,
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"00000000-0000-0000-0000-000000000000",
	"2662724c-abf7-4436-c0db-bc6063846415");
INSERT INTO DIM_WAY
	VALUES ("d4aecce4-aa86-85a9-cbc1-007cfc156622",
	2096.000000,
	1248.000000,
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"00000000-0000-0000-0000-000000000000",
	"0ad58e82-e1a9-305d-e54c-8e405e80b7e3");
INSERT INTO DIM_WAY
	VALUES ("d3c03aa3-db1c-2342-f2bc-f5ef46fd9bed",
	2096.000000,
	1296.000000,
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"00000000-0000-0000-0000-000000000000",
	"d4aecce4-aa86-85a9-cbc1-007cfc156622");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e6ffa18b-95d7-1a7d-b463-23fbaac66c5d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("8cf77c42-5394-8d76-58eb-fa3a15a6bb58",
	"f6506742-f685-a8b9-2bdf-46b27b9363ca",
	"e6ffa18b-95d7-1a7d-b463-23fbaac66c5d");
INSERT INTO DIM_DIA
	VALUES ("8eab82da-0d06-df01-df8f-3ed3ddc91835",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	'User Other Boolean Test',
	19,
	'UOBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"00000000-0000-0000-0000-000000000000",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	0,
	"359b56d2-80e5-9014-e822-7a8143d26491",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	"70054206-7dbc-c3f5-9370-b2276758b235",
	"02a6af0f-5e07-5df5-adca-c863af9c8e81",
	"44c3dc13-bcb9-8e9c-b58e-badcbb1af8e9",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Boolean Test',
	'id',
	'R13');
INSERT INTO O_RATTR
	VALUES ("02a6af0f-5e07-5df5-adca-c863af9c8e81",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"359b56d2-80e5-9014-e822-7a8143d26491",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	1,
	'id');
INSERT INTO O_ATTR
	VALUES ("02a6af0f-5e07-5df5-adca-c863af9c8e81",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	0,
	"4af751e0-065f-944b-738c-c44aa3cde0a8",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"ed9c4f46-9c5a-f4d9-dc4f-8a20f2cec12d",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	"3be90946-54fc-5e5a-7864-544a9e840a8e",
	"acac9317-23a1-95d7-41a4-e6f4f347ccf1",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Third Boolean Test',
	'btrue',
	'R14');
INSERT INTO O_RATTR
	VALUES ("3be90946-54fc-5e5a-7864-544a9e840a8e",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"4af751e0-065f-944b-738c-c44aa3cde0a8",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("3be90946-54fc-5e5a-7864-544a9e840a8e",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"02a6af0f-5e07-5df5-adca-c863af9c8e81",
	'r11btrue',
	'',
	'r11',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	0,
	"79855c61-83ec-92fa-d755-cd213e44c0bd",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"ed9c4f46-9c5a-f4d9-dc4f-8a20f2cec12d",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	"acd4233c-9242-4aa2-f164-a3c2ab6e0fac",
	"56579ffb-8fdb-490d-7d0b-97cc1d2e611e",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Third Boolean Test',
	'bfalse',
	'R14');
INSERT INTO O_RATTR
	VALUES ("acd4233c-9242-4aa2-f164-a3c2ab6e0fac",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"79855c61-83ec-92fa-d755-cd213e44c0bd",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("acd4233c-9242-4aa2-f164-a3c2ab6e0fac",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"3be90946-54fc-5e5a-7864-544a9e840a8e",
	'r11bfalse',
	'',
	'r11',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_OIDA
	VALUES ("bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	'bfalse');
INSERT INTO O_ID
	VALUES (1,
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ID
	VALUES (2,
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO PE_PE
	VALUES ("49b8a183-8eb8-e487-d095-f42598fda7d3",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("49b8a183-8eb8-e487-d095-f42598fda7d3",
	'User Third Boolean Test',
	20,
	'UTBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("4af751e0-065f-944b-738c-c44aa3cde0a8",
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO O_BATTR
	VALUES ("4af751e0-065f-944b-738c-c44aa3cde0a8",
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO O_ATTR
	VALUES ("4af751e0-065f-944b-738c-c44aa3cde0a8",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	"00000000-0000-0000-0000-000000000000",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("79855c61-83ec-92fa-d755-cd213e44c0bd",
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO O_BATTR
	VALUES ("79855c61-83ec-92fa-d755-cd213e44c0bd",
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO O_ATTR
	VALUES ("79855c61-83ec-92fa-d755-cd213e44c0bd",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	"4af751e0-065f-944b-738c-c44aa3cde0a8",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO O_OIDA
	VALUES ("4af751e0-065f-944b-738c-c44aa3cde0a8",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("79855c61-83ec-92fa-d755-cd213e44c0bd",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	0,
	'bfalse');
INSERT INTO O_ID
	VALUES (1,
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO O_ID
	VALUES (2,
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO PE_PE
	VALUES ("1e6c89ff-f941-7c51-013e-1dc86807a023",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("1e6c89ff-f941-7c51-013e-1dc86807a023",
	'ex init',
	1,
	'USERINIT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("58f7272d-c26a-c488-d369-32224ccdd58b",
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_BATTR
	VALUES ("58f7272d-c26a-c488-d369-32224ccdd58b",
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_ATTR
	VALUES ("58f7272d-c26a-c488-d369-32224ccdd58b",
	"1e6c89ff-f941-7c51-013e-1dc86807a023",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("2ff88cd2-2b4e-a585-4e33-5e27e012aa84",
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_BATTR
	VALUES ("2ff88cd2-2b4e-a585-4e33-5e27e012aa84",
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_ATTR
	VALUES ("2ff88cd2-2b4e-a585-4e33-5e27e012aa84",
	"1e6c89ff-f941-7c51-013e-1dc86807a023",
	"58f7272d-c26a-c488-d369-32224ccdd58b",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_OIDA
	VALUES ("58f7272d-c26a-c488-d369-32224ccdd58b",
	"1e6c89ff-f941-7c51-013e-1dc86807a023",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_ID
	VALUES (2,
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO SM_ISM
	VALUES ("1b6fec10-a9cf-32db-8ab8-d3718892aaf0",
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO SM_SM
	VALUES ("1b6fec10-a9cf-32db-8ab8-d3718892aaf0",
	'',
	3);
INSERT INTO SM_MOORE
	VALUES ("1b6fec10-a9cf-32db-8ab8-d3718892aaf0");
INSERT INTO SM_LEVT
	VALUES ("e6176175-e590-5ee8-e918-dcff3a86153e",
	"1b6fec10-a9cf-32db-8ab8-d3718892aaf0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("e6176175-e590-5ee8-e918-dcff3a86153e",
	"1b6fec10-a9cf-32db-8ab8-d3718892aaf0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("e6176175-e590-5ee8-e918-dcff3a86153e",
	"1b6fec10-a9cf-32db-8ab8-d3718892aaf0",
	"00000000-0000-0000-0000-000000000000",
	1,
	'init',
	0,
	'',
	'USERINIT1',
	'');
INSERT INTO SM_STATE
	VALUES ("893d2440-c506-0df1-bcd8-ee40e22c920f",
	"1b6fec10-a9cf-32db-8ab8-d3718892aaf0",
	"00000000-0000-0000-0000-000000000000",
	'ex init',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("893d2440-c506-0df1-bcd8-ee40e22c920f",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"1b6fec10-a9cf-32db-8ab8-d3718892aaf0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("ad708723-b288-e81a-31fc-b6fd52d8eccc",
	"1b6fec10-a9cf-32db-8ab8-d3718892aaf0",
	"893d2440-c506-0df1-bcd8-ee40e22c920f");
INSERT INTO SM_AH
	VALUES ("ad708723-b288-e81a-31fc-b6fd52d8eccc",
	"1b6fec10-a9cf-32db-8ab8-d3718892aaf0");
INSERT INTO SM_ACT
	VALUES ("ad708723-b288-e81a-31fc-b6fd52d8eccc",
	"1b6fec10-a9cf-32db-8ab8-d3718892aaf0",
	1,
	'LOG::LogInfo(message:"a1test_exconfig: a1test_exconfig init") ;

// create preexisting instances
create object instance ev of EV;
assign ev.shutdown_count = 3;
create object instance et of ET;
assign et.btrue = TRUE;
assign et.et_id = 1;
create object instance one_inst of OI;
relate et to one_inst across R3;
create object instance mi1 of MI;
relate et to mi1 across R4;
create object instance mi2 of MI;
relate et to mi2 across R4;

create object instance etob1 of ETOB;
assign etob1.etob_id = 2;
assign etob1.r = 2.1718;
assign etob1.btrue = TRUE;
assign etob1.bfalse = FALSE;
assign etob1.s = "etob1 string";
bridge etob1.d = TIM::create_date(second:17,minute:7,hour:13,day:9,month:8,year:1991);
select any event_instance from instances of EV;
create event instance ev_temp of EV1:''Event Instance''(message:"etob1 event instance") to event_instance;
assign etob1.ev = ev_temp;
bridge etob1.tim = TIM::timer_start ( microseconds:2000000, event_inst:ev_temp);
relate et to etob1 across R1;
relate et to etob1 across R8;
create object instance etob2 of ETOB;
assign etob2.etob_id = 3;
assign etob2.r = 1.616;
assign etob2.btrue = TRUE;
assign etob2.bfalse = FALSE;
assign etob2.s = "etob2 string";
relate et to etob2 across R8;

create object instance etoc of ETOC;
assign etoc.etoc_id = 4;
assign etoc.r = 11.311;
assign etoc.btrue = TRUE;
assign etoc.bfalse = FALSE;
assign etoc.s = "etoc string";
bridge etoc.d = TIM::create_date(second:10,minute:0,hour:0,day:13,month:12,year:1997);
create event instance ev_temp2 of EV1:''Event Instance''(message:"etoc event instance") to event_instance;
assign etoc.ev = ev_temp2;
bridge etoc.tim = TIM::timer_start ( microseconds:2000000, event_inst:ev_temp2);

relate etob1 to etoc across R6;
create object instance etoc2 of ETOC;
assign etoc2.etoc_id = 5;
assign etoc2.r = 17.311;
assign etoc2.btrue = TRUE;
assign etoc2.bfalse = FALSE;
assign etoc2.s = "etoc2 string";
relate etob2 to etoc2 across R6;

create object instance bet of BET;
assign bet.btrue = TRUE;
assign bet.bfalse = FALSE;
create object instance obet1 of OBET;
assign obet1.btrue = TRUE;
assign obet1.bfalse = FALSE;
relate bet to obet1 across R9;
relate bet to obet1 across R10;
create object instance obet2 of OBET;
assign obet2.btrue = TRUE;
assign obet2.bfalse = FALSE;
relate bet to obet2 across R10;
create object instance tbet1 of TBET;
assign tbet1.btrue = TRUE;
assign tbet1.bfalse = FALSE;
relate tbet1 to obet1 across R11;
create object instance tbet2 of TBET;
assign tbet2.btrue = TRUE;
assign tbet2.bfalse = FALSE;
relate tbet2 to obet2 across R11;

create object instance ubt of UBT;
assign ubt.btrue = TRUE;
assign ubt.bfalse = FALSE;

create object instance uobt1 of UOBT;
assign uobt1.btrue = TRUE;
assign uobt1.bfalse = FALSE;
relate ubt to uobt1 across R12;
relate ubt to uobt1 across R13;

create object instance uobt2 of UOBT;
assign uobt2.btrue = TRUE;
assign uobt2.bfalse = FALSE;
relate ubt to uobt2 across R13;

create object instance utbt1 of UTBT;
assign utbt1.btrue = TRUE;
assign utbt1.bfalse = FALSE;
relate utbt1 to uobt1 across R14;

create object instance utbt2 of UTBT;
assign utbt2.btrue = TRUE;
assign utbt2.bfalse = FALSE;
relate utbt2 to uobt2 across R14;


// no instances of NOI should be created

// start the expression test
generate ET1:''Start Expression Test''() to et;

generate BET1:''Start and test''( ttrue: true, tfalse: false) to bet;
generate UBT1:''Start and test''( ttrue: true, tfalse: false) to ubt;
',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("42a487c0-edd1-525b-10fc-9c9c8d5d5303",
	"1b6fec10-a9cf-32db-8ab8-d3718892aaf0",
	"893d2440-c506-0df1-bcd8-ee40e22c920f",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("d9b4be29-1e41-5c8c-32ad-44f1d972ab53",
	"1b6fec10-a9cf-32db-8ab8-d3718892aaf0",
	"42a487c0-edd1-525b-10fc-9c9c8d5d5303");
INSERT INTO SM_AH
	VALUES ("d9b4be29-1e41-5c8c-32ad-44f1d972ab53",
	"1b6fec10-a9cf-32db-8ab8-d3718892aaf0");
INSERT INTO SM_ACT
	VALUES ("d9b4be29-1e41-5c8c-32ad-44f1d972ab53",
	"1b6fec10-a9cf-32db-8ab8-d3718892aaf0",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("42a487c0-edd1-525b-10fc-9c9c8d5d5303",
	"1b6fec10-a9cf-32db-8ab8-d3718892aaf0",
	"893d2440-c506-0df1-bcd8-ee40e22c920f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	8,
	"1b6fec10-a9cf-32db-8ab8-d3718892aaf0",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("2b2e0ab6-f38a-1468-e2a9-0c23efae9baf",
	"e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	"893d2440-c506-0df1-bcd8-ee40e22c920f",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine::ex init');
INSERT INTO GD_SHP
	VALUES ("2b2e0ab6-f38a-1468-e2a9-0c23efae9baf");
INSERT INTO GD_NCS
	VALUES ("2b2e0ab6-f38a-1468-e2a9-0c23efae9baf");
INSERT INTO DIM_ND
	VALUES (496.000000,
	480.000000,
	"2b2e0ab6-f38a-1468-e2a9-0c23efae9baf");
INSERT INTO DIM_GE
	VALUES (1744.000000,
	1248.000000,
	"2b2e0ab6-f38a-1468-e2a9-0c23efae9baf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2b2e0ab6-f38a-1468-e2a9-0c23efae9baf",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("08774b92-7bb0-e09c-9a7a-c5229530778a",
	2240.000000,
	1296.000000,
	"2b2e0ab6-f38a-1468-e2a9-0c23efae9baf");
INSERT INTO DIM_CON
	VALUES ("501d3d4d-1c13-9ea0-c023-c86a77b4991e",
	2176.000000,
	1248.000000,
	"2b2e0ab6-f38a-1468-e2a9-0c23efae9baf");
INSERT INTO GD_GE
	VALUES ("690a1685-e004-4e03-64c7-be93502094b2",
	"e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	"42a487c0-edd1-525b-10fc-9c9c8d5d5303",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine::ex init::USERINIT1: init');
INSERT INTO GD_CON
	VALUES ("690a1685-e004-4e03-64c7-be93502094b2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8315c36d-0463-2c68-1806-7ff699223cbd",
	"690a1685-e004-4e03-64c7-be93502094b2",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8315c36d-0463-2c68-1806-7ff699223cbd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8315c36d-0463-2c68-1806-7ff699223cbd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8315c36d-0463-2c68-1806-7ff699223cbd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("720505b6-f4d8-4bac-c0bd-37c9446a2bb2",
	"690a1685-e004-4e03-64c7-be93502094b2",
	3,
	-109.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (145.000000,
	33.000000,
	"720505b6-f4d8-4bac-c0bd-37c9446a2bb2");
INSERT INTO DIM_GE
	VALUES (2178.000000,
	1171.000000,
	"720505b6-f4d8-4bac-c0bd-37c9446a2bb2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("720505b6-f4d8-4bac-c0bd-37c9446a2bb2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0ad29d7c-9255-4a11-c08c-047a44190070",
	"690a1685-e004-4e03-64c7-be93502094b2",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0ad29d7c-9255-4a11-c08c-047a44190070");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0ad29d7c-9255-4a11-c08c-047a44190070",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0ad29d7c-9255-4a11-c08c-047a44190070",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("ee569a3e-4dbe-bb16-2e0c-648b0a53d03d",
	"690a1685-e004-4e03-64c7-be93502094b2",
	"00000000-0000-0000-0000-000000000000",
	"ec6c9ca0-6ad6-80b6-5c4b-de935f90ba93",
	"c41b58b9-66b9-fc81-f704-5d4fb9616b2e");
INSERT INTO GD_LS
	VALUES ("3584009c-c8fd-7449-8a8b-e4013a7ffee8",
	"690a1685-e004-4e03-64c7-be93502094b2",
	"ee569a3e-4dbe-bb16-2e0c-648b0a53d03d",
	"c41b58b9-66b9-fc81-f704-5d4fb9616b2e",
	"bd43e8fd-010b-6b0b-cc77-867414091d13");
INSERT INTO GD_LS
	VALUES ("5f1d7bea-50b8-2491-8e09-bb71f2ebe1cc",
	"690a1685-e004-4e03-64c7-be93502094b2",
	"3584009c-c8fd-7449-8a8b-e4013a7ffee8",
	"bd43e8fd-010b-6b0b-cc77-867414091d13",
	"998ffdec-acfa-b9cf-fb07-895c1ca9fb0f");
INSERT INTO GD_LS
	VALUES ("231ce1f9-211d-6f72-5420-a51e1094115d",
	"690a1685-e004-4e03-64c7-be93502094b2",
	"5f1d7bea-50b8-2491-8e09-bb71f2ebe1cc",
	"998ffdec-acfa-b9cf-fb07-895c1ca9fb0f",
	"7e00cde7-241a-b413-8323-320444ea94ce");
INSERT INTO DIM_WAY
	VALUES ("ec6c9ca0-6ad6-80b6-5c4b-de935f90ba93",
	2240.000000,
	1296.000000,
	"690a1685-e004-4e03-64c7-be93502094b2",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c41b58b9-66b9-fc81-f704-5d4fb9616b2e",
	2320.000000,
	1296.000000,
	"690a1685-e004-4e03-64c7-be93502094b2",
	"00000000-0000-0000-0000-000000000000",
	"ec6c9ca0-6ad6-80b6-5c4b-de935f90ba93");
INSERT INTO DIM_WAY
	VALUES ("bd43e8fd-010b-6b0b-cc77-867414091d13",
	2320.000000,
	1200.000000,
	"690a1685-e004-4e03-64c7-be93502094b2",
	"00000000-0000-0000-0000-000000000000",
	"c41b58b9-66b9-fc81-f704-5d4fb9616b2e");
INSERT INTO DIM_WAY
	VALUES ("998ffdec-acfa-b9cf-fb07-895c1ca9fb0f",
	2176.000000,
	1200.000000,
	"690a1685-e004-4e03-64c7-be93502094b2",
	"00000000-0000-0000-0000-000000000000",
	"bd43e8fd-010b-6b0b-cc77-867414091d13");
INSERT INTO DIM_WAY
	VALUES ("7e00cde7-241a-b413-8323-320444ea94ce",
	2176.000000,
	1248.000000,
	"690a1685-e004-4e03-64c7-be93502094b2",
	"00000000-0000-0000-0000-000000000000",
	"998ffdec-acfa-b9cf-fb07-895c1ca9fb0f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"690a1685-e004-4e03-64c7-be93502094b2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("690a1685-e004-4e03-64c7-be93502094b2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("08774b92-7bb0-e09c-9a7a-c5229530778a",
	"501d3d4d-1c13-9ea0-c023-c86a77b4991e",
	"690a1685-e004-4e03-64c7-be93502094b2");
INSERT INTO DIM_DIA
	VALUES ("e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("25978d20-cb0f-39be-b5d6-1e525901dbae",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("25978d20-cb0f-39be-b5d6-1e525901dbae",
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("25978d20-cb0f-39be-b5d6-1e525901dbae");
INSERT INTO R_PART
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("076f5dab-39e1-6926-b521-ba06f0c790f6",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("97cee472-2e50-7195-74b3-bb36d4da2a04",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("a1177025-3929-3edb-7d0e-df9e89492a37",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("1a564168-a2e9-41ae-d31c-8c10def2b395",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO R_RTO
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	0);
INSERT INTO R_OIR
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9");
INSERT INTO R_OIR
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	2,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932");
INSERT INTO R_PART
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"db49e71d-0dee-550f-a922-b30ac8d361b3");
INSERT INTO R_RTO
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	0);
INSERT INTO R_OIR
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	1,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6");
INSERT INTO R_OIR
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	3,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("1f5f87bc-2a9d-28c3-2f51-bdc91114a118");
INSERT INTO R_PART
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"23362b4b-de59-df84-7eeb-3f5165750202");
INSERT INTO R_RTO
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	0);
INSERT INTO R_OIR
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f");
INSERT INTO R_OIR
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("7b55c826-c95e-086c-b33e-106fbdbdf22f",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("7b55c826-c95e-086c-b33e-106fbdbdf22f",
	4,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("7b55c826-c95e-086c-b33e-106fbdbdf22f");
INSERT INTO R_PART
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c");
INSERT INTO R_RTO
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	0);
INSERT INTO R_OIR
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"084c910b-ea58-912a-7353-1cda5c0ece3e");
INSERT INTO R_OIR
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	5,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("dd07f00b-ea86-c8e6-4113-4cedb1c03100");
INSERT INTO R_PART
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c");
INSERT INTO R_RTO
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	0);
INSERT INTO R_OIR
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d");
INSERT INTO R_OIR
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	6,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd");
INSERT INTO R_FORM
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00");
INSERT INTO R_OIR
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("50fc1111-665c-8a1b-06da-c6289edcd78a",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("24801b0c-27a4-11d2-8d50-aa1ada226943",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO R_RTO
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	0);
INSERT INTO R_OIR
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("18fcaec9-9922-f752-6391-77763be8b1cb",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("18fcaec9-9922-f752-6391-77763be8b1cb",
	8,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("18fcaec9-9922-f752-6391-77763be8b1cb");
INSERT INTO R_PART
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3");
INSERT INTO R_RTO
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	0);
INSERT INTO R_OIR
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"b2e2ec8b-dea4-27ff-bf04-36a5ef39a581",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"b2e2ec8b-dea4-27ff-bf04-36a5ef39a581");
INSERT INTO R_OIR
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"b2e2ec8b-dea4-27ff-bf04-36a5ef39a581",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("cb2ccf26-fc90-2543-da09-5c968e1db3de",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("cb2ccf26-fc90-2543-da09-5c968e1db3de",
	9,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("cb2ccf26-fc90-2543-da09-5c968e1db3de");
INSERT INTO R_FORM
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"ccf70a38-daf9-138f-229a-d539eead1ec6",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"ccf70a38-daf9-138f-229a-d539eead1ec6");
INSERT INTO R_OIR
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"ccf70a38-daf9-138f-229a-d539eead1ec6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	0,
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb");
INSERT INTO O_RTIDA
	VALUES ("5cf88885-59d8-3195-ae35-135d1c796b97",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	0,
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb");
INSERT INTO R_RTO
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb",
	0);
INSERT INTO R_OIR
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	10,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("d0c5a6ef-14b5-f428-0555-3259bc6dcd19");
INSERT INTO R_PART
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"53ecd13f-5a18-e009-f37e-4d00cc943a99",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("d35abe68-761c-4805-6622-ec58904bb650",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	0,
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"53ecd13f-5a18-e009-f37e-4d00cc943a99");
INSERT INTO R_RTO
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"53ecd13f-5a18-e009-f37e-4d00cc943a99",
	0);
INSERT INTO R_OIR
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"53ecd13f-5a18-e009-f37e-4d00cc943a99",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"8718f67e-1427-6471-bb23-360a7ff64490",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"8718f67e-1427-6471-bb23-360a7ff64490");
INSERT INTO R_OIR
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"8718f67e-1427-6471-bb23-360a7ff64490",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	11,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc");
INSERT INTO R_FORM
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"d6b7451d-2f26-5d8f-7ceb-911d25c59960",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"d6b7451d-2f26-5d8f-7ceb-911d25c59960");
INSERT INTO R_OIR
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"d6b7451d-2f26-5d8f-7ceb-911d25c59960",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"b15c758a-e852-d3b7-368c-45b43b3e1826",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"b15c758a-e852-d3b7-368c-45b43b3e1826");
INSERT INTO O_RTIDA
	VALUES ("6281fd6a-984d-f963-d287-24c4b8696965",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"b15c758a-e852-d3b7-368c-45b43b3e1826");
INSERT INTO R_RTO
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"b15c758a-e852-d3b7-368c-45b43b3e1826",
	0);
INSERT INTO R_OIR
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"b15c758a-e852-d3b7-368c-45b43b3e1826",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	12,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("f778cf6f-ad60-2d3c-e026-c0725b5292bf");
INSERT INTO R_FORM
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"12e4e6ff-22c0-1870-1168-57551556f0ac",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"12e4e6ff-22c0-1870-1168-57551556f0ac");
INSERT INTO R_OIR
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"12e4e6ff-22c0-1870-1168-57551556f0ac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"707287a5-c35b-e22f-7537-2c582e2fcad4");
INSERT INTO O_RTIDA
	VALUES ("43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"707287a5-c35b-e22f-7537-2c582e2fcad4");
INSERT INTO R_RTO
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	0);
INSERT INTO R_OIR
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	13,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea");
INSERT INTO R_PART
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"70054206-7dbc-c3f5-9370-b2276758b235",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("359b56d2-80e5-9014-e822-7a8143d26491",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	0,
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"70054206-7dbc-c3f5-9370-b2276758b235");
INSERT INTO R_RTO
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"70054206-7dbc-c3f5-9370-b2276758b235",
	0);
INSERT INTO R_OIR
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"70054206-7dbc-c3f5-9370-b2276758b235",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"22d47560-b904-1ecb-2823-fa6adbb028c5");
INSERT INTO R_OIR
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	14,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690");
INSERT INTO R_FORM
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"ed9c4f46-9c5a-f4d9-dc4f-8a20f2cec12d",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"ed9c4f46-9c5a-f4d9-dc4f-8a20f2cec12d");
INSERT INTO R_OIR
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"ed9c4f46-9c5a-f4d9-dc4f-8a20f2cec12d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("49b8a183-8eb8-e487-d095-f42598fda7d3",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("4af751e0-065f-944b-738c-c44aa3cde0a8",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	0,
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9");
INSERT INTO O_RTIDA
	VALUES ("79855c61-83ec-92fa-d755-cd213e44c0bd",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	0,
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9");
INSERT INTO R_RTO
	VALUES ("49b8a183-8eb8-e487-d095-f42598fda7d3",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	0);
INSERT INTO R_OIR
	VALUES ("49b8a183-8eb8-e487-d095-f42598fda7d3",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	1,
	"8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	"00000000-0000-0000-0000-000000000000",
	"50642553-6a49-751c-68da-981eb9cfa6bf",
	'External Entities',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("b9328e91-b56e-3508-183b-1649cc05a74c",
	112,
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::External Entities');
INSERT INTO DIM_DIA
	VALUES ("b9328e91-b56e-3508-183b-1649cc05a74c",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	1,
	"8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	"00000000-0000-0000-0000-000000000000",
	"50642553-6a49-751c-68da-981eb9cfa6bf",
	'Datatypes',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("2da66692-6a75-5f23-3235-2836f7d3d562",
	112,
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes');
INSERT INTO GD_GE
	VALUES ("09fec0dc-87f6-acba-c9d5-db625243768a",
	"2da66692-6a75-5f23-3235-2836f7d3d562",
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_b');
INSERT INTO GD_SHP
	VALUES ("09fec0dc-87f6-acba-c9d5-db625243768a");
INSERT INTO GD_NCS
	VALUES ("09fec0dc-87f6-acba-c9d5-db625243768a");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"09fec0dc-87f6-acba-c9d5-db625243768a");
INSERT INTO DIM_GE
	VALUES (2280.000000,
	1690.000000,
	"09fec0dc-87f6-acba-c9d5-db625243768a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("09fec0dc-87f6-acba-c9d5-db625243768a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("ddee045e-eeeb-99da-6a33-c98961070384",
	"2da66692-6a75-5f23-3235-2836f7d3d562",
	"4c39b4f9-523d-8cc3-5126-d0bde9640322",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_i');
INSERT INTO GD_SHP
	VALUES ("ddee045e-eeeb-99da-6a33-c98961070384");
INSERT INTO GD_NCS
	VALUES ("ddee045e-eeeb-99da-6a33-c98961070384");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"ddee045e-eeeb-99da-6a33-c98961070384");
INSERT INTO DIM_GE
	VALUES (2500.000000,
	1690.000000,
	"ddee045e-eeeb-99da-6a33-c98961070384",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ddee045e-eeeb-99da-6a33-c98961070384",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("96e0e5f6-ad11-bb27-6c00-cae432b09fa1",
	"2da66692-6a75-5f23-3235-2836f7d3d562",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_r');
INSERT INTO GD_SHP
	VALUES ("96e0e5f6-ad11-bb27-6c00-cae432b09fa1");
INSERT INTO GD_NCS
	VALUES ("96e0e5f6-ad11-bb27-6c00-cae432b09fa1");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"96e0e5f6-ad11-bb27-6c00-cae432b09fa1");
INSERT INTO DIM_GE
	VALUES (1620.000000,
	1855.000000,
	"96e0e5f6-ad11-bb27-6c00-cae432b09fa1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("96e0e5f6-ad11-bb27-6c00-cae432b09fa1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("d711b527-c507-4ece-8ab3-dc64f8ea2293",
	"2da66692-6a75-5f23-3235-2836f7d3d562",
	"ce87aa8d-1bb4-01ea-0916-96321b55867c",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_s');
INSERT INTO GD_SHP
	VALUES ("d711b527-c507-4ece-8ab3-dc64f8ea2293");
INSERT INTO GD_NCS
	VALUES ("d711b527-c507-4ece-8ab3-dc64f8ea2293");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"d711b527-c507-4ece-8ab3-dc64f8ea2293");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1855.000000,
	"d711b527-c507-4ece-8ab3-dc64f8ea2293",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d711b527-c507-4ece-8ab3-dc64f8ea2293",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("af1f7981-cf02-fe8f-7bd1-c64a178f1932",
	"2da66692-6a75-5f23-3235-2836f7d3d562",
	"bc4d8a5f-8892-bff5-cf51-68bad811491a",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_u');
INSERT INTO GD_SHP
	VALUES ("af1f7981-cf02-fe8f-7bd1-c64a178f1932");
INSERT INTO GD_NCS
	VALUES ("af1f7981-cf02-fe8f-7bd1-c64a178f1932");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"af1f7981-cf02-fe8f-7bd1-c64a178f1932");
INSERT INTO DIM_GE
	VALUES (2060.000000,
	1855.000000,
	"af1f7981-cf02-fe8f-7bd1-c64a178f1932",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("af1f7981-cf02-fe8f-7bd1-c64a178f1932",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("2da66692-6a75-5f23-3235-2836f7d3d562",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("16bcd859-2dc0-5548-9dec-0cda91abf583",
	1,
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("16bcd859-2dc0-5548-9dec-0cda91abf583",
	"00000000-0000-0000-0000-000000000000",
	'my_b',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("16bcd859-2dc0-5548-9dec-0cda91abf583",
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("4c39b4f9-523d-8cc3-5126-d0bde9640322",
	1,
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("4c39b4f9-523d-8cc3-5126-d0bde9640322",
	"00000000-0000-0000-0000-000000000000",
	'my_i',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("4c39b4f9-523d-8cc3-5126-d0bde9640322",
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	1,
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"00000000-0000-0000-0000-000000000000",
	'my_r',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("ce87aa8d-1bb4-01ea-0916-96321b55867c",
	1,
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("ce87aa8d-1bb4-01ea-0916-96321b55867c",
	"00000000-0000-0000-0000-000000000000",
	'my_s',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("ce87aa8d-1bb4-01ea-0916-96321b55867c",
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("bc4d8a5f-8892-bff5-cf51-68bad811491a",
	1,
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("bc4d8a5f-8892-bff5-cf51-68bad811491a",
	"00000000-0000-0000-0000-000000000000",
	'my_u',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("bc4d8a5f-8892-bff5-cf51-68bad811491a",
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	0,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO GD_GE
	VALUES ("9c24fed2-f6a8-557c-4b44-548b1552dcea",
	"5052799e-0696-68e5-32d2-458dfcb6c36b",
	"8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1');
INSERT INTO GD_SHP
	VALUES ("9c24fed2-f6a8-557c-4b44-548b1552dcea");
INSERT INTO GD_NCS
	VALUES ("9c24fed2-f6a8-557c-4b44-548b1552dcea");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"9c24fed2-f6a8-557c-4b44-548b1552dcea");
INSERT INTO DIM_GE
	VALUES (4010.000000,
	0.000000,
	"9c24fed2-f6a8-557c-4b44-548b1552dcea",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9c24fed2-f6a8-557c-4b44-548b1552dcea",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYS_PROXY
	VALUES ("50642553-6a49-751c-68da-981eb9cfa6bf",
	'org.xtuml.bp.io.mdl.test',
	1,
	'../org.xtuml.bp.io.mdl.test.xtuml');
>>>>>>> refs/remotes/xtuml/9147_Import_unit_tests_for_6.0
